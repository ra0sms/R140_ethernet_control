
w5500_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d668  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001410  0800d808  0800d808  0000e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec18  0800ec18  00010278  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec18  0800ec18  0000fc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec20  0800ec20  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec20  0800ec20  0000fc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec24  0800ec24  0000fc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ec28  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036bc  20000278  0800eea0  00010278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003934  0800eea0  00010934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bffd  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ff0  00000000  00000000  0002c2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  00031298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b6  00000000  00000000  00032db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b899  00000000  00000000  0003426e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed95  00000000  00000000  0004fb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4173  00000000  00000000  0006e89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac4  00000000  00000000  00112a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d7f0 	.word	0x0800d7f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800d7f0 	.word	0x0800d7f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <__NVIC_GetPriorityGrouping+0x18>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	f003 0307 	and.w	r3, r3, #7
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	@ (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0a      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	490c      	ldr	r1, [pc, #48]	@ (8000624 <__NVIC_SetPriority+0x4c>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000600:	e00a      	b.n	8000618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	@ (8000628 <__NVIC_SetPriority+0x50>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	3b04      	subs	r3, #4
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	440b      	add	r3, r1
 8000616:	761a      	strb	r2, [r3, #24]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062c:	b480      	push	{r7}
 800062e:	b089      	sub	sp, #36	@ 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f1c3 0307 	rsb	r3, r3, #7
 8000646:	2b04      	cmp	r3, #4
 8000648:	bf28      	it	cs
 800064a:	2304      	movcs	r3, #4
 800064c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3304      	adds	r3, #4
 8000652:	2b06      	cmp	r3, #6
 8000654:	d902      	bls.n	800065c <NVIC_EncodePriority+0x30>
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3b03      	subs	r3, #3
 800065a:	e000      	b.n	800065e <NVIC_EncodePriority+0x32>
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43da      	mvns	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	401a      	ands	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000674:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43d9      	mvns	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	4313      	orrs	r3, r2
         );
}
 8000686:	4618      	mov	r0, r3
 8000688:	3724      	adds	r7, #36	@ 0x24
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f043 0201 	orr.w	r2, r3, #1
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f043 0201 	orr.w	r2, r3, #1
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60da      	str	r2, [r3, #12]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	615a      	str	r2, [r3, #20]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800073e:	b480      	push	{r7}
 8000740:	b089      	sub	sp, #36	@ 0x24
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	330c      	adds	r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	e853 3f00 	ldrex	r3, [r3]
 8000752:	60bb      	str	r3, [r7, #8]
   return(result);
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	330c      	adds	r3, #12
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	61ba      	str	r2, [r7, #24]
 8000764:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000766:	6979      	ldr	r1, [r7, #20]
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	e841 2300 	strex	r3, r2, [r1]
 800076e:	613b      	str	r3, [r7, #16]
   return(result);
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1e7      	bne.n	8000746 <LL_USART_EnableIT_RXNE+0x8>
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3724      	adds	r7, #36	@ 0x24
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	619a      	str	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	041a      	lsls	r2, r3, #16
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	619a      	str	r2, [r3, #24]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007cc:	4907      	ldr	r1, [pc, #28]	@ (80007ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4013      	ands	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40023800 	.word	0x40023800

080007f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007fc:	4907      	ldr	r1, [pc, #28]	@ (800081c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4013      	ands	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023800 	.word	0x40023800

08000820 <send_ip_to_uart>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void send_ip_to_uart(){
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af02      	add	r7, sp, #8
	char ip1=ip2=ip3=ip4=0;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <send_ip_to_uart+0x88>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <send_ip_to_uart+0x88>)
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <send_ip_to_uart+0x8c>)
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <send_ip_to_uart+0x8c>)
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <send_ip_to_uart+0x90>)
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <send_ip_to_uart+0x90>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	75fb      	strb	r3, [r7, #23]
	char out[17];
	ip1 = ReadFromEEPROM(EEPROM_ADRESS_START);
 8000842:	481c      	ldr	r0, [pc, #112]	@ (80008b4 <send_ip_to_uart+0x94>)
 8000844:	f000 ffa0 	bl	8001788 <ReadFromEEPROM>
 8000848:	4603      	mov	r3, r0
 800084a:	75fb      	strb	r3, [r7, #23]
	ip2 = ReadFromEEPROM(EEPROM_ADRESS_START+4);
 800084c:	481a      	ldr	r0, [pc, #104]	@ (80008b8 <send_ip_to_uart+0x98>)
 800084e:	f000 ff9b 	bl	8001788 <ReadFromEEPROM>
 8000852:	4603      	mov	r3, r0
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <send_ip_to_uart+0x90>)
 8000858:	701a      	strb	r2, [r3, #0]
	ip3 = ReadFromEEPROM(EEPROM_ADRESS_START+8);
 800085a:	4818      	ldr	r0, [pc, #96]	@ (80008bc <send_ip_to_uart+0x9c>)
 800085c:	f000 ff94 	bl	8001788 <ReadFromEEPROM>
 8000860:	4603      	mov	r3, r0
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <send_ip_to_uart+0x8c>)
 8000866:	701a      	strb	r2, [r3, #0]
	ip4 = ReadFromEEPROM(EEPROM_ADRESS_START+12);
 8000868:	4815      	ldr	r0, [pc, #84]	@ (80008c0 <send_ip_to_uart+0xa0>)
 800086a:	f000 ff8d 	bl	8001788 <ReadFromEEPROM>
 800086e:	4603      	mov	r3, r0
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <send_ip_to_uart+0x88>)
 8000874:	701a      	strb	r2, [r3, #0]
	sprintf(out, "%d.%d.%d.%d\n\r",ip1,ip2,ip3,ip4);
 8000876:	7dfa      	ldrb	r2, [r7, #23]
 8000878:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <send_ip_to_uart+0x90>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461c      	mov	r4, r3
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <send_ip_to_uart+0x8c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <send_ip_to_uart+0x88>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	1d38      	adds	r0, r7, #4
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	9100      	str	r1, [sp, #0]
 800088e:	4623      	mov	r3, r4
 8000890:	490c      	ldr	r1, [pc, #48]	@ (80008c4 <send_ip_to_uart+0xa4>)
 8000892:	f00b fdf3 	bl	800c47c <siprintf>
	USART1_Send_String(out);
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fe7f 	bl	800159c <USART1_Send_String>
}
 800089e:	bf00      	nop
 80008a0:	371c      	adds	r7, #28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200002e1 	.word	0x200002e1
 80008ac:	200002e0 	.word	0x200002e0
 80008b0:	200002df 	.word	0x200002df
 80008b4:	08030000 	.word	0x08030000
 80008b8:	08030004 	.word	0x08030004
 80008bc:	08030008 	.word	0x08030008
 80008c0:	0803000c 	.word	0x0803000c
 80008c4:	0800d808 	.word	0x0800d808

080008c8 <receive_ip_from_uart>:

void receive_ip_from_uart(){
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af04      	add	r7, sp, #16
	int ip1=ip2=ip3=ip4=0;
 80008ce:	4b26      	ldr	r3, [pc, #152]	@ (8000968 <receive_ip_from_uart+0xa0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <receive_ip_from_uart+0xa0>)
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b24      	ldr	r3, [pc, #144]	@ (800096c <receive_ip_from_uart+0xa4>)
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <receive_ip_from_uart+0xa4>)
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <receive_ip_from_uart+0xa8>)
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <receive_ip_from_uart+0xa8>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	607b      	str	r3, [r7, #4]
	sscanf(str_rx2,"SET%d.%d.%d.%d\r", &ip1, &ip2, &ip3, &ip4);
 80008ea:	1d3a      	adds	r2, r7, #4
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <receive_ip_from_uart+0xa0>)
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <receive_ip_from_uart+0xa4>)
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <receive_ip_from_uart+0xa8>)
 80008f6:	491f      	ldr	r1, [pc, #124]	@ (8000974 <receive_ip_from_uart+0xac>)
 80008f8:	481f      	ldr	r0, [pc, #124]	@ (8000978 <receive_ip_from_uart+0xb0>)
 80008fa:	f00b fddf 	bl	800c4bc <siscanf>
	gWIZNETINFO.ip[0] = gWIZNETINFO.gw[0] = ip1;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000904:	739a      	strb	r2, [r3, #14]
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000908:	7b9a      	ldrb	r2, [r3, #14]
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <receive_ip_from_uart+0xb4>)
 800090c:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1] = gWIZNETINFO.gw[1] = ip2;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <receive_ip_from_uart+0xa8>)
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000914:	73da      	strb	r2, [r3, #15]
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000918:	7bda      	ldrb	r2, [r3, #15]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <receive_ip_from_uart+0xb4>)
 800091c:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[3] = gWIZNETINFO.gw[2] = ip3;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <receive_ip_from_uart+0xa4>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000924:	741a      	strb	r2, [r3, #16]
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000928:	7c1a      	ldrb	r2, [r3, #16]
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <receive_ip_from_uart+0xb4>)
 800092c:	725a      	strb	r2, [r3, #9]
	gWIZNETINFO.ip[3] = ip4;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <receive_ip_from_uart+0xa0>)
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000934:	725a      	strb	r2, [r3, #9]
	gWIZNETINFO.gw[3] = 1;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <receive_ip_from_uart+0xb4>)
 8000938:	2201      	movs	r2, #1
 800093a:	745a      	strb	r2, [r3, #17]
	WriteToEEPROM(EEPROM_ADRESS_START, gWIZNETINFO);
 800093c:	4c0f      	ldr	r4, [pc, #60]	@ (800097c <receive_ip_from_uart+0xb4>)
 800093e:	466b      	mov	r3, sp
 8000940:	f104 020c 	add.w	r2, r4, #12
 8000944:	ca07      	ldmia	r2, {r0, r1, r2}
 8000946:	c303      	stmia	r3!, {r0, r1}
 8000948:	801a      	strh	r2, [r3, #0]
 800094a:	3302      	adds	r3, #2
 800094c:	0c12      	lsrs	r2, r2, #16
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000954:	480a      	ldr	r0, [pc, #40]	@ (8000980 <receive_ip_from_uart+0xb8>)
 8000956:	f000 fe3d 	bl	80015d4 <WriteToEEPROM>
	HAL_Delay(200);
 800095a:	20c8      	movs	r0, #200	@ 0xc8
 800095c:	f003 f910 	bl	8003b80 <HAL_Delay>

}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	200002e1 	.word	0x200002e1
 800096c:	200002e0 	.word	0x200002e0
 8000970:	200002df 	.word	0x200002df
 8000974:	0800d818 	.word	0x0800d818
 8000978:	20000294 	.word	0x20000294
 800097c:	20000000 	.word	0x20000000
 8000980:	08030000 	.word	0x08030000

08000984 <Set_outputs>:


void Set_outputs (char* str_rx1)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '1')) out1[0] = 1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b41      	cmp	r3, #65	@ 0x41
 8000992:	d111      	bne.n	80009b8 <Set_outputs+0x34>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3301      	adds	r3, #1
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b4d      	cmp	r3, #77	@ 0x4d
 800099c:	d10c      	bne.n	80009b8 <Set_outputs+0x34>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3302      	adds	r3, #2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b31      	cmp	r3, #49	@ 0x31
 80009a6:	d107      	bne.n	80009b8 <Set_outputs+0x34>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3303      	adds	r3, #3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b31      	cmp	r3, #49	@ 0x31
 80009b0:	d102      	bne.n	80009b8 <Set_outputs+0x34>
 80009b2:	4b86      	ldr	r3, [pc, #536]	@ (8000bcc <Set_outputs+0x248>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '0')) out1[0] = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b41      	cmp	r3, #65	@ 0x41
 80009be:	d111      	bne.n	80009e4 <Set_outputs+0x60>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80009c8:	d10c      	bne.n	80009e4 <Set_outputs+0x60>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b31      	cmp	r3, #49	@ 0x31
 80009d2:	d107      	bne.n	80009e4 <Set_outputs+0x60>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3303      	adds	r3, #3
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b30      	cmp	r3, #48	@ 0x30
 80009dc:	d102      	bne.n	80009e4 <Set_outputs+0x60>
 80009de:	4b7b      	ldr	r3, [pc, #492]	@ (8000bcc <Set_outputs+0x248>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '1')) out1[1] = 1;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b41      	cmp	r3, #65	@ 0x41
 80009ea:	d111      	bne.n	8000a10 <Set_outputs+0x8c>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b4d      	cmp	r3, #77	@ 0x4d
 80009f4:	d10c      	bne.n	8000a10 <Set_outputs+0x8c>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3302      	adds	r3, #2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b31      	cmp	r3, #49	@ 0x31
 80009fe:	d107      	bne.n	8000a10 <Set_outputs+0x8c>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3304      	adds	r3, #4
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b31      	cmp	r3, #49	@ 0x31
 8000a08:	d102      	bne.n	8000a10 <Set_outputs+0x8c>
 8000a0a:	4b70      	ldr	r3, [pc, #448]	@ (8000bcc <Set_outputs+0x248>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '0')) out1[1] = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b41      	cmp	r3, #65	@ 0x41
 8000a16:	d111      	bne.n	8000a3c <Set_outputs+0xb8>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000a20:	d10c      	bne.n	8000a3c <Set_outputs+0xb8>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3302      	adds	r3, #2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b31      	cmp	r3, #49	@ 0x31
 8000a2a:	d107      	bne.n	8000a3c <Set_outputs+0xb8>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b30      	cmp	r3, #48	@ 0x30
 8000a34:	d102      	bne.n	8000a3c <Set_outputs+0xb8>
 8000a36:	4b65      	ldr	r3, [pc, #404]	@ (8000bcc <Set_outputs+0x248>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '1')) out1[2] = 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b41      	cmp	r3, #65	@ 0x41
 8000a42:	d111      	bne.n	8000a68 <Set_outputs+0xe4>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3301      	adds	r3, #1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b4d      	cmp	r3, #77	@ 0x4d
 8000a4c:	d10c      	bne.n	8000a68 <Set_outputs+0xe4>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3302      	adds	r3, #2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b31      	cmp	r3, #49	@ 0x31
 8000a56:	d107      	bne.n	8000a68 <Set_outputs+0xe4>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3305      	adds	r3, #5
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b31      	cmp	r3, #49	@ 0x31
 8000a60:	d102      	bne.n	8000a68 <Set_outputs+0xe4>
 8000a62:	4b5a      	ldr	r3, [pc, #360]	@ (8000bcc <Set_outputs+0x248>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '0')) out1[2] = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b41      	cmp	r3, #65	@ 0x41
 8000a6e:	d111      	bne.n	8000a94 <Set_outputs+0x110>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b4d      	cmp	r3, #77	@ 0x4d
 8000a78:	d10c      	bne.n	8000a94 <Set_outputs+0x110>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b31      	cmp	r3, #49	@ 0x31
 8000a82:	d107      	bne.n	8000a94 <Set_outputs+0x110>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3305      	adds	r3, #5
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b30      	cmp	r3, #48	@ 0x30
 8000a8c:	d102      	bne.n	8000a94 <Set_outputs+0x110>
 8000a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8000bcc <Set_outputs+0x248>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '1')) out1[3] = 1;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b41      	cmp	r3, #65	@ 0x41
 8000a9a:	d111      	bne.n	8000ac0 <Set_outputs+0x13c>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b4d      	cmp	r3, #77	@ 0x4d
 8000aa4:	d10c      	bne.n	8000ac0 <Set_outputs+0x13c>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b31      	cmp	r3, #49	@ 0x31
 8000aae:	d107      	bne.n	8000ac0 <Set_outputs+0x13c>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3306      	adds	r3, #6
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b31      	cmp	r3, #49	@ 0x31
 8000ab8:	d102      	bne.n	8000ac0 <Set_outputs+0x13c>
 8000aba:	4b44      	ldr	r3, [pc, #272]	@ (8000bcc <Set_outputs+0x248>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '0')) out1[3] = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b41      	cmp	r3, #65	@ 0x41
 8000ac6:	d111      	bne.n	8000aec <Set_outputs+0x168>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b4d      	cmp	r3, #77	@ 0x4d
 8000ad0:	d10c      	bne.n	8000aec <Set_outputs+0x168>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b31      	cmp	r3, #49	@ 0x31
 8000ada:	d107      	bne.n	8000aec <Set_outputs+0x168>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3306      	adds	r3, #6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b30      	cmp	r3, #48	@ 0x30
 8000ae4:	d102      	bne.n	8000aec <Set_outputs+0x168>
 8000ae6:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <Set_outputs+0x248>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '1')) out1[4] = 1;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b41      	cmp	r3, #65	@ 0x41
 8000af2:	d111      	bne.n	8000b18 <Set_outputs+0x194>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b4d      	cmp	r3, #77	@ 0x4d
 8000afc:	d10c      	bne.n	8000b18 <Set_outputs+0x194>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3302      	adds	r3, #2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b31      	cmp	r3, #49	@ 0x31
 8000b06:	d107      	bne.n	8000b18 <Set_outputs+0x194>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3307      	adds	r3, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b31      	cmp	r3, #49	@ 0x31
 8000b10:	d102      	bne.n	8000b18 <Set_outputs+0x194>
 8000b12:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <Set_outputs+0x248>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '0')) out1[4] = 0;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b41      	cmp	r3, #65	@ 0x41
 8000b1e:	d111      	bne.n	8000b44 <Set_outputs+0x1c0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b4d      	cmp	r3, #77	@ 0x4d
 8000b28:	d10c      	bne.n	8000b44 <Set_outputs+0x1c0>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b31      	cmp	r3, #49	@ 0x31
 8000b32:	d107      	bne.n	8000b44 <Set_outputs+0x1c0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3307      	adds	r3, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b30      	cmp	r3, #48	@ 0x30
 8000b3c:	d102      	bne.n	8000b44 <Set_outputs+0x1c0>
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <Set_outputs+0x248>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	711a      	strb	r2, [r3, #4]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '1')) out1[5] = 1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b41      	cmp	r3, #65	@ 0x41
 8000b4a:	d111      	bne.n	8000b70 <Set_outputs+0x1ec>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b4d      	cmp	r3, #77	@ 0x4d
 8000b54:	d10c      	bne.n	8000b70 <Set_outputs+0x1ec>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3302      	adds	r3, #2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b31      	cmp	r3, #49	@ 0x31
 8000b5e:	d107      	bne.n	8000b70 <Set_outputs+0x1ec>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3308      	adds	r3, #8
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b31      	cmp	r3, #49	@ 0x31
 8000b68:	d102      	bne.n	8000b70 <Set_outputs+0x1ec>
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <Set_outputs+0x248>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '0')) out1[5] = 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b41      	cmp	r3, #65	@ 0x41
 8000b76:	d111      	bne.n	8000b9c <Set_outputs+0x218>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000b80:	d10c      	bne.n	8000b9c <Set_outputs+0x218>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3302      	adds	r3, #2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b31      	cmp	r3, #49	@ 0x31
 8000b8a:	d107      	bne.n	8000b9c <Set_outputs+0x218>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b30      	cmp	r3, #48	@ 0x30
 8000b94:	d102      	bne.n	8000b9c <Set_outputs+0x218>
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <Set_outputs+0x248>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '1')) out1[6] = 1;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b41      	cmp	r3, #65	@ 0x41
 8000ba2:	d115      	bne.n	8000bd0 <Set_outputs+0x24c>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b4d      	cmp	r3, #77	@ 0x4d
 8000bac:	d110      	bne.n	8000bd0 <Set_outputs+0x24c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b31      	cmp	r3, #49	@ 0x31
 8000bb6:	d10b      	bne.n	8000bd0 <Set_outputs+0x24c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3309      	adds	r3, #9
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b31      	cmp	r3, #49	@ 0x31
 8000bc0:	d106      	bne.n	8000bd0 <Set_outputs+0x24c>
 8000bc2:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <Set_outputs+0x248>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	719a      	strb	r2, [r3, #6]
 8000bc8:	e002      	b.n	8000bd0 <Set_outputs+0x24c>
 8000bca:	bf00      	nop
 8000bcc:	200002b0 	.word	0x200002b0
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '0')) out1[6] = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b41      	cmp	r3, #65	@ 0x41
 8000bd6:	d111      	bne.n	8000bfc <Set_outputs+0x278>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b4d      	cmp	r3, #77	@ 0x4d
 8000be0:	d10c      	bne.n	8000bfc <Set_outputs+0x278>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b31      	cmp	r3, #49	@ 0x31
 8000bea:	d107      	bne.n	8000bfc <Set_outputs+0x278>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3309      	adds	r3, #9
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b30      	cmp	r3, #48	@ 0x30
 8000bf4:	d102      	bne.n	8000bfc <Set_outputs+0x278>
 8000bf6:	4b86      	ldr	r3, [pc, #536]	@ (8000e10 <Set_outputs+0x48c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '1')) out1[7] = 1;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b41      	cmp	r3, #65	@ 0x41
 8000c02:	d111      	bne.n	8000c28 <Set_outputs+0x2a4>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c0c:	d10c      	bne.n	8000c28 <Set_outputs+0x2a4>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3302      	adds	r3, #2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b31      	cmp	r3, #49	@ 0x31
 8000c16:	d107      	bne.n	8000c28 <Set_outputs+0x2a4>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	330a      	adds	r3, #10
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b31      	cmp	r3, #49	@ 0x31
 8000c20:	d102      	bne.n	8000c28 <Set_outputs+0x2a4>
 8000c22:	4b7b      	ldr	r3, [pc, #492]	@ (8000e10 <Set_outputs+0x48c>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '0')) out1[7] = 0;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b41      	cmp	r3, #65	@ 0x41
 8000c2e:	d111      	bne.n	8000c54 <Set_outputs+0x2d0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c38:	d10c      	bne.n	8000c54 <Set_outputs+0x2d0>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b31      	cmp	r3, #49	@ 0x31
 8000c42:	d107      	bne.n	8000c54 <Set_outputs+0x2d0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	330a      	adds	r3, #10
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b30      	cmp	r3, #48	@ 0x30
 8000c4c:	d102      	bne.n	8000c54 <Set_outputs+0x2d0>
 8000c4e:	4b70      	ldr	r3, [pc, #448]	@ (8000e10 <Set_outputs+0x48c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '1')) out2[0] = 1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b41      	cmp	r3, #65	@ 0x41
 8000c5a:	d111      	bne.n	8000c80 <Set_outputs+0x2fc>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c64:	d10c      	bne.n	8000c80 <Set_outputs+0x2fc>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b31      	cmp	r3, #49	@ 0x31
 8000c6e:	d107      	bne.n	8000c80 <Set_outputs+0x2fc>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	330b      	adds	r3, #11
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b31      	cmp	r3, #49	@ 0x31
 8000c78:	d102      	bne.n	8000c80 <Set_outputs+0x2fc>
 8000c7a:	4b66      	ldr	r3, [pc, #408]	@ (8000e14 <Set_outputs+0x490>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '0')) out2[0] = 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b41      	cmp	r3, #65	@ 0x41
 8000c86:	d111      	bne.n	8000cac <Set_outputs+0x328>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c90:	d10c      	bne.n	8000cac <Set_outputs+0x328>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3302      	adds	r3, #2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b31      	cmp	r3, #49	@ 0x31
 8000c9a:	d107      	bne.n	8000cac <Set_outputs+0x328>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	330b      	adds	r3, #11
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b30      	cmp	r3, #48	@ 0x30
 8000ca4:	d102      	bne.n	8000cac <Set_outputs+0x328>
 8000ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8000e14 <Set_outputs+0x490>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '1')) out2[1] = 1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b41      	cmp	r3, #65	@ 0x41
 8000cb2:	d111      	bne.n	8000cd8 <Set_outputs+0x354>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b4d      	cmp	r3, #77	@ 0x4d
 8000cbc:	d10c      	bne.n	8000cd8 <Set_outputs+0x354>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b31      	cmp	r3, #49	@ 0x31
 8000cc6:	d107      	bne.n	8000cd8 <Set_outputs+0x354>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330c      	adds	r3, #12
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b31      	cmp	r3, #49	@ 0x31
 8000cd0:	d102      	bne.n	8000cd8 <Set_outputs+0x354>
 8000cd2:	4b50      	ldr	r3, [pc, #320]	@ (8000e14 <Set_outputs+0x490>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '0')) out2[1] = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b41      	cmp	r3, #65	@ 0x41
 8000cde:	d111      	bne.n	8000d04 <Set_outputs+0x380>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b4d      	cmp	r3, #77	@ 0x4d
 8000ce8:	d10c      	bne.n	8000d04 <Set_outputs+0x380>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b31      	cmp	r3, #49	@ 0x31
 8000cf2:	d107      	bne.n	8000d04 <Set_outputs+0x380>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b30      	cmp	r3, #48	@ 0x30
 8000cfc:	d102      	bne.n	8000d04 <Set_outputs+0x380>
 8000cfe:	4b45      	ldr	r3, [pc, #276]	@ (8000e14 <Set_outputs+0x490>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '1')) out2[2] = 1;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b41      	cmp	r3, #65	@ 0x41
 8000d0a:	d111      	bne.n	8000d30 <Set_outputs+0x3ac>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d14:	d10c      	bne.n	8000d30 <Set_outputs+0x3ac>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b31      	cmp	r3, #49	@ 0x31
 8000d1e:	d107      	bne.n	8000d30 <Set_outputs+0x3ac>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	330d      	adds	r3, #13
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b31      	cmp	r3, #49	@ 0x31
 8000d28:	d102      	bne.n	8000d30 <Set_outputs+0x3ac>
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <Set_outputs+0x490>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '0')) out2[2] = 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b41      	cmp	r3, #65	@ 0x41
 8000d36:	d111      	bne.n	8000d5c <Set_outputs+0x3d8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d40:	d10c      	bne.n	8000d5c <Set_outputs+0x3d8>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3302      	adds	r3, #2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b31      	cmp	r3, #49	@ 0x31
 8000d4a:	d107      	bne.n	8000d5c <Set_outputs+0x3d8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	330d      	adds	r3, #13
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b30      	cmp	r3, #48	@ 0x30
 8000d54:	d102      	bne.n	8000d5c <Set_outputs+0x3d8>
 8000d56:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <Set_outputs+0x490>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '1')) out2[3] = 1;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b41      	cmp	r3, #65	@ 0x41
 8000d62:	d111      	bne.n	8000d88 <Set_outputs+0x404>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d6c:	d10c      	bne.n	8000d88 <Set_outputs+0x404>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3302      	adds	r3, #2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b31      	cmp	r3, #49	@ 0x31
 8000d76:	d107      	bne.n	8000d88 <Set_outputs+0x404>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	330e      	adds	r3, #14
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b31      	cmp	r3, #49	@ 0x31
 8000d80:	d102      	bne.n	8000d88 <Set_outputs+0x404>
 8000d82:	4b24      	ldr	r3, [pc, #144]	@ (8000e14 <Set_outputs+0x490>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '0')) out2[3] = 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b41      	cmp	r3, #65	@ 0x41
 8000d8e:	d111      	bne.n	8000db4 <Set_outputs+0x430>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3301      	adds	r3, #1
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b4d      	cmp	r3, #77	@ 0x4d
 8000d98:	d10c      	bne.n	8000db4 <Set_outputs+0x430>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b31      	cmp	r3, #49	@ 0x31
 8000da2:	d107      	bne.n	8000db4 <Set_outputs+0x430>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	330e      	adds	r3, #14
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b30      	cmp	r3, #48	@ 0x30
 8000dac:	d102      	bne.n	8000db4 <Set_outputs+0x430>
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <Set_outputs+0x490>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '1')) out2[4] = 1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b41      	cmp	r3, #65	@ 0x41
 8000dba:	d111      	bne.n	8000de0 <Set_outputs+0x45c>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b4d      	cmp	r3, #77	@ 0x4d
 8000dc4:	d10c      	bne.n	8000de0 <Set_outputs+0x45c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3302      	adds	r3, #2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b31      	cmp	r3, #49	@ 0x31
 8000dce:	d107      	bne.n	8000de0 <Set_outputs+0x45c>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	330f      	adds	r3, #15
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b31      	cmp	r3, #49	@ 0x31
 8000dd8:	d102      	bne.n	8000de0 <Set_outputs+0x45c>
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <Set_outputs+0x490>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '0')) out2[4] = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b41      	cmp	r3, #65	@ 0x41
 8000de6:	d117      	bne.n	8000e18 <Set_outputs+0x494>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b4d      	cmp	r3, #77	@ 0x4d
 8000df0:	d112      	bne.n	8000e18 <Set_outputs+0x494>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3302      	adds	r3, #2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b31      	cmp	r3, #49	@ 0x31
 8000dfa:	d10d      	bne.n	8000e18 <Set_outputs+0x494>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	330f      	adds	r3, #15
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b30      	cmp	r3, #48	@ 0x30
 8000e04:	d108      	bne.n	8000e18 <Set_outputs+0x494>
 8000e06:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <Set_outputs+0x490>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	711a      	strb	r2, [r3, #4]
 8000e0c:	e004      	b.n	8000e18 <Set_outputs+0x494>
 8000e0e:	bf00      	nop
 8000e10:	200002b0 	.word	0x200002b0
 8000e14:	200002b8 	.word	0x200002b8

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '1')) out2[5] = 1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b41      	cmp	r3, #65	@ 0x41
 8000e1e:	d111      	bne.n	8000e44 <Set_outputs+0x4c0>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b4d      	cmp	r3, #77	@ 0x4d
 8000e28:	d10c      	bne.n	8000e44 <Set_outputs+0x4c0>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b31      	cmp	r3, #49	@ 0x31
 8000e32:	d107      	bne.n	8000e44 <Set_outputs+0x4c0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3310      	adds	r3, #16
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b31      	cmp	r3, #49	@ 0x31
 8000e3c:	d102      	bne.n	8000e44 <Set_outputs+0x4c0>
 8000e3e:	4b99      	ldr	r3, [pc, #612]	@ (80010a4 <Set_outputs+0x720>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '0')) out2[5] = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b41      	cmp	r3, #65	@ 0x41
 8000e4a:	d111      	bne.n	8000e70 <Set_outputs+0x4ec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b4d      	cmp	r3, #77	@ 0x4d
 8000e54:	d10c      	bne.n	8000e70 <Set_outputs+0x4ec>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b31      	cmp	r3, #49	@ 0x31
 8000e5e:	d107      	bne.n	8000e70 <Set_outputs+0x4ec>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3310      	adds	r3, #16
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b30      	cmp	r3, #48	@ 0x30
 8000e68:	d102      	bne.n	8000e70 <Set_outputs+0x4ec>
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80010a4 <Set_outputs+0x720>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '1')) out2[6] = 1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b41      	cmp	r3, #65	@ 0x41
 8000e76:	d111      	bne.n	8000e9c <Set_outputs+0x518>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000e80:	d10c      	bne.n	8000e9c <Set_outputs+0x518>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3302      	adds	r3, #2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b31      	cmp	r3, #49	@ 0x31
 8000e8a:	d107      	bne.n	8000e9c <Set_outputs+0x518>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3311      	adds	r3, #17
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b31      	cmp	r3, #49	@ 0x31
 8000e94:	d102      	bne.n	8000e9c <Set_outputs+0x518>
 8000e96:	4b83      	ldr	r3, [pc, #524]	@ (80010a4 <Set_outputs+0x720>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	719a      	strb	r2, [r3, #6]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '0')) out2[6] = 0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b41      	cmp	r3, #65	@ 0x41
 8000ea2:	d111      	bne.n	8000ec8 <Set_outputs+0x544>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b4d      	cmp	r3, #77	@ 0x4d
 8000eac:	d10c      	bne.n	8000ec8 <Set_outputs+0x544>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b31      	cmp	r3, #49	@ 0x31
 8000eb6:	d107      	bne.n	8000ec8 <Set_outputs+0x544>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3311      	adds	r3, #17
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b30      	cmp	r3, #48	@ 0x30
 8000ec0:	d102      	bne.n	8000ec8 <Set_outputs+0x544>
 8000ec2:	4b78      	ldr	r3, [pc, #480]	@ (80010a4 <Set_outputs+0x720>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '1')) out2[7] = 1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b41      	cmp	r3, #65	@ 0x41
 8000ece:	d111      	bne.n	8000ef4 <Set_outputs+0x570>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b4d      	cmp	r3, #77	@ 0x4d
 8000ed8:	d10c      	bne.n	8000ef4 <Set_outputs+0x570>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3302      	adds	r3, #2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b31      	cmp	r3, #49	@ 0x31
 8000ee2:	d107      	bne.n	8000ef4 <Set_outputs+0x570>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3312      	adds	r3, #18
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b31      	cmp	r3, #49	@ 0x31
 8000eec:	d102      	bne.n	8000ef4 <Set_outputs+0x570>
 8000eee:	4b6d      	ldr	r3, [pc, #436]	@ (80010a4 <Set_outputs+0x720>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '0')) out2[7] = 0;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b41      	cmp	r3, #65	@ 0x41
 8000efa:	d111      	bne.n	8000f20 <Set_outputs+0x59c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b4d      	cmp	r3, #77	@ 0x4d
 8000f04:	d10c      	bne.n	8000f20 <Set_outputs+0x59c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b31      	cmp	r3, #49	@ 0x31
 8000f0e:	d107      	bne.n	8000f20 <Set_outputs+0x59c>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3312      	adds	r3, #18
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b30      	cmp	r3, #48	@ 0x30
 8000f18:	d102      	bne.n	8000f20 <Set_outputs+0x59c>
 8000f1a:	4b62      	ldr	r3, [pc, #392]	@ (80010a4 <Set_outputs+0x720>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(flag_ok ==1)){ USART1_Send_String ("OK"); flag_ok=0;}
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b41      	cmp	r3, #65	@ 0x41
 8000f26:	d10e      	bne.n	8000f46 <Set_outputs+0x5c2>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000f30:	d109      	bne.n	8000f46 <Set_outputs+0x5c2>
 8000f32:	4b5d      	ldr	r3, [pc, #372]	@ (80010a8 <Set_outputs+0x724>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <Set_outputs+0x5c2>
 8000f3a:	485c      	ldr	r0, [pc, #368]	@ (80010ac <Set_outputs+0x728>)
 8000f3c:	f000 fb2e 	bl	800159c <USART1_Send_String>
 8000f40:	4b59      	ldr	r3, [pc, #356]	@ (80010a8 <Set_outputs+0x724>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]

		if (out1[0] ==1) LL_GPIO_SetOutputPin(OUT1_GPIO_Port, OUT1_Pin); else LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000f46:	4b5a      	ldr	r3, [pc, #360]	@ (80010b0 <Set_outputs+0x72c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d104      	bne.n	8000f58 <Set_outputs+0x5d4>
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4858      	ldr	r0, [pc, #352]	@ (80010b4 <Set_outputs+0x730>)
 8000f52:	f7ff fc17 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000f56:	e003      	b.n	8000f60 <Set_outputs+0x5dc>
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4856      	ldr	r0, [pc, #344]	@ (80010b4 <Set_outputs+0x730>)
 8000f5c:	f7ff fc20 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[1] ==1) LL_GPIO_SetOutputPin(OUT2_GPIO_Port, OUT2_Pin); else LL_GPIO_ResetOutputPin(OUT2_GPIO_Port, OUT2_Pin);
 8000f60:	4b53      	ldr	r3, [pc, #332]	@ (80010b0 <Set_outputs+0x72c>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d104      	bne.n	8000f72 <Set_outputs+0x5ee>
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4852      	ldr	r0, [pc, #328]	@ (80010b4 <Set_outputs+0x730>)
 8000f6c:	f7ff fc0a 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000f70:	e003      	b.n	8000f7a <Set_outputs+0x5f6>
 8000f72:	2102      	movs	r1, #2
 8000f74:	484f      	ldr	r0, [pc, #316]	@ (80010b4 <Set_outputs+0x730>)
 8000f76:	f7ff fc13 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[2] ==1) LL_GPIO_SetOutputPin(OUT3_GPIO_Port, OUT3_Pin); else LL_GPIO_ResetOutputPin(OUT3_GPIO_Port, OUT3_Pin);
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <Set_outputs+0x72c>)
 8000f7c:	789b      	ldrb	r3, [r3, #2]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d104      	bne.n	8000f8c <Set_outputs+0x608>
 8000f82:	2104      	movs	r1, #4
 8000f84:	484b      	ldr	r0, [pc, #300]	@ (80010b4 <Set_outputs+0x730>)
 8000f86:	f7ff fbfd 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000f8a:	e003      	b.n	8000f94 <Set_outputs+0x610>
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4849      	ldr	r0, [pc, #292]	@ (80010b4 <Set_outputs+0x730>)
 8000f90:	f7ff fc06 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[3] ==1) LL_GPIO_SetOutputPin(OUT4_GPIO_Port, OUT4_Pin); else LL_GPIO_ResetOutputPin(OUT4_GPIO_Port, OUT4_Pin);
 8000f94:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <Set_outputs+0x72c>)
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d104      	bne.n	8000fa6 <Set_outputs+0x622>
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4845      	ldr	r0, [pc, #276]	@ (80010b4 <Set_outputs+0x730>)
 8000fa0:	f7ff fbf0 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000fa4:	e003      	b.n	8000fae <Set_outputs+0x62a>
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4842      	ldr	r0, [pc, #264]	@ (80010b4 <Set_outputs+0x730>)
 8000faa:	f7ff fbf9 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[4] ==1) LL_GPIO_SetOutputPin(OUT5_GPIO_Port, OUT5_Pin); else LL_GPIO_ResetOutputPin(OUT5_GPIO_Port, OUT5_Pin);
 8000fae:	4b40      	ldr	r3, [pc, #256]	@ (80010b0 <Set_outputs+0x72c>)
 8000fb0:	791b      	ldrb	r3, [r3, #4]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d104      	bne.n	8000fc0 <Set_outputs+0x63c>
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	483e      	ldr	r0, [pc, #248]	@ (80010b4 <Set_outputs+0x730>)
 8000fba:	f7ff fbe3 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000fbe:	e003      	b.n	8000fc8 <Set_outputs+0x644>
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	483c      	ldr	r0, [pc, #240]	@ (80010b4 <Set_outputs+0x730>)
 8000fc4:	f7ff fbec 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[5] ==1) LL_GPIO_SetOutputPin(OUT6_GPIO_Port, OUT6_Pin); else LL_GPIO_ResetOutputPin(OUT6_GPIO_Port, OUT6_Pin);
 8000fc8:	4b39      	ldr	r3, [pc, #228]	@ (80010b0 <Set_outputs+0x72c>)
 8000fca:	795b      	ldrb	r3, [r3, #5]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d104      	bne.n	8000fda <Set_outputs+0x656>
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4838      	ldr	r0, [pc, #224]	@ (80010b4 <Set_outputs+0x730>)
 8000fd4:	f7ff fbd6 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000fd8:	e003      	b.n	8000fe2 <Set_outputs+0x65e>
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4835      	ldr	r0, [pc, #212]	@ (80010b4 <Set_outputs+0x730>)
 8000fde:	f7ff fbdf 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[6] ==1) LL_GPIO_SetOutputPin(OUT7_GPIO_Port, OUT7_Pin); else LL_GPIO_ResetOutputPin(OUT7_GPIO_Port, OUT7_Pin);
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <Set_outputs+0x72c>)
 8000fe4:	799b      	ldrb	r3, [r3, #6]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d104      	bne.n	8000ff4 <Set_outputs+0x670>
 8000fea:	2140      	movs	r1, #64	@ 0x40
 8000fec:	4831      	ldr	r0, [pc, #196]	@ (80010b4 <Set_outputs+0x730>)
 8000fee:	f7ff fbc9 	bl	8000784 <LL_GPIO_SetOutputPin>
 8000ff2:	e003      	b.n	8000ffc <Set_outputs+0x678>
 8000ff4:	2140      	movs	r1, #64	@ 0x40
 8000ff6:	482f      	ldr	r0, [pc, #188]	@ (80010b4 <Set_outputs+0x730>)
 8000ff8:	f7ff fbd2 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out1[7] ==1) LL_GPIO_SetOutputPin(OUT8_GPIO_Port, OUT8_Pin); else LL_GPIO_ResetOutputPin(OUT8_GPIO_Port, OUT8_Pin);
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <Set_outputs+0x72c>)
 8000ffe:	79db      	ldrb	r3, [r3, #7]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d104      	bne.n	800100e <Set_outputs+0x68a>
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	482b      	ldr	r0, [pc, #172]	@ (80010b4 <Set_outputs+0x730>)
 8001008:	f7ff fbbc 	bl	8000784 <LL_GPIO_SetOutputPin>
 800100c:	e003      	b.n	8001016 <Set_outputs+0x692>
 800100e:	2180      	movs	r1, #128	@ 0x80
 8001010:	4828      	ldr	r0, [pc, #160]	@ (80010b4 <Set_outputs+0x730>)
 8001012:	f7ff fbc5 	bl	80007a0 <LL_GPIO_ResetOutputPin>

		if (out2[0] ==1) LL_GPIO_SetOutputPin(OUT9_GPIO_Port, OUT9_Pin); else LL_GPIO_ResetOutputPin(OUT9_GPIO_Port, OUT9_Pin);
 8001016:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <Set_outputs+0x720>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d105      	bne.n	800102a <Set_outputs+0x6a6>
 800101e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001022:	4824      	ldr	r0, [pc, #144]	@ (80010b4 <Set_outputs+0x730>)
 8001024:	f7ff fbae 	bl	8000784 <LL_GPIO_SetOutputPin>
 8001028:	e004      	b.n	8001034 <Set_outputs+0x6b0>
 800102a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800102e:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <Set_outputs+0x730>)
 8001030:	f7ff fbb6 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[1] ==1) LL_GPIO_SetOutputPin(OUT10_GPIO_Port, OUT10_Pin); else LL_GPIO_ResetOutputPin(OUT10_GPIO_Port, OUT10_Pin);
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <Set_outputs+0x720>)
 8001036:	785b      	ldrb	r3, [r3, #1]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d105      	bne.n	8001048 <Set_outputs+0x6c4>
 800103c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001040:	481c      	ldr	r0, [pc, #112]	@ (80010b4 <Set_outputs+0x730>)
 8001042:	f7ff fb9f 	bl	8000784 <LL_GPIO_SetOutputPin>
 8001046:	e004      	b.n	8001052 <Set_outputs+0x6ce>
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	4819      	ldr	r0, [pc, #100]	@ (80010b4 <Set_outputs+0x730>)
 800104e:	f7ff fba7 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[2] ==1) LL_GPIO_SetOutputPin(OUT11_GPIO_Port, OUT11_Pin); else LL_GPIO_ResetOutputPin(OUT11_GPIO_Port, OUT11_Pin);
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <Set_outputs+0x720>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d105      	bne.n	8001066 <Set_outputs+0x6e2>
 800105a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105e:	4815      	ldr	r0, [pc, #84]	@ (80010b4 <Set_outputs+0x730>)
 8001060:	f7ff fb90 	bl	8000784 <LL_GPIO_SetOutputPin>
 8001064:	e004      	b.n	8001070 <Set_outputs+0x6ec>
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <Set_outputs+0x730>)
 800106c:	f7ff fb98 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[3] ==1) LL_GPIO_SetOutputPin(OUT12_GPIO_Port, OUT12_Pin); else LL_GPIO_ResetOutputPin(OUT12_GPIO_Port, OUT12_Pin);
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <Set_outputs+0x720>)
 8001072:	78db      	ldrb	r3, [r3, #3]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <Set_outputs+0x700>
 8001078:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <Set_outputs+0x730>)
 800107e:	f7ff fb81 	bl	8000784 <LL_GPIO_SetOutputPin>
 8001082:	e004      	b.n	800108e <Set_outputs+0x70a>
 8001084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001088:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <Set_outputs+0x730>)
 800108a:	f7ff fb89 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[4] ==1) LL_GPIO_SetOutputPin(OUT13_GPIO_Port, OUT13_Pin); else LL_GPIO_ResetOutputPin(OUT13_GPIO_Port, OUT13_Pin);
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <Set_outputs+0x720>)
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d110      	bne.n	80010b8 <Set_outputs+0x734>
 8001096:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <Set_outputs+0x730>)
 800109c:	f7ff fb72 	bl	8000784 <LL_GPIO_SetOutputPin>
 80010a0:	e00f      	b.n	80010c2 <Set_outputs+0x73e>
 80010a2:	bf00      	nop
 80010a4:	200002b8 	.word	0x200002b8
 80010a8:	200002ad 	.word	0x200002ad
 80010ac:	0800d828 	.word	0x0800d828
 80010b0:	200002b0 	.word	0x200002b0
 80010b4:	40020400 	.word	0x40020400
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	4819      	ldr	r0, [pc, #100]	@ (8001124 <Set_outputs+0x7a0>)
 80010be:	f7ff fb6f 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[5] ==1) LL_GPIO_SetOutputPin(OUT14_GPIO_Port, OUT14_Pin); else LL_GPIO_ResetOutputPin(OUT14_GPIO_Port, OUT14_Pin);
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <Set_outputs+0x7a4>)
 80010c4:	795b      	ldrb	r3, [r3, #5]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <Set_outputs+0x752>
 80010ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ce:	4815      	ldr	r0, [pc, #84]	@ (8001124 <Set_outputs+0x7a0>)
 80010d0:	f7ff fb58 	bl	8000784 <LL_GPIO_SetOutputPin>
 80010d4:	e004      	b.n	80010e0 <Set_outputs+0x75c>
 80010d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010da:	4812      	ldr	r0, [pc, #72]	@ (8001124 <Set_outputs+0x7a0>)
 80010dc:	f7ff fb60 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[6] ==1) LL_GPIO_SetOutputPin(OUT15_GPIO_Port, OUT15_Pin); else LL_GPIO_ResetOutputPin(OUT15_GPIO_Port, OUT15_Pin);
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <Set_outputs+0x7a4>)
 80010e2:	799b      	ldrb	r3, [r3, #6]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <Set_outputs+0x770>
 80010e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <Set_outputs+0x7a0>)
 80010ee:	f7ff fb49 	bl	8000784 <LL_GPIO_SetOutputPin>
 80010f2:	e004      	b.n	80010fe <Set_outputs+0x77a>
 80010f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <Set_outputs+0x7a0>)
 80010fa:	f7ff fb51 	bl	80007a0 <LL_GPIO_ResetOutputPin>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <Set_outputs+0x7a4>)
 8001100:	79db      	ldrb	r3, [r3, #7]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d105      	bne.n	8001112 <Set_outputs+0x78e>
 8001106:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800110a:	4808      	ldr	r0, [pc, #32]	@ (800112c <Set_outputs+0x7a8>)
 800110c:	f7ff fb3a 	bl	8000784 <LL_GPIO_SetOutputPin>

}
 8001110:	e004      	b.n	800111c <Set_outputs+0x798>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 8001112:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <Set_outputs+0x7a8>)
 8001118:	f7ff fb42 	bl	80007a0 <LL_GPIO_ResetOutputPin>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020400 	.word	0x40020400
 8001128:	200002b8 	.word	0x200002b8
 800112c:	40020000 	.word	0x40020000

08001130 <UART_Printf>:





void UART_Printf(const char* fmt, ...) {
 8001130:	b40f      	push	{r0, r1, r2, r3}
 8001132:	b580      	push	{r7, lr}
 8001134:	b0c2      	sub	sp, #264	@ 0x108
 8001136:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001138:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800113c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001144:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800114a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800114e:	f107 0008 	add.w	r0, r7, #8
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001158:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115c:	f00b fa06 	bl	800c56c <vsniprintf>
    CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f83b 	bl	80001e0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f00a fd2f 	bl	800bbd8 <CDC_Transmit_FS>
    va_end(args);
}
 800117a:	bf00      	nop
 800117c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b004      	add	sp, #16
 8001188:	4770      	bx	lr
	...

0800118c <BuildStartPage>:
		"<h1>Ethernet remote control console</h1>"
		"<p><a href='https://ra0sms.com/ethernet-remote-control/'>Help information (in Russian)</a></p>"
		"<p><a href='/status'>Output status</a></p>";


void BuildStartPage (char* buf){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	strcpy(buf,http_200_header);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <BuildStartPage+0x48>)
 8001198:	4618      	mov	r0, r3
 800119a:	4611      	mov	r1, r2
 800119c:	2352      	movs	r3, #82	@ 0x52
 800119e:	461a      	mov	r2, r3
 80011a0:	f00b fa60 	bl	800c664 <memcpy>
	strcat(buf, (char *)startPage);
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <BuildStartPage+0x4c>)
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f00b fa06 	bl	800c5b8 <strcat>
	strcat(buf, (char *)SVG);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff f817 	bl	80001e0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <BuildStartPage+0x50>)
 80011bc:	4618      	mov	r0, r3
 80011be:	4611      	mov	r1, r2
 80011c0:	f241 03e5 	movw	r3, #4325	@ 0x10e5
 80011c4:	461a      	mov	r2, r3
 80011c6:	f00b fa4d 	bl	800c664 <memcpy>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800ea00 	.word	0x0800ea00
 80011d8:	20000018 	.word	0x20000018
 80011dc:	0800d918 	.word	0x0800d918

080011e0 <W5500_Select>:
/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
void W5500_Select(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <W5500_Select+0x14>)
 80011ea:	f003 f983 	bl	80044f4 <HAL_GPIO_WritePin>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020000 	.word	0x40020000

080011f8 <W5500_Unselect>:

void W5500_Unselect(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <W5500_Unselect+0x14>)
 8001202:	f003 f977 	bl	80044f4 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000

08001210 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4803      	ldr	r0, [pc, #12]	@ (8001234 <W5500_ReadBuff+0x24>)
 8001226:	f005 fa5d 	bl	80066e4 <HAL_SPI_Receive>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200022f0 	.word	0x200022f0

08001238 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <W5500_WriteBuff+0x24>)
 800124e:	f005 f90d 	bl	800646c <HAL_SPI_Transmit>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200022f0 	.word	0x200022f0

08001260 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	2101      	movs	r1, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffd0 	bl	8001210 <W5500_ReadBuff>
    return byte;
 8001270:	79fb      	ldrb	r3, [r7, #7]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	2101      	movs	r1, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ffd5 	bl	8001238 <W5500_WriteBuff>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <loopback_tcps>:


int32_t loopback_tcps(uint8_t sn, char *buf, uint16_t port) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]
	int32_t ret;
	uint32_t size = 0, sentsize = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
	char *url;

	switch (getSn_SR(sn)) {
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	3301      	adds	r3, #1
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fe6f 	bl	8002fa0 <WIZCHIP_READ>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b1c      	cmp	r3, #28
 80012c6:	f200 812c 	bhi.w	8001522 <loopback_tcps+0x28a>
 80012ca:	a201      	add	r2, pc, #4	@ (adr r2, 80012d0 <loopback_tcps+0x38>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080014f1 	.word	0x080014f1
 80012d4:	08001523 	.word	0x08001523
 80012d8:	08001523 	.word	0x08001523
 80012dc:	08001523 	.word	0x08001523
 80012e0:	08001523 	.word	0x08001523
 80012e4:	08001523 	.word	0x08001523
 80012e8:	08001523 	.word	0x08001523
 80012ec:	08001523 	.word	0x08001523
 80012f0:	08001523 	.word	0x08001523
 80012f4:	08001523 	.word	0x08001523
 80012f8:	08001523 	.word	0x08001523
 80012fc:	08001523 	.word	0x08001523
 8001300:	08001523 	.word	0x08001523
 8001304:	08001523 	.word	0x08001523
 8001308:	08001523 	.word	0x08001523
 800130c:	08001523 	.word	0x08001523
 8001310:	08001523 	.word	0x08001523
 8001314:	08001523 	.word	0x08001523
 8001318:	08001523 	.word	0x08001523
 800131c:	080014cf 	.word	0x080014cf
 8001320:	08001523 	.word	0x08001523
 8001324:	08001523 	.word	0x08001523
 8001328:	08001523 	.word	0x08001523
 800132c:	08001345 	.word	0x08001345
 8001330:	08001523 	.word	0x08001523
 8001334:	08001523 	.word	0x08001523
 8001338:	08001523 	.word	0x08001523
 800133c:	08001523 	.word	0x08001523
 8001340:	080014a3 	.word	0x080014a3
	case SOCK_ESTABLISHED:
		if (getSn_IR(sn) & Sn_IR_CON) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	3301      	adds	r3, #1
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fe25 	bl	8002fa0 <WIZCHIP_READ>
 8001356:	4603      	mov	r3, r0
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00e      	beq.n	800137e <loopback_tcps+0xe6>
			UART_Printf("%d:Connected\r\n", sn);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4619      	mov	r1, r3
 8001364:	4874      	ldr	r0, [pc, #464]	@ (8001538 <loopback_tcps+0x2a0>)
 8001366:	f7ff fee3 	bl	8001130 <UART_Printf>
			setSn_IR(sn, Sn_IR_CON);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	3301      	adds	r3, #1
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fe5d 	bl	8003038 <WIZCHIP_WRITE>
		}
		if ((size = getSn_RX_RSR(sn)) > 0) {
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f001 ffb0 	bl	80032e6 <getSn_RX_RSR>
 8001386:	4603      	mov	r3, r0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80ca 	beq.w	8001526 <loopback_tcps+0x28e>
			if (size > DATA_BUF_SIZE)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f242 0204 	movw	r2, #8196	@ 0x2004
 8001398:	4293      	cmp	r3, r2
 800139a:	d902      	bls.n	80013a2 <loopback_tcps+0x10a>
				size = DATA_BUF_SIZE;
 800139c:	f242 0304 	movw	r3, #8196	@ 0x2004
 80013a0:	617b      	str	r3, [r7, #20]
			ret = recv(sn, buf, size);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f804 	bl	80023b8 <recv>
 80013b0:	60f8      	str	r0, [r7, #12]
			if (ret <= 0)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dc01      	bgt.n	80013bc <loopback_tcps+0x124>
				return ret;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e0b8      	b.n	800152e <loopback_tcps+0x296>
			sentsize = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
//=============================================
			if (memcmp(buf, "GET ", 4) == 0) {
 80013c0:	2204      	movs	r2, #4
 80013c2:	495e      	ldr	r1, [pc, #376]	@ (800153c <loopback_tcps+0x2a4>)
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f00b f8df 	bl	800c588 <memcmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d163      	bne.n	8001498 <loopback_tcps+0x200>
				url = buf + 4;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	60bb      	str	r3, [r7, #8]

				if (memcmp(url, "/status", 7) == 0) {
 80013d6:	2207      	movs	r2, #7
 80013d8:	4959      	ldr	r1, [pc, #356]	@ (8001540 <loopback_tcps+0x2a8>)
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f00b f8d4 	bl	800c588 <memcmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d104      	bne.n	80013f0 <loopback_tcps+0x158>
					strcpy(buf, (char *)post_url);
 80013e6:	4957      	ldr	r1, [pc, #348]	@ (8001544 <loopback_tcps+0x2ac>)
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f00b f933 	bl	800c654 <strcpy>
 80013ee:	e02f      	b.n	8001450 <loopback_tcps+0x1b8>
				} else if ((memcmp(url, "/ H", 3) == 0)) {
 80013f0:	2203      	movs	r2, #3
 80013f2:	4955      	ldr	r1, [pc, #340]	@ (8001548 <loopback_tcps+0x2b0>)
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f00b f8c7 	bl	800c588 <memcmp>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d103      	bne.n	8001408 <loopback_tcps+0x170>
					BuildStartPage(buf);
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	f7ff fec3 	bl	800118c <BuildStartPage>
 8001406:	e023      	b.n	8001450 <loopback_tcps+0x1b8>
				} else if (memcmp(url, "/AM1", 4) == 0) {
 8001408:	2204      	movs	r2, #4
 800140a:	4950      	ldr	r1, [pc, #320]	@ (800154c <loopback_tcps+0x2b4>)
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f00b f8bb 	bl	800c588 <memcmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d113      	bne.n	8001440 <loopback_tcps+0x1a8>
					get_url = url + 1;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	4a4c      	ldr	r2, [pc, #304]	@ (8001550 <loopback_tcps+0x2b8>)
 800141e:	6013      	str	r3, [r2, #0]
					strncpy(post_url, (char *)get_url,19);
 8001420:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <loopback_tcps+0x2b8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2213      	movs	r2, #19
 8001426:	4619      	mov	r1, r3
 8001428:	4846      	ldr	r0, [pc, #280]	@ (8001544 <loopback_tcps+0x2ac>)
 800142a:	f00b f8d4 	bl	800c5d6 <strncpy>
					Set_outputs(get_url);
 800142e:	4b48      	ldr	r3, [pc, #288]	@ (8001550 <loopback_tcps+0x2b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff faa6 	bl	8000984 <Set_outputs>
					BuildStartPage(buf);
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f7ff fea7 	bl	800118c <BuildStartPage>
 800143e:	e007      	b.n	8001450 <loopback_tcps+0x1b8>
				}else

				{
					strcpy(buf, http_404_header);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4a44      	ldr	r2, [pc, #272]	@ (8001554 <loopback_tcps+0x2bc>)
 8001444:	4618      	mov	r0, r3
 8001446:	4611      	mov	r1, r2
 8001448:	2359      	movs	r3, #89	@ 0x59
 800144a:	461a      	mov	r2, r3
 800144c:	f00b f90a 	bl	800c664 <memcpy>
				}
				//======================================================
				size = strlen(buf);
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f7fe fec5 	bl	80001e0 <strlen>
 8001456:	6178      	str	r0, [r7, #20]
				while (size != sentsize) {
 8001458:	e01a      	b.n	8001490 <loopback_tcps+0x1f8>
					ret = send(sn, buf + sentsize, size - sentsize);
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	18d1      	adds	r1, r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	b29a      	uxth	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	b29b      	uxth	r3, r3
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 feaa 	bl	80021c8 <send>
 8001474:	60f8      	str	r0, [r7, #12]
					if (ret < 0) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	da05      	bge.n	8001488 <loopback_tcps+0x1f0>
						close(sn);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fd64 	bl	8001f4c <close>
						return ret;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	e052      	b.n	800152e <loopback_tcps+0x296>
					}
					sentsize += ret;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
				while (size != sentsize) {
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d1e0      	bne.n	800145a <loopback_tcps+0x1c2>
				}
			}
			disconnect(sn);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fe1e 	bl	80020dc <disconnect>
		}
		break;
 80014a0:	e041      	b.n	8001526 <loopback_tcps+0x28e>
	case SOCK_CLOSE_WAIT:
		UART_Printf("%d:CloseWait\r\n", sn);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4619      	mov	r1, r3
 80014a6:	482c      	ldr	r0, [pc, #176]	@ (8001558 <loopback_tcps+0x2c0>)
 80014a8:	f7ff fe42 	bl	8001130 <UART_Printf>
		if ((ret = disconnect(sn)) != SOCK_OK)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fe14 	bl	80020dc <disconnect>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d001      	beq.n	80014c2 <loopback_tcps+0x22a>
			return ret;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	e035      	b.n	800152e <loopback_tcps+0x296>
		UART_Printf("%d:Closed\r\n", sn);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4825      	ldr	r0, [pc, #148]	@ (800155c <loopback_tcps+0x2c4>)
 80014c8:	f7ff fe32 	bl	8001130 <UART_Printf>
		break;
 80014cc:	e02e      	b.n	800152c <loopback_tcps+0x294>
	case SOCK_INIT:
		UART_Printf("%d:Listen, port [%d]\r\n", sn, port);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	88ba      	ldrh	r2, [r7, #4]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4822      	ldr	r0, [pc, #136]	@ (8001560 <loopback_tcps+0x2c8>)
 80014d6:	f7ff fe2b 	bl	8001130 <UART_Printf>
		if ((ret = listen(sn)) != SOCK_OK)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fda3 	bl	8002028 <listen>
 80014e2:	4603      	mov	r3, r0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d01e      	beq.n	800152a <loopback_tcps+0x292>
			return ret;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	e01e      	b.n	800152e <loopback_tcps+0x296>
		break;
	case SOCK_CLOSED:
		UART_Printf("%d:LBTStart\r\n", sn);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4619      	mov	r1, r3
 80014f4:	481b      	ldr	r0, [pc, #108]	@ (8001564 <loopback_tcps+0x2cc>)
 80014f6:	f7ff fe1b 	bl	8001130 <UART_Printf>
		if ((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn)
 80014fa:	88ba      	ldrh	r2, [r7, #4]
 80014fc:	79f8      	ldrb	r0, [r7, #7]
 80014fe:	2300      	movs	r3, #0
 8001500:	2101      	movs	r1, #1
 8001502:	f000 fc0f 	bl	8001d24 <socket>
 8001506:	4603      	mov	r3, r0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <loopback_tcps+0x27e>
			return ret;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	e00b      	b.n	800152e <loopback_tcps+0x296>
		UART_Printf("%d:Opened\r\n", sn);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4619      	mov	r1, r3
 800151a:	4813      	ldr	r0, [pc, #76]	@ (8001568 <loopback_tcps+0x2d0>)
 800151c:	f7ff fe08 	bl	8001130 <UART_Printf>
		break;
 8001520:	e004      	b.n	800152c <loopback_tcps+0x294>
	default:
		break;
 8001522:	bf00      	nop
 8001524:	e002      	b.n	800152c <loopback_tcps+0x294>
		break;
 8001526:	bf00      	nop
 8001528:	e000      	b.n	800152c <loopback_tcps+0x294>
		break;
 800152a:	bf00      	nop
	}
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	0800d82c 	.word	0x0800d82c
 800153c:	0800d83c 	.word	0x0800d83c
 8001540:	0800d844 	.word	0x0800d844
 8001544:	200002c4 	.word	0x200002c4
 8001548:	0800d84c 	.word	0x0800d84c
 800154c:	0800d850 	.word	0x0800d850
 8001550:	200002c0 	.word	0x200002c0
 8001554:	0800ea54 	.word	0x0800ea54
 8001558:	0800d858 	.word	0x0800d858
 800155c:	0800d868 	.word	0x0800d868
 8001560:	0800d874 	.word	0x0800d874
 8001564:	0800d88c 	.word	0x0800d88c
 8001568:	0800d89c 	.word	0x0800d89c

0800156c <USART1_Send>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */


void USART1_Send (char chr){
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & USART_SR_TC));
 8001576:	bf00      	nop
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <USART1_Send+0x2c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f9      	beq.n	8001578 <USART1_Send+0xc>
	USART1->DR = chr;
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <USART1_Send+0x2c>)
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	6053      	str	r3, [r2, #4]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40011000 	.word	0x40011000

0800159c <USART1_Send_String>:

void USART1_Send_String (char* str){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
	while(str[i])
 80015a8:	e009      	b.n	80015be <USART1_Send_String+0x22>
	USART1_Send (str[i++]);
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	73fa      	strb	r2, [r7, #15]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ffd7 	bl	800156c <USART1_Send>
	while(str[i])
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ef      	bne.n	80015aa <USART1_Send_String+0xe>
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <WriteToEEPROM>:

void WriteToEEPROM (uint32_t address, wiz_NetInfo value)
{
 80015d4:	b084      	sub	sp, #16
 80015d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015e0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80015e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     HAL_FLASH_Unlock();
 80015e8:	f002 fc46 	bl	8003e78 <HAL_FLASH_Unlock>
     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80015ec:	4a3e      	ldr	r2, [pc, #248]	@ (80016e8 <WriteToEEPROM+0x114>)
 80015ee:	23b3      	movs	r3, #179	@ 0xb3
 80015f0:	60d3      	str	r3, [r2, #12]
     FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_3);
 80015f2:	2102      	movs	r1, #2
 80015f4:	2005      	movs	r0, #5
 80015f6:	f002 fdb1 	bl	800415c <FLASH_Erase_Sector>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address, value.ip[0]);
 80015fa:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2200      	movs	r2, #0
 8001602:	461c      	mov	r4, r3
 8001604:	4615      	mov	r5, r2
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800160c:	2002      	movs	r0, #2
 800160e:	f002 fbdf 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+4, value.ip[1]);
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	1d19      	adds	r1, r3, #4
 8001616:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2200      	movs	r2, #0
 800161e:	4698      	mov	r8, r3
 8001620:	4691      	mov	r9, r2
 8001622:	4642      	mov	r2, r8
 8001624:	464b      	mov	r3, r9
 8001626:	2002      	movs	r0, #2
 8001628:	f002 fbd2 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+8, value.ip[2]);
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	f103 0108 	add.w	r1, r3, #8
 8001632:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2200      	movs	r2, #0
 800163a:	469a      	mov	sl, r3
 800163c:	4693      	mov	fp, r2
 800163e:	4652      	mov	r2, sl
 8001640:	465b      	mov	r3, fp
 8001642:	2002      	movs	r0, #2
 8001644:	f002 fbc4 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+12, value.ip[3]);
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	f103 010c 	add.w	r1, r3, #12
 800164e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2200      	movs	r2, #0
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	627a      	str	r2, [r7, #36]	@ 0x24
 800165a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800165e:	2002      	movs	r0, #2
 8001660:	f002 fbb6 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+16, value.gw[0]);
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	f103 0110 	add.w	r1, r3, #16
 800166a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2200      	movs	r2, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	61fa      	str	r2, [r7, #28]
 8001676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800167a:	2002      	movs	r0, #2
 800167c:	f002 fba8 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+20, value.gw[1]);
 8001680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001682:	f103 0114 	add.w	r1, r3, #20
 8001686:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2200      	movs	r2, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	617a      	str	r2, [r7, #20]
 8001692:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001696:	2002      	movs	r0, #2
 8001698:	f002 fb9a 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+24, value.gw[2]);
 800169c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169e:	f103 0118 	add.w	r1, r3, #24
 80016a2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	60fa      	str	r2, [r7, #12]
 80016ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b2:	2002      	movs	r0, #2
 80016b4:	f002 fb8c 	bl	8003dd0 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+28, value.gw[3]);
 80016b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ba:	f103 011c 	add.w	r1, r3, #28
 80016be:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ce:	2002      	movs	r0, #2
 80016d0:	f002 fb7e 	bl	8003dd0 <HAL_FLASH_Program>

     HAL_FLASH_Lock();
 80016d4:	f002 fbf2 	bl	8003ebc <HAL_FLASH_Lock>
}
 80016d8:	bf00      	nop
 80016da:	3730      	adds	r7, #48	@ 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e2:	b004      	add	sp, #16
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <ReadSettingsFromEEPROM>:

void ReadSettingsFromEEPROM() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	gWIZNETINFO.ip[0] = ReadFromEEPROM(EEPROM_ADRESS_START);
 80016f0:	481c      	ldr	r0, [pc, #112]	@ (8001764 <ReadSettingsFromEEPROM+0x78>)
 80016f2:	f000 f849 	bl	8001788 <ReadFromEEPROM>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 80016fc:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1] = ReadFromEEPROM(EEPROM_ADRESS_START + 4);
 80016fe:	481b      	ldr	r0, [pc, #108]	@ (800176c <ReadSettingsFromEEPROM+0x80>)
 8001700:	f000 f842 	bl	8001788 <ReadFromEEPROM>
 8001704:	4603      	mov	r3, r0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 800170a:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[2] = ReadFromEEPROM(EEPROM_ADRESS_START + 8);
 800170c:	4818      	ldr	r0, [pc, #96]	@ (8001770 <ReadSettingsFromEEPROM+0x84>)
 800170e:	f000 f83b 	bl	8001788 <ReadFromEEPROM>
 8001712:	4603      	mov	r3, r0
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 8001718:	721a      	strb	r2, [r3, #8]
	gWIZNETINFO.ip[3] = ReadFromEEPROM(EEPROM_ADRESS_START + 12);
 800171a:	4816      	ldr	r0, [pc, #88]	@ (8001774 <ReadSettingsFromEEPROM+0x88>)
 800171c:	f000 f834 	bl	8001788 <ReadFromEEPROM>
 8001720:	4603      	mov	r3, r0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 8001726:	725a      	strb	r2, [r3, #9]

	gWIZNETINFO.gw[0] = ReadFromEEPROM(EEPROM_ADRESS_START + 16);
 8001728:	4813      	ldr	r0, [pc, #76]	@ (8001778 <ReadSettingsFromEEPROM+0x8c>)
 800172a:	f000 f82d 	bl	8001788 <ReadFromEEPROM>
 800172e:	4603      	mov	r3, r0
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 8001734:	739a      	strb	r2, [r3, #14]
	gWIZNETINFO.gw[1] = ReadFromEEPROM(EEPROM_ADRESS_START + 20);
 8001736:	4811      	ldr	r0, [pc, #68]	@ (800177c <ReadSettingsFromEEPROM+0x90>)
 8001738:	f000 f826 	bl	8001788 <ReadFromEEPROM>
 800173c:	4603      	mov	r3, r0
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 8001742:	73da      	strb	r2, [r3, #15]
	gWIZNETINFO.gw[2] = ReadFromEEPROM(EEPROM_ADRESS_START + 24);
 8001744:	480e      	ldr	r0, [pc, #56]	@ (8001780 <ReadSettingsFromEEPROM+0x94>)
 8001746:	f000 f81f 	bl	8001788 <ReadFromEEPROM>
 800174a:	4603      	mov	r3, r0
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 8001750:	741a      	strb	r2, [r3, #16]
	gWIZNETINFO.gw[3] = ReadFromEEPROM(EEPROM_ADRESS_START + 28);
 8001752:	480c      	ldr	r0, [pc, #48]	@ (8001784 <ReadSettingsFromEEPROM+0x98>)
 8001754:	f000 f818 	bl	8001788 <ReadFromEEPROM>
 8001758:	4603      	mov	r3, r0
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b02      	ldr	r3, [pc, #8]	@ (8001768 <ReadSettingsFromEEPROM+0x7c>)
 800175e:	745a      	strb	r2, [r3, #17]
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08030000 	.word	0x08030000
 8001768:	20000000 	.word	0x20000000
 800176c:	08030004 	.word	0x08030004
 8001770:	08030008 	.word	0x08030008
 8001774:	0803000c 	.word	0x0803000c
 8001778:	08030010 	.word	0x08030010
 800177c:	08030014 	.word	0x08030014
 8001780:	08030018 	.word	0x08030018
 8001784:	0803001c 	.word	0x0803001c

08001788 <ReadFromEEPROM>:

uint32_t ReadFromEEPROM (uint32_t address)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (*(__IO uint32_t *)address);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f002 f9a9 	bl	8003afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 f8fd 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ae:	f000 fa35 	bl	8001c1c <MX_GPIO_Init>
  MX_TIM10_Init();
 80017b2:	f000 f99d 	bl	8001af0 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 80017b6:	f00a f951 	bl	800ba5c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80017ba:	f000 f963 	bl	8001a84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017be:	f000 f9cd 	bl	8001b5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableIT_UPDATE(TIM10);
 80017c2:	4865      	ldr	r0, [pc, #404]	@ (8001958 <main+0x1b8>)
 80017c4:	f7fe ff85 	bl	80006d2 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM10);
 80017c8:	4863      	ldr	r0, [pc, #396]	@ (8001958 <main+0x1b8>)
 80017ca:	f7fe ff62 	bl	8000692 <LL_TIM_EnableCounter>
	LL_USART_Enable(USART1);
 80017ce:	4863      	ldr	r0, [pc, #396]	@ (800195c <main+0x1bc>)
 80017d0:	f7fe ff8f 	bl	80006f2 <LL_USART_Enable>
	LL_USART_EnableIT_RXNE(USART1);
 80017d4:	4861      	ldr	r0, [pc, #388]	@ (800195c <main+0x1bc>)
 80017d6:	f7fe ffb2 	bl	800073e <LL_USART_EnableIT_RXNE>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2108      	movs	r1, #8
 80017de:	4860      	ldr	r0, [pc, #384]	@ (8001960 <main+0x1c0>)
 80017e0:	f002 fe88 	bl	80044f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f002 f9cb 	bl	8003b80 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2108      	movs	r1, #8
 80017ee:	485c      	ldr	r0, [pc, #368]	@ (8001960 <main+0x1c0>)
 80017f0:	f002 fe80 	bl	80044f4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80017f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f8:	f002 f9c2 	bl	8003b80 <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80017fc:	4959      	ldr	r1, [pc, #356]	@ (8001964 <main+0x1c4>)
 80017fe:	485a      	ldr	r0, [pc, #360]	@ (8001968 <main+0x1c8>)
 8001800:	f001 fed2 	bl	80035a8 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001804:	4959      	ldr	r1, [pc, #356]	@ (800196c <main+0x1cc>)
 8001806:	485a      	ldr	r0, [pc, #360]	@ (8001970 <main+0x1d0>)
 8001808:	f001 fef4 	bl	80035f4 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800180c:	4959      	ldr	r1, [pc, #356]	@ (8001974 <main+0x1d4>)
 800180e:	485a      	ldr	r0, [pc, #360]	@ (8001978 <main+0x1d8>)
 8001810:	f001 ff1c 	bl	800364c <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8001814:	4a59      	ldr	r2, [pc, #356]	@ (800197c <main+0x1dc>)
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800181e:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001822:	f107 0208 	add.w	r2, r7, #8
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f001 ffc3 	bl	80037b8 <wizchip_init>
	ReadSettingsFromEEPROM();
 8001832:	f7ff ff5b 	bl	80016ec <ReadSettingsFromEEPROM>
	if (gWIZNETINFO.ip[0] > 254){
 8001836:	4b52      	ldr	r3, [pc, #328]	@ (8001980 <main+0x1e0>)
 8001838:	799b      	ldrb	r3, [r3, #6]
 800183a:	2bff      	cmp	r3, #255	@ 0xff
 800183c:	d129      	bne.n	8001892 <main+0xf2>
		gWIZNETINFO.ip[0] = 192;
 800183e:	4b50      	ldr	r3, [pc, #320]	@ (8001980 <main+0x1e0>)
 8001840:	22c0      	movs	r2, #192	@ 0xc0
 8001842:	719a      	strb	r2, [r3, #6]
		gWIZNETINFO.ip[1] = 168;
 8001844:	4b4e      	ldr	r3, [pc, #312]	@ (8001980 <main+0x1e0>)
 8001846:	22a8      	movs	r2, #168	@ 0xa8
 8001848:	71da      	strb	r2, [r3, #7]
		gWIZNETINFO.ip[2] = 0;
 800184a:	4b4d      	ldr	r3, [pc, #308]	@ (8001980 <main+0x1e0>)
 800184c:	2200      	movs	r2, #0
 800184e:	721a      	strb	r2, [r3, #8]
		gWIZNETINFO.ip[3] = 250;
 8001850:	4b4b      	ldr	r3, [pc, #300]	@ (8001980 <main+0x1e0>)
 8001852:	22fa      	movs	r2, #250	@ 0xfa
 8001854:	725a      	strb	r2, [r3, #9]

		gWIZNETINFO.gw[0] = 192;
 8001856:	4b4a      	ldr	r3, [pc, #296]	@ (8001980 <main+0x1e0>)
 8001858:	22c0      	movs	r2, #192	@ 0xc0
 800185a:	739a      	strb	r2, [r3, #14]
		gWIZNETINFO.gw[1] = 168;
 800185c:	4b48      	ldr	r3, [pc, #288]	@ (8001980 <main+0x1e0>)
 800185e:	22a8      	movs	r2, #168	@ 0xa8
 8001860:	73da      	strb	r2, [r3, #15]
		gWIZNETINFO.gw[2] = 0;
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <main+0x1e0>)
 8001864:	2200      	movs	r2, #0
 8001866:	741a      	strb	r2, [r3, #16]
		gWIZNETINFO.gw[3] = 1;
 8001868:	4b45      	ldr	r3, [pc, #276]	@ (8001980 <main+0x1e0>)
 800186a:	2201      	movs	r2, #1
 800186c:	745a      	strb	r2, [r3, #17]
		WriteToEEPROM(EEPROM_ADRESS_START, gWIZNETINFO);
 800186e:	4c44      	ldr	r4, [pc, #272]	@ (8001980 <main+0x1e0>)
 8001870:	466b      	mov	r3, sp
 8001872:	f104 020c 	add.w	r2, r4, #12
 8001876:	ca07      	ldmia	r2, {r0, r1, r2}
 8001878:	c303      	stmia	r3!, {r0, r1}
 800187a:	801a      	strh	r2, [r3, #0]
 800187c:	3302      	adds	r3, #2
 800187e:	0c12      	lsrs	r2, r2, #16
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001886:	483f      	ldr	r0, [pc, #252]	@ (8001984 <main+0x1e4>)
 8001888:	f7ff fea4 	bl	80015d4 <WriteToEEPROM>
		HAL_Delay(100);
 800188c:	2064      	movs	r0, #100	@ 0x64
 800188e:	f002 f977 	bl	8003b80 <HAL_Delay>

	}

	wizchip_setnetinfo(&gWIZNETINFO);
 8001892:	483b      	ldr	r0, [pc, #236]	@ (8001980 <main+0x1e0>)
 8001894:	f002 f81c 	bl	80038d0 <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8001898:	4939      	ldr	r1, [pc, #228]	@ (8001980 <main+0x1e0>)
 800189a:	2000      	movs	r0, #0
 800189c:	f001 ff02 	bl	80036a4 <ctlnetwork>
	HAL_Delay(1000);
 80018a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a4:	f002 f96c 	bl	8003b80 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 80018a8:	2300      	movs	r3, #0
 80018aa:	2250      	movs	r2, #80	@ 0x50
 80018ac:	2101      	movs	r1, #1
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 fa38 	bl	8001d24 <socket>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <main+0x1e8>)
 80018ba:	701a      	strb	r2, [r3, #0]
		/*if (stat != HTTP_SOCKET)
			UART_Printf("socket() failed, code = %d\r\n", stat);
		else
			UART_Printf("Socket created, connecting...\r\n");*/
		stat = listen(HTTP_SOCKET);
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 fbb3 	bl	8002028 <listen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <main+0x1e8>)
 80018c8:	701a      	strb	r2, [r3, #0]
		/*if (stat != SOCK_OK)
			UART_Printf("listen() failed, code = %d\r\n", stat);
		else
			UART_Printf("listen() OK\r\n");*/
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80018ca:	e022      	b.n	8001912 <main+0x172>
			HAL_Delay(5);
 80018cc:	2005      	movs	r0, #5
 80018ce:	f002 f957 	bl	8003b80 <HAL_Delay>
			if (flag_usb == 1) {
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <main+0x1ec>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d109      	bne.n	80018ee <main+0x14e>
				flag_usb = 0;
 80018da:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <main+0x1ec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
				strcpy(post_url,(char *) str_rx2);
 80018e0:	492b      	ldr	r1, [pc, #172]	@ (8001990 <main+0x1f0>)
 80018e2:	482c      	ldr	r0, [pc, #176]	@ (8001994 <main+0x1f4>)
 80018e4:	f00a feb6 	bl	800c654 <strcpy>
				Set_outputs(str_rx2);
 80018e8:	4829      	ldr	r0, [pc, #164]	@ (8001990 <main+0x1f0>)
 80018ea:	f7ff f84b 	bl	8000984 <Set_outputs>
			}
			if (flag_get_ip == 1){
 80018ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <main+0x1f8>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d104      	bne.n	8001900 <main+0x160>
				flag_get_ip = 0;
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <main+0x1f8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
				send_ip_to_uart();
 80018fc:	f7fe ff90 	bl	8000820 <send_ip_to_uart>
			}
			if (flag_set_ip == 1){
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <main+0x1fc>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <main+0x172>
				flag_set_ip = 0;
 8001908:	4b24      	ldr	r3, [pc, #144]	@ (800199c <main+0x1fc>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
				receive_ip_from_uart();
 800190e:	f7fe ffdb 	bl	80008c8 <receive_ip_from_uart>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 8001912:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001916:	f001 fb43 	bl	8002fa0 <WIZCHIP_READ>
 800191a:	4603      	mov	r3, r0
 800191c:	2b14      	cmp	r3, #20
 800191e:	d0d5      	beq.n	80018cc <main+0x12c>
		}
		/*UART_Printf("Input connection\r\n");
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
			UART_Printf("Error socket status\r\n");*/
		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	461a      	mov	r2, r3
 8001924:	2104      	movs	r1, #4
 8001926:	2000      	movs	r0, #0
 8001928:	f000 fdfa 	bl	8002520 <getsockopt>
		UART_Printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 800192c:	793b      	ldrb	r3, [r7, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	461a      	mov	r2, r3
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	4618      	mov	r0, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4603      	mov	r3, r0
 800193e:	4818      	ldr	r0, [pc, #96]	@ (80019a0 <main+0x200>)
 8001940:	f7ff fbf6 	bl	8001130 <UART_Printf>

		loopback_tcps(HTTP_SOCKET, gDATABUF, 80);
 8001944:	2250      	movs	r2, #80	@ 0x50
 8001946:	4917      	ldr	r1, [pc, #92]	@ (80019a4 <main+0x204>)
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fca5 	bl	8001298 <loopback_tcps>

		close(HTTP_SOCKET);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 fafc 	bl	8001f4c <close>
	while (1) {
 8001954:	e7a8      	b.n	80018a8 <main+0x108>
 8001956:	bf00      	nop
 8001958:	40014400 	.word	0x40014400
 800195c:	40011000 	.word	0x40011000
 8001960:	40020000 	.word	0x40020000
 8001964:	080011f9 	.word	0x080011f9
 8001968:	080011e1 	.word	0x080011e1
 800196c:	0800127b 	.word	0x0800127b
 8001970:	08001261 	.word	0x08001261
 8001974:	08001239 	.word	0x08001239
 8001978:	08001211 	.word	0x08001211
 800197c:	0800d8bc 	.word	0x0800d8bc
 8001980:	20000000 	.word	0x20000000
 8001984:	08030000 	.word	0x08030000
 8001988:	200022ec 	.word	0x200022ec
 800198c:	200002dd 	.word	0x200002dd
 8001990:	20000294 	.word	0x20000294
 8001994:	200002c4 	.word	0x200002c4
 8001998:	200002e6 	.word	0x200002e6
 800199c:	200002e7 	.word	0x200002e7
 80019a0:	0800d8a8 	.word	0x0800d8a8
 80019a4:	200002e8 	.word	0x200002e8

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b094      	sub	sp, #80	@ 0x50
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	2230      	movs	r2, #48	@ 0x30
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00a fdf6 	bl	800c5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <SystemClock_Config+0xd4>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	4a29      	ldr	r2, [pc, #164]	@ (8001a7c <SystemClock_Config+0xd4>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019da:	6413      	str	r3, [r2, #64]	@ 0x40
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <SystemClock_Config+0xd4>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <SystemClock_Config+0xd8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019f4:	4a22      	ldr	r2, [pc, #136]	@ (8001a80 <SystemClock_Config+0xd8>)
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <SystemClock_Config+0xd8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a12:	2302      	movs	r3, #2
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a1c:	2319      	movs	r3, #25
 8001a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a20:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a26:	2304      	movs	r3, #4
 8001a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fff4 	bl	8005a20 <HAL_RCC_OscConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a3e:	f000 f96b 	bl	8001d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a42:	230f      	movs	r3, #15
 8001a44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a46:	2302      	movs	r3, #2
 8001a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fa56 	bl	8005f10 <HAL_RCC_ClockConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a6a:	f000 f955 	bl	8001d18 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001a6e:	f004 fb35 	bl	80060dc <HAL_RCC_EnableCSS>
}
 8001a72:	bf00      	nop
 8001a74:	3750      	adds	r7, #80	@ 0x50
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <MX_SPI1_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab8:	2208      	movs	r2, #8
 8001aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad6:	f004 fc40 	bl	800635a <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f000 f91a 	bl	8001d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200022f0 	.word	0x200022f0
 8001aec:	40013000 	.word	0x40013000

08001af0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 8001b04:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001b08:	f7fe fe72 	bl	80007f0 <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001b0c:	f7fe fd38 	bl	8000580 <__NVIC_GetPriorityGrouping>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2200      	movs	r2, #0
 8001b14:	210f      	movs	r1, #15
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd88 	bl	800062c <NVIC_EncodePriority>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	2019      	movs	r0, #25
 8001b22:	f7fe fd59 	bl	80005d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b26:	2019      	movs	r0, #25
 8001b28:	f7fe fd38 	bl	800059c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8001b2c:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8001b30:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 8001b36:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001b3a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <MX_TIM10_Init+0x68>)
 8001b46:	f006 f82f 	bl	8007ba8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 8001b4a:	4803      	ldr	r0, [pc, #12]	@ (8001b58 <MX_TIM10_Init+0x68>)
 8001b4c:	f7fe fdb1 	bl	80006b2 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40014400 	.word	0x40014400

08001b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	@ 0x38
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001b86:	2010      	movs	r0, #16
 8001b88:	f7fe fe32 	bl	80007f0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7fe fe17 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001b92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4818      	ldr	r0, [pc, #96]	@ (8001c14 <MX_USART1_UART_Init+0xb8>)
 8001bb2:	f005 fe12 	bl	80077da <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bb6:	f7fe fce3 	bl	8000580 <__NVIC_GetPriorityGrouping>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fd33 	bl	800062c <NVIC_EncodePriority>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	2025      	movs	r0, #37	@ 0x25
 8001bcc:	f7fe fd04 	bl	80005d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001bd0:	2025      	movs	r0, #37	@ 0x25
 8001bd2:	f7fe fce3 	bl	800059c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001bd6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001bda:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001be8:	230c      	movs	r3, #12
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_USART1_UART_Init+0xbc>)
 8001bfc:	f006 fab6 	bl	800816c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <MX_USART1_UART_Init+0xbc>)
 8001c02:	f7fe fd86 	bl	8000712 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001c06:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <MX_USART1_UART_Init+0xbc>)
 8001c08:	f7fe fd73 	bl	80006f2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3738      	adds	r7, #56	@ 0x38
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40011000 	.word	0x40011000

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c32:	2004      	movs	r0, #4
 8001c34:	f7fe fdc4 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001c38:	2080      	movs	r0, #128	@ 0x80
 8001c3a:	f7fe fdc1 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7fe fdbe 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c44:	2002      	movs	r0, #2
 8001c46:	f7fe fdbb 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8001c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c4e:	4826      	ldr	r0, [pc, #152]	@ (8001ce8 <MX_GPIO_Init+0xcc>)
 8001c50:	f7fe fda6 	bl	80007a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin);
 8001c54:	f248 0118 	movw	r1, #32792	@ 0x8018
 8001c58:	4824      	ldr	r0, [pc, #144]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c5a:	f7fe fda1 	bl	80007a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 8001c5e:	f24f 71ff 	movw	r1, #63487	@ 0xf7ff
 8001c62:	4823      	ldr	r0, [pc, #140]	@ (8001cf0 <MX_GPIO_Init+0xd4>)
 8001c64:	f7fe fd9c 	bl	80007a0 <LL_GPIO_ResetOutputPin>
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8001c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c6c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	463b      	mov	r3, r7
 8001c80:	4619      	mov	r1, r3
 8001c82:	4819      	ldr	r0, [pc, #100]	@ (8001ce8 <MX_GPIO_Init+0xcc>)
 8001c84:	f005 fda9 	bl	80077da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_Pin;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4814      	ldr	r0, [pc, #80]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001c9a:	f005 fd9e 	bl	80077da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin;
 8001c9e:	f248 0318 	movw	r3, #32792	@ 0x8018
 8001ca2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <MX_GPIO_Init+0xd0>)
 8001cba:	f005 fd8e 	bl	80077da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 8001cbe:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8001cc2:	603b      	str	r3, [r7, #0]
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_GPIO_Init+0xd4>)
 8001cda:	f005 fd7e 	bl	80077da <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d06:	f001 ff1b 	bl	8003b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000

08001d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1c:	b672      	cpsid	i
}
 8001d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <Error_Handler+0x8>

08001d24 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	80bb      	strh	r3, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d902      	bls.n	8001d4e <socket+0x2a>
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d4c:	e0f0      	b.n	8001f30 <socket+0x20c>
	switch(protocol)
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <socket+0x3c>
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dd11      	ble.n	8001d7c <socket+0x58>
 8001d58:	3b02      	subs	r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d80e      	bhi.n	8001d7c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001d5e:	e011      	b.n	8001d84 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2204      	movs	r2, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001d6c:	f001 f9b2 	bl	80030d4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d105      	bne.n	8001d82 <socket+0x5e>
 8001d76:	f06f 0302 	mvn.w	r3, #2
 8001d7a:	e0d9      	b.n	8001f30 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001d7c:	f06f 0304 	mvn.w	r3, #4
 8001d80:	e0d6      	b.n	8001f30 <socket+0x20c>
	    break;
 8001d82:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <socket+0x70>
 8001d8e:	f06f 0305 	mvn.w	r3, #5
 8001d92:	e0cd      	b.n	8001f30 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d028      	beq.n	8001dec <socket+0xc8>
	{
   	switch(protocol)
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d002      	beq.n	8001da6 <socket+0x82>
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d008      	beq.n	8001db6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001da4:	e022      	b.n	8001dec <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11a      	bne.n	8001de6 <socket+0xc2>
 8001db0:	f06f 0305 	mvn.w	r3, #5
 8001db4:	e0bc      	b.n	8001f30 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db02      	blt.n	8001dce <socket+0xaa>
 8001dc8:	f06f 0305 	mvn.w	r3, #5
 8001dcc:	e0b0      	b.n	8001f30 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db04      	blt.n	8001dea <socket+0xc6>
 8001de0:	f06f 0305 	mvn.w	r3, #5
 8001de4:	e0a4      	b.n	8001f30 <socket+0x20c>
   	      break;
 8001de6:	bf00      	nop
 8001de8:	e000      	b.n	8001dec <socket+0xc8>
   	      break;
 8001dea:	bf00      	nop
   	}
   }
	close(sn);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f8ac 	bl	8001f4c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3301      	adds	r3, #1
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e02:	f023 030f 	bic.w	r3, r3, #15
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	f001 f910 	bl	8003038 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001e18:	88bb      	ldrh	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d110      	bne.n	8001e40 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001e1e:	4b46      	ldr	r3, [pc, #280]	@ (8001f38 <socket+0x214>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	b291      	uxth	r1, r2
 8001e26:	4a44      	ldr	r2, [pc, #272]	@ (8001f38 <socket+0x214>)
 8001e28:	8011      	strh	r1, [r2, #0]
 8001e2a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001e2c:	4b42      	ldr	r3, [pc, #264]	@ (8001f38 <socket+0x214>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d103      	bne.n	8001e40 <socket+0x11c>
 8001e38:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <socket+0x214>)
 8001e3a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001e3e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3301      	adds	r3, #1
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f001 f8ed 	bl	8003038 <WIZCHIP_WRITE>
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	3301      	adds	r3, #1
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f001 f8e0 	bl	8003038 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 f8d6 	bl	8003038 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001e8c:	bf00      	nop
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3301      	adds	r3, #1
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f880 	bl	8002fa0 <WIZCHIP_READ>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f3      	bne.n	8001e8e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <socket+0x218>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <socket+0x218>)
 8001ec2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <socket+0x218>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <socket+0x218>)
 8001ee0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <socket+0x21c>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <socket+0x21c>)
 8001efe:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <socket+0x220>)
 8001f04:	2100      	movs	r1, #0
 8001f06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <socket+0x224>)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001f12:	bf00      	nop
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	3301      	adds	r3, #1
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 f83d 	bl	8002fa0 <WIZCHIP_READ>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f3      	beq.n	8001f14 <socket+0x1f0>
   return (int8_t)sn;
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	200000fc 	.word	0x200000fc
 8001f3c:	20002348 	.word	0x20002348
 8001f40:	2000234a 	.word	0x2000234a
 8001f44:	2000234c 	.word	0x2000234c
 8001f48:	2000235c 	.word	0x2000235c

08001f4c <close>:

int8_t close(uint8_t sn)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d902      	bls.n	8001f62 <close+0x16>
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f60:	e055      	b.n	800200e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3301      	adds	r3, #1
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f6e:	2110      	movs	r1, #16
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 f861 	bl	8003038 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001f76:	bf00      	nop
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f80b 	bl	8002fa0 <WIZCHIP_READ>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f3      	bne.n	8001f78 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	3301      	adds	r3, #1
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001f9c:	211f      	movs	r1, #31
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 f84a 	bl	8003038 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <close+0xcc>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <close+0xcc>)
 8001fc0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <close+0xd0>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <close+0xd0>)
 8001fde:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <close+0xd4>)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <close+0xd8>)
 8001fee:	2100      	movs	r1, #0
 8001ff0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001ff2:	bf00      	nop
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002000:	4618      	mov	r0, r3
 8002002:	f000 ffcd 	bl	8002fa0 <WIZCHIP_READ>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f3      	bne.n	8001ff4 <close+0xa8>
	return SOCK_OK;
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20002348 	.word	0x20002348
 800201c:	2000234a 	.word	0x2000234a
 8002020:	2000234c 	.word	0x2000234c
 8002024:	2000235c 	.word	0x2000235c

08002028 <listen>:

int8_t listen(uint8_t sn)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b08      	cmp	r3, #8
 8002036:	d902      	bls.n	800203e <listen+0x16>
 8002038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800203c:	e049      	b.n	80020d2 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	3301      	adds	r3, #1
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 ffaa 	bl	8002fa0 <WIZCHIP_READ>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	2b01      	cmp	r3, #1
 8002054:	d002      	beq.n	800205c <listen+0x34>
 8002056:	f06f 0304 	mvn.w	r3, #4
 800205a:	e03a      	b.n	80020d2 <listen+0xaa>
	CHECK_SOCKINIT();
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	3301      	adds	r3, #1
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002068:	4618      	mov	r0, r3
 800206a:	f000 ff99 	bl	8002fa0 <WIZCHIP_READ>
 800206e:	4603      	mov	r3, r0
 8002070:	2b13      	cmp	r3, #19
 8002072:	d002      	beq.n	800207a <listen+0x52>
 8002074:	f06f 0302 	mvn.w	r3, #2
 8002078:	e02b      	b.n	80020d2 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3301      	adds	r3, #1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002086:	2102      	movs	r1, #2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 ffd5 	bl	8003038 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800208e:	bf00      	nop
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3301      	adds	r3, #1
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800209c:	4618      	mov	r0, r3
 800209e:	f000 ff7f 	bl	8002fa0 <WIZCHIP_READ>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f3      	bne.n	8002090 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020a8:	e006      	b.n	80020b8 <listen+0x90>
   {
         close(sn);
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff4d 	bl	8001f4c <close>
         return SOCKERR_SOCKCLOSED;
 80020b2:	f06f 0303 	mvn.w	r3, #3
 80020b6:	e00c      	b.n	80020d2 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	3301      	adds	r3, #1
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 ff6b 	bl	8002fa0 <WIZCHIP_READ>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b14      	cmp	r3, #20
 80020ce:	d1ec      	bne.n	80020aa <listen+0x82>
   }
   return SOCK_OK;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d902      	bls.n	80020f2 <disconnect+0x16>
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f0:	e062      	b.n	80021b8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	3301      	adds	r3, #1
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 ff50 	bl	8002fa0 <WIZCHIP_READ>
 8002100:	4603      	mov	r3, r0
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	2b01      	cmp	r3, #1
 8002108:	d002      	beq.n	8002110 <disconnect+0x34>
 800210a:	f06f 0304 	mvn.w	r3, #4
 800210e:	e053      	b.n	80021b8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3301      	adds	r3, #1
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800211c:	2108      	movs	r1, #8
 800211e:	4618      	mov	r0, r3
 8002120:	f000 ff8a 	bl	8003038 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002124:	bf00      	nop
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	3301      	adds	r3, #1
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002132:	4618      	mov	r0, r3
 8002134:	f000 ff34 	bl	8002fa0 <WIZCHIP_READ>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f3      	bne.n	8002126 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2201      	movs	r2, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	b21b      	sxth	r3, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	b21a      	sxth	r2, r3
 800214c:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <disconnect+0xe4>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4013      	ands	r3, r2
 8002154:	b21b      	sxth	r3, r3
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <disconnect+0xe4>)
 800215a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <disconnect+0xe8>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	fa42 f303 	asr.w	r3, r2, r3
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d016      	beq.n	800219e <disconnect+0xc2>
 8002170:	2300      	movs	r3, #0
 8002172:	e021      	b.n	80021b8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3301      	adds	r3, #1
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002180:	4618      	mov	r0, r3
 8002182:	f000 ff0d 	bl	8002fa0 <WIZCHIP_READ>
 8002186:	4603      	mov	r3, r0
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <disconnect+0xc2>
	   {
	      close(sn);
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff feda 	bl	8001f4c <close>
	      return SOCKERR_TIMEOUT;
 8002198:	f06f 030c 	mvn.w	r3, #12
 800219c:	e00c      	b.n	80021b8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	3301      	adds	r3, #1
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fef8 	bl	8002fa0 <WIZCHIP_READ>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1de      	bne.n	8002174 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000234a 	.word	0x2000234a
 80021c4:	20002348 	.word	0x20002348

080021c8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80021dc:	2300      	movs	r3, #0
 80021de:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d902      	bls.n	80021ec <send+0x24>
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ea:	e0dd      	b.n	80023a8 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3301      	adds	r3, #1
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fed3 	bl	8002fa0 <WIZCHIP_READ>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2b01      	cmp	r3, #1
 8002202:	d002      	beq.n	800220a <send+0x42>
 8002204:	f06f 0304 	mvn.w	r3, #4
 8002208:	e0ce      	b.n	80023a8 <send+0x1e0>
   CHECK_SOCKDATA();
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <send+0x4e>
 8002210:	f06f 030d 	mvn.w	r3, #13
 8002214:	e0c8      	b.n	80023a8 <send+0x1e0>
   tmp = getSn_SR(sn);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	3301      	adds	r3, #1
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002222:	4618      	mov	r0, r3
 8002224:	f000 febc 	bl	8002fa0 <WIZCHIP_READ>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b17      	cmp	r3, #23
 8002230:	d005      	beq.n	800223e <send+0x76>
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b1c      	cmp	r3, #28
 8002236:	d002      	beq.n	800223e <send+0x76>
 8002238:	f06f 0306 	mvn.w	r3, #6
 800223c:	e0b4      	b.n	80023a8 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 800223e:	4b5c      	ldr	r3, [pc, #368]	@ (80023b0 <send+0x1e8>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	fa42 f303 	asr.w	r3, r2, r3
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d039      	beq.n	80022c6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	3301      	adds	r3, #1
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fe9e 	bl	8002fa0 <WIZCHIP_READ>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d019      	beq.n	80022aa <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	3301      	adds	r3, #1
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002282:	2110      	movs	r1, #16
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fed7 	bl	8003038 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2201      	movs	r2, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	b21b      	sxth	r3, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	b21a      	sxth	r2, r3
 8002298:	4b45      	ldr	r3, [pc, #276]	@ (80023b0 <send+0x1e8>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b21b      	sxth	r3, r3
 800229e:	4013      	ands	r3, r2
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b42      	ldr	r3, [pc, #264]	@ (80023b0 <send+0x1e8>)
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	e00d      	b.n	80022c6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <send+0xfa>
      {
         close(sn);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fe48 	bl	8001f4c <close>
         return SOCKERR_TIMEOUT;
 80022bc:	f06f 030c 	mvn.w	r3, #12
 80022c0:	e072      	b.n	80023a8 <send+0x1e0>
      }
      else return SOCK_BUSY;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e070      	b.n	80023a8 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	3301      	adds	r3, #1
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fe64 	bl	8002fa0 <WIZCHIP_READ>
 80022d8:	4603      	mov	r3, r0
 80022da:	029b      	lsls	r3, r3, #10
 80022dc:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80022de:	88ba      	ldrh	r2, [r7, #4]
 80022e0:	89bb      	ldrh	r3, [r7, #12]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d901      	bls.n	80022ea <send+0x122>
 80022e6:	89bb      	ldrh	r3, [r7, #12]
 80022e8:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 ffb1 	bl	8003254 <getSn_TX_FSR>
 80022f2:	4603      	mov	r3, r0
 80022f4:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	3301      	adds	r3, #1
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fe4c 	bl	8002fa0 <WIZCHIP_READ>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b17      	cmp	r3, #23
 8002310:	d009      	beq.n	8002326 <send+0x15e>
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b1c      	cmp	r3, #28
 8002316:	d006      	beq.n	8002326 <send+0x15e>
      {
         close(sn);
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe16 	bl	8001f4c <close>
         return SOCKERR_SOCKSTATUS;
 8002320:	f06f 0306 	mvn.w	r3, #6
 8002324:	e040      	b.n	80023a8 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002326:	4b23      	ldr	r3, [pc, #140]	@ (80023b4 <send+0x1ec>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	fa42 f303 	asr.w	r3, r2, r3
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <send+0x17e>
 800233a:	88ba      	ldrh	r2, [r7, #4]
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	429a      	cmp	r2, r3
 8002340:	d901      	bls.n	8002346 <send+0x17e>
 8002342:	2300      	movs	r3, #0
 8002344:	e030      	b.n	80023a8 <send+0x1e0>
      if(len <= freesize) break;
 8002346:	88ba      	ldrh	r2, [r7, #4]
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d900      	bls.n	8002350 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 800234e:	e7cc      	b.n	80022ea <send+0x122>
      if(len <= freesize) break;
 8002350:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002352:	88ba      	ldrh	r2, [r7, #4]
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f80d 	bl	8003378 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	3301      	adds	r3, #1
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800236a:	2120      	movs	r1, #32
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fe63 	bl	8003038 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002372:	bf00      	nop
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	3301      	adds	r3, #1
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fe0d 	bl	8002fa0 <WIZCHIP_READ>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f3      	bne.n	8002374 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2201      	movs	r2, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	b21a      	sxth	r2, r3
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <send+0x1e8>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	b21b      	sxth	r3, r3
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <send+0x1e8>)
 80023a4:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80023a6:	88bb      	ldrh	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2000234a 	.word	0x2000234a
 80023b4:	20002348 	.word	0x20002348

080023b8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d902      	bls.n	80023dc <recv+0x24>
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023da:	e09b      	b.n	8002514 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	3301      	adds	r3, #1
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fddb 	bl	8002fa0 <WIZCHIP_READ>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d002      	beq.n	80023fa <recv+0x42>
 80023f4:	f06f 0304 	mvn.w	r3, #4
 80023f8:	e08c      	b.n	8002514 <recv+0x15c>
   CHECK_SOCKDATA();
 80023fa:	88bb      	ldrh	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <recv+0x4e>
 8002400:	f06f 030d 	mvn.w	r3, #13
 8002404:	e086      	b.n	8002514 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	3301      	adds	r3, #1
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fdc4 	bl	8002fa0 <WIZCHIP_READ>
 8002418:	4603      	mov	r3, r0
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800241e:	89ba      	ldrh	r2, [r7, #12]
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d201      	bcs.n	800242a <recv+0x72>
 8002426:	89bb      	ldrh	r3, [r7, #12]
 8002428:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f000 ff5a 	bl	80032e6 <getSn_RX_RSR>
 8002432:	4603      	mov	r3, r0
 8002434:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3301      	adds	r3, #1
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fdac 	bl	8002fa0 <WIZCHIP_READ>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b17      	cmp	r3, #23
 8002450:	d026      	beq.n	80024a0 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b1c      	cmp	r3, #28
 8002456:	d11c      	bne.n	8002492 <recv+0xda>
            {
               if(recvsize != 0) break;
 8002458:	89bb      	ldrh	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d133      	bne.n	80024c6 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fef7 	bl	8003254 <getSn_TX_FSR>
 8002466:	4603      	mov	r3, r0
 8002468:	461c      	mov	r4, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3301      	adds	r3, #1
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fd92 	bl	8002fa0 <WIZCHIP_READ>
 800247c:	4603      	mov	r3, r0
 800247e:	029b      	lsls	r3, r3, #10
 8002480:	429c      	cmp	r4, r3
 8002482:	d10d      	bne.n	80024a0 <recv+0xe8>
               {
                  close(sn);
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd60 	bl	8001f4c <close>
                  return SOCKERR_SOCKSTATUS;
 800248c:	f06f 0306 	mvn.w	r3, #6
 8002490:	e040      	b.n	8002514 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fd59 	bl	8001f4c <close>
               return SOCKERR_SOCKSTATUS;
 800249a:	f06f 0306 	mvn.w	r3, #6
 800249e:	e039      	b.n	8002514 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <recv+0x164>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	fa42 f303 	asr.w	r3, r2, r3
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <recv+0x106>
 80024b4:	89bb      	ldrh	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <recv+0x106>
 80024ba:	2300      	movs	r3, #0
 80024bc:	e02a      	b.n	8002514 <recv+0x15c>
         if(recvsize != 0) break;
 80024be:	89bb      	ldrh	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80024c4:	e7b1      	b.n	800242a <recv+0x72>
               if(recvsize != 0) break;
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <recv+0x114>
         if(recvsize != 0) break;
 80024ca:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80024cc:	89ba      	ldrh	r2, [r7, #12]
 80024ce:	88bb      	ldrh	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d201      	bcs.n	80024d8 <recv+0x120>
 80024d4:	89bb      	ldrh	r3, [r7, #12]
 80024d6:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80024d8:	88ba      	ldrh	r2, [r7, #4]
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 ffa4 	bl	800342c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	3301      	adds	r3, #1
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80024f0:	2140      	movs	r1, #64	@ 0x40
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fda0 	bl	8003038 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80024f8:	bf00      	nop
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	3301      	adds	r3, #1
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fd4a 	bl	8002fa0 <WIZCHIP_READ>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f3      	bne.n	80024fa <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002512:	88bb      	ldrh	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	20002348 	.word	0x20002348

08002520 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	603a      	str	r2, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	460b      	mov	r3, r1
 800252e:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d902      	bls.n	800253c <getsockopt+0x1c>
 8002536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800253a:	e0fd      	b.n	8002738 <getsockopt+0x218>
   switch(sotype)
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	f200 80f6 	bhi.w	8002730 <getsockopt+0x210>
 8002544:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <getsockopt+0x2c>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	08002581 	.word	0x08002581
 8002550:	0800259d 	.word	0x0800259d
 8002554:	080025b9 	.word	0x080025b9
 8002558:	080025d5 	.word	0x080025d5
 800255c:	0800260b 	.word	0x0800260b
 8002560:	08002623 	.word	0x08002623
 8002564:	08002731 	.word	0x08002731
 8002568:	08002659 	.word	0x08002659
 800256c:	08002693 	.word	0x08002693
 8002570:	080026a5 	.word	0x080026a5
 8002574:	080026b7 	.word	0x080026b7
 8002578:	080026d3 	.word	0x080026d3
 800257c:	0800270b 	.word	0x0800270b
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	3301      	adds	r3, #1
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fd09 	bl	8002fa0 <WIZCHIP_READ>
 800258e:	4603      	mov	r3, r0
 8002590:	f023 030f 	bic.w	r3, r3, #15
 8002594:	b2da      	uxtb	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	701a      	strb	r2, [r3, #0]
         break;
 800259a:	e0cc      	b.n	8002736 <getsockopt+0x216>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	3301      	adds	r3, #1
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fcf9 	bl	8002fa0 <WIZCHIP_READ>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
         break;
 80025b6:	e0be      	b.n	8002736 <getsockopt+0x216>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	3301      	adds	r3, #1
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fceb 	bl	8002fa0 <WIZCHIP_READ>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	701a      	strb	r2, [r3, #0]
         break;
 80025d2:	e0b0      	b.n	8002736 <getsockopt+0x216>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	3301      	adds	r3, #1
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fcdd 	bl	8002fa0 <WIZCHIP_READ>
 80025e6:	4603      	mov	r3, r0
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	b29c      	uxth	r4, r3
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3301      	adds	r3, #1
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fcd1 	bl	8002fa0 <WIZCHIP_READ>
 80025fe:	4603      	mov	r3, r0
 8002600:	4423      	add	r3, r4
 8002602:	b29a      	uxth	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	801a      	strh	r2, [r3, #0]
         break;
 8002608:	e095      	b.n	8002736 <getsockopt+0x216>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	3301      	adds	r3, #1
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002616:	2204      	movs	r2, #4
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fd5a 	bl	80030d4 <WIZCHIP_READ_BUF>
         break;
 8002620:	e089      	b.n	8002736 <getsockopt+0x216>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	3301      	adds	r3, #1
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fcb6 	bl	8002fa0 <WIZCHIP_READ>
 8002634:	4603      	mov	r3, r0
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b29c      	uxth	r4, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	3301      	adds	r3, #1
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fcaa 	bl	8002fa0 <WIZCHIP_READ>
 800264c:	4603      	mov	r3, r0
 800264e:	4423      	add	r3, r4
 8002650:	b29a      	uxth	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	801a      	strh	r2, [r3, #0]
         break;
 8002656:	e06e      	b.n	8002736 <getsockopt+0x216>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	3301      	adds	r3, #1
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fc9d 	bl	8002fa0 <WIZCHIP_READ>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2b01      	cmp	r3, #1
 800266e:	d002      	beq.n	8002676 <getsockopt+0x156>
 8002670:	f06f 0304 	mvn.w	r3, #4
 8002674:	e060      	b.n	8002738 <getsockopt+0x218>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3301      	adds	r3, #1
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	f503 533c 	add.w	r3, r3, #12032	@ 0x2f00
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fc8c 	bl	8002fa0 <WIZCHIP_READ>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	801a      	strh	r2, [r3, #0]
         break;
 8002690:	e051      	b.n	8002736 <getsockopt+0x216>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fddd 	bl	8003254 <getSn_TX_FSR>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	801a      	strh	r2, [r3, #0]
         break;
 80026a2:	e048      	b.n	8002736 <getsockopt+0x216>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fe1d 	bl	80032e6 <getSn_RX_RSR>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	801a      	strh	r2, [r3, #0]
         break;
 80026b4:	e03f      	b.n	8002736 <getsockopt+0x216>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3301      	adds	r3, #1
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fc6c 	bl	8002fa0 <WIZCHIP_READ>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	701a      	strb	r2, [r3, #0]
         break;
 80026d0:	e031      	b.n	8002736 <getsockopt+0x216>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	3301      	adds	r3, #1
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fc60 	bl	8002fa0 <WIZCHIP_READ>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <getsockopt+0x1dc>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fdfa 	bl	80032e6 <getSn_RX_RSR>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80026fa:	e01c      	b.n	8002736 <getsockopt+0x216>
            *(uint16_t*)arg = sock_remained_size[sn];
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <getsockopt+0x220>)
 8002700:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	801a      	strh	r2, [r3, #0]
         break;
 8002708:	e015      	b.n	8002736 <getsockopt+0x216>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	3301      	adds	r3, #1
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fc44 	bl	8002fa0 <WIZCHIP_READ>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d102      	bne.n	8002724 <getsockopt+0x204>
             return SOCKERR_SOCKMODE;
 800271e:	f06f 0304 	mvn.w	r3, #4
 8002722:	e009      	b.n	8002738 <getsockopt+0x218>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <getsockopt+0x224>)
 8002728:	5cd2      	ldrb	r2, [r2, r3]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	701a      	strb	r2, [r3, #0]
         break;
 800272e:	e002      	b.n	8002736 <getsockopt+0x216>
      default:
         return SOCKERR_SOCKOPT;
 8002730:	f06f 0301 	mvn.w	r3, #1
 8002734:	e000      	b.n	8002738 <getsockopt+0x218>
   }
   return SOCK_OK;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	2000234c 	.word	0x2000234c
 8002744:	2000235c 	.word	0x2000235c

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <HAL_MspInit+0x4c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_MspInit+0x4c>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800275c:	6453      	str	r3, [r2, #68]	@ 0x44
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_MspInit+0x4c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_MspInit+0x4c>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_SPI_MspInit+0x94>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d133      	bne.n	8002822 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <HAL_SPI_MspInit+0x98>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_SPI_MspInit+0x98>)
 80027c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_SPI_MspInit+0x98>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_SPI_MspInit+0x98>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <HAL_SPI_MspInit+0x98>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_SPI_MspInit+0x98>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027f2:	23e0      	movs	r3, #224	@ 0xe0
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002802:	2305      	movs	r3, #5
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4809      	ldr	r0, [pc, #36]	@ (8002834 <HAL_SPI_MspInit+0x9c>)
 800280e:	f001 fced 	bl	80041ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2023      	movs	r0, #35	@ 0x23
 8002818:	f001 fa8e 	bl	8003d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800281c:	2023      	movs	r0, #35	@ 0x23
 800281e:	f001 faa7 	bl	8003d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	@ 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40013000 	.word	0x40013000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000

08002838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	@ 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	4b2e      	ldr	r3, [pc, #184]	@ (8002908 <HAL_InitTick+0xd0>)
 800284e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002850:	4a2d      	ldr	r2, [pc, #180]	@ (8002908 <HAL_InitTick+0xd0>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6453      	str	r3, [r2, #68]	@ 0x44
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_InitTick+0xd0>)
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002864:	f107 020c 	add.w	r2, r7, #12
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fd26 	bl	80062c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002874:	f003 fd10 	bl	8006298 <HAL_RCC_GetPCLK2Freq>
 8002878:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	4a23      	ldr	r2, [pc, #140]	@ (800290c <HAL_InitTick+0xd4>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9b      	lsrs	r3, r3, #18
 8002884:	3b01      	subs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002888:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <HAL_InitTick+0xd8>)
 800288a:	4a22      	ldr	r2, [pc, #136]	@ (8002914 <HAL_InitTick+0xdc>)
 800288c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <HAL_InitTick+0xd8>)
 8002890:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002894:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002896:	4a1e      	ldr	r2, [pc, #120]	@ (8002910 <HAL_InitTick+0xd8>)
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800289c:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <HAL_InitTick+0xd8>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_InitTick+0xd8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_InitTick+0xd8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028ae:	4818      	ldr	r0, [pc, #96]	@ (8002910 <HAL_InitTick+0xd8>)
 80028b0:	f004 fc0e 	bl	80070d0 <HAL_TIM_Base_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80028ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11b      	bne.n	80028fa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028c2:	4813      	ldr	r0, [pc, #76]	@ (8002910 <HAL_InitTick+0xd8>)
 80028c4:	f004 fc5e 	bl	8007184 <HAL_TIM_Base_Start_IT>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80028ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d111      	bne.n	80028fa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028d6:	2019      	movs	r0, #25
 80028d8:	f001 fa4a 	bl	8003d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	d808      	bhi.n	80028f4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80028e2:	2200      	movs	r2, #0
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	2019      	movs	r0, #25
 80028e8:	f001 fa26 	bl	8003d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <HAL_InitTick+0xe0>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e002      	b.n	80028fa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3730      	adds	r7, #48	@ 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	431bde83 	.word	0x431bde83
 8002910:	20002364 	.word	0x20002364
 8002914:	40010000 	.word	0x40010000
 8002918:	20000130 	.word	0x20000130

0800291c <LL_TIM_ClearFlag_UPDATE>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f06f 0201 	mvn.w	r2, #1
 800292a:	611a      	str	r2, [r3, #16]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4013      	ands	r3, r2
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43d9      	mvns	r1, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	400b      	ands	r3, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002994:	f003 fcc6 	bl	8006324 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <NMI_Handler+0x8>

0800299c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <MemManage_Handler+0x4>

080029ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <UsageFault_Handler+0x4>

080029bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 80029f8:	4809      	ldr	r0, [pc, #36]	@ (8002a20 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80029fa:	f7ff ff9d 	bl	8002938 <LL_TIM_IsActiveFlag_UPDATE>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <TIM1_UP_TIM10_IRQHandler+0x20>
			LL_TIM_ClearFlag_UPDATE(TIM10);
 8002a04:	4806      	ldr	r0, [pc, #24]	@ (8002a20 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002a06:	f7ff ff89 	bl	800291c <LL_TIM_ClearFlag_UPDATE>
			LL_GPIO_TogglePin(GPIOC, LED_Pin);
 8002a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8002a10:	f7ff ffa5 	bl	800295e <LL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a14:	4804      	ldr	r0, [pc, #16]	@ (8002a28 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8002a16:	f004 fc17 	bl	8007248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	20002364 	.word	0x20002364

08002a2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a30:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <SPI1_IRQHandler+0x10>)
 8002a32:	f004 f90b 	bl	8006c4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200022f0 	.word	0x200022f0

08002a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	char letter;
	static uint8_t i = 0;
	letter = USART1->DR;
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <USART1_IRQHandler+0x3c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	71fb      	strb	r3, [r7, #7]
	if (letter != '\r') {
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	2b0d      	cmp	r3, #13
 8002a50:	d01a      	beq.n	8002a88 <USART1_IRQHandler+0x48>
		str_rx2[i] = letter;
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <USART1_IRQHandler+0x40>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <USART1_IRQHandler+0x44>)
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	5453      	strb	r3, [r2, r1]
		i++;
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <USART1_IRQHandler+0x40>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <USART1_IRQHandler+0x40>)
 8002a68:	701a      	strb	r2, [r3, #0]
		if (i == 24)
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <USART1_IRQHandler+0x40>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b18      	cmp	r3, #24
 8002a70:	f040 8234 	bne.w	8002edc <USART1_IRQHandler+0x49c>
			i = 0;
 8002a74:	4b02      	ldr	r3, [pc, #8]	@ (8002a80 <USART1_IRQHandler+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002a7a:	e22f      	b.n	8002edc <USART1_IRQHandler+0x49c>
 8002a7c:	40011000 	.word	0x40011000
 8002a80:	200023ac 	.word	0x200023ac
 8002a84:	20000294 	.word	0x20000294
		str_rx2[i] = '\r';
 8002a88:	4b98      	ldr	r3, [pc, #608]	@ (8002cec <USART1_IRQHandler+0x2ac>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b98      	ldr	r3, [pc, #608]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002a90:	210d      	movs	r1, #13
 8002a92:	5499      	strb	r1, [r3, r2]
		i = 0;
 8002a94:	4b95      	ldr	r3, [pc, #596]	@ (8002cec <USART1_IRQHandler+0x2ac>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
		flag_ok = 1;
 8002a9a:	4b96      	ldr	r3, [pc, #600]	@ (8002cf4 <USART1_IRQHandler+0x2b4>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='S')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 8002aa0:	4b93      	ldr	r3, [pc, #588]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b53      	cmp	r3, #83	@ 0x53
 8002aa6:	d10a      	bne.n	8002abe <USART1_IRQHandler+0x7e>
 8002aa8:	4b91      	ldr	r3, [pc, #580]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b45      	cmp	r3, #69	@ 0x45
 8002aae:	d106      	bne.n	8002abe <USART1_IRQHandler+0x7e>
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	2b54      	cmp	r3, #84	@ 0x54
 8002ab6:	d102      	bne.n	8002abe <USART1_IRQHandler+0x7e>
				flag_set_ip = 1;
 8002ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf8 <USART1_IRQHandler+0x2b8>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='G')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 8002abe:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b47      	cmp	r3, #71	@ 0x47
 8002ac4:	d10a      	bne.n	8002adc <USART1_IRQHandler+0x9c>
 8002ac6:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	2b45      	cmp	r3, #69	@ 0x45
 8002acc:	d106      	bne.n	8002adc <USART1_IRQHandler+0x9c>
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ad0:	789b      	ldrb	r3, [r3, #2]
 8002ad2:	2b54      	cmp	r3, #84	@ 0x54
 8002ad4:	d102      	bne.n	8002adc <USART1_IRQHandler+0x9c>
			flag_get_ip = 1;
 8002ad6:	4b89      	ldr	r3, [pc, #548]	@ (8002cfc <USART1_IRQHandler+0x2bc>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='A')&&(str_rx2[1]=='M')&&(str_rx2[2]=='1')){
 8002adc:	4b84      	ldr	r3, [pc, #528]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b41      	cmp	r3, #65	@ 0x41
 8002ae2:	d10a      	bne.n	8002afa <USART1_IRQHandler+0xba>
 8002ae4:	4b82      	ldr	r3, [pc, #520]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	2b4d      	cmp	r3, #77	@ 0x4d
 8002aea:	d106      	bne.n	8002afa <USART1_IRQHandler+0xba>
 8002aec:	4b80      	ldr	r3, [pc, #512]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002aee:	789b      	ldrb	r3, [r3, #2]
 8002af0:	2b31      	cmp	r3, #49	@ 0x31
 8002af2:	d102      	bne.n	8002afa <USART1_IRQHandler+0xba>
			flag_usb = 1;
 8002af4:	4b82      	ldr	r3, [pc, #520]	@ (8002d00 <USART1_IRQHandler+0x2c0>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'I') && (str_rx2[1] == 'P')) {
 8002afa:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b49      	cmp	r3, #73	@ 0x49
 8002b00:	f040 80e9 	bne.w	8002cd6 <USART1_IRQHandler+0x296>
 8002b04:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	2b50      	cmp	r3, #80	@ 0x50
 8002b0a:	f040 80e4 	bne.w	8002cd6 <USART1_IRQHandler+0x296>
			if (str_rx2[2] == '1') {
 8002b0e:	4b78      	ldr	r3, [pc, #480]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b10:	789b      	ldrb	r3, [r3, #2]
 8002b12:	2b31      	cmp	r3, #49	@ 0x31
 8002b14:	d134      	bne.n	8002b80 <USART1_IRQHandler+0x140>
				if (str_rx2[3] != ';') {
 8002b16:	4b76      	ldr	r3, [pc, #472]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b18:	78db      	ldrb	r3, [r3, #3]
 8002b1a:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b1c:	d00f      	beq.n	8002b3e <USART1_IRQHandler+0xfe>
					ip1 = (str_rx2[3] - 48) * 100;
 8002b1e:	4b74      	ldr	r3, [pc, #464]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b20:	78db      	ldrb	r3, [r3, #3]
 8002b22:	461a      	mov	r2, r3
 8002b24:	0092      	lsls	r2, r2, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	0091      	lsls	r1, r2, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3340      	adds	r3, #64	@ 0x40
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b72      	ldr	r3, [pc, #456]	@ (8002d04 <USART1_IRQHandler+0x2c4>)
 8002b3c:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b40:	791b      	ldrb	r3, [r3, #4]
 8002b42:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b44:	d00e      	beq.n	8002b64 <USART1_IRQHandler+0x124>
					ip1 = ip1 + (str_rx2[4] - 48) * 10;
 8002b46:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	4b6b      	ldr	r3, [pc, #428]	@ (8002d04 <USART1_IRQHandler+0x2c4>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	3320      	adds	r3, #32
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b68      	ldr	r3, [pc, #416]	@ (8002d04 <USART1_IRQHandler+0x2c4>)
 8002b62:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002b64:	4b62      	ldr	r3, [pc, #392]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b66:	795b      	ldrb	r3, [r3, #5]
 8002b68:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b6a:	d009      	beq.n	8002b80 <USART1_IRQHandler+0x140>
					ip1 = ip1 + (str_rx2[5] - 48);
 8002b6c:	4b60      	ldr	r3, [pc, #384]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b6e:	795a      	ldrb	r2, [r3, #5]
 8002b70:	4b64      	ldr	r3, [pc, #400]	@ (8002d04 <USART1_IRQHandler+0x2c4>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3b30      	subs	r3, #48	@ 0x30
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <USART1_IRQHandler+0x2c4>)
 8002b7e:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 8002b80:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b82:	789b      	ldrb	r3, [r3, #2]
 8002b84:	2b32      	cmp	r3, #50	@ 0x32
 8002b86:	d134      	bne.n	8002bf2 <USART1_IRQHandler+0x1b2>
				if (str_rx2[3] != ';') {
 8002b88:	4b59      	ldr	r3, [pc, #356]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b8a:	78db      	ldrb	r3, [r3, #3]
 8002b8c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b8e:	d00f      	beq.n	8002bb0 <USART1_IRQHandler+0x170>
					ip2 = (str_rx2[3] - 48) * 100;
 8002b90:	4b57      	ldr	r3, [pc, #348]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	461a      	mov	r2, r3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	0091      	lsls	r1, r2, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3340      	adds	r3, #64	@ 0x40
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b56      	ldr	r3, [pc, #344]	@ (8002d08 <USART1_IRQHandler+0x2c8>)
 8002bae:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002bb6:	d00e      	beq.n	8002bd6 <USART1_IRQHandler+0x196>
					ip2 = ip2 + (str_rx2[4] - 48) * 10;
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <USART1_IRQHandler+0x2c8>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3320      	adds	r3, #32
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d08 <USART1_IRQHandler+0x2c8>)
 8002bd4:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002bd6:	4b46      	ldr	r3, [pc, #280]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002bd8:	795b      	ldrb	r3, [r3, #5]
 8002bda:	2b3b      	cmp	r3, #59	@ 0x3b
 8002bdc:	d009      	beq.n	8002bf2 <USART1_IRQHandler+0x1b2>
					ip2 = ip2 + (str_rx2[5] - 48);
 8002bde:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002be0:	795a      	ldrb	r2, [r3, #5]
 8002be2:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <USART1_IRQHandler+0x2c8>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b30      	subs	r3, #48	@ 0x30
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b46      	ldr	r3, [pc, #280]	@ (8002d08 <USART1_IRQHandler+0x2c8>)
 8002bf0:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002bf4:	789b      	ldrb	r3, [r3, #2]
 8002bf6:	2b33      	cmp	r3, #51	@ 0x33
 8002bf8:	d134      	bne.n	8002c64 <USART1_IRQHandler+0x224>
				if (str_rx2[3] != ';') {
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002bfc:	78db      	ldrb	r3, [r3, #3]
 8002bfe:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c00:	d00f      	beq.n	8002c22 <USART1_IRQHandler+0x1e2>
					ip3 = (str_rx2[3] - 48) * 100;
 8002c02:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c04:	78db      	ldrb	r3, [r3, #3]
 8002c06:	461a      	mov	r2, r3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	0091      	lsls	r1, r2, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	460b      	mov	r3, r1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3340      	adds	r3, #64	@ 0x40
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <USART1_IRQHandler+0x2cc>)
 8002c20:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002c22:	4b33      	ldr	r3, [pc, #204]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c24:	791b      	ldrb	r3, [r3, #4]
 8002c26:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c28:	d00e      	beq.n	8002c48 <USART1_IRQHandler+0x208>
					ip3 = ip3 + (str_rx2[4] - 48) * 10;
 8002c2a:	4b31      	ldr	r3, [pc, #196]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c2c:	791b      	ldrb	r3, [r3, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <USART1_IRQHandler+0x2cc>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3320      	adds	r3, #32
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <USART1_IRQHandler+0x2cc>)
 8002c46:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002c48:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c4a:	795b      	ldrb	r3, [r3, #5]
 8002c4c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c4e:	d009      	beq.n	8002c64 <USART1_IRQHandler+0x224>
					ip3 = ip3 + (str_rx2[5] - 48);
 8002c50:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c52:	795a      	ldrb	r2, [r3, #5]
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <USART1_IRQHandler+0x2cc>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3b30      	subs	r3, #48	@ 0x30
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <USART1_IRQHandler+0x2cc>)
 8002c62:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 8002c64:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c66:	789b      	ldrb	r3, [r3, #2]
 8002c68:	2b34      	cmp	r3, #52	@ 0x34
 8002c6a:	d134      	bne.n	8002cd6 <USART1_IRQHandler+0x296>
				if (str_rx2[3] != ';') {
 8002c6c:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c6e:	78db      	ldrb	r3, [r3, #3]
 8002c70:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c72:	d00f      	beq.n	8002c94 <USART1_IRQHandler+0x254>
					ip4 = (str_rx2[3] - 48) * 100;
 8002c74:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c76:	78db      	ldrb	r3, [r3, #3]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	0091      	lsls	r1, r2, #2
 8002c82:	461a      	mov	r2, r3
 8002c84:	460b      	mov	r3, r1
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3340      	adds	r3, #64	@ 0x40
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b1f      	ldr	r3, [pc, #124]	@ (8002d10 <USART1_IRQHandler+0x2d0>)
 8002c92:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002c94:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c96:	791b      	ldrb	r3, [r3, #4]
 8002c98:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c9a:	d00e      	beq.n	8002cba <USART1_IRQHandler+0x27a>
					ip4 = ip4 + (str_rx2[4] - 48) * 10;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <USART1_IRQHandler+0x2d0>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <USART1_IRQHandler+0x2d0>)
 8002cb8:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002cbc:	795b      	ldrb	r3, [r3, #5]
 8002cbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8002cc0:	d009      	beq.n	8002cd6 <USART1_IRQHandler+0x296>
					ip4 = ip4 + (str_rx2[5] - 48);
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002cc4:	795a      	ldrb	r2, [r3, #5]
 8002cc6:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <USART1_IRQHandler+0x2d0>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	3b30      	subs	r3, #48	@ 0x30
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <USART1_IRQHandler+0x2d0>)
 8002cd4:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'G') && (str_rx2[1] == 'W')) {
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b47      	cmp	r3, #71	@ 0x47
 8002cdc:	f040 80fe 	bne.w	8002edc <USART1_IRQHandler+0x49c>
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <USART1_IRQHandler+0x2b0>)
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b57      	cmp	r3, #87	@ 0x57
 8002ce6:	f040 80f9 	bne.w	8002edc <USART1_IRQHandler+0x49c>
 8002cea:	e013      	b.n	8002d14 <USART1_IRQHandler+0x2d4>
 8002cec:	200023ac 	.word	0x200023ac
 8002cf0:	20000294 	.word	0x20000294
 8002cf4:	200002ad 	.word	0x200002ad
 8002cf8:	200002e7 	.word	0x200002e7
 8002cfc:	200002e6 	.word	0x200002e6
 8002d00:	200002dd 	.word	0x200002dd
 8002d04:	200002de 	.word	0x200002de
 8002d08:	200002df 	.word	0x200002df
 8002d0c:	200002e0 	.word	0x200002e0
 8002d10:	200002e1 	.word	0x200002e1
			if (str_rx2[2] == '1') {
 8002d14:	4b74      	ldr	r3, [pc, #464]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	2b31      	cmp	r3, #49	@ 0x31
 8002d1a:	d134      	bne.n	8002d86 <USART1_IRQHandler+0x346>
				if (str_rx2[3] != ';') {
 8002d1c:	4b72      	ldr	r3, [pc, #456]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d1e:	78db      	ldrb	r3, [r3, #3]
 8002d20:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d22:	d00f      	beq.n	8002d44 <USART1_IRQHandler+0x304>
					gw1 = (str_rx2[3] - 48) * 100;
 8002d24:	4b70      	ldr	r3, [pc, #448]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d26:	78db      	ldrb	r3, [r3, #3]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	461a      	mov	r2, r3
 8002d30:	0091      	lsls	r1, r2, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	460b      	mov	r3, r1
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3340      	adds	r3, #64	@ 0x40
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <USART1_IRQHandler+0x4ac>)
 8002d42:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002d44:	4b68      	ldr	r3, [pc, #416]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d4a:	d00e      	beq.n	8002d6a <USART1_IRQHandler+0x32a>
					gw1 = gw1 + (str_rx2[4] - 48) * 10;
 8002d4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b64      	ldr	r3, [pc, #400]	@ (8002eec <USART1_IRQHandler+0x4ac>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3320      	adds	r3, #32
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <USART1_IRQHandler+0x4ac>)
 8002d68:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d6c:	795b      	ldrb	r3, [r3, #5]
 8002d6e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d70:	d009      	beq.n	8002d86 <USART1_IRQHandler+0x346>
					gw1 = gw1 + (str_rx2[5] - 48);
 8002d72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d74:	795a      	ldrb	r2, [r3, #5]
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <USART1_IRQHandler+0x4ac>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	3b30      	subs	r3, #48	@ 0x30
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b5a      	ldr	r3, [pc, #360]	@ (8002eec <USART1_IRQHandler+0x4ac>)
 8002d84:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 8002d86:	4b58      	ldr	r3, [pc, #352]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d88:	789b      	ldrb	r3, [r3, #2]
 8002d8a:	2b32      	cmp	r3, #50	@ 0x32
 8002d8c:	d134      	bne.n	8002df8 <USART1_IRQHandler+0x3b8>
				if (str_rx2[3] != ';') {
 8002d8e:	4b56      	ldr	r3, [pc, #344]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d90:	78db      	ldrb	r3, [r3, #3]
 8002d92:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d94:	d00f      	beq.n	8002db6 <USART1_IRQHandler+0x376>
					gw2 = (str_rx2[3] - 48) * 100;
 8002d96:	4b54      	ldr	r3, [pc, #336]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002d98:	78db      	ldrb	r3, [r3, #3]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	0091      	lsls	r1, r2, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	460b      	mov	r3, r1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	3340      	adds	r3, #64	@ 0x40
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef0 <USART1_IRQHandler+0x4b0>)
 8002db4:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002db6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	2b3b      	cmp	r3, #59	@ 0x3b
 8002dbc:	d00e      	beq.n	8002ddc <USART1_IRQHandler+0x39c>
					gw2 = gw2 + (str_rx2[4] - 48) * 10;
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002dc0:	791b      	ldrb	r3, [r3, #4]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b48      	ldr	r3, [pc, #288]	@ (8002ef0 <USART1_IRQHandler+0x4b0>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3320      	adds	r3, #32
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b45      	ldr	r3, [pc, #276]	@ (8002ef0 <USART1_IRQHandler+0x4b0>)
 8002dda:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002ddc:	4b42      	ldr	r3, [pc, #264]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002dde:	795b      	ldrb	r3, [r3, #5]
 8002de0:	2b3b      	cmp	r3, #59	@ 0x3b
 8002de2:	d009      	beq.n	8002df8 <USART1_IRQHandler+0x3b8>
					gw2 = gw2 + (str_rx2[5] - 48);
 8002de4:	4b40      	ldr	r3, [pc, #256]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002de6:	795a      	ldrb	r2, [r3, #5]
 8002de8:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <USART1_IRQHandler+0x4b0>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b30      	subs	r3, #48	@ 0x30
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef0 <USART1_IRQHandler+0x4b0>)
 8002df6:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 8002df8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	2b33      	cmp	r3, #51	@ 0x33
 8002dfe:	d134      	bne.n	8002e6a <USART1_IRQHandler+0x42a>
				if (str_rx2[3] != ';') {
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e02:	78db      	ldrb	r3, [r3, #3]
 8002e04:	2b3b      	cmp	r3, #59	@ 0x3b
 8002e06:	d00f      	beq.n	8002e28 <USART1_IRQHandler+0x3e8>
					gw3 = (str_rx2[3] - 48) * 100;
 8002e08:	4b37      	ldr	r3, [pc, #220]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e0a:	78db      	ldrb	r3, [r3, #3]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	461a      	mov	r2, r3
 8002e14:	0091      	lsls	r1, r2, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3340      	adds	r3, #64	@ 0x40
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b33      	ldr	r3, [pc, #204]	@ (8002ef4 <USART1_IRQHandler+0x4b4>)
 8002e26:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002e28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e2a:	791b      	ldrb	r3, [r3, #4]
 8002e2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002e2e:	d00e      	beq.n	8002e4e <USART1_IRQHandler+0x40e>
					gw3 = gw3 + (str_rx2[4] - 48) * 10;
 8002e30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e32:	791b      	ldrb	r3, [r3, #4]
 8002e34:	461a      	mov	r2, r3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <USART1_IRQHandler+0x4b4>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3320      	adds	r3, #32
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <USART1_IRQHandler+0x4b4>)
 8002e4c:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002e4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e50:	795b      	ldrb	r3, [r3, #5]
 8002e52:	2b3b      	cmp	r3, #59	@ 0x3b
 8002e54:	d009      	beq.n	8002e6a <USART1_IRQHandler+0x42a>
					gw3 = gw3 + (str_rx2[5] - 48);
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e58:	795a      	ldrb	r2, [r3, #5]
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <USART1_IRQHandler+0x4b4>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3b30      	subs	r3, #48	@ 0x30
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <USART1_IRQHandler+0x4b4>)
 8002e68:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e6c:	789b      	ldrb	r3, [r3, #2]
 8002e6e:	2b34      	cmp	r3, #52	@ 0x34
 8002e70:	d134      	bne.n	8002edc <USART1_IRQHandler+0x49c>
				if (str_rx2[3] != ';') {
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e74:	78db      	ldrb	r3, [r3, #3]
 8002e76:	2b3b      	cmp	r3, #59	@ 0x3b
 8002e78:	d00f      	beq.n	8002e9a <USART1_IRQHandler+0x45a>
					gw4 = (str_rx2[3] - 48) * 100;
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	0091      	lsls	r1, r2, #2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3340      	adds	r3, #64	@ 0x40
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <USART1_IRQHandler+0x4b8>)
 8002e98:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002e9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002ea0:	d00e      	beq.n	8002ec0 <USART1_IRQHandler+0x480>
					gw4 = gw4 + (str_rx2[4] - 48) * 10;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002ea4:	791b      	ldrb	r3, [r3, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <USART1_IRQHandler+0x4b8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3320      	adds	r3, #32
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <USART1_IRQHandler+0x4b8>)
 8002ebe:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002ec0:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002ec2:	795b      	ldrb	r3, [r3, #5]
 8002ec4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002ec6:	d009      	beq.n	8002edc <USART1_IRQHandler+0x49c>
					gw4 = gw4 + (str_rx2[5] - 48);
 8002ec8:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <USART1_IRQHandler+0x4a8>)
 8002eca:	795a      	ldrb	r2, [r3, #5]
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <USART1_IRQHandler+0x4b8>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3b30      	subs	r3, #48	@ 0x30
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <USART1_IRQHandler+0x4b8>)
 8002eda:	701a      	strb	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	20000294 	.word	0x20000294
 8002eec:	200002e2 	.word	0x200002e2
 8002ef0:	200002e3 	.word	0x200002e3
 8002ef4:	200002e4 	.word	0x200002e4
 8002ef8:	200002e5 	.word	0x200002e5

08002efc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <OTG_FS_IRQHandler+0x10>)
 8002f02:	f001 fc60 	bl	80047c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200030c0 	.word	0x200030c0

08002f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f18:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <_sbrk+0x5c>)
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <_sbrk+0x60>)
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f24:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <_sbrk+0x64>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <_sbrk+0x68>)
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f32:	4b10      	ldr	r3, [pc, #64]	@ (8002f74 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f40:	f009 fb5c 	bl	800c5fc <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	220c      	movs	r2, #12
 8002f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f4e:	e009      	b.n	8002f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f50:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f56:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a05      	ldr	r2, [pc, #20]	@ (8002f74 <_sbrk+0x64>)
 8002f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20010000 	.word	0x20010000
 8002f70:	00000400 	.word	0x00000400
 8002f74:	200023b0 	.word	0x200023b0
 8002f78:	20003938 	.word	0x20003938

08002f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <SystemInit+0x20>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <SystemInit+0x20>)
 8002f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002fa8:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002fae:	4b21      	ldr	r3, [pc, #132]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <WIZCHIP_READ+0x24>
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d114      	bne.n	8002fee <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	0c12      	lsrs	r2, r2, #16
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002fd2:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	0a12      	lsrs	r2, r2, #8
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002fe0:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <WIZCHIP_READ+0x94>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4798      	blx	r3
 8002fec:	e011      	b.n	8003012 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <WIZCHIP_READ+0x94>)
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	f107 020c 	add.w	r2, r7, #12
 800300c:	2103      	movs	r1, #3
 800300e:	4610      	mov	r0, r2
 8003010:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003012:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <WIZCHIP_READ+0x94>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4798      	blx	r3
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <WIZCHIP_READ+0x94>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003022:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <WIZCHIP_READ+0x94>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	4798      	blx	r3
   return ret;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000104 	.word	0x20000104

08003038 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003044:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4798      	blx	r3
   WIZCHIP.CS._select();
 800304a:	4b21      	ldr	r3, [pc, #132]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003058:	4b1d      	ldr	r3, [pc, #116]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d119      	bne.n	8003094 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	0c12      	lsrs	r2, r2, #16
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	4610      	mov	r0, r2
 800306c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800306e:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	0a12      	lsrs	r2, r2, #8
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	4610      	mov	r0, r2
 800307a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800307c:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4610      	mov	r0, r2
 8003086:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4610      	mov	r0, r2
 8003090:	4798      	blx	r3
 8003092:	e013      	b.n	80030bc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	b2db      	uxtb	r3, r3
 800309a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80030ae:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	f107 020c 	add.w	r2, r7, #12
 80030b6:	2104      	movs	r1, #4
 80030b8:	4610      	mov	r0, r2
 80030ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80030c2:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <WIZCHIP_WRITE+0x98>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	4798      	blx	r3
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000104 	.word	0x20000104

080030d4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80030e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80030e8:	4b29      	ldr	r3, [pc, #164]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80030ee:	4b28      	ldr	r3, [pc, #160]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <WIZCHIP_READ_BUF+0x2a>
 80030f6:	4b26      	ldr	r3, [pc, #152]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d126      	bne.n	800314c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80030fe:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	0c12      	lsrs	r2, r2, #16
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	4610      	mov	r0, r2
 800310a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800310c:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	0a12      	lsrs	r2, r2, #8
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	4610      	mov	r0, r2
 8003118:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	4610      	mov	r0, r2
 8003124:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003126:	2300      	movs	r3, #0
 8003128:	82fb      	strh	r3, [r7, #22]
 800312a:	e00a      	b.n	8003142 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800312c:	4b18      	ldr	r3, [pc, #96]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	8afa      	ldrh	r2, [r7, #22]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	188c      	adds	r4, r1, r2
 8003136:	4798      	blx	r3
 8003138:	4603      	mov	r3, r0
 800313a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800313c:	8afb      	ldrh	r3, [r7, #22]
 800313e:	3301      	adds	r3, #1
 8003140:	82fb      	strh	r3, [r7, #22]
 8003142:	8afa      	ldrh	r2, [r7, #22]
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	429a      	cmp	r2, r3
 8003148:	d3f0      	bcc.n	800312c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800314a:	e017      	b.n	800317c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b2db      	uxtb	r3, r3
 8003152:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b2db      	uxtb	r3, r3
 800315a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f107 0210 	add.w	r2, r7, #16
 800316a:	2103      	movs	r1, #3
 800316c:	4610      	mov	r0, r2
 800316e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003170:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	4611      	mov	r1, r2
 8003178:	68b8      	ldr	r0, [r7, #8]
 800317a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800317c:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003182:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <WIZCHIP_READ_BUF+0xbc>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	4798      	blx	r3
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	20000104 	.word	0x20000104

08003194 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80031a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80031a8:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80031b6:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d126      	bne.n	800320c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80031be:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	0c12      	lsrs	r2, r2, #16
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	4610      	mov	r0, r2
 80031ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	0a12      	lsrs	r2, r2, #8
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	4610      	mov	r0, r2
 80031d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80031da:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4610      	mov	r0, r2
 80031e4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	82fb      	strh	r3, [r7, #22]
 80031ea:	e00a      	b.n	8003202 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80031ec:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	8afa      	ldrh	r2, [r7, #22]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	440a      	add	r2, r1
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	4610      	mov	r0, r2
 80031fa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80031fc:	8afb      	ldrh	r3, [r7, #22]
 80031fe:	3301      	adds	r3, #1
 8003200:	82fb      	strh	r3, [r7, #22]
 8003202:	8afa      	ldrh	r2, [r7, #22]
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3f0      	bcc.n	80031ec <WIZCHIP_WRITE_BUF+0x58>
 800320a:	e017      	b.n	800323c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b2db      	uxtb	r3, r3
 8003212:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	b2db      	uxtb	r3, r3
 800321a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003222:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 8003224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003226:	f107 0210 	add.w	r2, r7, #16
 800322a:	2103      	movs	r1, #3
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003230:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	4611      	mov	r1, r2
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003242:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <WIZCHIP_WRITE_BUF+0xbc>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	4798      	blx	r3
}
 8003248:	bf00      	nop
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000104 	.word	0x20000104

08003254 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800325e:	2300      	movs	r3, #0
 8003260:	81fb      	strh	r3, [r7, #14]
 8003262:	2300      	movs	r3, #0
 8003264:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	3301      	adds	r3, #1
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fe94 	bl	8002fa0 <WIZCHIP_READ>
 8003278:	4603      	mov	r3, r0
 800327a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800327c:	89bb      	ldrh	r3, [r7, #12]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	b29c      	uxth	r4, r3
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3301      	adds	r3, #1
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fe86 	bl	8002fa0 <WIZCHIP_READ>
 8003294:	4603      	mov	r3, r0
 8003296:	4423      	add	r3, r4
 8003298:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800329a:	89bb      	ldrh	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	3301      	adds	r3, #1
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fe77 	bl	8002fa0 <WIZCHIP_READ>
 80032b2:	4603      	mov	r3, r0
 80032b4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b29c      	uxth	r4, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	3301      	adds	r3, #1
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fe69 	bl	8002fa0 <WIZCHIP_READ>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4423      	add	r3, r4
 80032d2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80032d4:	89fa      	ldrh	r2, [r7, #14]
 80032d6:	89bb      	ldrh	r3, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1c4      	bne.n	8003266 <getSn_TX_FSR+0x12>
   return val;
 80032dc:	89fb      	ldrh	r3, [r7, #14]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd90      	pop	{r4, r7, pc}

080032e6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80032e6:	b590      	push	{r4, r7, lr}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	81fb      	strh	r3, [r7, #14]
 80032f4:	2300      	movs	r3, #0
 80032f6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	3301      	adds	r3, #1
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe4b 	bl	8002fa0 <WIZCHIP_READ>
 800330a:	4603      	mov	r3, r0
 800330c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800330e:	89bb      	ldrh	r3, [r7, #12]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	b29c      	uxth	r4, r3
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	3301      	adds	r3, #1
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe3d 	bl	8002fa0 <WIZCHIP_READ>
 8003326:	4603      	mov	r3, r0
 8003328:	4423      	add	r3, r4
 800332a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800332c:	89bb      	ldrh	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d019      	beq.n	8003366 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	3301      	adds	r3, #1
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fe2e 	bl	8002fa0 <WIZCHIP_READ>
 8003344:	4603      	mov	r3, r0
 8003346:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	b29c      	uxth	r4, r3
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	3301      	adds	r3, #1
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fe20 	bl	8002fa0 <WIZCHIP_READ>
 8003360:	4603      	mov	r3, r0
 8003362:	4423      	add	r3, r4
 8003364:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003366:	89fa      	ldrh	r2, [r7, #14]
 8003368:	89bb      	ldrh	r3, [r7, #12]
 800336a:	429a      	cmp	r2, r3
 800336c:	d1c4      	bne.n	80032f8 <getSn_RX_RSR+0x12>
   return val;
 800336e:	89fb      	ldrh	r3, [r7, #14]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}

08003378 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
 8003384:	4613      	mov	r3, r2
 8003386:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003390:	88bb      	ldrh	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d046      	beq.n	8003424 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	3301      	adds	r3, #1
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fdfc 	bl	8002fa0 <WIZCHIP_READ>
 80033a8:	4603      	mov	r3, r0
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	b29c      	uxth	r4, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3301      	adds	r3, #1
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fdf0 	bl	8002fa0 <WIZCHIP_READ>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4423      	add	r3, r4
 80033c4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	79fa      	ldrb	r2, [r7, #7]
 80033cc:	0092      	lsls	r2, r2, #2
 80033ce:	3202      	adds	r2, #2
 80033d0:	00d2      	lsls	r2, r2, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80033d6:	88bb      	ldrh	r3, [r7, #4]
 80033d8:	461a      	mov	r2, r3
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	68b8      	ldr	r0, [r7, #8]
 80033de:	f7ff fed9 	bl	8003194 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80033e2:	89fa      	ldrh	r2, [r7, #14]
 80033e4:	88bb      	ldrh	r3, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	3301      	adds	r3, #1
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80033f6:	461a      	mov	r2, r3
 80033f8:	89fb      	ldrh	r3, [r7, #14]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7ff fe18 	bl	8003038 <WIZCHIP_WRITE>
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3301      	adds	r3, #1
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003414:	461a      	mov	r2, r3
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f7ff fe0b 	bl	8003038 <WIZCHIP_WRITE>
 8003422:	e000      	b.n	8003426 <wiz_send_data+0xae>
   if(len == 0)  return;
 8003424:	bf00      	nop
}
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}

0800342c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	4613      	mov	r3, r2
 800343a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003444:	88bb      	ldrh	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d046      	beq.n	80034d8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3301      	adds	r3, #1
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fda2 	bl	8002fa0 <WIZCHIP_READ>
 800345c:	4603      	mov	r3, r0
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	b29c      	uxth	r4, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	3301      	adds	r3, #1
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fd96 	bl	8002fa0 <WIZCHIP_READ>
 8003474:	4603      	mov	r3, r0
 8003476:	4423      	add	r3, r4
 8003478:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	79fa      	ldrb	r2, [r7, #7]
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	3203      	adds	r2, #3
 8003484:	00d2      	lsls	r2, r2, #3
 8003486:	4413      	add	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800348a:	88bb      	ldrh	r3, [r7, #4]
 800348c:	461a      	mov	r2, r3
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	68b8      	ldr	r0, [r7, #8]
 8003492:	f7ff fe1f 	bl	80030d4 <WIZCHIP_READ_BUF>
   ptr += len;
 8003496:	89fa      	ldrh	r2, [r7, #14]
 8003498:	88bb      	ldrh	r3, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3301      	adds	r3, #1
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80034aa:	461a      	mov	r2, r3
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f7ff fdbe 	bl	8003038 <WIZCHIP_WRITE>
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	3301      	adds	r3, #1
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80034c8:	461a      	mov	r2, r3
 80034ca:	89fb      	ldrh	r3, [r7, #14]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7ff fdb1 	bl	8003038 <WIZCHIP_WRITE>
 80034d6:	e000      	b.n	80034da <wiz_recv_data+0xae>
   if(len == 0) return;
 80034d8:	bf00      	nop
}
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}

080034e0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
 8003554:	2300      	movs	r3, #0
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	807b      	strh	r3, [r7, #2]
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <reg_wizchip_cs_cbfunc+0x16>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <reg_wizchip_cs_cbfunc+0x40>)
 80035c0:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <reg_wizchip_cs_cbfunc+0x44>)
 80035c2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <reg_wizchip_cs_cbfunc+0x40>)
 80035c6:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <reg_wizchip_cs_cbfunc+0x48>)
 80035c8:	619a      	str	r2, [r3, #24]
 80035ca:	e006      	b.n	80035da <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80035cc:	4a06      	ldr	r2, [pc, #24]	@ (80035e8 <reg_wizchip_cs_cbfunc+0x40>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80035d2:	4a05      	ldr	r2, [pc, #20]	@ (80035e8 <reg_wizchip_cs_cbfunc+0x40>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6193      	str	r3, [r2, #24]
   }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000104 	.word	0x20000104
 80035ec:	080034fd 	.word	0x080034fd
 80035f0:	0800350b 	.word	0x0800350b

080035f4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80035fe:	bf00      	nop
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <reg_wizchip_spi_cbfunc+0x4c>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f9      	beq.n	8003600 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <reg_wizchip_spi_cbfunc+0x24>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <reg_wizchip_spi_cbfunc+0x4c>)
 800361a:	4a0a      	ldr	r2, [pc, #40]	@ (8003644 <reg_wizchip_spi_cbfunc+0x50>)
 800361c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800361e:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <reg_wizchip_spi_cbfunc+0x4c>)
 8003620:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <reg_wizchip_spi_cbfunc+0x54>)
 8003622:	621a      	str	r2, [r3, #32]
 8003624:	e006      	b.n	8003634 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003626:	4a06      	ldr	r2, [pc, #24]	@ (8003640 <reg_wizchip_spi_cbfunc+0x4c>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800362c:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <reg_wizchip_spi_cbfunc+0x4c>)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6213      	str	r3, [r2, #32]
   }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20000104 	.word	0x20000104
 8003644:	08003551 	.word	0x08003551
 8003648:	08003561 	.word	0x08003561

0800364c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003656:	bf00      	nop
 8003658:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f9      	beq.n	8003658 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <reg_wizchip_spiburst_cbfunc+0x24>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003670:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003672:	4a0a      	ldr	r2, [pc, #40]	@ (800369c <reg_wizchip_spiburst_cbfunc+0x50>)
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003678:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <reg_wizchip_spiburst_cbfunc+0x54>)
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28
 800367c:	e006      	b.n	800368c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800367e:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000104 	.word	0x20000104
 800369c:	08003577 	.word	0x08003577
 80036a0:	0800358f 	.word	0x0800358f

080036a4 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d82c      	bhi.n	8003710 <ctlnetwork+0x6c>
 80036b6:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <ctlnetwork+0x18>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036d5 	.word	0x080036d5
 80036c0:	080036dd 	.word	0x080036dd
 80036c4:	080036e5 	.word	0x080036e5
 80036c8:	080036f3 	.word	0x080036f3
 80036cc:	08003701 	.word	0x08003701
 80036d0:	08003709 	.word	0x08003709
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f000 f8fb 	bl	80038d0 <wizchip_setnetinfo>
         break;
 80036da:	e01c      	b.n	8003716 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f937 	bl	8003950 <wizchip_getnetinfo>
         break;
 80036e2:	e018      	b.n	8003716 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f971 	bl	80039d0 <wizchip_setnetmode>
 80036ee:	4603      	mov	r3, r0
 80036f0:	e012      	b.n	8003718 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80036f2:	f000 f98f 	bl	8003a14 <wizchip_getnetmode>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	701a      	strb	r2, [r3, #0]
         break;
 80036fe:	e00a      	b.n	8003716 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	f000 f98f 	bl	8003a24 <wizchip_settimeout>
         break;
 8003706:	e006      	b.n	8003716 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003708:	6838      	ldr	r0, [r7, #0]
 800370a:	f000 f9ac 	bl	8003a66 <wizchip_gettimeout>
         break;
 800370e:	e002      	b.n	8003716 <ctlnetwork+0x72>
      default:
         return -1;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003714:	e000      	b.n	8003718 <ctlnetwork+0x74>
   }
   return 0;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003726:	1d3b      	adds	r3, r7, #4
 8003728:	2206      	movs	r2, #6
 800372a:	4619      	mov	r1, r3
 800372c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003730:	f7ff fcd0 	bl	80030d4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2204      	movs	r2, #4
 800373a:	4619      	mov	r1, r3
 800373c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003740:	f7ff fcc8 	bl	80030d4 <WIZCHIP_READ_BUF>
 8003744:	f107 0310 	add.w	r3, r7, #16
 8003748:	2204      	movs	r2, #4
 800374a:	4619      	mov	r1, r3
 800374c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003750:	f7ff fcc0 	bl	80030d4 <WIZCHIP_READ_BUF>
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	2204      	movs	r2, #4
 800375a:	4619      	mov	r1, r3
 800375c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003760:	f7ff fcb8 	bl	80030d4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003764:	2180      	movs	r1, #128	@ 0x80
 8003766:	2000      	movs	r0, #0
 8003768:	f7ff fc66 	bl	8003038 <WIZCHIP_WRITE>
   getMR(); // for delay
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff fc17 	bl	8002fa0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2206      	movs	r2, #6
 8003776:	4619      	mov	r1, r3
 8003778:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800377c:	f7ff fd0a 	bl	8003194 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2204      	movs	r2, #4
 8003786:	4619      	mov	r1, r3
 8003788:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800378c:	f7ff fd02 	bl	8003194 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2204      	movs	r2, #4
 8003796:	4619      	mov	r1, r3
 8003798:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800379c:	f7ff fcfa 	bl	8003194 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	2204      	movs	r2, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80037ac:	f7ff fcf2 	bl	8003194 <WIZCHIP_WRITE_BUF>
}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80037c6:	f7ff ffab 	bl	8003720 <wizchip_sw_reset>
   if(txsize)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03b      	beq.n	8003848 <wizchip_init+0x90>
   {
      tmp = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e015      	b.n	8003806 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80037da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	4413      	add	r3, r2
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80037ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	dd02      	ble.n	80037fa <wizchip_init+0x42>
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037f8:	e066      	b.n	80038c8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380a:	2b07      	cmp	r3, #7
 800380c:	dde5      	ble.n	80037da <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e015      	b.n	8003840 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	3301      	adds	r3, #1
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003822:	4618      	mov	r0, r3
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	f7ff fc02 	bl	8003038 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3301      	adds	r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003844:	2b07      	cmp	r3, #7
 8003846:	dde5      	ble.n	8003814 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d03b      	beq.n	80038c6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e015      	b.n	8003884 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	4413      	add	r3, r2
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	4413      	add	r3, r2
 8003866:	b2db      	uxtb	r3, r3
 8003868:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800386a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800386e:	2b10      	cmp	r3, #16
 8003870:	dd02      	ble.n	8003878 <wizchip_init+0xc0>
 8003872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003876:	e027      	b.n	80038c8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3301      	adds	r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003888:	2b07      	cmp	r3, #7
 800388a:	dde5      	ble.n	8003858 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e015      	b.n	80038be <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	3301      	adds	r3, #1
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80038a0:	4618      	mov	r0, r3
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	4413      	add	r3, r2
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7ff fbc3 	bl	8003038 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	2b07      	cmp	r3, #7
 80038c4:	dde5      	ble.n	8003892 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2206      	movs	r2, #6
 80038dc:	4619      	mov	r1, r3
 80038de:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80038e2:	f7ff fc57 	bl	8003194 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	330e      	adds	r3, #14
 80038ea:	2204      	movs	r2, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038f2:	f7ff fc4f 	bl	8003194 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	330a      	adds	r3, #10
 80038fa:	2204      	movs	r2, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003902:	f7ff fc47 	bl	8003194 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3306      	adds	r3, #6
 800390a:	2204      	movs	r2, #4
 800390c:	4619      	mov	r1, r3
 800390e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003912:	f7ff fc3f 	bl	8003194 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7c9a      	ldrb	r2, [r3, #18]
 800391a:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <wizchip_setnetinfo+0x78>)
 800391c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7cda      	ldrb	r2, [r3, #19]
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <wizchip_setnetinfo+0x78>)
 8003924:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7d1a      	ldrb	r2, [r3, #20]
 800392a:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <wizchip_setnetinfo+0x78>)
 800392c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7d5a      	ldrb	r2, [r3, #21]
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <wizchip_setnetinfo+0x78>)
 8003934:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7d9a      	ldrb	r2, [r3, #22]
 800393a:	4b04      	ldr	r3, [pc, #16]	@ (800394c <wizchip_setnetinfo+0x7c>)
 800393c:	701a      	strb	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200023b4 	.word	0x200023b4
 800394c:	200023b8 	.word	0x200023b8

08003950 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2206      	movs	r2, #6
 800395c:	4619      	mov	r1, r3
 800395e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003962:	f7ff fbb7 	bl	80030d4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	330e      	adds	r3, #14
 800396a:	2204      	movs	r2, #4
 800396c:	4619      	mov	r1, r3
 800396e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003972:	f7ff fbaf 	bl	80030d4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	330a      	adds	r3, #10
 800397a:	2204      	movs	r2, #4
 800397c:	4619      	mov	r1, r3
 800397e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003982:	f7ff fba7 	bl	80030d4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3306      	adds	r3, #6
 800398a:	2204      	movs	r2, #4
 800398c:	4619      	mov	r1, r3
 800398e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003992:	f7ff fb9f 	bl	80030d4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003996:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <wizchip_getnetinfo+0x78>)
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800399e:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <wizchip_getnetinfo+0x78>)
 80039a0:	785a      	ldrb	r2, [r3, #1]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <wizchip_getnetinfo+0x78>)
 80039a8:	789a      	ldrb	r2, [r3, #2]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <wizchip_getnetinfo+0x78>)
 80039b0:	78da      	ldrb	r2, [r3, #3]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <wizchip_getnetinfo+0x7c>)
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	759a      	strb	r2, [r3, #22]
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200023b4 	.word	0x200023b4
 80039cc:	200023b8 	.word	0x200023b8

080039d0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <wizchip_setnetmode+0x1e>
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039ec:	e00e      	b.n	8003a0c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7ff fad6 	bl	8002fa0 <WIZCHIP_READ>
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	4619      	mov	r1, r3
 8003a04:	2000      	movs	r0, #0
 8003a06:	f7ff fb17 	bl	8003038 <WIZCHIP_WRITE>
   return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f7ff fac1 	bl	8002fa0 <WIZCHIP_READ>
 8003a1e:	4603      	mov	r3, r0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003a36:	f7ff faff 	bl	8003038 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	885b      	ldrh	r3, [r3, #2]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8003a4a:	f7ff faf5 	bl	8003038 <WIZCHIP_WRITE>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	885b      	ldrh	r3, [r3, #2]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	4619      	mov	r1, r3
 8003a56:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8003a5a:	f7ff faed 	bl	8003038 <WIZCHIP_WRITE>
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003a66:	b590      	push	{r4, r7, lr}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003a6e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003a72:	f7ff fa95 	bl	8002fa0 <WIZCHIP_READ>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003a7e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8003a82:	f7ff fa8d 	bl	8002fa0 <WIZCHIP_READ>
 8003a86:	4603      	mov	r3, r0
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	b29c      	uxth	r4, r3
 8003a8c:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8003a90:	f7ff fa86 	bl	8002fa0 <WIZCHIP_READ>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4423      	add	r3, r4
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	805a      	strh	r2, [r3, #2]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}
	...

08003aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003aac:	480d      	ldr	r0, [pc, #52]	@ (8003ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aae:	490e      	ldr	r1, [pc, #56]	@ (8003ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8003aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab4:	e002      	b.n	8003abc <LoopCopyDataInit>

08003ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aba:	3304      	adds	r3, #4

08003abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac0:	d3f9      	bcc.n	8003ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8003af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac8:	e001      	b.n	8003ace <LoopFillZerobss>

08003aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003acc:	3204      	adds	r2, #4

08003ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad0:	d3fb      	bcc.n	8003aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ad2:	f7ff fa53 	bl	8002f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f008 fd97 	bl	800c608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ada:	f7fd fe61 	bl	80017a0 <main>
  bx  lr    
 8003ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ae0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae8:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8003aec:	0800ec28 	.word	0x0800ec28
  ldr r2, =_sbss
 8003af0:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003af4:	20003934 	.word	0x20003934

08003af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC_IRQHandler>
	...

08003afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b00:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0d      	ldr	r2, [pc, #52]	@ (8003b3c <HAL_Init+0x40>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	@ (8003b3c <HAL_Init+0x40>)
 8003b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b18:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <HAL_Init+0x40>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b24:	2003      	movs	r0, #3
 8003b26:	f000 f8fc 	bl	8003d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2a:	200f      	movs	r0, #15
 8003b2c:	f7fe fe84 	bl	8002838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b30:	f7fe fe0a 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00

08003b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_IncTick+0x20>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_IncTick+0x24>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <HAL_IncTick+0x24>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000134 	.word	0x20000134
 8003b64:	200023bc 	.word	0x200023bc

08003b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_GetTick+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	200023bc 	.word	0x200023bc

08003b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff ffee 	bl	8003b68 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b98:	d005      	beq.n	8003ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_Delay+0x44>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ba6:	bf00      	nop
 8003ba8:	f7ff ffde 	bl	8003b68 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d8f7      	bhi.n	8003ba8 <HAL_Delay+0x28>
  {
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000134 	.word	0x20000134

08003bc8 <__NVIC_SetPriorityGrouping>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be4:	4013      	ands	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfa:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	60d3      	str	r3, [r2, #12]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_GetPriorityGrouping>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c14:	4b04      	ldr	r3, [pc, #16]	@ (8003c28 <__NVIC_GetPriorityGrouping+0x18>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 0307 	and.w	r3, r3, #7
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_EnableIRQ>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	db0b      	blt.n	8003c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	f003 021f 	and.w	r2, r3, #31
 8003c44:	4907      	ldr	r1, [pc, #28]	@ (8003c64 <__NVIC_EnableIRQ+0x38>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0a      	blt.n	8003c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	490c      	ldr	r1, [pc, #48]	@ (8003cb4 <__NVIC_SetPriority+0x4c>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c90:	e00a      	b.n	8003ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4908      	ldr	r1, [pc, #32]	@ (8003cb8 <__NVIC_SetPriority+0x50>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	761a      	strb	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000e100 	.word	0xe000e100
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <NVIC_EncodePriority>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	@ 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf28      	it	cs
 8003cda:	2304      	movcs	r3, #4
 8003cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d902      	bls.n	8003cec <NVIC_EncodePriority+0x30>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3b03      	subs	r3, #3
 8003cea:	e000      	b.n	8003cee <NVIC_EncodePriority+0x32>
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43d9      	mvns	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	4313      	orrs	r3, r2
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	@ 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff4c 	bl	8003bc8 <__NVIC_SetPriorityGrouping>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d4a:	f7ff ff61 	bl	8003c10 <__NVIC_GetPriorityGrouping>
 8003d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f7ff ffb1 	bl	8003cbc <NVIC_EncodePriority>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff80 	bl	8003c68 <__NVIC_SetPriority>
}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff ff54 	bl	8003c2c <__NVIC_EnableIRQ>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00c      	b.n	8003dc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2205      	movs	r2, #5
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003de2:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <HAL_FLASH_Program+0xa0>)
 8003de4:	7e1b      	ldrb	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_FLASH_Program+0x1e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e03b      	b.n	8003e66 <HAL_FLASH_Program+0x96>
 8003dee:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <HAL_FLASH_Program+0xa0>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003df4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003df8:	f000 f870 	bl	8003edc <FLASH_WaitForLastOperation>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12b      	bne.n	8003e5e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e0c:	783b      	ldrb	r3, [r7, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68b8      	ldr	r0, [r7, #8]
 8003e12:	f000 f91b 	bl	800404c <FLASH_Program_Byte>
 8003e16:	e016      	b.n	8003e46 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e1e:	883b      	ldrh	r3, [r7, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	68b8      	ldr	r0, [r7, #8]
 8003e24:	f000 f8ee 	bl	8004004 <FLASH_Program_HalfWord>
 8003e28:	e00d      	b.n	8003e46 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d105      	bne.n	8003e3c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	68b8      	ldr	r0, [r7, #8]
 8003e36:	f000 f8c3 	bl	8003fc0 <FLASH_Program_Word>
 8003e3a:	e004      	b.n	8003e46 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e40:	68b8      	ldr	r0, [r7, #8]
 8003e42:	f000 f88b 	bl	8003f5c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e4a:	f000 f847 	bl	8003edc <FLASH_WaitForLastOperation>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <HAL_FLASH_Program+0xa4>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4a07      	ldr	r2, [pc, #28]	@ (8003e74 <HAL_FLASH_Program+0xa4>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e5e:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <HAL_FLASH_Program+0xa0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200023c0 	.word	0x200023c0
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e82:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <HAL_FLASH_Unlock+0x38>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da0b      	bge.n	8003ea2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e8a:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <HAL_FLASH_Unlock+0x38>)
 8003e8c:	4a09      	ldr	r2, [pc, #36]	@ (8003eb4 <HAL_FLASH_Unlock+0x3c>)
 8003e8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <HAL_FLASH_Unlock+0x38>)
 8003e92:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <HAL_FLASH_Unlock+0x40>)
 8003e94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <HAL_FLASH_Unlock+0x38>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da01      	bge.n	8003ea2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40023c00 	.word	0x40023c00
 8003eb4:	45670123 	.word	0x45670123
 8003eb8:	cdef89ab 	.word	0xcdef89ab

08003ebc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_FLASH_Lock+0x1c>)
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	4a04      	ldr	r2, [pc, #16]	@ (8003ed8 <HAL_FLASH_Lock+0x1c>)
 8003ec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40023c00 	.word	0x40023c00

08003edc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <FLASH_WaitForLastOperation+0x78>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003eee:	f7ff fe3b 	bl	8003b68 <HAL_GetTick>
 8003ef2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003ef4:	e010      	b.n	8003f18 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003efc:	d00c      	beq.n	8003f18 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <FLASH_WaitForLastOperation+0x38>
 8003f04:	f7ff fe30 	bl	8003b68 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d201      	bcs.n	8003f18 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e019      	b.n	8003f4c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f18:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <FLASH_WaitForLastOperation+0x7c>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e8      	bne.n	8003ef6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f24:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <FLASH_WaitForLastOperation+0x7c>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f30:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <FLASH_WaitForLastOperation+0x7c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003f36:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <FLASH_WaitForLastOperation+0x7c>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f42:	f000 f8a5 	bl	8004090 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
  
}  
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200023c0 	.word	0x200023c0
 8003f58:	40023c00 	.word	0x40023c00

08003f5c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f68:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <FLASH_Program_DoubleWord+0x60>)
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	4a13      	ldr	r2, [pc, #76]	@ (8003fbc <FLASH_Program_DoubleWord+0x60>)
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003f74:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <FLASH_Program_DoubleWord+0x60>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	4a10      	ldr	r2, [pc, #64]	@ (8003fbc <FLASH_Program_DoubleWord+0x60>)
 8003f7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003f80:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <FLASH_Program_DoubleWord+0x60>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	4a0d      	ldr	r2, [pc, #52]	@ (8003fbc <FLASH_Program_DoubleWord+0x60>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003f92:	f3bf 8f6f 	isb	sy
}
 8003f96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	000a      	movs	r2, r1
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	68f9      	ldr	r1, [r7, #12]
 8003faa:	3104      	adds	r1, #4
 8003fac:	4613      	mov	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40023c00 	.word	0x40023c00

08003fc0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <FLASH_Program_Word+0x40>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <FLASH_Program_Word+0x40>)
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <FLASH_Program_Word+0x40>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <FLASH_Program_Word+0x40>)
 8003fdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fe2:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <FLASH_Program_Word+0x40>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	4a06      	ldr	r2, [pc, #24]	@ (8004000 <FLASH_Program_Word+0x40>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40023c00 	.word	0x40023c00

08004004 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <FLASH_Program_HalfWord+0x44>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4a0c      	ldr	r2, [pc, #48]	@ (8004048 <FLASH_Program_HalfWord+0x44>)
 8004016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800401a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800401c:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <FLASH_Program_HalfWord+0x44>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4a09      	ldr	r2, [pc, #36]	@ (8004048 <FLASH_Program_HalfWord+0x44>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004028:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <FLASH_Program_HalfWord+0x44>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	4a06      	ldr	r2, [pc, #24]	@ (8004048 <FLASH_Program_HalfWord+0x44>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	801a      	strh	r2, [r3, #0]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00

0800404c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004058:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <FLASH_Program_Byte+0x40>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4a0b      	ldr	r2, [pc, #44]	@ (800408c <FLASH_Program_Byte+0x40>)
 800405e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <FLASH_Program_Byte+0x40>)
 8004066:	4a09      	ldr	r2, [pc, #36]	@ (800408c <FLASH_Program_Byte+0x40>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <FLASH_Program_Byte+0x40>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4a06      	ldr	r2, [pc, #24]	@ (800408c <FLASH_Program_Byte+0x40>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	701a      	strb	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00

08004090 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004094:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80040a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040aa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80040ac:	4b29      	ldr	r3, [pc, #164]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 80040ae:	2210      	movs	r2, #16
 80040b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80040be:	4b26      	ldr	r3, [pc, #152]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f043 0308 	orr.w	r3, r3, #8
 80040c6:	4a24      	ldr	r2, [pc, #144]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040c8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80040ca:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 80040cc:	2220      	movs	r2, #32
 80040ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80040e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 80040ea:	2240      	movs	r2, #64	@ 0x40
 80040ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80040ee:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80040fa:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 8004104:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004106:	4b13      	ldr	r3, [pc, #76]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 8004108:	2280      	movs	r2, #128	@ 0x80
 800410a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004118:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	4a0d      	ldr	r2, [pc, #52]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 8004122:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004124:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 8004126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800412a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004138:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f043 0320 	orr.w	r3, r3, #32
 8004140:	4a05      	ldr	r2, [pc, #20]	@ (8004158 <FLASH_SetErrorCode+0xc8>)
 8004142:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004144:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <FLASH_SetErrorCode+0xc4>)
 8004146:	2202      	movs	r2, #2
 8004148:	60da      	str	r2, [r3, #12]
  }
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40023c00 	.word	0x40023c00
 8004158:	200023c0 	.word	0x200023c0

0800415c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e010      	b.n	800419a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d103      	bne.n	8004186 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800417e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e009      	b.n	800419a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d103      	bne.n	8004194 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800418c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e002      	b.n	800419a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004194:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004198:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	490f      	ldr	r1, [pc, #60]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80041b2:	4b0d      	ldr	r3, [pc, #52]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	4a0c      	ldr	r2, [pc, #48]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80041bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	4a07      	ldr	r2, [pc, #28]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <FLASH_Erase_Sector+0x8c>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041da:	6113      	str	r3, [r2, #16]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40023c00 	.word	0x40023c00

080041ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e159      	b.n	80044bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	429a      	cmp	r2, r3
 8004222:	f040 8148 	bne.w	80044b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d005      	beq.n	800423e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423a:	2b02      	cmp	r3, #2
 800423c:	d130      	bne.n	80042a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004274:	2201      	movs	r2, #1
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 0201 	and.w	r2, r3, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d017      	beq.n	80042dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d123      	bne.n	8004330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	08da      	lsrs	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0203 	and.w	r2, r3, #3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a2 	beq.w	80044b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b57      	ldr	r3, [pc, #348]	@ (80044d4 <HAL_GPIO_Init+0x2e8>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	4a56      	ldr	r2, [pc, #344]	@ (80044d4 <HAL_GPIO_Init+0x2e8>)
 800437c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004380:	6453      	str	r3, [r2, #68]	@ 0x44
 8004382:	4b54      	ldr	r3, [pc, #336]	@ (80044d4 <HAL_GPIO_Init+0x2e8>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438e:	4a52      	ldr	r2, [pc, #328]	@ (80044d8 <HAL_GPIO_Init+0x2ec>)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	3302      	adds	r3, #2
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	220f      	movs	r2, #15
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a49      	ldr	r2, [pc, #292]	@ (80044dc <HAL_GPIO_Init+0x2f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d019      	beq.n	80043ee <HAL_GPIO_Init+0x202>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a48      	ldr	r2, [pc, #288]	@ (80044e0 <HAL_GPIO_Init+0x2f4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_GPIO_Init+0x1fe>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a47      	ldr	r2, [pc, #284]	@ (80044e4 <HAL_GPIO_Init+0x2f8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00d      	beq.n	80043e6 <HAL_GPIO_Init+0x1fa>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a46      	ldr	r2, [pc, #280]	@ (80044e8 <HAL_GPIO_Init+0x2fc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d007      	beq.n	80043e2 <HAL_GPIO_Init+0x1f6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a45      	ldr	r2, [pc, #276]	@ (80044ec <HAL_GPIO_Init+0x300>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_GPIO_Init+0x1f2>
 80043da:	2304      	movs	r3, #4
 80043dc:	e008      	b.n	80043f0 <HAL_GPIO_Init+0x204>
 80043de:	2307      	movs	r3, #7
 80043e0:	e006      	b.n	80043f0 <HAL_GPIO_Init+0x204>
 80043e2:	2303      	movs	r3, #3
 80043e4:	e004      	b.n	80043f0 <HAL_GPIO_Init+0x204>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e002      	b.n	80043f0 <HAL_GPIO_Init+0x204>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_GPIO_Init+0x204>
 80043ee:	2300      	movs	r3, #0
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f002 0203 	and.w	r2, r2, #3
 80043f6:	0092      	lsls	r2, r2, #2
 80043f8:	4093      	lsls	r3, r2
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004400:	4935      	ldr	r1, [pc, #212]	@ (80044d8 <HAL_GPIO_Init+0x2ec>)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	3302      	adds	r3, #2
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800440e:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004432:	4a2f      	ldr	r2, [pc, #188]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800445c:	4a24      	ldr	r2, [pc, #144]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004462:	4b23      	ldr	r3, [pc, #140]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004486:	4a1a      	ldr	r2, [pc, #104]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800448c:	4b18      	ldr	r3, [pc, #96]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b0:	4a0f      	ldr	r2, [pc, #60]	@ (80044f0 <HAL_GPIO_Init+0x304>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	f67f aea2 	bls.w	8004208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3724      	adds	r7, #36	@ 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40013800 	.word	0x40013800
 80044dc:	40020000 	.word	0x40020000
 80044e0:	40020400 	.word	0x40020400
 80044e4:	40020800 	.word	0x40020800
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40013c00 	.word	0x40013c00

080044f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
 8004500:	4613      	mov	r3, r2
 8004502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004504:	787b      	ldrb	r3, [r7, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004510:	e003      	b.n	800451a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	041a      	lsls	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	619a      	str	r2, [r3, #24]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004528:	b08f      	sub	sp, #60	@ 0x3c
 800452a:	af0a      	add	r7, sp, #40	@ 0x28
 800452c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e10f      	b.n	8004758 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f007 fc88 	bl	800be68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2203      	movs	r2, #3
 800455c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f003 ff71 	bl	800845e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	687e      	ldr	r6, [r7, #4]
 8004584:	466d      	mov	r5, sp
 8004586:	f106 0410 	add.w	r4, r6, #16
 800458a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800458c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800458e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004592:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004596:	e885 0003 	stmia.w	r5, {r0, r1}
 800459a:	1d33      	adds	r3, r6, #4
 800459c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f003 fe48 	bl	8008234 <USB_CoreInit>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0d0      	b.n	8004758 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f003 ff5f 	bl	8008480 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e04a      	b.n	800465e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	333d      	adds	r3, #61	@ 0x3d
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	333c      	adds	r3, #60	@ 0x3c
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	b298      	uxth	r0, r3
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3344      	adds	r3, #68	@ 0x44
 8004604:	4602      	mov	r2, r0
 8004606:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004608:	7bfa      	ldrb	r2, [r7, #15]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3340      	adds	r3, #64	@ 0x40
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3348      	adds	r3, #72	@ 0x48
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	334c      	adds	r3, #76	@ 0x4c
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3354      	adds	r3, #84	@ 0x54
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	3301      	adds	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d3af      	bcc.n	80045c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e044      	b.n	80046f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	3301      	adds	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3b5      	bcc.n	800466e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	687e      	ldr	r6, [r7, #4]
 800470a:	466d      	mov	r5, sp
 800470c:	f106 0410 	add.w	r4, r6, #16
 8004710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004718:	e894 0003 	ldmia.w	r4, {r0, r1}
 800471c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004720:	1d33      	adds	r3, r6, #4
 8004722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	f003 fef7 	bl	8008518 <USB_DevInit>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e00d      	b.n	8004758 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f005 f846 	bl	80097e2 <USB_DevDisconnect>

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004760 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_PCD_Start+0x1c>
 8004778:	2302      	movs	r3, #2
 800477a:	e020      	b.n	80047be <HAL_PCD_Start+0x5e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	2b01      	cmp	r3, #1
 800478a:	d109      	bne.n	80047a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004790:	2b01      	cmp	r3, #1
 8004792:	d005      	beq.n	80047a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 fe49 	bl	800843c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f004 fff6 	bl	80097a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047c6:	b590      	push	{r4, r7, lr}
 80047c8:	b08d      	sub	sp, #52	@ 0x34
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f005 f8b4 	bl	800994a <USB_GetMode>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f040 848a 	bne.w	80050fe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f005 f818 	bl	8009824 <USB_ReadInterrupts>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8480 	beq.w	80050fc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f005 f805 	bl	8009824 <USB_ReadInterrupts>
 800481a:	4603      	mov	r3, r0
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d107      	bne.n	8004834 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f002 0202 	and.w	r2, r2, #2
 8004832:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f004 fff3 	bl	8009824 <USB_ReadInterrupts>
 800483e:	4603      	mov	r3, r0
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d161      	bne.n	800490c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0210 	bic.w	r2, r2, #16
 8004856:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 020f 	and.w	r2, r3, #15
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	0c5b      	lsrs	r3, r3, #17
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2b02      	cmp	r3, #2
 8004882:	d124      	bne.n	80048ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d035      	beq.n	80048fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800489a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	6a38      	ldr	r0, [r7, #32]
 80048a4:	f004 fe2a 	bl	80094fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b4:	441a      	add	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c6:	441a      	add	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
 80048cc:	e016      	b.n	80048fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	0c5b      	lsrs	r3, r3, #17
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d110      	bne.n	80048fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80048e0:	2208      	movs	r2, #8
 80048e2:	4619      	mov	r1, r3
 80048e4:	6a38      	ldr	r0, [r7, #32]
 80048e6:	f004 fe09 	bl	80094fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f6:	441a      	add	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0210 	orr.w	r2, r2, #16
 800490a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f004 ff87 	bl	8009824 <USB_ReadInterrupts>
 8004916:	4603      	mov	r3, r0
 8004918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800491c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004920:	f040 80a7 	bne.w	8004a72 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f004 ff8c 	bl	800984a <USB_ReadDevAllOutEpInterrupt>
 8004932:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004934:	e099      	b.n	8004a6a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 808e 	beq.w	8004a5e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f004 ffb0 	bl	80098b2 <USB_ReadDevOutEPInterrupt>
 8004952:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	2301      	movs	r3, #1
 800496e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fec2 	bl	80056fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	461a      	mov	r2, r3
 8004990:	2308      	movs	r3, #8
 8004992:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004994:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 ff98 	bl	80058cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	2310      	movs	r3, #16
 80049b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d030      	beq.n	8004a24 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b80      	cmp	r3, #128	@ 0x80
 80049cc:	d109      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	78db      	ldrb	r3, [r3, #3]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d108      	bne.n	8004a12 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f007 fb27 	bl	800c060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2302      	movs	r3, #2
 8004a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	461a      	mov	r2, r3
 8004a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	3301      	adds	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f47f af62 	bne.w	8004936 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f004 fed4 	bl	8009824 <USB_ReadInterrupts>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a86:	f040 80db 	bne.w	8004c40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fef5 	bl	800987e <USB_ReadDevAllInEpInterrupt>
 8004a94:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a9a:	e0cd      	b.n	8004c38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80c2 	beq.w	8004c2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f004 ff1b 	bl	80098ee <USB_ReadDevInEPInterrupt>
 8004ab8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d057      	beq.n	8004b74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	2201      	movs	r2, #1
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	461a      	mov	r2, r3
 8004af6:	2301      	movs	r3, #1
 8004af8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d132      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	334c      	adds	r3, #76	@ 0x4c
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4403      	add	r3, r0
 8004b22:	3348      	adds	r3, #72	@ 0x48
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4419      	add	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4403      	add	r3, r0
 8004b36:	334c      	adds	r3, #76	@ 0x4c
 8004b38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d113      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x3a2>
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3354      	adds	r3, #84	@ 0x54
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d108      	bne.n	8004b68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b60:	461a      	mov	r2, r3
 8004b62:	2101      	movs	r1, #1
 8004b64:	f004 ff22 	bl	80099ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f007 f9fb 	bl	800bf6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2310      	movs	r3, #16
 8004baa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2340      	movs	r3, #64	@ 0x40
 8004bc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d023      	beq.n	8004c1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bd4:	6a38      	ldr	r0, [r7, #32]
 8004bd6:	f003 fe03 	bl	80087e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3338      	adds	r3, #56	@ 0x38
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	3304      	adds	r3, #4
 8004bec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	78db      	ldrb	r3, [r3, #3]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d108      	bne.n	8004c08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f007 fa3e 	bl	800c084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c14:	461a      	mov	r2, r3
 8004c16:	2302      	movs	r3, #2
 8004c18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fcdb 	bl	80055e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	3301      	adds	r3, #1
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f47f af2e 	bne.w	8004a9c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 fded 	bl	8009824 <USB_ReadInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c54:	d122      	bne.n	8004c9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d108      	bne.n	8004c86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fec2 	bl	8005a08 <HAL_PCDEx_LPM_Callback>
 8004c84:	e002      	b.n	8004c8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f007 f9dc 	bl	800c044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f004 fdbf 	bl	8009824 <USB_ReadInterrupts>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb0:	d112      	bne.n	8004cd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d102      	bne.n	8004cc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f007 f998 	bl	800bff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004cd6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fda1 	bl	8009824 <USB_ReadInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cec:	f040 80b7 	bne.w	8004e5e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2110      	movs	r1, #16
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f003 fd68 	bl	80087e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d14:	e046      	b.n	8004da4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d22:	461a      	mov	r2, r3
 8004d24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d44:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d56:	461a      	mov	r2, r3
 8004d58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	3301      	adds	r3, #1
 8004da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d3b3      	bcc.n	8004d16 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dbc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004dc0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d016      	beq.n	8004df8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dda:	f043 030b 	orr.w	r3, r3, #11
 8004dde:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004df0:	f043 030b 	orr.w	r3, r3, #11
 8004df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004df6:	e015      	b.n	8004e24 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e0a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004e0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1e:	f043 030b 	orr.w	r3, r3, #11
 8004e22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f004 fdaf 	bl	80099ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f004 fcde 	bl	8009824 <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e72:	d124      	bne.n	8004ebe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f004 fd74 	bl	8009966 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 fd29 	bl	80088da <USB_GetDevSpeed>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681c      	ldr	r4, [r3, #0]
 8004e94:	f001 f9f4 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 8004e98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f003 fa28 	bl	80082f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f007 f886 	bl	800bfba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f004 fcae 	bl	8009824 <USB_ReadInterrupts>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f007 f863 	bl	800bf9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f002 0208 	and.w	r2, r2, #8
 8004ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f004 fc99 	bl	8009824 <USB_ReadInterrupts>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef8:	2b80      	cmp	r3, #128	@ 0x80
 8004efa:	d122      	bne.n	8004f42 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f08:	2301      	movs	r3, #1
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0c:	e014      	b.n	8004f38 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f12:	4613      	mov	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d105      	bne.n	8004f32 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fb27 	bl	8005580 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	3301      	adds	r3, #1
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3e5      	bcc.n	8004f0e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 fc6c 	bl	8009824 <USB_ReadInterrupts>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f56:	d13b      	bne.n	8004fd0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f58:	2301      	movs	r3, #1
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f5c:	e02b      	b.n	8004fb6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3340      	adds	r3, #64	@ 0x40
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d115      	bne.n	8004fb0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da12      	bge.n	8004fb0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	333f      	adds	r3, #63	@ 0x3f
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fae8 	bl	8005580 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d3ce      	bcc.n	8004f5e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f004 fc25 	bl	8009824 <USB_ReadInterrupts>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fe4:	d155      	bne.n	8005092 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	e045      	b.n	8005078 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d12e      	bne.n	8005072 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005014:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005016:	2b00      	cmp	r3, #0
 8005018:	da2b      	bge.n	8005072 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005026:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800502a:	429a      	cmp	r2, r3
 800502c:	d121      	bne.n	8005072 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800506a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800506e:	6053      	str	r3, [r2, #4]
            break;
 8005070:	e007      	b.n	8005082 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	3301      	adds	r3, #1
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507e:	429a      	cmp	r2, r3
 8005080:	d3b4      	bcc.n	8004fec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f004 fbc4 	bl	8009824 <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a6:	d10a      	bne.n	80050be <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f006 fffd 	bl	800c0a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80050bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f004 fbae 	bl	8009824 <USB_ReadInterrupts>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d115      	bne.n	80050fe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f006 ffed 	bl	800c0c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	e000      	b.n	80050fe <HAL_PCD_IRQHandler+0x938>
      return;
 80050fc:	bf00      	nop
    }
  }
}
 80050fe:	3734      	adds	r7, #52	@ 0x34
 8005100:	46bd      	mov	sp, r7
 8005102:	bd90      	pop	{r4, r7, pc}

08005104 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_PCD_SetAddress+0x1a>
 800511a:	2302      	movs	r3, #2
 800511c:	e013      	b.n	8005146 <HAL_PCD_SetAddress+0x42>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f004 fb0c 	bl	8009754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	4608      	mov	r0, r1
 8005158:	4611      	mov	r1, r2
 800515a:	461a      	mov	r2, r3
 800515c:	4603      	mov	r3, r0
 800515e:	70fb      	strb	r3, [r7, #3]
 8005160:	460b      	mov	r3, r1
 8005162:	803b      	strh	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800516c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005170:	2b00      	cmp	r3, #0
 8005172:	da0f      	bge.n	8005194 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	3338      	adds	r3, #56	@ 0x38
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	3304      	adds	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	705a      	strb	r2, [r3, #1]
 8005192:	e00f      	b.n	80051b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	3304      	adds	r3, #4
 80051ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051c0:	883a      	ldrh	r2, [r7, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	78ba      	ldrb	r2, [r7, #2]
 80051ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051de:	78bb      	ldrb	r3, [r7, #2]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d102      	bne.n	80051ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_PCD_EP_Open+0xaa>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e00e      	b.n	8005216 <HAL_PCD_EP_Open+0xc8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	4618      	mov	r0, r3
 8005208:	f003 fb8c 	bl	8008924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8005214:	7afb      	ldrb	r3, [r7, #11]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800522a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da0f      	bge.n	8005252 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 020f 	and.w	r2, r3, #15
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	3338      	adds	r3, #56	@ 0x38
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	3304      	adds	r3, #4
 8005248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	705a      	strb	r2, [r3, #1]
 8005250:	e00f      	b.n	8005272 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_PCD_EP_Close+0x6e>
 8005288:	2302      	movs	r3, #2
 800528a:	e00e      	b.n	80052aa <HAL_PCD_EP_Close+0x8c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	4618      	mov	r0, r3
 800529c:	f003 fbca 	bl	8008a34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	460b      	mov	r3, r1
 80052c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	f003 020f 	and.w	r2, r3, #15
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	3304      	adds	r3, #4
 80052da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f4:	7afb      	ldrb	r3, [r7, #11]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800530e:	7afb      	ldrb	r3, [r7, #11]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	6979      	ldr	r1, [r7, #20]
 8005326:	f003 fea9 	bl	800907c <USB_EP0StartXfer>
 800532a:	e008      	b.n	800533e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	f003 fc57 	bl	8008bec <USB_EPStartXfer>
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	460b      	mov	r3, r1
 8005386:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005388:	7afb      	ldrb	r3, [r7, #11]
 800538a:	f003 020f 	and.w	r2, r3, #15
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	3338      	adds	r3, #56	@ 0x38
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	3304      	adds	r3, #4
 800539e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2201      	movs	r2, #1
 80053b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053b8:	7afb      	ldrb	r3, [r7, #11]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d102      	bne.n	80053d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	f003 fe47 	bl	800907c <USB_EP0StartXfer>
 80053ee:	e008      	b.n	8005402 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	f003 fbf5 	bl	8008bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d901      	bls.n	800542a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e050      	b.n	80054cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800542a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800542e:	2b00      	cmp	r3, #0
 8005430:	da0f      	bge.n	8005452 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	3338      	adds	r3, #56	@ 0x38
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	3304      	adds	r3, #4
 8005448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	705a      	strb	r2, [r3, #1]
 8005450:	e00d      	b.n	800546e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	3304      	adds	r3, #4
 8005466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_PCD_EP_SetStall+0x82>
 800548a:	2302      	movs	r3, #2
 800548c:	e01e      	b.n	80054cc <HAL_PCD_EP_SetStall+0xc0>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	4618      	mov	r0, r3
 800549e:	f004 f885 	bl	80095ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	b2d9      	uxtb	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80054bc:	461a      	mov	r2, r3
 80054be:	f004 fa75 	bl	80099ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d901      	bls.n	80054f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e042      	b.n	8005578 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da0f      	bge.n	800551a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	3338      	adds	r3, #56	@ 0x38
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	3304      	adds	r3, #4
 8005510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	705a      	strb	r2, [r3, #1]
 8005518:	e00f      	b.n	800553a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	3304      	adds	r3, #4
 8005532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	b2da      	uxtb	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_PCD_EP_ClrStall+0x86>
 8005556:	2302      	movs	r3, #2
 8005558:	e00e      	b.n	8005578 <HAL_PCD_EP_ClrStall+0xa4>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	4618      	mov	r0, r3
 800556a:	f004 f88d 	bl	8009688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800558c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005590:	2b00      	cmp	r3, #0
 8005592:	da0c      	bge.n	80055ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	f003 020f 	and.w	r2, r3, #15
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	3338      	adds	r3, #56	@ 0x38
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4413      	add	r3, r2
 80055a8:	3304      	adds	r3, #4
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e00c      	b.n	80055c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	3304      	adds	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f003 feac 	bl	800932c <USB_EPStopXfer>
 80055d4:	4603      	mov	r3, r0
 80055d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055d8:	7afb      	ldrb	r3, [r7, #11]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b08a      	sub	sp, #40	@ 0x28
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	3338      	adds	r3, #56	@ 0x38
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	3304      	adds	r3, #4
 8005608:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	429a      	cmp	r2, r3
 8005614:	d901      	bls.n	800561a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e06c      	b.n	80056f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	429a      	cmp	r2, r3
 800562e:	d902      	bls.n	8005636 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3303      	adds	r3, #3
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800563e:	e02b      	b.n	8005698 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	429a      	cmp	r2, r3
 8005654:	d902      	bls.n	800565c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3303      	adds	r3, #3
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6919      	ldr	r1, [r3, #16]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005674:	b2db      	uxtb	r3, r3
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4603      	mov	r3, r0
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f003 ff00 	bl	8009480 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	441a      	add	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1a      	ldr	r2, [r3, #32]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d809      	bhi.n	80056c2 <PCD_WriteEmptyTxFifo+0xe0>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1a      	ldr	r2, [r3, #32]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d203      	bcs.n	80056c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1be      	bne.n	8005640 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d811      	bhi.n	80056f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2201      	movs	r2, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	43db      	mvns	r3, r3
 80056e8:	6939      	ldr	r1, [r7, #16]
 80056ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056ee:	4013      	ands	r3, r2
 80056f0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	333c      	adds	r3, #60	@ 0x3c
 8005714:	3304      	adds	r3, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d17b      	bne.n	800582a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4a61      	ldr	r2, [pc, #388]	@ (80058c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	f240 80b9 	bls.w	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80b3 	beq.w	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575e:	461a      	mov	r2, r3
 8005760:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005764:	6093      	str	r3, [r2, #8]
 8005766:	e0a7      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	2320      	movs	r3, #32
 8005782:	6093      	str	r3, [r2, #8]
 8005784:	e098      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	f040 8093 	bne.w	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4a4b      	ldr	r2, [pc, #300]	@ (80058c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d90f      	bls.n	80057ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	461a      	mov	r2, r3
 80057b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057b6:	6093      	str	r3, [r2, #8]
 80057b8:	e07e      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	3304      	adds	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	0159      	lsls	r1, r3, #5
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	440b      	add	r3, r1
 80057dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d114      	bne.n	800581c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005804:	461a      	mov	r2, r3
 8005806:	2101      	movs	r1, #1
 8005808:	f004 f8d0 	bl	80099ac <USB_EP0_OutStart>
 800580c:	e006      	b.n	800581c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f006 fb86 	bl	800bf34 <HAL_PCD_DataOutStageCallback>
 8005828:	e046      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4a26      	ldr	r2, [pc, #152]	@ (80058c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d124      	bne.n	800587c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005848:	461a      	mov	r2, r3
 800584a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800584e:	6093      	str	r3, [r2, #8]
 8005850:	e032      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005868:	461a      	mov	r2, r3
 800586a:	2320      	movs	r3, #32
 800586c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f006 fb5d 	bl	800bf34 <HAL_PCD_DataOutStageCallback>
 800587a:	e01d      	b.n	80058b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d114      	bne.n	80058ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80058a4:	461a      	mov	r2, r3
 80058a6:	2100      	movs	r1, #0
 80058a8:	f004 f880 	bl	80099ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f006 fb3e 	bl	800bf34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	4f54300a 	.word	0x4f54300a
 80058c8:	4f54310a 	.word	0x4f54310a

080058cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	333c      	adds	r3, #60	@ 0x3c
 80058e4:	3304      	adds	r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <PCD_EP_OutSetupPacket_int+0x88>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d90e      	bls.n	8005920 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005918:	461a      	mov	r2, r3
 800591a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800591e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f006 faf5 	bl	800bf10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a0a      	ldr	r2, [pc, #40]	@ (8005954 <PCD_EP_OutSetupPacket_int+0x88>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d90c      	bls.n	8005948 <PCD_EP_OutSetupPacket_int+0x7c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005940:	461a      	mov	r2, r3
 8005942:	2101      	movs	r1, #1
 8005944:	f004 f832 	bl	80099ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	4f54300a 	.word	0x4f54300a

08005958 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
 8005964:	4613      	mov	r3, r2
 8005966:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005976:	883b      	ldrh	r3, [r7, #0]
 8005978:	0419      	lsls	r1, r3, #16
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	430a      	orrs	r2, r1
 8005982:	629a      	str	r2, [r3, #40]	@ 0x28
 8005984:	e028      	b.n	80059d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4413      	add	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e00d      	b.n	80059b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	3340      	adds	r3, #64	@ 0x40
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	3301      	adds	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3ec      	bcc.n	800599a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059c0:	883b      	ldrh	r3, [r7, #0]
 80059c2:	0418      	lsls	r0, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	4302      	orrs	r2, r0
 80059d0:	3340      	adds	r3, #64	@ 0x40
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	887a      	ldrh	r2, [r7, #2]
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e267      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d075      	beq.n	8005b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a3e:	4b88      	ldr	r3, [pc, #544]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d00c      	beq.n	8005a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4a:	4b85      	ldr	r3, [pc, #532]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d112      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4b82      	ldr	r3, [pc, #520]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a62:	d10b      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	4b7e      	ldr	r3, [pc, #504]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05b      	beq.n	8005b28 <HAL_RCC_OscConfig+0x108>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d157      	bne.n	8005b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e242      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_OscConfig+0x74>
 8005a86:	4b76      	ldr	r3, [pc, #472]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a75      	ldr	r2, [pc, #468]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e01d      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x98>
 8005a9e:	4b70      	ldr	r3, [pc, #448]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6c      	ldr	r2, [pc, #432]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005ab8:	4b69      	ldr	r3, [pc, #420]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a68      	ldr	r2, [pc, #416]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4b66      	ldr	r3, [pc, #408]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a65      	ldr	r2, [pc, #404]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fe f846 	bl	8003b68 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fe f842 	bl	8003b68 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	@ 0x64
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e207      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xc0>
 8005afe:	e014      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fe f832 	bl	8003b68 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fe f82e 	bl	8003b68 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	@ 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e1f3      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	4b51      	ldr	r3, [pc, #324]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0xe8>
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d063      	beq.n	8005bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b36:	4b4a      	ldr	r3, [pc, #296]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b42:	4b47      	ldr	r3, [pc, #284]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d11c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b44      	ldr	r3, [pc, #272]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d116      	bne.n	8005b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5a:	4b41      	ldr	r3, [pc, #260]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_RCC_OscConfig+0x152>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e1c7      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b72:	4b3b      	ldr	r3, [pc, #236]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4937      	ldr	r1, [pc, #220]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	e03a      	b.n	8005bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b90:	4b34      	ldr	r3, [pc, #208]	@ (8005c64 <HAL_RCC_OscConfig+0x244>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b96:	f7fd ffe7 	bl	8003b68 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fd ffe3 	bl	8003b68 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e1a8      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4b28      	ldr	r3, [pc, #160]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4925      	ldr	r1, [pc, #148]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
 8005bd0:	e015      	b.n	8005bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd2:	4b24      	ldr	r3, [pc, #144]	@ (8005c64 <HAL_RCC_OscConfig+0x244>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fd ffc6 	bl	8003b68 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be0:	f7fd ffc2 	bl	8003b68 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e187      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d036      	beq.n	8005c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c12:	4b15      	ldr	r3, [pc, #84]	@ (8005c68 <HAL_RCC_OscConfig+0x248>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fd ffa6 	bl	8003b68 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c20:	f7fd ffa2 	bl	8003b68 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e167      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x200>
 8005c3e:	e01b      	b.n	8005c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c40:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <HAL_RCC_OscConfig+0x248>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c46:	f7fd ff8f 	bl	8003b68 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c4c:	e00e      	b.n	8005c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c4e:	f7fd ff8b 	bl	8003b68 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d907      	bls.n	8005c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e150      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
 8005c60:	40023800 	.word	0x40023800
 8005c64:	42470000 	.word	0x42470000
 8005c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6c:	4b88      	ldr	r3, [pc, #544]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ea      	bne.n	8005c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8097 	beq.w	8005db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8a:	4b81      	ldr	r3, [pc, #516]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b77      	ldr	r3, [pc, #476]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b74      	ldr	r3, [pc, #464]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a73      	ldr	r2, [pc, #460]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fd ff4b 	bl	8003b68 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fd ff47 	bl	8003b68 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e10c      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x2ea>
 8005cfc:	4b64      	ldr	r3, [pc, #400]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	4a63      	ldr	r2, [pc, #396]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d08:	e01c      	b.n	8005d44 <HAL_RCC_OscConfig+0x324>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x30c>
 8005d12:	4b5f      	ldr	r3, [pc, #380]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a5e      	ldr	r2, [pc, #376]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	4a5b      	ldr	r2, [pc, #364]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0x324>
 8005d2c:	4b58      	ldr	r3, [pc, #352]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d30:	4a57      	ldr	r2, [pc, #348]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d38:	4b55      	ldr	r3, [pc, #340]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3c:	4a54      	ldr	r2, [pc, #336]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	f023 0304 	bic.w	r3, r3, #4
 8005d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4c:	f7fd ff0c 	bl	8003b68 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d54:	f7fd ff08 	bl	8003b68 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e0cb      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6a:	4b49      	ldr	r3, [pc, #292]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ee      	beq.n	8005d54 <HAL_RCC_OscConfig+0x334>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d78:	f7fd fef6 	bl	8003b68 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d80:	f7fd fef2 	bl	8003b68 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0b5      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d96:	4b3e      	ldr	r3, [pc, #248]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ee      	bne.n	8005d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da8:	4b39      	ldr	r3, [pc, #228]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80a1 	beq.w	8005f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dbe:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d05c      	beq.n	8005e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d141      	bne.n	8005e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd2:	4b31      	ldr	r3, [pc, #196]	@ (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fec6 	bl	8003b68 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de0:	f7fd fec2 	bl	8003b68 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e087      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	019b      	lsls	r3, r3, #6
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	3b01      	subs	r3, #1
 8005e18:	041b      	lsls	r3, r3, #16
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	061b      	lsls	r3, r3, #24
 8005e22:	491b      	ldr	r1, [pc, #108]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e28:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2e:	f7fd fe9b 	bl	8003b68 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e36:	f7fd fe97 	bl	8003b68 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e05c      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e48:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x416>
 8005e54:	e054      	b.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fd fe84 	bl	8003b68 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fd fe80 	bl	8003b68 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e045      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x444>
 8005e82:	e03d      	b.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e038      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40007000 	.word	0x40007000
 8005e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f0c <HAL_RCC_OscConfig+0x4ec>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d028      	beq.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d121      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d11a      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d111      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800

08005f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0cc      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f24:	4b68      	ldr	r3, [pc, #416]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d90c      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b65      	ldr	r3, [pc, #404]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0b8      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f64:	4b59      	ldr	r3, [pc, #356]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a58      	ldr	r2, [pc, #352]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f7c:	4b53      	ldr	r3, [pc, #332]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a52      	ldr	r2, [pc, #328]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b50      	ldr	r3, [pc, #320]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	494d      	ldr	r1, [pc, #308]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d044      	beq.n	8006030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b47      	ldr	r3, [pc, #284]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d119      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d003      	beq.n	8005fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d107      	bne.n	8005fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fce:	4b3f      	ldr	r3, [pc, #252]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e06f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fde:	4b3b      	ldr	r3, [pc, #236]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e067      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fee:	4b37      	ldr	r3, [pc, #220]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	4934      	ldr	r1, [pc, #208]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006000:	f7fd fdb2 	bl	8003b68 <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006006:	e00a      	b.n	800601e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006008:	f7fd fdae 	bl	8003b68 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e04f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	4b2b      	ldr	r3, [pc, #172]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 020c 	and.w	r2, r3, #12
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	429a      	cmp	r2, r3
 800602e:	d1eb      	bne.n	8006008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006030:	4b25      	ldr	r3, [pc, #148]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d20c      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e032      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4916      	ldr	r1, [pc, #88]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006082:	4b12      	ldr	r3, [pc, #72]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	490e      	ldr	r1, [pc, #56]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	4313      	orrs	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006096:	f000 f82d 	bl	80060f4 <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490a      	ldr	r1, [pc, #40]	@ (80060d0 <HAL_RCC_ClockConfig+0x1c0>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <HAL_RCC_ClockConfig+0x1c8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc fbbe 	bl	8002838 <HAL_InitTick>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40023c00 	.word	0x40023c00
 80060cc:	40023800 	.word	0x40023800
 80060d0:	0800eab0 	.word	0x0800eab0
 80060d4:	20000100 	.word	0x20000100
 80060d8:	20000130 	.word	0x20000130

080060dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80060e0:	4b03      	ldr	r3, [pc, #12]	@ (80060f0 <HAL_RCC_EnableCSS+0x14>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
}
 80060e6:	bf00      	nop
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	4247004c 	.word	0x4247004c

080060f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f8:	b090      	sub	sp, #64	@ 0x40
 80060fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006104:	2300      	movs	r3, #0
 8006106:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800610c:	4b59      	ldr	r3, [pc, #356]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 030c 	and.w	r3, r3, #12
 8006114:	2b08      	cmp	r3, #8
 8006116:	d00d      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0x40>
 8006118:	2b08      	cmp	r3, #8
 800611a:	f200 80a1 	bhi.w	8006260 <HAL_RCC_GetSysClockFreq+0x16c>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_RCC_GetSysClockFreq+0x34>
 8006122:	2b04      	cmp	r3, #4
 8006124:	d003      	beq.n	800612e <HAL_RCC_GetSysClockFreq+0x3a>
 8006126:	e09b      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006128:	4b53      	ldr	r3, [pc, #332]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x184>)
 800612a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800612c:	e09b      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800612e:	4b53      	ldr	r3, [pc, #332]	@ (800627c <HAL_RCC_GetSysClockFreq+0x188>)
 8006130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006132:	e098      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006134:	4b4f      	ldr	r3, [pc, #316]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800613e:	4b4d      	ldr	r3, [pc, #308]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d028      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614a:	4b4a      	ldr	r3, [pc, #296]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	099b      	lsrs	r3, r3, #6
 8006150:	2200      	movs	r2, #0
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	627a      	str	r2, [r7, #36]	@ 0x24
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800615c:	2100      	movs	r1, #0
 800615e:	4b47      	ldr	r3, [pc, #284]	@ (800627c <HAL_RCC_GetSysClockFreq+0x188>)
 8006160:	fb03 f201 	mul.w	r2, r3, r1
 8006164:	2300      	movs	r3, #0
 8006166:	fb00 f303 	mul.w	r3, r0, r3
 800616a:	4413      	add	r3, r2
 800616c:	4a43      	ldr	r2, [pc, #268]	@ (800627c <HAL_RCC_GetSysClockFreq+0x188>)
 800616e:	fba0 1202 	umull	r1, r2, r0, r2
 8006172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006174:	460a      	mov	r2, r1
 8006176:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800617a:	4413      	add	r3, r2
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	2200      	movs	r2, #0
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	61fa      	str	r2, [r7, #28]
 8006186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800618e:	f7fa f87f 	bl	8000290 <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4613      	mov	r3, r2
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800619a:	e053      	b.n	8006244 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619c:	4b35      	ldr	r3, [pc, #212]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	099b      	lsrs	r3, r3, #6
 80061a2:	2200      	movs	r2, #0
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	617a      	str	r2, [r7, #20]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061ae:	f04f 0b00 	mov.w	fp, #0
 80061b2:	4652      	mov	r2, sl
 80061b4:	465b      	mov	r3, fp
 80061b6:	f04f 0000 	mov.w	r0, #0
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	0159      	lsls	r1, r3, #5
 80061c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c4:	0150      	lsls	r0, r2, #5
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	ebb2 080a 	subs.w	r8, r2, sl
 80061ce:	eb63 090b 	sbc.w	r9, r3, fp
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061e6:	ebb2 0408 	subs.w	r4, r2, r8
 80061ea:	eb63 0509 	sbc.w	r5, r3, r9
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	00eb      	lsls	r3, r5, #3
 80061f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061fc:	00e2      	lsls	r2, r4, #3
 80061fe:	4614      	mov	r4, r2
 8006200:	461d      	mov	r5, r3
 8006202:	eb14 030a 	adds.w	r3, r4, sl
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	eb45 030b 	adc.w	r3, r5, fp
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800621a:	4629      	mov	r1, r5
 800621c:	028b      	lsls	r3, r1, #10
 800621e:	4621      	mov	r1, r4
 8006220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006224:	4621      	mov	r1, r4
 8006226:	028a      	lsls	r2, r1, #10
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622e:	2200      	movs	r2, #0
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	60fa      	str	r2, [r7, #12]
 8006234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006238:	f7fa f82a 	bl	8000290 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4613      	mov	r3, r2
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006244:	4b0b      	ldr	r3, [pc, #44]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	3301      	adds	r3, #1
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006254:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800625e:	e002      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x184>)
 8006262:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006268:	4618      	mov	r0, r3
 800626a:	3740      	adds	r7, #64	@ 0x40
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	00f42400 	.word	0x00f42400
 800627c:	017d7840 	.word	0x017d7840

08006280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006284:	4b03      	ldr	r3, [pc, #12]	@ (8006294 <HAL_RCC_GetHCLKFreq+0x14>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000100 	.word	0x20000100

08006298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800629c:	f7ff fff0 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0b5b      	lsrs	r3, r3, #13
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4903      	ldr	r1, [pc, #12]	@ (80062bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40023800 	.word	0x40023800
 80062bc:	0800eac0 	.word	0x0800eac0

080062c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	220f      	movs	r2, #15
 80062ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062d0:	4b12      	ldr	r3, [pc, #72]	@ (800631c <HAL_RCC_GetClockConfig+0x5c>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0203 	and.w	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062dc:	4b0f      	ldr	r3, [pc, #60]	@ (800631c <HAL_RCC_GetClockConfig+0x5c>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062e8:	4b0c      	ldr	r3, [pc, #48]	@ (800631c <HAL_RCC_GetClockConfig+0x5c>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062f4:	4b09      	ldr	r3, [pc, #36]	@ (800631c <HAL_RCC_GetClockConfig+0x5c>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	08db      	lsrs	r3, r3, #3
 80062fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006302:	4b07      	ldr	r3, [pc, #28]	@ (8006320 <HAL_RCC_GetClockConfig+0x60>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0207 	and.w	r2, r3, #7
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	601a      	str	r2, [r3, #0]
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800
 8006320:	40023c00 	.word	0x40023c00

08006324 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006328:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <HAL_RCC_NMI_IRQHandler+0x20>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006330:	2b80      	cmp	r3, #128	@ 0x80
 8006332:	d104      	bne.n	800633e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006334:	f000 f80a 	bl	800634c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006338:	4b03      	ldr	r3, [pc, #12]	@ (8006348 <HAL_RCC_NMI_IRQHandler+0x24>)
 800633a:	2280      	movs	r2, #128	@ 0x80
 800633c:	701a      	strb	r2, [r3, #0]
  }
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	4002380e 	.word	0x4002380e

0800634c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e07b      	b.n	8006464 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800637c:	d009      	beq.n	8006392 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	61da      	str	r2, [r3, #28]
 8006384:	e005      	b.n	8006392 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fc f9f3 	bl	8002798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	ea42 0103 	orr.w	r1, r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	0c1b      	lsrs	r3, r3, #16
 8006430:	f003 0104 	and.w	r1, r3, #4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	f003 0210 	and.w	r2, r3, #16
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69da      	ldr	r2, [r3, #28]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_SPI_Transmit+0x22>
 800648a:	2302      	movs	r3, #2
 800648c:	e126      	b.n	80066dc <HAL_SPI_Transmit+0x270>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006496:	f7fd fb67 	bl	8003b68 <HAL_GetTick>
 800649a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064b0:	e10b      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Transmit+0x52>
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064c2:	e102      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2203      	movs	r2, #3
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650a:	d10f      	bne.n	800652c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800651a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800652a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	d007      	beq.n	800654a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006552:	d14b      	bne.n	80065ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <HAL_SPI_Transmit+0xf6>
 800655c:	8afb      	ldrh	r3, [r7, #22]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d13e      	bne.n	80065e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006586:	e02b      	b.n	80065e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b02      	cmp	r3, #2
 8006594:	d112      	bne.n	80065bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065ba:	e011      	b.n	80065e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065bc:	f7fd fad4 	bl	8003b68 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d803      	bhi.n	80065d4 <HAL_SPI_Transmit+0x168>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d2:	d102      	bne.n	80065da <HAL_SPI_Transmit+0x16e>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065de:	e074      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ce      	bne.n	8006588 <HAL_SPI_Transmit+0x11c>
 80065ea:	e04c      	b.n	8006686 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_SPI_Transmit+0x18e>
 80065f4:	8afb      	ldrh	r3, [r7, #22]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d140      	bne.n	800667c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006620:	e02c      	b.n	800667c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d113      	bne.n	8006658 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006656:	e011      	b.n	800667c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006658:	f7fd fa86 	bl	8003b68 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d803      	bhi.n	8006670 <HAL_SPI_Transmit+0x204>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800666e:	d102      	bne.n	8006676 <HAL_SPI_Transmit+0x20a>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800667a:	e026      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cd      	bne.n	8006622 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fcde 	bl	800704c <SPI_EndRxTxTransaction>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e000      	b.n	80066ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80066c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066da:	7ffb      	ldrb	r3, [r7, #31]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006700:	d112      	bne.n	8006728 <HAL_SPI_Receive+0x44>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10e      	bne.n	8006728 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2204      	movs	r2, #4
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f8f1 	bl	8006906 <HAL_SPI_TransmitReceive>
 8006724:	4603      	mov	r3, r0
 8006726:	e0ea      	b.n	80068fe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_SPI_Receive+0x52>
 8006732:	2302      	movs	r3, #2
 8006734:	e0e3      	b.n	80068fe <HAL_SPI_Receive+0x21a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673e:	f7fd fa13 	bl	8003b68 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d002      	beq.n	8006756 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006750:	2302      	movs	r3, #2
 8006752:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006754:	e0ca      	b.n	80068ec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_SPI_Receive+0x7e>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006766:	e0c1      	b.n	80068ec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2204      	movs	r2, #4
 800676c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	88fa      	ldrh	r2, [r7, #6]
 8006786:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ae:	d10f      	bne.n	80067d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	d007      	beq.n	80067ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d162      	bne.n	80068bc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067f6:	e02e      	b.n	8006856 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d115      	bne.n	8006832 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f103 020c 	add.w	r2, r3, #12
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006830:	e011      	b.n	8006856 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fd f999 	bl	8003b68 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_Receive+0x166>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006848:	d102      	bne.n	8006850 <HAL_SPI_Receive+0x16c>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006854:	e04a      	b.n	80068ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1cb      	bne.n	80067f8 <HAL_SPI_Receive+0x114>
 8006860:	e031      	b.n	80068c6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d113      	bne.n	8006898 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	b292      	uxth	r2, r2
 800687c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	1c9a      	adds	r2, r3, #2
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006896:	e011      	b.n	80068bc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006898:	f7fd f966 	bl	8003b68 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d803      	bhi.n	80068b0 <HAL_SPI_Receive+0x1cc>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ae:	d102      	bne.n	80068b6 <HAL_SPI_Receive+0x1d2>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068ba:	e017      	b.n	80068ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1cd      	bne.n	8006862 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fb58 	bl	8006f80 <SPI_EndRxTransaction>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
 80068e8:	e000      	b.n	80068ec <HAL_SPI_Receive+0x208>
  }

error :
 80068ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b08c      	sub	sp, #48	@ 0x30
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006914:	2301      	movs	r3, #1
 8006916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_SPI_TransmitReceive+0x26>
 8006928:	2302      	movs	r3, #2
 800692a:	e18a      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x33c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006934:	f7fd f918 	bl	8003b68 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800694e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006952:	2b01      	cmp	r3, #1
 8006954:	d00f      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x70>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800695c:	d107      	bne.n	800696e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <HAL_SPI_TransmitReceive+0x68>
 8006966:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800696a:	2b04      	cmp	r3, #4
 800696c:	d003      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800696e:	2302      	movs	r3, #2
 8006970:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006974:	e15b      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x82>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x82>
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800698e:	e14e      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b04      	cmp	r3, #4
 800699a:	d003      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2205      	movs	r2, #5
 80069a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	887a      	ldrh	r2, [r7, #2]
 80069b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	887a      	ldrh	r2, [r7, #2]
 80069ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	d007      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a00:	d178      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x10a>
 8006a0a:	8b7b      	ldrh	r3, [r7, #26]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d166      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a34:	e053      	b.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11b      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d113      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a64:	1c9a      	adds	r2, r3, #2
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d119      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x1b8>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d014      	beq.n	8006abe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aba:	2301      	movs	r3, #1
 8006abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006abe:	f7fd f853 	bl	8003b68 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d807      	bhi.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ad4:	d003      	beq.n	8006ade <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006adc:	e0a7      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1a6      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x130>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1a1      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x130>
 8006af2:	e07c      	b.n	8006bee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x1fc>
 8006afc:	8b7b      	ldrh	r3, [r7, #26]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d16b      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	7812      	ldrb	r2, [r2, #0]
 8006b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b28:	e057      	b.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d11c      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d017      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
 8006b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d114      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d119      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x2ae>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb4:	f7fc ffd8 	bl	8003b68 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d803      	bhi.n	8006bcc <HAL_SPI_TransmitReceive+0x2c6>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bca:	d102      	bne.n	8006bd2 <HAL_SPI_TransmitReceive+0x2cc>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006bd8:	e029      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1a2      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x224>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d19d      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fa2a 	bl	800704c <SPI_EndRxTxTransaction>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d006      	beq.n	8006c0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006c0a:	e010      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	e000      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3730      	adds	r7, #48	@ 0x30
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10e      	bne.n	8006c8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
    return;
 8006c8a:	e0ce      	b.n	8006e2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_SPI_IRQHandler+0x5e>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
    return;
 8006ca8:	e0bf      	b.n	8006e2a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <HAL_SPI_IRQHandler+0x7e>
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80b0 	beq.w	8006e2a <HAL_SPI_IRQHandler+0x1de>
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80aa 	beq.w	8006e2a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d023      	beq.n	8006d28 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d011      	beq.n	8006d10 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf0:	f043 0204 	orr.w	r2, r3, #4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	e00b      	b.n	8006d28 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	693b      	ldr	r3, [r7, #16]
        return;
 8006d26:	e080      	b.n	8006e2a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d014      	beq.n	8006d5c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d36:	f043 0201 	orr.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6a:	f043 0208 	orr.w	r2, r3, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d72:	2300      	movs	r3, #0
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60bb      	str	r3, [r7, #8]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d04f      	beq.n	8006e28 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_SPI_IRQHandler+0x168>
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d034      	beq.n	8006e1e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0203 	bic.w	r2, r2, #3
 8006dc2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd0:	4a17      	ldr	r2, [pc, #92]	@ (8006e30 <HAL_SPI_IRQHandler+0x1e4>)
 8006dd2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fc ffd7 	bl	8003d8c <HAL_DMA_Abort_IT>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d016      	beq.n	8006e26 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006e30 <HAL_SPI_IRQHandler+0x1e4>)
 8006dfe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fc ffc1 	bl	8003d8c <HAL_DMA_Abort_IT>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006e1c:	e003      	b.n	8006e26 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f808 	bl	8006e34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e24:	e000      	b.n	8006e28 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006e26:	bf00      	nop
    return;
 8006e28:	bf00      	nop
  }
}
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	08006e49 	.word	0x08006e49

08006e34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff ffe6 	bl	8006e34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e80:	f7fc fe72 	bl	8003b68 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e90:	f7fc fe6a 	bl	8003b68 <HAL_GetTick>
 8006e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e96:	4b39      	ldr	r3, [pc, #228]	@ (8006f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	015b      	lsls	r3, r3, #5
 8006e9c:	0d1b      	lsrs	r3, r3, #20
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
 8006ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ea6:	e054      	b.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eae:	d050      	beq.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eb0:	f7fc fe5a 	bl	8003b68 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d902      	bls.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d13d      	bne.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ede:	d111      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee8:	d004      	beq.n	8006ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef2:	d107      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f0c:	d10f      	bne.n	8006f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e017      	b.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d19b      	bne.n	8006ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000100 	.word	0x20000100

08006f80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f94:	d111      	bne.n	8006fba <SPI_EndRxTransaction+0x3a>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9e:	d004      	beq.n	8006faa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa8:	d107      	bne.n	8006fba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc2:	d12a      	bne.n	800701a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fcc:	d012      	beq.n	8006ff4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2180      	movs	r1, #128	@ 0x80
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff ff49 	bl	8006e70 <SPI_WaitFlagStateUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02d      	beq.n	8007040 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe8:	f043 0220 	orr.w	r2, r3, #32
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e026      	b.n	8007042 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff ff36 	bl	8006e70 <SPI_WaitFlagStateUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01a      	beq.n	8007040 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e013      	b.n	8007042 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2200      	movs	r2, #0
 8007022:	2101      	movs	r1, #1
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff ff23 	bl	8006e70 <SPI_WaitFlagStateUntilTimeout>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e000      	b.n	8007042 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007058:	4b1b      	ldr	r3, [pc, #108]	@ (80070c8 <SPI_EndRxTxTransaction+0x7c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1b      	ldr	r2, [pc, #108]	@ (80070cc <SPI_EndRxTxTransaction+0x80>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	0d5b      	lsrs	r3, r3, #21
 8007064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007076:	d112      	bne.n	800709e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	2180      	movs	r1, #128	@ 0x80
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fef4 	bl	8006e70 <SPI_WaitFlagStateUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007092:	f043 0220 	orr.w	r2, r3, #32
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e00f      	b.n	80070be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b4:	2b80      	cmp	r3, #128	@ 0x80
 80070b6:	d0f2      	beq.n	800709e <SPI_EndRxTxTransaction+0x52>
 80070b8:	e000      	b.n	80070bc <SPI_EndRxTxTransaction+0x70>
        break;
 80070ba:	bf00      	nop
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000100 	.word	0x20000100
 80070cc:	165e9f81 	.word	0x165e9f81

080070d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e041      	b.n	8007166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d106      	bne.n	80070fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f839 	bl	800716e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f000 f9ca 	bl	80074a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e044      	b.n	8007226 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <HAL_TIM_Base_Start_IT+0xb0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d018      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d013      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007238 <HAL_TIM_Base_Start_IT+0xb4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00e      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a19      	ldr	r2, [pc, #100]	@ (800723c <HAL_TIM_Base_Start_IT+0xb8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d009      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a17      	ldr	r2, [pc, #92]	@ (8007240 <HAL_TIM_Base_Start_IT+0xbc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d004      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x6c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a16      	ldr	r2, [pc, #88]	@ (8007244 <HAL_TIM_Base_Start_IT+0xc0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d111      	bne.n	8007214 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d010      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0201 	orr.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007212:	e007      	b.n	8007224 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40014000 	.word	0x40014000

08007248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d122      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d11b      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0202 	mvn.w	r2, #2
 8007274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8ee 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 8007290:	e005      	b.n	800729e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8e0 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f8f1 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d11b      	bne.n	80072f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0204 	mvn.w	r2, #4
 80072c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f8c4 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 80072e4:	e005      	b.n	80072f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8b6 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f8c7 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b08      	cmp	r3, #8
 8007304:	d122      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d11b      	bne.n	800734c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0208 	mvn.w	r2, #8
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f89a 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f88c 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f89d 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b10      	cmp	r3, #16
 8007358:	d122      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b10      	cmp	r3, #16
 8007366:	d11b      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0210 	mvn.w	r2, #16
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2208      	movs	r2, #8
 8007376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f870 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f862 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f873 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d10e      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0201 	mvn.w	r2, #1
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7fa fc94 	bl	8001cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b80      	cmp	r3, #128	@ 0x80
 80073d8:	d10e      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e4:	2b80      	cmp	r3, #128	@ 0x80
 80073e6:	d107      	bne.n	80073f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8e2 	bl	80075bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007402:	2b40      	cmp	r3, #64	@ 0x40
 8007404:	d10e      	bne.n	8007424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b40      	cmp	r3, #64	@ 0x40
 8007412:	d107      	bne.n	8007424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f838 	bl	8007494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d10e      	bne.n	8007450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b20      	cmp	r3, #32
 800743e:	d107      	bne.n	8007450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0220 	mvn.w	r2, #32
 8007448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8ac 	bl	80075a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a34      	ldr	r2, [pc, #208]	@ (800758c <TIM_Base_SetConfig+0xe4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d00b      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a31      	ldr	r2, [pc, #196]	@ (8007590 <TIM_Base_SetConfig+0xe8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a30      	ldr	r2, [pc, #192]	@ (8007594 <TIM_Base_SetConfig+0xec>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_Base_SetConfig+0x38>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a2f      	ldr	r2, [pc, #188]	@ (8007598 <TIM_Base_SetConfig+0xf0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d108      	bne.n	80074f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a25      	ldr	r2, [pc, #148]	@ (800758c <TIM_Base_SetConfig+0xe4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01b      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007500:	d017      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a22      	ldr	r2, [pc, #136]	@ (8007590 <TIM_Base_SetConfig+0xe8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a21      	ldr	r2, [pc, #132]	@ (8007594 <TIM_Base_SetConfig+0xec>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00f      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a20      	ldr	r2, [pc, #128]	@ (8007598 <TIM_Base_SetConfig+0xf0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00b      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <TIM_Base_SetConfig+0xf4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a1e      	ldr	r2, [pc, #120]	@ (80075a0 <TIM_Base_SetConfig+0xf8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_Base_SetConfig+0x8a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1d      	ldr	r2, [pc, #116]	@ (80075a4 <TIM_Base_SetConfig+0xfc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d108      	bne.n	8007544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a08      	ldr	r2, [pc, #32]	@ (800758c <TIM_Base_SetConfig+0xe4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d103      	bne.n	8007578 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	615a      	str	r2, [r3, #20]
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40000c00 	.word	0x40000c00
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800

080075a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <LL_GPIO_SetPinMode>:
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	@ 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	fa93 f3a3 	rbit	r3, r3
 80075ea:	613b      	str	r3, [r7, #16]
  return result;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	fab3 f383 	clz	r3, r3
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	2103      	movs	r1, #3
 80075f8:	fa01 f303 	lsl.w	r3, r1, r3
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	fa93 f3a3 	rbit	r3, r3
 800760a:	61bb      	str	r3, [r7, #24]
  return result;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	fab3 f383 	clz	r3, r3
 8007612:	b2db      	uxtb	r3, r3
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	601a      	str	r2, [r3, #0]
}
 8007622:	bf00      	nop
 8007624:	3724      	adds	r7, #36	@ 0x24
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <LL_GPIO_SetPinOutputType>:
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	43db      	mvns	r3, r3
 8007642:	401a      	ands	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	605a      	str	r2, [r3, #4]
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <LL_GPIO_SetPinSpeed>:
{
 800765e:	b480      	push	{r7}
 8007660:	b089      	sub	sp, #36	@ 0x24
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	fa93 f3a3 	rbit	r3, r3
 8007678:	613b      	str	r3, [r7, #16]
  return result;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	fab3 f383 	clz	r3, r3
 8007680:	b2db      	uxtb	r3, r3
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	2103      	movs	r1, #3
 8007686:	fa01 f303 	lsl.w	r3, r1, r3
 800768a:	43db      	mvns	r3, r3
 800768c:	401a      	ands	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	fa93 f3a3 	rbit	r3, r3
 8007698:	61bb      	str	r3, [r7, #24]
  return result;
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	fab3 f383 	clz	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	fa01 f303 	lsl.w	r3, r1, r3
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	3724      	adds	r7, #36	@ 0x24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <LL_GPIO_SetPinPull>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	@ 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	fa93 f3a3 	rbit	r3, r3
 80076d6:	613b      	str	r3, [r7, #16]
  return result;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	fab3 f383 	clz	r3, r3
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	2103      	movs	r1, #3
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	43db      	mvns	r3, r3
 80076ea:	401a      	ands	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	fa93 f3a3 	rbit	r3, r3
 80076f6:	61bb      	str	r3, [r7, #24]
  return result;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	fab3 f383 	clz	r3, r3
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	fa01 f303 	lsl.w	r3, r1, r3
 8007708:	431a      	orrs	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	60da      	str	r2, [r3, #12]
}
 800770e:	bf00      	nop
 8007710:	3724      	adds	r7, #36	@ 0x24
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <LL_GPIO_SetAFPin_0_7>:
{
 800771a:	b480      	push	{r7}
 800771c:	b089      	sub	sp, #36	@ 0x24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	fa93 f3a3 	rbit	r3, r3
 8007734:	613b      	str	r3, [r7, #16]
  return result;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	fab3 f383 	clz	r3, r3
 800773c:	b2db      	uxtb	r3, r3
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	210f      	movs	r1, #15
 8007742:	fa01 f303 	lsl.w	r3, r1, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	401a      	ands	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	fa93 f3a3 	rbit	r3, r3
 8007754:	61bb      	str	r3, [r7, #24]
  return result;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	fab3 f383 	clz	r3, r3
 800775c:	b2db      	uxtb	r3, r3
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	fa01 f303 	lsl.w	r3, r1, r3
 8007766:	431a      	orrs	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	3724      	adds	r7, #36	@ 0x24
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <LL_GPIO_SetAFPin_8_15>:
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	@ 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	fa93 f3a3 	rbit	r3, r3
 8007794:	613b      	str	r3, [r7, #16]
  return result;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	fab3 f383 	clz	r3, r3
 800779c:	b2db      	uxtb	r3, r3
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	210f      	movs	r1, #15
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	401a      	ands	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	fa93 f3a3 	rbit	r3, r3
 80077b6:	61bb      	str	r3, [r7, #24]
  return result;
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	fab3 f383 	clz	r3, r3
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	fa01 f303 	lsl.w	r3, r1, r3
 80077c8:	431a      	orrs	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80077ce:	bf00      	nop
 80077d0:	3724      	adds	r7, #36	@ 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b088      	sub	sp, #32
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	fa93 f3a3 	rbit	r3, r3
 80077f8:	613b      	str	r3, [r7, #16]
  return result;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	fab3 f383 	clz	r3, r3
 8007800:	b2db      	uxtb	r3, r3
 8007802:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007804:	e050      	b.n	80078a8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	2101      	movs	r1, #1
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	fa01 f303 	lsl.w	r3, r1, r3
 8007812:	4013      	ands	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d042      	beq.n	80078a2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d003      	beq.n	800782c <LL_GPIO_Init+0x52>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d10d      	bne.n	8007848 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	461a      	mov	r2, r3
 8007832:	69b9      	ldr	r1, [r7, #24]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff ff12 	bl	800765e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fef3 	bl	800762e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	461a      	mov	r2, r3
 800784e:	69b9      	ldr	r1, [r7, #24]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff ff33 	bl	80076bc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d11a      	bne.n	8007894 <LL_GPIO_Init+0xba>
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	fa93 f3a3 	rbit	r3, r3
 8007868:	60bb      	str	r3, [r7, #8]
  return result;
 800786a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800786c:	fab3 f383 	clz	r3, r3
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b07      	cmp	r3, #7
 8007874:	d807      	bhi.n	8007886 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	461a      	mov	r2, r3
 800787c:	69b9      	ldr	r1, [r7, #24]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff ff4b 	bl	800771a <LL_GPIO_SetAFPin_0_7>
 8007884:	e006      	b.n	8007894 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	461a      	mov	r2, r3
 800788c:	69b9      	ldr	r1, [r7, #24]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ff72 	bl	8007778 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	461a      	mov	r2, r3
 800789a:	69b9      	ldr	r1, [r7, #24]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fe97 	bl	80075d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	3301      	adds	r3, #1
 80078a6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	fa22 f303 	lsr.w	r3, r2, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1a7      	bne.n	8007806 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80078c4:	4b04      	ldr	r3, [pc, #16]	@ (80078d8 <LL_RCC_GetSysClkSource+0x18>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f003 030c 	and.w	r3, r3, #12
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40023800 	.word	0x40023800

080078dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80078e0:	4b04      	ldr	r3, [pc, #16]	@ (80078f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40023800 	.word	0x40023800

080078f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80078fc:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <LL_RCC_GetAPB1Prescaler+0x18>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8007904:	4618      	mov	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800

08007914 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007918:	4b04      	ldr	r3, [pc, #16]	@ (800792c <LL_RCC_GetAPB2Prescaler+0x18>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8007920:	4618      	mov	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40023800 	.word	0x40023800

08007930 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007934:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <LL_RCC_PLL_GetMainSource+0x18>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800793c:	4618      	mov	r0, r3
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40023800 	.word	0x40023800

0800794c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007950:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <LL_RCC_PLL_GetN+0x18>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	099b      	lsrs	r3, r3, #6
 8007956:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800795a:	4618      	mov	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40023800 	.word	0x40023800

08007968 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800796c:	4b04      	ldr	r3, [pc, #16]	@ (8007980 <LL_RCC_PLL_GetP+0x18>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007974:	4618      	mov	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40023800 	.word	0x40023800

08007984 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007988:	4b04      	ldr	r3, [pc, #16]	@ (800799c <LL_RCC_PLL_GetDivider+0x18>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8007990:	4618      	mov	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800

080079a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80079a8:	f000 f820 	bl	80079ec <RCC_GetSystemClockFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f840 	bl	8007a3c <RCC_GetHCLKClockFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f84e 	bl	8007a68 <RCC_GetPCLK1ClockFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f85a 	bl	8007a90 <RCC_GetPCLK2ClockFreq>
 80079dc:	4602      	mov	r2, r0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60da      	str	r2, [r3, #12]
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80079f6:	f7ff ff63 	bl	80078c0 <LL_RCC_GetSysClkSource>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d00c      	beq.n	8007a1a <RCC_GetSystemClockFreq+0x2e>
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d80f      	bhi.n	8007a24 <RCC_GetSystemClockFreq+0x38>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <RCC_GetSystemClockFreq+0x22>
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d003      	beq.n	8007a14 <RCC_GetSystemClockFreq+0x28>
 8007a0c:	e00a      	b.n	8007a24 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007a0e:	4b09      	ldr	r3, [pc, #36]	@ (8007a34 <RCC_GetSystemClockFreq+0x48>)
 8007a10:	607b      	str	r3, [r7, #4]
      break;
 8007a12:	e00a      	b.n	8007a2a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007a14:	4b08      	ldr	r3, [pc, #32]	@ (8007a38 <RCC_GetSystemClockFreq+0x4c>)
 8007a16:	607b      	str	r3, [r7, #4]
      break;
 8007a18:	e007      	b.n	8007a2a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007a1a:	2008      	movs	r0, #8
 8007a1c:	f000 f84c 	bl	8007ab8 <RCC_PLL_GetFreqDomain_SYS>
 8007a20:	6078      	str	r0, [r7, #4]
      break;
 8007a22:	e002      	b.n	8007a2a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007a24:	4b03      	ldr	r3, [pc, #12]	@ (8007a34 <RCC_GetSystemClockFreq+0x48>)
 8007a26:	607b      	str	r3, [r7, #4]
      break;
 8007a28:	bf00      	nop
  }

  return frequency;
 8007a2a:	687b      	ldr	r3, [r7, #4]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	00f42400 	.word	0x00f42400
 8007a38:	017d7840 	.word	0x017d7840

08007a3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007a44:	f7ff ff4a 	bl	80078dc <LL_RCC_GetAHBPrescaler>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	091b      	lsrs	r3, r3, #4
 8007a4c:	f003 030f 	and.w	r3, r3, #15
 8007a50:	4a04      	ldr	r2, [pc, #16]	@ (8007a64 <RCC_GetHCLKClockFreq+0x28>)
 8007a52:	5cd3      	ldrb	r3, [r2, r3]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	40d3      	lsrs	r3, r2
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	0800eab0 	.word	0x0800eab0

08007a68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007a70:	f7ff ff42 	bl	80078f8 <LL_RCC_GetAPB1Prescaler>
 8007a74:	4603      	mov	r3, r0
 8007a76:	0a9b      	lsrs	r3, r3, #10
 8007a78:	4a04      	ldr	r2, [pc, #16]	@ (8007a8c <RCC_GetPCLK1ClockFreq+0x24>)
 8007a7a:	5cd3      	ldrb	r3, [r2, r3]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	40d3      	lsrs	r3, r2
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	0800eac0 	.word	0x0800eac0

08007a90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007a98:	f7ff ff3c 	bl	8007914 <LL_RCC_GetAPB2Prescaler>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	0b5b      	lsrs	r3, r3, #13
 8007aa0:	4a04      	ldr	r2, [pc, #16]	@ (8007ab4 <RCC_GetPCLK2ClockFreq+0x24>)
 8007aa2:	5cd3      	ldrb	r3, [r2, r3]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	40d3      	lsrs	r3, r2
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	0800eac0 	.word	0x0800eac0

08007ab8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007acc:	f7ff ff30 	bl	8007930 <LL_RCC_PLL_GetMainSource>
 8007ad0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ade:	d003      	beq.n	8007ae8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007ae0:	e005      	b.n	8007aee <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007ae2:	4b12      	ldr	r3, [pc, #72]	@ (8007b2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007ae4:	617b      	str	r3, [r7, #20]
      break;
 8007ae6:	e005      	b.n	8007af4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007ae8:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007aea:	617b      	str	r3, [r7, #20]
      break;
 8007aec:	e002      	b.n	8007af4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007aee:	4b0f      	ldr	r3, [pc, #60]	@ (8007b2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007af0:	617b      	str	r3, [r7, #20]
      break;
 8007af2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	d113      	bne.n	8007b22 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007afa:	f7ff ff43 	bl	8007984 <LL_RCC_PLL_GetDivider>
 8007afe:	4602      	mov	r2, r0
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	fbb3 f4f2 	udiv	r4, r3, r2
 8007b06:	f7ff ff21 	bl	800794c <LL_RCC_PLL_GetN>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	fb03 f404 	mul.w	r4, r3, r4
 8007b10:	f7ff ff2a 	bl	8007968 <LL_RCC_PLL_GetP>
 8007b14:	4603      	mov	r3, r0
 8007b16:	0c1b      	lsrs	r3, r3, #16
 8007b18:	3301      	adds	r3, #1
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007b20:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007b22:	693b      	ldr	r3, [r7, #16]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd90      	pop	{r4, r7, pc}
 8007b2c:	00f42400 	.word	0x00f42400
 8007b30:	017d7840 	.word	0x017d7840

08007b34 <LL_TIM_SetPrescaler>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <LL_TIM_SetAutoReload>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <LL_TIM_SetRepetitionCounter>:
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	f043 0201 	orr.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	615a      	str	r2, [r3, #20]
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a31      	ldr	r2, [pc, #196]	@ (8007c80 <LL_TIM_Init+0xd8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00f      	beq.n	8007be0 <LL_TIM_Init+0x38>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc6:	d00b      	beq.n	8007be0 <LL_TIM_Init+0x38>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a2e      	ldr	r2, [pc, #184]	@ (8007c84 <LL_TIM_Init+0xdc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d007      	beq.n	8007be0 <LL_TIM_Init+0x38>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c88 <LL_TIM_Init+0xe0>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <LL_TIM_Init+0x38>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2c      	ldr	r2, [pc, #176]	@ (8007c8c <LL_TIM_Init+0xe4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d106      	bne.n	8007bee <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a23      	ldr	r2, [pc, #140]	@ (8007c80 <LL_TIM_Init+0xd8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01b      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfc:	d017      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a20      	ldr	r2, [pc, #128]	@ (8007c84 <LL_TIM_Init+0xdc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1f      	ldr	r2, [pc, #124]	@ (8007c88 <LL_TIM_Init+0xe0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1e      	ldr	r2, [pc, #120]	@ (8007c8c <LL_TIM_Init+0xe4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1d      	ldr	r2, [pc, #116]	@ (8007c90 <LL_TIM_Init+0xe8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1c      	ldr	r2, [pc, #112]	@ (8007c94 <LL_TIM_Init+0xec>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <LL_TIM_Init+0x86>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1b      	ldr	r2, [pc, #108]	@ (8007c98 <LL_TIM_Init+0xf0>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d106      	bne.n	8007c3c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff81 	bl	8007b50 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff ff6d 	bl	8007b34 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a08      	ldr	r2, [pc, #32]	@ (8007c80 <LL_TIM_Init+0xd8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d105      	bne.n	8007c6e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff7f 	bl	8007b6c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff ff8a 	bl	8007b88 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40010000 	.word	0x40010000
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	40000c00 	.word	0x40000c00
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800

08007c9c <LL_USART_IsEnabled>:
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb0:	bf0c      	ite	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	2300      	movne	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <LL_USART_SetStopBitsLength>:
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	611a      	str	r2, [r3, #16]
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <LL_USART_SetHWFlowCtrl>:
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	615a      	str	r2, [r3, #20]
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <LL_USART_SetBaudRate>:
{
 8007d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d14:	b0c0      	sub	sp, #256	@ 0x100
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d1c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8007d20:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007d24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d30:	f040 810c 	bne.w	8007f4c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007d34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d46:	4622      	mov	r2, r4
 8007d48:	462b      	mov	r3, r5
 8007d4a:	1891      	adds	r1, r2, r2
 8007d4c:	6639      	str	r1, [r7, #96]	@ 0x60
 8007d4e:	415b      	adcs	r3, r3
 8007d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007d56:	4621      	mov	r1, r4
 8007d58:	eb12 0801 	adds.w	r8, r2, r1
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	eb43 0901 	adc.w	r9, r3, r1
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d76:	4690      	mov	r8, r2
 8007d78:	4699      	mov	r9, r3
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	eb18 0303 	adds.w	r3, r8, r3
 8007d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d84:	462b      	mov	r3, r5
 8007d86:	eb49 0303 	adc.w	r3, r9, r3
 8007d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d92:	2200      	movs	r2, #0
 8007d94:	469a      	mov	sl, r3
 8007d96:	4693      	mov	fp, r2
 8007d98:	eb1a 030a 	adds.w	r3, sl, sl
 8007d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d9e:	eb4b 030b 	adc.w	r3, fp, fp
 8007da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007da4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007dac:	f7f8 fa70 	bl	8000290 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4b64      	ldr	r3, [pc, #400]	@ (8007f48 <LL_USART_SetBaudRate+0x238>)
 8007db6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	b29c      	uxth	r4, r3
 8007dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dcc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007dd0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	1891      	adds	r1, r2, r2
 8007dda:	6539      	str	r1, [r7, #80]	@ 0x50
 8007ddc:	415b      	adcs	r3, r3
 8007dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8007de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007de4:	4641      	mov	r1, r8
 8007de6:	1851      	adds	r1, r2, r1
 8007de8:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007dea:	4649      	mov	r1, r9
 8007dec:	414b      	adcs	r3, r1
 8007dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8007dfc:	4659      	mov	r1, fp
 8007dfe:	00cb      	lsls	r3, r1, #3
 8007e00:	4651      	mov	r1, sl
 8007e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e06:	4651      	mov	r1, sl
 8007e08:	00ca      	lsls	r2, r1, #3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4642      	mov	r2, r8
 8007e12:	189b      	adds	r3, r3, r2
 8007e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e18:	464b      	mov	r3, r9
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	eb42 0303 	adc.w	r3, r2, r3
 8007e20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e2e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007e32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007e36:	460b      	mov	r3, r1
 8007e38:	18db      	adds	r3, r3, r3
 8007e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	eb42 0303 	adc.w	r3, r2, r3
 8007e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e48:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8007e4c:	f7f8 fa20 	bl	8000290 <__aeabi_uldivmod>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4611      	mov	r1, r2
 8007e56:	4b3c      	ldr	r3, [pc, #240]	@ (8007f48 <LL_USART_SetBaudRate+0x238>)
 8007e58:	fba3 2301 	umull	r2, r3, r3, r1
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	2264      	movs	r2, #100	@ 0x64
 8007e60:	fb02 f303 	mul.w	r3, r2, r3
 8007e64:	1acb      	subs	r3, r1, r3
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e6c:	4b36      	ldr	r3, [pc, #216]	@ (8007f48 <LL_USART_SetBaudRate+0x238>)
 8007e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4423      	add	r3, r4
 8007e82:	b29c      	uxth	r4, r3
 8007e84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e8e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e92:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8007e96:	4642      	mov	r2, r8
 8007e98:	464b      	mov	r3, r9
 8007e9a:	1891      	adds	r1, r2, r2
 8007e9c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e9e:	415b      	adcs	r3, r3
 8007ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ea2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	1851      	adds	r1, r2, r1
 8007eaa:	6339      	str	r1, [r7, #48]	@ 0x30
 8007eac:	4649      	mov	r1, r9
 8007eae:	414b      	adcs	r3, r1
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ebe:	4659      	mov	r1, fp
 8007ec0:	00cb      	lsls	r3, r1, #3
 8007ec2:	4651      	mov	r1, sl
 8007ec4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ec8:	4651      	mov	r1, sl
 8007eca:	00ca      	lsls	r2, r1, #3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007eda:	464b      	mov	r3, r9
 8007edc:	460a      	mov	r2, r1
 8007ede:	eb42 0303 	adc.w	r3, r2, r3
 8007ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ee6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ef0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007ef4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	18db      	adds	r3, r3, r3
 8007efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007efe:	4613      	mov	r3, r2
 8007f00:	eb42 0303 	adc.w	r3, r2, r3
 8007f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f0a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8007f0e:	f7f8 f9bf 	bl	8000290 <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <LL_USART_SetBaudRate+0x238>)
 8007f18:	fba3 1302 	umull	r1, r3, r3, r2
 8007f1c:	095b      	lsrs	r3, r3, #5
 8007f1e:	2164      	movs	r1, #100	@ 0x64
 8007f20:	fb01 f303 	mul.w	r3, r1, r3
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	3332      	adds	r3, #50	@ 0x32
 8007f2a:	4a07      	ldr	r2, [pc, #28]	@ (8007f48 <LL_USART_SetBaudRate+0x238>)
 8007f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	4423      	add	r3, r4
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f44:	609a      	str	r2, [r3, #8]
}
 8007f46:	e108      	b.n	800815a <LL_USART_SetBaudRate+0x44a>
 8007f48:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007f4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f56:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f5a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007f5e:	4642      	mov	r2, r8
 8007f60:	464b      	mov	r3, r9
 8007f62:	1891      	adds	r1, r2, r2
 8007f64:	6239      	str	r1, [r7, #32]
 8007f66:	415b      	adcs	r3, r3
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f6e:	4641      	mov	r1, r8
 8007f70:	1854      	adds	r4, r2, r1
 8007f72:	4649      	mov	r1, r9
 8007f74:	eb43 0501 	adc.w	r5, r3, r1
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	00eb      	lsls	r3, r5, #3
 8007f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f86:	00e2      	lsls	r2, r4, #3
 8007f88:	4614      	mov	r4, r2
 8007f8a:	461d      	mov	r5, r3
 8007f8c:	4643      	mov	r3, r8
 8007f8e:	18e3      	adds	r3, r4, r3
 8007f90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f94:	464b      	mov	r3, r9
 8007f96:	eb45 0303 	adc.w	r3, r5, r3
 8007f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007fb8:	4629      	mov	r1, r5
 8007fba:	008b      	lsls	r3, r1, #2
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	008a      	lsls	r2, r1, #2
 8007fc6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8007fca:	f7f8 f961 	bl	8000290 <__aeabi_uldivmod>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4b65      	ldr	r3, [pc, #404]	@ (8008168 <LL_USART_SetBaudRate+0x458>)
 8007fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	b29c      	uxth	r4, r3
 8007fe0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007fee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007ff2:	4642      	mov	r2, r8
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	1891      	adds	r1, r2, r2
 8007ff8:	61b9      	str	r1, [r7, #24]
 8007ffa:	415b      	adcs	r3, r3
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008002:	4641      	mov	r1, r8
 8008004:	1851      	adds	r1, r2, r1
 8008006:	6139      	str	r1, [r7, #16]
 8008008:	4649      	mov	r1, r9
 800800a:	414b      	adcs	r3, r1
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800801a:	4659      	mov	r1, fp
 800801c:	00cb      	lsls	r3, r1, #3
 800801e:	4651      	mov	r1, sl
 8008020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008024:	4651      	mov	r1, sl
 8008026:	00ca      	lsls	r2, r1, #3
 8008028:	4610      	mov	r0, r2
 800802a:	4619      	mov	r1, r3
 800802c:	4603      	mov	r3, r0
 800802e:	4642      	mov	r2, r8
 8008030:	189b      	adds	r3, r3, r2
 8008032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008036:	464b      	mov	r3, r9
 8008038:	460a      	mov	r2, r1
 800803a:	eb42 0303 	adc.w	r3, r2, r3
 800803e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008042:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008046:	2200      	movs	r2, #0
 8008048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800804c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800805c:	4649      	mov	r1, r9
 800805e:	008b      	lsls	r3, r1, #2
 8008060:	4641      	mov	r1, r8
 8008062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008066:	4641      	mov	r1, r8
 8008068:	008a      	lsls	r2, r1, #2
 800806a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800806e:	f7f8 f90f 	bl	8000290 <__aeabi_uldivmod>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4611      	mov	r1, r2
 8008078:	4b3b      	ldr	r3, [pc, #236]	@ (8008168 <LL_USART_SetBaudRate+0x458>)
 800807a:	fba3 2301 	umull	r2, r3, r3, r1
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	2264      	movs	r2, #100	@ 0x64
 8008082:	fb02 f303 	mul.w	r3, r2, r3
 8008086:	1acb      	subs	r3, r1, r3
 8008088:	011b      	lsls	r3, r3, #4
 800808a:	3332      	adds	r3, #50	@ 0x32
 800808c:	4a36      	ldr	r2, [pc, #216]	@ (8008168 <LL_USART_SetBaudRate+0x458>)
 800808e:	fba2 2303 	umull	r2, r3, r2, r3
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	b29b      	uxth	r3, r3
 8008096:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800809a:	b29b      	uxth	r3, r3
 800809c:	4423      	add	r3, r4
 800809e:	b29c      	uxth	r4, r3
 80080a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080a4:	2200      	movs	r2, #0
 80080a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080aa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080ae:	4642      	mov	r2, r8
 80080b0:	464b      	mov	r3, r9
 80080b2:	1891      	adds	r1, r2, r2
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	415b      	adcs	r3, r3
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080be:	4641      	mov	r1, r8
 80080c0:	1851      	adds	r1, r2, r1
 80080c2:	6039      	str	r1, [r7, #0]
 80080c4:	4649      	mov	r1, r9
 80080c6:	414b      	adcs	r3, r1
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080d6:	4659      	mov	r1, fp
 80080d8:	00cb      	lsls	r3, r1, #3
 80080da:	4651      	mov	r1, sl
 80080dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080e0:	4651      	mov	r1, sl
 80080e2:	00ca      	lsls	r2, r1, #3
 80080e4:	4610      	mov	r0, r2
 80080e6:	4619      	mov	r1, r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	4642      	mov	r2, r8
 80080ec:	189b      	adds	r3, r3, r2
 80080ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80080f0:	464b      	mov	r3, r9
 80080f2:	460a      	mov	r2, r1
 80080f4:	eb42 0303 	adc.w	r3, r2, r3
 80080f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80080fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080fe:	2200      	movs	r2, #0
 8008100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8008110:	4649      	mov	r1, r9
 8008112:	008b      	lsls	r3, r1, #2
 8008114:	4641      	mov	r1, r8
 8008116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800811a:	4641      	mov	r1, r8
 800811c:	008a      	lsls	r2, r1, #2
 800811e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008122:	f7f8 f8b5 	bl	8000290 <__aeabi_uldivmod>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4b0f      	ldr	r3, [pc, #60]	@ (8008168 <LL_USART_SetBaudRate+0x458>)
 800812c:	fba3 1302 	umull	r1, r3, r3, r2
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	2164      	movs	r1, #100	@ 0x64
 8008134:	fb01 f303 	mul.w	r3, r1, r3
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	3332      	adds	r3, #50	@ 0x32
 800813e:	4a0a      	ldr	r2, [pc, #40]	@ (8008168 <LL_USART_SetBaudRate+0x458>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	b29b      	uxth	r3, r3
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	b29b      	uxth	r3, r3
 800814e:	4423      	add	r3, r4
 8008150:	b29b      	uxth	r3, r3
 8008152:	461a      	mov	r2, r3
 8008154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008158:	609a      	str	r2, [r3, #8]
}
 800815a:	bf00      	nop
 800815c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008160:	46bd      	mov	sp, r7
 8008162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008166:	bf00      	nop
 8008168:	51eb851f 	.word	0x51eb851f

0800816c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800817a:	2300      	movs	r3, #0
 800817c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff fd8c 	bl	8007c9c <LL_USART_IsEnabled>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d149      	bne.n	800821e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008192:	f023 030c 	bic.w	r3, r3, #12
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	6851      	ldr	r1, [r2, #4]
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	68d2      	ldr	r2, [r2, #12]
 800819e:	4311      	orrs	r1, r2
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	6912      	ldr	r2, [r2, #16]
 80081a4:	4311      	orrs	r1, r2
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	6992      	ldr	r2, [r2, #24]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fd83 	bl	8007cc4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fd90 	bl	8007cea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80081ca:	f107 0308 	add.w	r3, r7, #8
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fbe6 	bl	80079a0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a14      	ldr	r2, [pc, #80]	@ (8008228 <LL_USART_Init+0xbc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d102      	bne.n	80081e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	e00c      	b.n	80081fc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a11      	ldr	r2, [pc, #68]	@ (800822c <LL_USART_Init+0xc0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d102      	bne.n	80081f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	e005      	b.n	80081fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0f      	ldr	r2, [pc, #60]	@ (8008230 <LL_USART_Init+0xc4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d101      	bne.n	80081fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00d      	beq.n	800821e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800820a:	2300      	movs	r3, #0
 800820c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69b9      	ldr	r1, [r7, #24]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff fd79 	bl	8007d10 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800821e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40011000 	.word	0x40011000
 800822c:	40004400 	.word	0x40004400
 8008230:	40011400 	.word	0x40011400

08008234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008234:	b084      	sub	sp, #16
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	f107 001c 	add.w	r0, r7, #28
 8008242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	2b01      	cmp	r3, #1
 800824a:	d122      	bne.n	8008292 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008276:	2b01      	cmp	r3, #1
 8008278:	d105      	bne.n	8008286 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fbee 	bl	8009a68 <USB_CoreReset>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e01a      	b.n	80082c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fbe2 	bl	8009a68 <USB_CoreReset>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80082ba:	e005      	b.n	80082c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d10b      	bne.n	80082e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f043 0206 	orr.w	r2, r3, #6
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f043 0220 	orr.w	r2, r3, #32
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082f2:	b004      	add	sp, #16
 80082f4:	4770      	bx	lr
	...

080082f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d165      	bne.n	80083d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4a41      	ldr	r2, [pc, #260]	@ (8008414 <USB_SetTurnaroundTime+0x11c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d906      	bls.n	8008322 <USB_SetTurnaroundTime+0x2a>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a40      	ldr	r2, [pc, #256]	@ (8008418 <USB_SetTurnaroundTime+0x120>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d202      	bcs.n	8008322 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800831c:	230f      	movs	r3, #15
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e062      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4a3c      	ldr	r2, [pc, #240]	@ (8008418 <USB_SetTurnaroundTime+0x120>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d306      	bcc.n	8008338 <USB_SetTurnaroundTime+0x40>
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4a3b      	ldr	r2, [pc, #236]	@ (800841c <USB_SetTurnaroundTime+0x124>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d202      	bcs.n	8008338 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008332:	230e      	movs	r3, #14
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	e057      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4a38      	ldr	r2, [pc, #224]	@ (800841c <USB_SetTurnaroundTime+0x124>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d306      	bcc.n	800834e <USB_SetTurnaroundTime+0x56>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a37      	ldr	r2, [pc, #220]	@ (8008420 <USB_SetTurnaroundTime+0x128>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d202      	bcs.n	800834e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008348:	230d      	movs	r3, #13
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	e04c      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4a33      	ldr	r2, [pc, #204]	@ (8008420 <USB_SetTurnaroundTime+0x128>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d306      	bcc.n	8008364 <USB_SetTurnaroundTime+0x6c>
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a32      	ldr	r2, [pc, #200]	@ (8008424 <USB_SetTurnaroundTime+0x12c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d802      	bhi.n	8008364 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800835e:	230c      	movs	r3, #12
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e041      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4a2f      	ldr	r2, [pc, #188]	@ (8008424 <USB_SetTurnaroundTime+0x12c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d906      	bls.n	800837a <USB_SetTurnaroundTime+0x82>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4a2e      	ldr	r2, [pc, #184]	@ (8008428 <USB_SetTurnaroundTime+0x130>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d802      	bhi.n	800837a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008374:	230b      	movs	r3, #11
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e036      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4a2a      	ldr	r2, [pc, #168]	@ (8008428 <USB_SetTurnaroundTime+0x130>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d906      	bls.n	8008390 <USB_SetTurnaroundTime+0x98>
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4a29      	ldr	r2, [pc, #164]	@ (800842c <USB_SetTurnaroundTime+0x134>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d802      	bhi.n	8008390 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800838a:	230a      	movs	r3, #10
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e02b      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4a26      	ldr	r2, [pc, #152]	@ (800842c <USB_SetTurnaroundTime+0x134>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d906      	bls.n	80083a6 <USB_SetTurnaroundTime+0xae>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4a25      	ldr	r2, [pc, #148]	@ (8008430 <USB_SetTurnaroundTime+0x138>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d202      	bcs.n	80083a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083a0:	2309      	movs	r3, #9
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	e020      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	4a21      	ldr	r2, [pc, #132]	@ (8008430 <USB_SetTurnaroundTime+0x138>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d306      	bcc.n	80083bc <USB_SetTurnaroundTime+0xc4>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a20      	ldr	r2, [pc, #128]	@ (8008434 <USB_SetTurnaroundTime+0x13c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d802      	bhi.n	80083bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083b6:	2308      	movs	r3, #8
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	e015      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	4a1d      	ldr	r2, [pc, #116]	@ (8008434 <USB_SetTurnaroundTime+0x13c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d906      	bls.n	80083d2 <USB_SetTurnaroundTime+0xda>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008438 <USB_SetTurnaroundTime+0x140>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d202      	bcs.n	80083d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80083cc:	2307      	movs	r3, #7
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	e00a      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80083d2:	2306      	movs	r3, #6
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	e007      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80083de:	2309      	movs	r3, #9
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e001      	b.n	80083e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80083e4:	2309      	movs	r3, #9
 80083e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	029b      	lsls	r3, r3, #10
 80083fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008400:	431a      	orrs	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	371c      	adds	r7, #28
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	00d8acbf 	.word	0x00d8acbf
 8008418:	00e4e1c0 	.word	0x00e4e1c0
 800841c:	00f42400 	.word	0x00f42400
 8008420:	01067380 	.word	0x01067380
 8008424:	011a499f 	.word	0x011a499f
 8008428:	01312cff 	.word	0x01312cff
 800842c:	014ca43f 	.word	0x014ca43f
 8008430:	016e3600 	.word	0x016e3600
 8008434:	01a6ab1f 	.word	0x01a6ab1f
 8008438:	01e84800 	.word	0x01e84800

0800843c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f043 0201 	orr.w	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d115      	bne.n	80084ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084ae:	2001      	movs	r0, #1
 80084b0:	f7fb fb66 	bl	8003b80 <HAL_Delay>
      ms++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fa45 	bl	800994a <USB_GetMode>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d01e      	beq.n	8008504 <USB_SetCurrentMode+0x84>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b31      	cmp	r3, #49	@ 0x31
 80084ca:	d9f0      	bls.n	80084ae <USB_SetCurrentMode+0x2e>
 80084cc:	e01a      	b.n	8008504 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d115      	bne.n	8008500 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084e0:	2001      	movs	r0, #1
 80084e2:	f7fb fb4d 	bl	8003b80 <HAL_Delay>
      ms++;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 fa2c 	bl	800994a <USB_GetMode>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <USB_SetCurrentMode+0x84>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b31      	cmp	r3, #49	@ 0x31
 80084fc:	d9f0      	bls.n	80084e0 <USB_SetCurrentMode+0x60>
 80084fe:	e001      	b.n	8008504 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e005      	b.n	8008510 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b32      	cmp	r3, #50	@ 0x32
 8008508:	d101      	bne.n	800850e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008518:	b084      	sub	sp, #16
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	e009      	b.n	800854c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3340      	adds	r3, #64	@ 0x40
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	2200      	movs	r2, #0
 8008544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3301      	adds	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2b0e      	cmp	r3, #14
 8008550:	d9f2      	bls.n	8008538 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11c      	bne.n	8008592 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008566:	f043 0302 	orr.w	r3, r3, #2
 800856a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008590:	e00b      	b.n	80085aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008596:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085b0:	461a      	mov	r2, r3
 80085b2:	2300      	movs	r3, #0
 80085b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085bc:	4619      	mov	r1, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c4:	461a      	mov	r2, r3
 80085c6:	680b      	ldr	r3, [r1, #0]
 80085c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d10c      	bne.n	80085ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80085d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d104      	bne.n	80085e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80085d6:	2100      	movs	r1, #0
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f965 	bl	80088a8 <USB_SetDevSpeed>
 80085de:	e008      	b.n	80085f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80085e0:	2101      	movs	r1, #1
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f960 	bl	80088a8 <USB_SetDevSpeed>
 80085e8:	e003      	b.n	80085f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085ea:	2103      	movs	r1, #3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f95b 	bl	80088a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085f2:	2110      	movs	r1, #16
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f8f3 	bl	80087e0 <USB_FlushTxFifo>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f91f 	bl	8008848 <USB_FlushRxFifo>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861a:	461a      	mov	r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008626:	461a      	mov	r2, r3
 8008628:	2300      	movs	r3, #0
 800862a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008632:	461a      	mov	r2, r3
 8008634:	2300      	movs	r3, #0
 8008636:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008638:	2300      	movs	r3, #0
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	e043      	b.n	80086c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008654:	d118      	bne.n	8008688 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008668:	461a      	mov	r2, r3
 800866a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	e013      	b.n	800869a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800867e:	461a      	mov	r2, r3
 8008680:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	e008      	b.n	800869a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008694:	461a      	mov	r2, r3
 8008696:	2300      	movs	r3, #0
 8008698:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a6:	461a      	mov	r2, r3
 80086a8:	2300      	movs	r3, #0
 80086aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b8:	461a      	mov	r2, r3
 80086ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d3b7      	bcc.n	800863e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e043      	b.n	800875c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086ea:	d118      	bne.n	800871e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fe:	461a      	mov	r2, r3
 8008700:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	e013      	b.n	8008730 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008714:	461a      	mov	r2, r3
 8008716:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	e008      	b.n	8008730 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872a:	461a      	mov	r2, r3
 800872c:	2300      	movs	r3, #0
 800872e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873c:	461a      	mov	r2, r3
 800873e:	2300      	movs	r3, #0
 8008740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874e:	461a      	mov	r2, r3
 8008750:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008754:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	3301      	adds	r3, #1
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	429a      	cmp	r2, r3
 8008762:	d3b7      	bcc.n	80086d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008772:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008776:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	2b00      	cmp	r3, #0
 800878a:	d105      	bne.n	8008798 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f043 0210 	orr.w	r2, r3, #16
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	4b0f      	ldr	r3, [pc, #60]	@ (80087dc <USB_DevInit+0x2c4>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f043 0208 	orr.w	r2, r3, #8
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d107      	bne.n	80087cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087c4:	f043 0304 	orr.w	r3, r3, #4
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087d8:	b004      	add	sp, #16
 80087da:	4770      	bx	lr
 80087dc:	803c3800 	.word	0x803c3800

080087e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4a13      	ldr	r2, [pc, #76]	@ (8008844 <USB_FlushTxFifo+0x64>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d901      	bls.n	8008800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e01b      	b.n	8008838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	daf2      	bge.n	80087ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	019b      	lsls	r3, r3, #6
 8008810:	f043 0220 	orr.w	r2, r3, #32
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3301      	adds	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4a08      	ldr	r2, [pc, #32]	@ (8008844 <USB_FlushTxFifo+0x64>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d901      	bls.n	800882a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e006      	b.n	8008838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b20      	cmp	r3, #32
 8008834:	d0f0      	beq.n	8008818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	00030d40 	.word	0x00030d40

08008848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a11      	ldr	r2, [pc, #68]	@ (80088a4 <USB_FlushRxFifo+0x5c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d901      	bls.n	8008866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e018      	b.n	8008898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	daf2      	bge.n	8008854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2210      	movs	r2, #16
 8008876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4a08      	ldr	r2, [pc, #32]	@ (80088a4 <USB_FlushRxFifo+0x5c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d901      	bls.n	800888a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e006      	b.n	8008898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d0f0      	beq.n	8008878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	00030d40 	.word	0x00030d40

080088a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088c8:	4313      	orrs	r3, r2
 80088ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80088da:	b480      	push	{r7}
 80088dc:	b087      	sub	sp, #28
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 0306 	and.w	r3, r3, #6
 80088f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
 80088fe:	e00a      	b.n	8008916 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d002      	beq.n	800890c <USB_GetDevSpeed+0x32>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b06      	cmp	r3, #6
 800890a:	d102      	bne.n	8008912 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800890c:	2302      	movs	r3, #2
 800890e:	75fb      	strb	r3, [r7, #23]
 8008910:	e001      	b.n	8008916 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008912:	230f      	movs	r3, #15
 8008914:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
}
 8008918:	4618      	mov	r0, r3
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d13a      	bne.n	80089b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008946:	69da      	ldr	r2, [r3, #28]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	2101      	movs	r1, #1
 8008952:	fa01 f303 	lsl.w	r3, r1, r3
 8008956:	b29b      	uxth	r3, r3
 8008958:	68f9      	ldr	r1, [r7, #12]
 800895a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800895e:	4313      	orrs	r3, r2
 8008960:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d155      	bne.n	8008a24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	791b      	ldrb	r3, [r3, #4]
 8008992:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008994:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	059b      	lsls	r3, r3, #22
 800899a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800899c:	4313      	orrs	r3, r2
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	e036      	b.n	8008a24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089bc:	69da      	ldr	r2, [r3, #28]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	2101      	movs	r1, #1
 80089c8:	fa01 f303 	lsl.w	r3, r1, r3
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089d4:	4313      	orrs	r3, r2
 80089d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d11a      	bne.n	8008a24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	791b      	ldrb	r3, [r3, #4]
 8008a08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	0151      	lsls	r1, r2, #5
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	440a      	add	r2, r1
 8008a16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
	...

08008a34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d161      	bne.n	8008b14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a66:	d11f      	bne.n	8008aa8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	0151      	lsls	r1, r2, #5
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	440a      	add	r2, r1
 8008a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	2101      	movs	r1, #1
 8008aba:	fa01 f303 	lsl.w	r3, r1, r3
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ac8:	4013      	ands	r3, r2
 8008aca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	2101      	movs	r1, #1
 8008ade:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008aec:	4013      	ands	r3, r2
 8008aee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	0159      	lsls	r1, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	440b      	add	r3, r1
 8008b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4b35      	ldr	r3, [pc, #212]	@ (8008be4 <USB_DeactivateEndpoint+0x1b0>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	600b      	str	r3, [r1, #0]
 8008b12:	e060      	b.n	8008bd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b2a:	d11f      	bne.n	8008b6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	43db      	mvns	r3, r3
 8008b86:	68f9      	ldr	r1, [r7, #12]
 8008b88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	f003 030f 	and.w	r3, r3, #15
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	43db      	mvns	r3, r3
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	0159      	lsls	r1, r3, #5
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	440b      	add	r3, r1
 8008bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <USB_DeactivateEndpoint+0x1b4>)
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	ec337800 	.word	0xec337800
 8008be8:	eff37800 	.word	0xeff37800

08008bec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	@ 0x28
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	f040 815c 	bne.w	8008ec6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d132      	bne.n	8008c7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	0151      	lsls	r1, r2, #5
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	440a      	add	r2, r1
 8008c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	0151      	lsls	r1, r2, #5
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	440a      	add	r2, r1
 8008c50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c74:	0cdb      	lsrs	r3, r3, #19
 8008c76:	04db      	lsls	r3, r3, #19
 8008c78:	6113      	str	r3, [r2, #16]
 8008c7a:	e074      	b.n	8008d66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c96:	0cdb      	lsrs	r3, r3, #19
 8008c98:	04db      	lsls	r3, r3, #19
 8008c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	0151      	lsls	r1, r2, #5
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	440a      	add	r2, r1
 8008cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008cba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008cbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ccc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6999      	ldr	r1, [r3, #24]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	440b      	add	r3, r1
 8008cd8:	1e59      	subs	r1, r3, #1
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ce2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ce4:	4b9d      	ldr	r3, [pc, #628]	@ (8008f5c <USB_EPStartXfer+0x370>)
 8008ce6:	400b      	ands	r3, r1
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	0148      	lsls	r0, r1, #5
 8008cec:	69f9      	ldr	r1, [r7, #28]
 8008cee:	4401      	add	r1, r0
 8008cf0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d0e:	69b9      	ldr	r1, [r7, #24]
 8008d10:	0148      	lsls	r0, r1, #5
 8008d12:	69f9      	ldr	r1, [r7, #28]
 8008d14:	4401      	add	r1, r0
 8008d16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	791b      	ldrb	r3, [r3, #4]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d11f      	bne.n	8008d66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	0151      	lsls	r1, r2, #5
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	440a      	add	r2, r1
 8008d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d40:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008d44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d14b      	bne.n	8008e04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d009      	beq.n	8008d88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d80:	461a      	mov	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	791b      	ldrb	r3, [r3, #4]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d128      	bne.n	8008de2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d110      	bne.n	8008dc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	e00f      	b.n	8008de2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008de0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dfc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	e133      	b.n	800906c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	791b      	ldrb	r3, [r3, #4]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d015      	beq.n	8008e58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 811b 	beq.w	800906c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	2101      	movs	r1, #1
 8008e48:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4c:	69f9      	ldr	r1, [r7, #28]
 8008e4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e52:	4313      	orrs	r3, r2
 8008e54:	634b      	str	r3, [r1, #52]	@ 0x34
 8008e56:	e109      	b.n	800906c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d110      	bne.n	8008e8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	e00f      	b.n	8008eaa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ea8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6919      	ldr	r1, [r3, #16]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	b298      	uxth	r0, r3
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fade 	bl	8009480 <USB_WritePacket>
 8008ec4:	e0d2      	b.n	800906c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ee0:	0cdb      	lsrs	r3, r3, #19
 8008ee2:	04db      	lsls	r3, r3, #19
 8008ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f00:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f04:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d126      	bne.n	8008f60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	0148      	lsls	r0, r1, #5
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	4401      	add	r1, r0
 8008f30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f34:	4313      	orrs	r3, r2
 8008f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f56:	6113      	str	r3, [r2, #16]
 8008f58:	e03a      	b.n	8008fd0 <USB_EPStartXfer+0x3e4>
 8008f5a:	bf00      	nop
 8008f5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	1e5a      	subs	r2, r3, #1
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	8afa      	ldrh	r2, [r7, #22]
 8008f7c:	fb03 f202 	mul.w	r2, r3, r2
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f90:	691a      	ldr	r2, [r3, #16]
 8008f92:	8afb      	ldrh	r3, [r7, #22]
 8008f94:	04d9      	lsls	r1, r3, #19
 8008f96:	4b38      	ldr	r3, [pc, #224]	@ (8009078 <USB_EPStartXfer+0x48c>)
 8008f98:	400b      	ands	r3, r1
 8008f9a:	69b9      	ldr	r1, [r7, #24]
 8008f9c:	0148      	lsls	r0, r1, #5
 8008f9e:	69f9      	ldr	r1, [r7, #28]
 8008fa0:	4401      	add	r1, r0
 8008fa2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb6:	691a      	ldr	r2, [r3, #16]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fc0:	69b9      	ldr	r1, [r7, #24]
 8008fc2:	0148      	lsls	r0, r1, #5
 8008fc4:	69f9      	ldr	r1, [r7, #28]
 8008fc6:	4401      	add	r1, r0
 8008fc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d10d      	bne.n	8008ff2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d009      	beq.n	8008ff2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6919      	ldr	r1, [r3, #16]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fee:	460a      	mov	r2, r1
 8008ff0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	791b      	ldrb	r3, [r3, #4]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d128      	bne.n	800904c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009006:	2b00      	cmp	r3, #0
 8009008:	d110      	bne.n	800902c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	440a      	add	r2, r1
 8009020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009024:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e00f      	b.n	800904c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	0151      	lsls	r1, r2, #5
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	440a      	add	r2, r1
 8009042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800904a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	440a      	add	r2, r1
 8009062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009066:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800906a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3720      	adds	r7, #32
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	1ff80000 	.word	0x1ff80000

0800907c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	2b01      	cmp	r3, #1
 800909a:	f040 80ce 	bne.w	800923a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d132      	bne.n	800910c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009104:	0cdb      	lsrs	r3, r3, #19
 8009106:	04db      	lsls	r3, r3, #19
 8009108:	6113      	str	r3, [r2, #16]
 800910a:	e04e      	b.n	80091aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	440a      	add	r2, r1
 8009122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009126:	0cdb      	lsrs	r3, r3, #19
 8009128:	04db      	lsls	r3, r3, #19
 800912a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	440a      	add	r2, r1
 8009142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009146:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800914a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800914e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d903      	bls.n	8009164 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800917e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919a:	6939      	ldr	r1, [r7, #16]
 800919c:	0148      	lsls	r0, r1, #5
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	4401      	add	r1, r0
 80091a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091a6:	4313      	orrs	r3, r2
 80091a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d11e      	bne.n	80091ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d009      	beq.n	80091cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c4:	461a      	mov	r2, r3
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	0151      	lsls	r1, r2, #5
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	440a      	add	r2, r1
 80091e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	e097      	b.n	800931e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	440a      	add	r2, r1
 8009204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009208:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800920c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8083 	beq.w	800931e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	2101      	movs	r1, #1
 800922a:	fa01 f303 	lsl.w	r3, r1, r3
 800922e:	6979      	ldr	r1, [r7, #20]
 8009230:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009234:	4313      	orrs	r3, r2
 8009236:	634b      	str	r3, [r1, #52]	@ 0x34
 8009238:	e071      	b.n	800931e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	0151      	lsls	r1, r2, #5
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	440a      	add	r2, r1
 8009250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009254:	0cdb      	lsrs	r3, r3, #19
 8009256:	04db      	lsls	r3, r3, #19
 8009258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009274:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009278:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800927c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092cc:	6939      	ldr	r1, [r7, #16]
 80092ce:	0148      	lsls	r0, r1, #5
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	4401      	add	r1, r0
 80092d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092d8:	4313      	orrs	r3, r2
 80092da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d10d      	bne.n	80092fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6919      	ldr	r1, [r3, #16]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fa:	460a      	mov	r2, r1
 80092fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009318:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800931c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d14a      	bne.n	80093e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800935e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009362:	f040 8086 	bne.w	8009472 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	7812      	ldrb	r2, [r2, #0]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009384:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009388:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	7812      	ldrb	r2, [r2, #0]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3301      	adds	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d902      	bls.n	80093c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
          break;
 80093c2:	e056      	b.n	8009472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093dc:	d0e7      	beq.n	80093ae <USB_EPStopXfer+0x82>
 80093de:	e048      	b.n	8009472 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f8:	d13b      	bne.n	8009472 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009418:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800941c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	440a      	add	r2, r1
 8009438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800943c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009440:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800944e:	4293      	cmp	r3, r2
 8009450:	d902      	bls.n	8009458 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
          break;
 8009456:	e00c      	b.n	8009472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800946c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009470:	d0e7      	beq.n	8009442 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
}
 8009474:	4618      	mov	r0, r3
 8009476:	371c      	adds	r7, #28
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009480:	b480      	push	{r7}
 8009482:	b089      	sub	sp, #36	@ 0x24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4611      	mov	r1, r2
 800948c:	461a      	mov	r2, r3
 800948e:	460b      	mov	r3, r1
 8009490:	71fb      	strb	r3, [r7, #7]
 8009492:	4613      	mov	r3, r2
 8009494:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800949e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d123      	bne.n	80094ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094a6:	88bb      	ldrh	r3, [r7, #4]
 80094a8:	3303      	adds	r3, #3
 80094aa:	089b      	lsrs	r3, r3, #2
 80094ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	e018      	b.n	80094e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	031a      	lsls	r2, r3, #12
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094c0:	461a      	mov	r2, r3
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	3301      	adds	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3301      	adds	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	3301      	adds	r3, #1
 80094de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	3301      	adds	r3, #1
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d3e2      	bcc.n	80094b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3724      	adds	r7, #36	@ 0x24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b08b      	sub	sp, #44	@ 0x2c
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	089b      	lsrs	r3, r3, #2
 8009516:	b29b      	uxth	r3, r3
 8009518:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	f003 0303 	and.w	r3, r3, #3
 8009520:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009522:	2300      	movs	r3, #0
 8009524:	623b      	str	r3, [r7, #32]
 8009526:	e014      	b.n	8009552 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	601a      	str	r2, [r3, #0]
    pDest++;
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	3301      	adds	r3, #1
 8009538:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	3301      	adds	r3, #1
 800953e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	3301      	adds	r3, #1
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	3301      	adds	r3, #1
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	3301      	adds	r3, #1
 8009550:	623b      	str	r3, [r7, #32]
 8009552:	6a3a      	ldr	r2, [r7, #32]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	429a      	cmp	r2, r3
 8009558:	d3e6      	bcc.n	8009528 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800955a:	8bfb      	ldrh	r3, [r7, #30]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01e      	beq.n	800959e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800956a:	461a      	mov	r2, r3
 800956c:	f107 0310 	add.w	r3, r7, #16
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	b2da      	uxtb	r2, r3
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	701a      	strb	r2, [r3, #0]
      i++;
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	3301      	adds	r3, #1
 800958a:	623b      	str	r3, [r7, #32]
      pDest++;
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	3301      	adds	r3, #1
 8009590:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009592:	8bfb      	ldrh	r3, [r7, #30]
 8009594:	3b01      	subs	r3, #1
 8009596:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009598:	8bfb      	ldrh	r3, [r7, #30]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1ea      	bne.n	8009574 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	372c      	adds	r7, #44	@ 0x2c
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d12c      	bne.n	8009622 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	db12      	blt.n	8009600 <USB_EPSetStall+0x54>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00f      	beq.n	8009600 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	0151      	lsls	r1, r2, #5
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	440a      	add	r2, r1
 8009616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800961a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	e02b      	b.n	800967a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	db12      	blt.n	800965a <USB_EPSetStall+0xae>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00f      	beq.n	800965a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009658:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009678:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d128      	bne.n	80096f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	791b      	ldrb	r3, [r3, #4]
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d003      	beq.n	80096d4 <USB_EPClearStall+0x4c>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	791b      	ldrb	r3, [r3, #4]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d138      	bne.n	8009746 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e027      	b.n	8009746 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	791b      	ldrb	r3, [r3, #4]
 800971a:	2b03      	cmp	r3, #3
 800971c:	d003      	beq.n	8009726 <USB_EPClearStall+0x9e>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	791b      	ldrb	r3, [r3, #4]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d10f      	bne.n	8009746 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	0151      	lsls	r1, r2, #5
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	440a      	add	r2, r1
 800973c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009744:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009772:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009776:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009788:	68f9      	ldr	r1, [r7, #12]
 800978a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800978e:	4313      	orrs	r3, r2
 8009790:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097ba:	f023 0303 	bic.w	r3, r3, #3
 80097be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097ce:	f023 0302 	bic.w	r3, r3, #2
 80097d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009810:	f043 0302 	orr.w	r3, r3, #2
 8009814:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4013      	ands	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800983c:	68fb      	ldr	r3, [r7, #12]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	4013      	ands	r3, r2
 800986c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	0c1b      	lsrs	r3, r3, #16
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	4013      	ands	r3, r2
 80098a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	b29b      	uxth	r3, r3
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	4013      	ands	r3, r2
 80098de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098e0:	68bb      	ldr	r3, [r7, #8]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b087      	sub	sp, #28
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009910:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	fa22 f303 	lsr.w	r3, r2, r3
 800991e:	01db      	lsls	r3, r3, #7
 8009920:	b2db      	uxtb	r3, r3
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	4013      	ands	r3, r2
 800993a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800993c:	68bb      	ldr	r3, [r7, #8]
}
 800993e:	4618      	mov	r0, r3
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f003 0301 	and.w	r3, r3, #1
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009966:	b480      	push	{r7}
 8009968:	b085      	sub	sp, #20
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009980:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009984:	f023 0307 	bic.w	r3, r3, #7
 8009988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800999c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	460b      	mov	r3, r1
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	333c      	adds	r3, #60	@ 0x3c
 80099c2:	3304      	adds	r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	4a26      	ldr	r2, [pc, #152]	@ (8009a64 <USB_EP0_OutStart+0xb8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d90a      	bls.n	80099e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099e0:	d101      	bne.n	80099e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	e037      	b.n	8009a56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ec:	461a      	mov	r2, r3
 80099ee:	2300      	movs	r3, #0
 80099f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a14:	f043 0318 	orr.w	r3, r3, #24
 8009a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a28:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d10f      	bne.n	8009a54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a4e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	4f54300a 	.word	0x4f54300a

08009a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4a13      	ldr	r2, [pc, #76]	@ (8009acc <USB_CoreReset+0x64>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d901      	bls.n	8009a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e01b      	b.n	8009abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	daf2      	bge.n	8009a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f043 0201 	orr.w	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4a09      	ldr	r2, [pc, #36]	@ (8009acc <USB_CoreReset+0x64>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d901      	bls.n	8009ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e006      	b.n	8009abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d0f0      	beq.n	8009a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	00030d40 	.word	0x00030d40

08009ad0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009adc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ae0:	f002 fc88 	bl	800c3f4 <USBD_static_malloc>
 8009ae4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d109      	bne.n	8009b00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	32b0      	adds	r2, #176	@ 0xb0
 8009af6:	2100      	movs	r1, #0
 8009af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009afc:	2302      	movs	r3, #2
 8009afe:	e0d4      	b.n	8009caa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b04:	2100      	movs	r1, #0
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f002 fd4e 	bl	800c5a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	32b0      	adds	r2, #176	@ 0xb0
 8009b16:	68f9      	ldr	r1, [r7, #12]
 8009b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	32b0      	adds	r2, #176	@ 0xb0
 8009b26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7c1b      	ldrb	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d138      	bne.n	8009baa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b38:	4b5e      	ldr	r3, [pc, #376]	@ (8009cb4 <USBD_CDC_Init+0x1e4>)
 8009b3a:	7819      	ldrb	r1, [r3, #0]
 8009b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b40:	2202      	movs	r2, #2
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f002 fb33 	bl	800c1ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b48:	4b5a      	ldr	r3, [pc, #360]	@ (8009cb4 <USBD_CDC_Init+0x1e4>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f003 020f 	and.w	r2, r3, #15
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	440b      	add	r3, r1
 8009b5c:	3324      	adds	r3, #36	@ 0x24
 8009b5e:	2201      	movs	r2, #1
 8009b60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b62:	4b55      	ldr	r3, [pc, #340]	@ (8009cb8 <USBD_CDC_Init+0x1e8>)
 8009b64:	7819      	ldrb	r1, [r3, #0]
 8009b66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f002 fb1e 	bl	800c1ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b72:	4b51      	ldr	r3, [pc, #324]	@ (8009cb8 <USBD_CDC_Init+0x1e8>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 020f 	and.w	r2, r3, #15
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8009cbc <USBD_CDC_Init+0x1ec>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	f003 020f 	and.w	r2, r3, #15
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3326      	adds	r3, #38	@ 0x26
 8009ba4:	2210      	movs	r2, #16
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	e035      	b.n	8009c16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009baa:	4b42      	ldr	r3, [pc, #264]	@ (8009cb4 <USBD_CDC_Init+0x1e4>)
 8009bac:	7819      	ldrb	r1, [r3, #0]
 8009bae:	2340      	movs	r3, #64	@ 0x40
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f002 fafb 	bl	800c1ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8009cb4 <USBD_CDC_Init+0x1e4>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f003 020f 	and.w	r2, r3, #15
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	3324      	adds	r3, #36	@ 0x24
 8009bce:	2201      	movs	r2, #1
 8009bd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bd2:	4b39      	ldr	r3, [pc, #228]	@ (8009cb8 <USBD_CDC_Init+0x1e8>)
 8009bd4:	7819      	ldrb	r1, [r3, #0]
 8009bd6:	2340      	movs	r3, #64	@ 0x40
 8009bd8:	2202      	movs	r2, #2
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f002 fae7 	bl	800c1ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009be0:	4b35      	ldr	r3, [pc, #212]	@ (8009cb8 <USBD_CDC_Init+0x1e8>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 020f 	and.w	r2, r3, #15
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8009cbc <USBD_CDC_Init+0x1ec>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	f003 020f 	and.w	r2, r3, #15
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	440b      	add	r3, r1
 8009c10:	3326      	adds	r3, #38	@ 0x26
 8009c12:	2210      	movs	r2, #16
 8009c14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c16:	4b29      	ldr	r3, [pc, #164]	@ (8009cbc <USBD_CDC_Init+0x1ec>)
 8009c18:	7819      	ldrb	r1, [r3, #0]
 8009c1a:	2308      	movs	r3, #8
 8009c1c:	2203      	movs	r2, #3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f002 fac5 	bl	800c1ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c24:	4b25      	ldr	r3, [pc, #148]	@ (8009cbc <USBD_CDC_Init+0x1ec>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 020f 	and.w	r2, r3, #15
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	3324      	adds	r3, #36	@ 0x24
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	33b0      	adds	r3, #176	@ 0xb0
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c74:	2302      	movs	r3, #2
 8009c76:	e018      	b.n	8009caa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7c1b      	ldrb	r3, [r3, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c80:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb8 <USBD_CDC_Init+0x1e8>)
 8009c82:	7819      	ldrb	r1, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f002 fb7c 	bl	800c38c <USBD_LL_PrepareReceive>
 8009c94:	e008      	b.n	8009ca8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c96:	4b08      	ldr	r3, [pc, #32]	@ (8009cb8 <USBD_CDC_Init+0x1e8>)
 8009c98:	7819      	ldrb	r1, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ca0:	2340      	movs	r3, #64	@ 0x40
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f002 fb72 	bl	800c38c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200001bf 	.word	0x200001bf
 8009cb8:	200001c0 	.word	0x200001c0
 8009cbc:	200001c1 	.word	0x200001c1

08009cc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8009db8 <USBD_CDC_DeInit+0xf8>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f002 fa91 	bl	800c1fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cd8:	4b37      	ldr	r3, [pc, #220]	@ (8009db8 <USBD_CDC_DeInit+0xf8>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 020f 	and.w	r2, r3, #15
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	3324      	adds	r3, #36	@ 0x24
 8009cee:	2200      	movs	r2, #0
 8009cf0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009cf2:	4b32      	ldr	r3, [pc, #200]	@ (8009dbc <USBD_CDC_DeInit+0xfc>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f002 fa7e 	bl	800c1fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8009dbc <USBD_CDC_DeInit+0xfc>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	f003 020f 	and.w	r2, r3, #15
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	440b      	add	r3, r1
 8009d12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d16:	2200      	movs	r2, #0
 8009d18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d1a:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <USBD_CDC_DeInit+0x100>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f002 fa6a 	bl	800c1fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d26:	4b26      	ldr	r3, [pc, #152]	@ (8009dc0 <USBD_CDC_DeInit+0x100>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f003 020f 	and.w	r2, r3, #15
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	3324      	adds	r3, #36	@ 0x24
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d40:	4b1f      	ldr	r3, [pc, #124]	@ (8009dc0 <USBD_CDC_DeInit+0x100>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 020f 	and.w	r2, r3, #15
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	440b      	add	r3, r1
 8009d54:	3326      	adds	r3, #38	@ 0x26
 8009d56:	2200      	movs	r2, #0
 8009d58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	32b0      	adds	r2, #176	@ 0xb0
 8009d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01f      	beq.n	8009dac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	33b0      	adds	r3, #176	@ 0xb0
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	32b0      	adds	r2, #176	@ 0xb0
 8009d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 fb3e 	bl	800c410 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	32b0      	adds	r2, #176	@ 0xb0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	200001bf 	.word	0x200001bf
 8009dbc:	200001c0 	.word	0x200001c0
 8009dc0:	200001c1 	.word	0x200001c1

08009dc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	32b0      	adds	r2, #176	@ 0xb0
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e0bf      	b.n	8009f74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d050      	beq.n	8009ea2 <USBD_CDC_Setup+0xde>
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	f040 80af 	bne.w	8009f64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	88db      	ldrh	r3, [r3, #6]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d03a      	beq.n	8009e84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	b25b      	sxtb	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	da1b      	bge.n	8009e50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	33b0      	adds	r3, #176	@ 0xb0
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	88d2      	ldrh	r2, [r2, #6]
 8009e34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	2b07      	cmp	r3, #7
 8009e3c:	bf28      	it	cs
 8009e3e:	2307      	movcs	r3, #7
 8009e40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	89fa      	ldrh	r2, [r7, #14]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fd87 	bl	800b95c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e4e:	e090      	b.n	8009f72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	785a      	ldrb	r2, [r3, #1]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88db      	ldrh	r3, [r3, #6]
 8009e5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e60:	d803      	bhi.n	8009e6a <USBD_CDC_Setup+0xa6>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	88db      	ldrh	r3, [r3, #6]
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	e000      	b.n	8009e6c <USBD_CDC_Setup+0xa8>
 8009e6a:	2240      	movs	r2, #64	@ 0x40
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e72:	6939      	ldr	r1, [r7, #16]
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 fd99 	bl	800b9b4 <USBD_CtlPrepareRx>
      break;
 8009e82:	e076      	b.n	8009f72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	33b0      	adds	r3, #176	@ 0xb0
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	7850      	ldrb	r0, [r2, #1]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	4798      	blx	r3
      break;
 8009ea0:	e067      	b.n	8009f72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b0b      	cmp	r3, #11
 8009ea8:	d851      	bhi.n	8009f4e <USBD_CDC_Setup+0x18a>
 8009eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb0 <USBD_CDC_Setup+0xec>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009ee1 	.word	0x08009ee1
 8009eb4:	08009f5d 	.word	0x08009f5d
 8009eb8:	08009f4f 	.word	0x08009f4f
 8009ebc:	08009f4f 	.word	0x08009f4f
 8009ec0:	08009f4f 	.word	0x08009f4f
 8009ec4:	08009f4f 	.word	0x08009f4f
 8009ec8:	08009f4f 	.word	0x08009f4f
 8009ecc:	08009f4f 	.word	0x08009f4f
 8009ed0:	08009f4f 	.word	0x08009f4f
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f0b 	.word	0x08009f0b
 8009edc:	08009f35 	.word	0x08009f35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d107      	bne.n	8009efc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009eec:	f107 030a 	add.w	r3, r7, #10
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 fd31 	bl	800b95c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009efa:	e032      	b.n	8009f62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 fcbb 	bl	800b87a <USBD_CtlError>
            ret = USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	75fb      	strb	r3, [r7, #23]
          break;
 8009f08:	e02b      	b.n	8009f62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d107      	bne.n	8009f26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f16:	f107 030d 	add.w	r3, r7, #13
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 fd1c 	bl	800b95c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f24:	e01d      	b.n	8009f62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 fca6 	bl	800b87a <USBD_CtlError>
            ret = USBD_FAIL;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	75fb      	strb	r3, [r7, #23]
          break;
 8009f32:	e016      	b.n	8009f62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d00f      	beq.n	8009f60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fc99 	bl	800b87a <USBD_CtlError>
            ret = USBD_FAIL;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f4c:	e008      	b.n	8009f60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fc92 	bl	800b87a <USBD_CtlError>
          ret = USBD_FAIL;
 8009f56:	2303      	movs	r3, #3
 8009f58:	75fb      	strb	r3, [r7, #23]
          break;
 8009f5a:	e002      	b.n	8009f62 <USBD_CDC_Setup+0x19e>
          break;
 8009f5c:	bf00      	nop
 8009f5e:	e008      	b.n	8009f72 <USBD_CDC_Setup+0x1ae>
          break;
 8009f60:	bf00      	nop
      }
      break;
 8009f62:	e006      	b.n	8009f72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 fc87 	bl	800b87a <USBD_CtlError>
      ret = USBD_FAIL;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f70:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	32b0      	adds	r2, #176	@ 0xb0
 8009f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e065      	b.n	800a072 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	32b0      	adds	r2, #176	@ 0xb0
 8009fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	f003 020f 	and.w	r2, r3, #15
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	440b      	add	r3, r1
 8009fc8:	3318      	adds	r3, #24
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d02f      	beq.n	800a030 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	f003 020f 	and.w	r2, r3, #15
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	3318      	adds	r3, #24
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	f003 010f 	and.w	r1, r3, #15
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	440b      	add	r3, r1
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4403      	add	r3, r0
 8009ff8:	3348      	adds	r3, #72	@ 0x48
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a000:	fb01 f303 	mul.w	r3, r1, r3
 800a004:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a006:	2b00      	cmp	r3, #0
 800a008:	d112      	bne.n	800a030 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	f003 020f 	and.w	r2, r3, #15
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	3318      	adds	r3, #24
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a022:	78f9      	ldrb	r1, [r7, #3]
 800a024:	2300      	movs	r3, #0
 800a026:	2200      	movs	r2, #0
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f002 f98e 	bl	800c34a <USBD_LL_Transmit>
 800a02e:	e01f      	b.n	800a070 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	33b0      	adds	r3, #176	@ 0xb0
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d010      	beq.n	800a070 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	33b0      	adds	r3, #176	@ 0xb0
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	460b      	mov	r3, r1
 800a084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	32b0      	adds	r2, #176	@ 0xb0
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	32b0      	adds	r2, #176	@ 0xb0
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e01a      	b.n	800a0e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f002 f98c 	bl	800c3ce <USBD_LL_GetRxDataSize>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	33b0      	adds	r3, #176	@ 0xb0
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	32b0      	adds	r2, #176	@ 0xb0
 800a0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a100:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a108:	2303      	movs	r3, #3
 800a10a:	e024      	b.n	800a156 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	33b0      	adds	r3, #176	@ 0xb0
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d019      	beq.n	800a154 <USBD_CDC_EP0_RxReady+0x6a>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a126:	2bff      	cmp	r3, #255	@ 0xff
 800a128:	d014      	beq.n	800a154 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	33b0      	adds	r3, #176	@ 0xb0
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a142:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a14a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	22ff      	movs	r2, #255	@ 0xff
 800a150:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a168:	2182      	movs	r1, #130	@ 0x82
 800a16a:	4818      	ldr	r0, [pc, #96]	@ (800a1cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a16c:	f000 fd4f 	bl	800ac0e <USBD_GetEpDesc>
 800a170:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a172:	2101      	movs	r1, #1
 800a174:	4815      	ldr	r0, [pc, #84]	@ (800a1cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a176:	f000 fd4a 	bl	800ac0e <USBD_GetEpDesc>
 800a17a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a17c:	2181      	movs	r1, #129	@ 0x81
 800a17e:	4813      	ldr	r0, [pc, #76]	@ (800a1cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a180:	f000 fd45 	bl	800ac0e <USBD_GetEpDesc>
 800a184:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2210      	movs	r2, #16
 800a190:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1a0:	711a      	strb	r2, [r3, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b4:	711a      	strb	r2, [r3, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2243      	movs	r2, #67	@ 0x43
 800a1be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1c0:	4b02      	ldr	r3, [pc, #8]	@ (800a1cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2000017c 	.word	0x2000017c

0800a1d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1d8:	2182      	movs	r1, #130	@ 0x82
 800a1da:	4818      	ldr	r0, [pc, #96]	@ (800a23c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1dc:	f000 fd17 	bl	800ac0e <USBD_GetEpDesc>
 800a1e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4815      	ldr	r0, [pc, #84]	@ (800a23c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1e6:	f000 fd12 	bl	800ac0e <USBD_GetEpDesc>
 800a1ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1ec:	2181      	movs	r1, #129	@ 0x81
 800a1ee:	4813      	ldr	r0, [pc, #76]	@ (800a23c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1f0:	f000 fd0d 	bl	800ac0e <USBD_GetEpDesc>
 800a1f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2210      	movs	r2, #16
 800a200:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d006      	beq.n	800a216 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2200      	movs	r2, #0
 800a20c:	711a      	strb	r2, [r3, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f042 0202 	orr.w	r2, r2, #2
 800a214:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d006      	beq.n	800a22a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	711a      	strb	r2, [r3, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f042 0202 	orr.w	r2, r2, #2
 800a228:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2243      	movs	r2, #67	@ 0x43
 800a22e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a230:	4b02      	ldr	r3, [pc, #8]	@ (800a23c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	2000017c 	.word	0x2000017c

0800a240 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a248:	2182      	movs	r1, #130	@ 0x82
 800a24a:	4818      	ldr	r0, [pc, #96]	@ (800a2ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a24c:	f000 fcdf 	bl	800ac0e <USBD_GetEpDesc>
 800a250:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a252:	2101      	movs	r1, #1
 800a254:	4815      	ldr	r0, [pc, #84]	@ (800a2ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a256:	f000 fcda 	bl	800ac0e <USBD_GetEpDesc>
 800a25a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a25c:	2181      	movs	r1, #129	@ 0x81
 800a25e:	4813      	ldr	r0, [pc, #76]	@ (800a2ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a260:	f000 fcd5 	bl	800ac0e <USBD_GetEpDesc>
 800a264:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2210      	movs	r2, #16
 800a270:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d006      	beq.n	800a286 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a280:	711a      	strb	r2, [r3, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d006      	beq.n	800a29a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a294:	711a      	strb	r2, [r3, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2243      	movs	r2, #67	@ 0x43
 800a29e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2a0:	4b02      	ldr	r3, [pc, #8]	@ (800a2ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3718      	adds	r7, #24
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000017c 	.word	0x2000017c

0800a2b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	220a      	movs	r2, #10
 800a2bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2be:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	20000138 	.word	0x20000138

0800a2d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e009      	b.n	800a2f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	33b0      	adds	r3, #176	@ 0xb0
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	32b0      	adds	r2, #176	@ 0xb0
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	e008      	b.n	800a33c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	371c      	adds	r7, #28
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	32b0      	adds	r2, #176	@ 0xb0
 800a35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a360:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a368:	2303      	movs	r3, #3
 800a36a:	e004      	b.n	800a376 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
	...

0800a384 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	32b0      	adds	r2, #176	@ 0xb0
 800a396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a39c:	2301      	movs	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	32b0      	adds	r2, #176	@ 0xb0
 800a3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e025      	b.n	800a402 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11f      	bne.n	800a400 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3c8:	4b10      	ldr	r3, [pc, #64]	@ (800a40c <USBD_CDC_TransmitPacket+0x88>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4403      	add	r3, r0
 800a3e2:	3318      	adds	r3, #24
 800a3e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3e6:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <USBD_CDC_TransmitPacket+0x88>)
 800a3e8:	7819      	ldrb	r1, [r3, #0]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 ffa7 	bl	800c34a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	200001bf 	.word	0x200001bf

0800a410 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	32b0      	adds	r2, #176	@ 0xb0
 800a422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a426:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	32b0      	adds	r2, #176	@ 0xb0
 800a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e018      	b.n	800a470 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	7c1b      	ldrb	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a446:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <USBD_CDC_ReceivePacket+0x68>)
 800a448:	7819      	ldrb	r1, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 ff99 	bl	800c38c <USBD_LL_PrepareReceive>
 800a45a:	e008      	b.n	800a46e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a45c:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <USBD_CDC_ReceivePacket+0x68>)
 800a45e:	7819      	ldrb	r1, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a466:	2340      	movs	r3, #64	@ 0x40
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f001 ff8f 	bl	800c38c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	200001c0 	.word	0x200001c0

0800a47c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	e01f      	b.n	800a4d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	79fa      	ldrb	r2, [r7, #7]
 800a4c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f001 fe09 	bl	800c0e0 <USBD_LL_Init>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e025      	b.n	800a540 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	32ae      	adds	r2, #174	@ 0xae
 800a506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00f      	beq.n	800a530 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	32ae      	adds	r2, #174	@ 0xae
 800a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	f107 020e 	add.w	r2, r7, #14
 800a524:	4610      	mov	r0, r2
 800a526:	4798      	blx	r3
 800a528:	4602      	mov	r2, r0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 fe11 	bl	800c178 <USBD_LL_Start>
 800a556:	4603      	mov	r3, r0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d009      	beq.n	800a5a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	78fa      	ldrb	r2, [r7, #3]
 800a59a:	4611      	mov	r1, r2
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	78fa      	ldrb	r2, [r7, #3]
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 f906 	bl	800b806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a608:	461a      	mov	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a616:	f003 031f 	and.w	r3, r3, #31
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d01a      	beq.n	800a654 <USBD_LL_SetupStage+0x72>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d822      	bhi.n	800a668 <USBD_LL_SetupStage+0x86>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <USBD_LL_SetupStage+0x4a>
 800a626:	2b01      	cmp	r3, #1
 800a628:	d00a      	beq.n	800a640 <USBD_LL_SetupStage+0x5e>
 800a62a:	e01d      	b.n	800a668 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fb5d 	bl	800acf4 <USBD_StdDevReq>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
      break;
 800a63e:	e020      	b.n	800a682 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fbc5 	bl	800add8 <USBD_StdItfReq>
 800a64e:	4603      	mov	r3, r0
 800a650:	73fb      	strb	r3, [r7, #15]
      break;
 800a652:	e016      	b.n	800a682 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fc27 	bl	800aeb0 <USBD_StdEPReq>
 800a662:	4603      	mov	r3, r0
 800a664:	73fb      	strb	r3, [r7, #15]
      break;
 800a666:	e00c      	b.n	800a682 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a66e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a672:	b2db      	uxtb	r3, r3
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f001 fdde 	bl	800c238 <USBD_LL_StallEP>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
      break;
 800a680:	bf00      	nop
  }

  return ret;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	460b      	mov	r3, r1
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a69e:	7afb      	ldrb	r3, [r7, #11]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d16e      	bne.n	800a782 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a6aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	f040 8098 	bne.w	800a7e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d913      	bls.n	800a6ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	689a      	ldr	r2, [r3, #8]
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	1ad2      	subs	r2, r2, r3
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	bf28      	it	cs
 800a6de:	4613      	movcs	r3, r2
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f001 f982 	bl	800b9ee <USBD_CtlContinueRx>
 800a6ea:	e07d      	b.n	800a7e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6f2:	f003 031f 	and.w	r3, r3, #31
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d014      	beq.n	800a724 <USBD_LL_DataOutStage+0x98>
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d81d      	bhi.n	800a73a <USBD_LL_DataOutStage+0xae>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <USBD_LL_DataOutStage+0x7c>
 800a702:	2b01      	cmp	r3, #1
 800a704:	d003      	beq.n	800a70e <USBD_LL_DataOutStage+0x82>
 800a706:	e018      	b.n	800a73a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	75bb      	strb	r3, [r7, #22]
            break;
 800a70c:	e018      	b.n	800a740 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a714:	b2db      	uxtb	r3, r3
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fa5e 	bl	800abda <USBD_CoreFindIF>
 800a71e:	4603      	mov	r3, r0
 800a720:	75bb      	strb	r3, [r7, #22]
            break;
 800a722:	e00d      	b.n	800a740 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	4619      	mov	r1, r3
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fa60 	bl	800abf4 <USBD_CoreFindEP>
 800a734:	4603      	mov	r3, r0
 800a736:	75bb      	strb	r3, [r7, #22]
            break;
 800a738:	e002      	b.n	800a740 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	75bb      	strb	r3, [r7, #22]
            break;
 800a73e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a740:	7dbb      	ldrb	r3, [r7, #22]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d119      	bne.n	800a77a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d113      	bne.n	800a77a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a752:	7dba      	ldrb	r2, [r7, #22]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	32ae      	adds	r2, #174	@ 0xae
 800a758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a762:	7dba      	ldrb	r2, [r7, #22]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a76a:	7dba      	ldrb	r2, [r7, #22]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	32ae      	adds	r2, #174	@ 0xae
 800a770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f001 f948 	bl	800ba10 <USBD_CtlSendStatus>
 800a780:	e032      	b.n	800a7e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a782:	7afb      	ldrb	r3, [r7, #11]
 800a784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	4619      	mov	r1, r3
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 fa31 	bl	800abf4 <USBD_CoreFindEP>
 800a792:	4603      	mov	r3, r0
 800a794:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a796:	7dbb      	ldrb	r3, [r7, #22]
 800a798:	2bff      	cmp	r3, #255	@ 0xff
 800a79a:	d025      	beq.n	800a7e8 <USBD_LL_DataOutStage+0x15c>
 800a79c:	7dbb      	ldrb	r3, [r7, #22]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d122      	bne.n	800a7e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d117      	bne.n	800a7de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7ae:	7dba      	ldrb	r2, [r7, #22]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	32ae      	adds	r2, #174	@ 0xae
 800a7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00f      	beq.n	800a7de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7be:	7dba      	ldrb	r2, [r7, #22]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7c6:	7dba      	ldrb	r2, [r7, #22]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	32ae      	adds	r2, #174	@ 0xae
 800a7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	7afa      	ldrb	r2, [r7, #11]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	4798      	blx	r3
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	e000      	b.n	800a7ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d16f      	bne.n	800a8e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3314      	adds	r3, #20
 800a80a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a812:	2b02      	cmp	r3, #2
 800a814:	d15a      	bne.n	800a8cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	689a      	ldr	r2, [r3, #8]
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d914      	bls.n	800a84c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	461a      	mov	r2, r3
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f001 f8aa 	bl	800b992 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a83e:	2300      	movs	r3, #0
 800a840:	2200      	movs	r2, #0
 800a842:	2100      	movs	r1, #0
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f001 fda1 	bl	800c38c <USBD_LL_PrepareReceive>
 800a84a:	e03f      	b.n	800a8cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	68da      	ldr	r2, [r3, #12]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	429a      	cmp	r2, r3
 800a856:	d11c      	bne.n	800a892 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a860:	429a      	cmp	r2, r3
 800a862:	d316      	bcc.n	800a892 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a86e:	429a      	cmp	r2, r3
 800a870:	d20f      	bcs.n	800a892 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a872:	2200      	movs	r2, #0
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f001 f88b 	bl	800b992 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a884:	2300      	movs	r3, #0
 800a886:	2200      	movs	r2, #0
 800a888:	2100      	movs	r1, #0
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f001 fd7e 	bl	800c38c <USBD_LL_PrepareReceive>
 800a890:	e01c      	b.n	800a8cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d10f      	bne.n	800a8be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d009      	beq.n	800a8be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8be:	2180      	movs	r1, #128	@ 0x80
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f001 fcb9 	bl	800c238 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f001 f8b5 	bl	800ba36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d03a      	beq.n	800a94c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f7ff fe42 	bl	800a560 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8e4:	e032      	b.n	800a94c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8e6:	7afb      	ldrb	r3, [r7, #11]
 800a8e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 f97f 	bl	800abf4 <USBD_CoreFindEP>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	2bff      	cmp	r3, #255	@ 0xff
 800a8fe:	d025      	beq.n	800a94c <USBD_LL_DataInStage+0x15a>
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d122      	bne.n	800a94c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d11c      	bne.n	800a94c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a912:	7dfa      	ldrb	r2, [r7, #23]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	32ae      	adds	r2, #174	@ 0xae
 800a918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d014      	beq.n	800a94c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a922:	7dfa      	ldrb	r2, [r7, #23]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a92a:	7dfa      	ldrb	r2, [r7, #23]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	32ae      	adds	r2, #174	@ 0xae
 800a930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	7afa      	ldrb	r2, [r7, #11]
 800a938:	4611      	mov	r1, r2
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	4798      	blx	r3
 800a93e:	4603      	mov	r3, r0
 800a940:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a942:	7dbb      	ldrb	r3, [r7, #22]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a948:	7dbb      	ldrb	r3, [r7, #22]
 800a94a:	e000      	b.n	800a94e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3718      	adds	r7, #24
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d014      	beq.n	800a9bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00e      	beq.n	800a9bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	6852      	ldr	r2, [r2, #4]
 800a9aa:	b2d2      	uxtb	r2, r2
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	4798      	blx	r3
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9bc:	2340      	movs	r3, #64	@ 0x40
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 fbf3 	bl	800c1ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2240      	movs	r2, #64	@ 0x40
 800a9d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9d8:	2340      	movs	r3, #64	@ 0x40
 800a9da:	2200      	movs	r2, #0
 800a9dc:	2180      	movs	r1, #128	@ 0x80
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 fbe5 	bl	800c1ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2240      	movs	r2, #64	@ 0x40
 800a9ee:	621a      	str	r2, [r3, #32]

  return ret;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2204      	movs	r2, #4
 800aa34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d106      	bne.n	800aa68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d110      	bne.n	800aaac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00b      	beq.n	800aaac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	32ae      	adds	r2, #174	@ 0xae
 800aacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e01c      	b.n	800ab12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d115      	bne.n	800ab10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32ae      	adds	r2, #174	@ 0xae
 800aaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf2:	6a1b      	ldr	r3, [r3, #32]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	32ae      	adds	r2, #174	@ 0xae
 800ab02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	78fa      	ldrb	r2, [r7, #3]
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	32ae      	adds	r2, #174	@ 0xae
 800ab30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e01c      	b.n	800ab76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d115      	bne.n	800ab74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	32ae      	adds	r2, #174	@ 0xae
 800ab52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00b      	beq.n	800ab74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	32ae      	adds	r2, #174	@ 0xae
 800ab66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	4611      	mov	r1, r2
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00e      	beq.n	800abd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6852      	ldr	r2, [r2, #4]
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	4611      	mov	r1, r2
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abcc:	2303      	movs	r3, #3
 800abce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abe6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b086      	sub	sp, #24
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	460b      	mov	r3, r1
 800ac18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	885b      	ldrh	r3, [r3, #2]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d91f      	bls.n	800ac74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac3a:	e013      	b.n	800ac64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac3c:	f107 030a 	add.w	r3, r7, #10
 800ac40:	4619      	mov	r1, r3
 800ac42:	6978      	ldr	r0, [r7, #20]
 800ac44:	f000 f81b 	bl	800ac7e <USBD_GetNextDesc>
 800ac48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2b05      	cmp	r3, #5
 800ac50:	d108      	bne.n	800ac64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	789b      	ldrb	r3, [r3, #2]
 800ac5a:	78fa      	ldrb	r2, [r7, #3]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d008      	beq.n	800ac72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	885b      	ldrh	r3, [r3, #2]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	897b      	ldrh	r3, [r7, #10]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d8e5      	bhi.n	800ac3c <USBD_GetEpDesc+0x2e>
 800ac70:	e000      	b.n	800ac74 <USBD_GetEpDesc+0x66>
          break;
 800ac72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac74:	693b      	ldr	r3, [r7, #16]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	7812      	ldrb	r2, [r2, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4413      	add	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b087      	sub	sp, #28
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	3301      	adds	r3, #1
 800accc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acd4:	8a3b      	ldrh	r3, [r7, #16]
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	b21a      	sxth	r2, r3
 800acda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acde:	4313      	orrs	r3, r2
 800ace0:	b21b      	sxth	r3, r3
 800ace2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ace4:	89fb      	ldrh	r3, [r7, #14]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad0a:	2b40      	cmp	r3, #64	@ 0x40
 800ad0c:	d005      	beq.n	800ad1a <USBD_StdDevReq+0x26>
 800ad0e:	2b40      	cmp	r3, #64	@ 0x40
 800ad10:	d857      	bhi.n	800adc2 <USBD_StdDevReq+0xce>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00f      	beq.n	800ad36 <USBD_StdDevReq+0x42>
 800ad16:	2b20      	cmp	r3, #32
 800ad18:	d153      	bne.n	800adc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	32ae      	adds	r2, #174	@ 0xae
 800ad24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	4798      	blx	r3
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]
      break;
 800ad34:	e04a      	b.n	800adcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	785b      	ldrb	r3, [r3, #1]
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d83b      	bhi.n	800adb6 <USBD_StdDevReq+0xc2>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <USBD_StdDevReq+0x50>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad99 	.word	0x0800ad99
 800ad48:	0800adad 	.word	0x0800adad
 800ad4c:	0800adb7 	.word	0x0800adb7
 800ad50:	0800ada3 	.word	0x0800ada3
 800ad54:	0800adb7 	.word	0x0800adb7
 800ad58:	0800ad77 	.word	0x0800ad77
 800ad5c:	0800ad6d 	.word	0x0800ad6d
 800ad60:	0800adb7 	.word	0x0800adb7
 800ad64:	0800ad8f 	.word	0x0800ad8f
 800ad68:	0800ad81 	.word	0x0800ad81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa3c 	bl	800b1ec <USBD_GetDescriptor>
          break;
 800ad74:	e024      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fba1 	bl	800b4c0 <USBD_SetAddress>
          break;
 800ad7e:	e01f      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fbe0 	bl	800b548 <USBD_SetConfig>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]
          break;
 800ad8c:	e018      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fc83 	bl	800b69c <USBD_GetConfig>
          break;
 800ad96:	e013      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fcb4 	bl	800b708 <USBD_GetStatus>
          break;
 800ada0:	e00e      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fce3 	bl	800b770 <USBD_SetFeature>
          break;
 800adaa:	e009      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fd07 	bl	800b7c2 <USBD_ClrFeature>
          break;
 800adb4:	e004      	b.n	800adc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fd5e 	bl	800b87a <USBD_CtlError>
          break;
 800adbe:	bf00      	nop
      }
      break;
 800adc0:	e004      	b.n	800adcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fd58 	bl	800b87a <USBD_CtlError>
      break;
 800adca:	bf00      	nop
  }

  return ret;
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop

0800add8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adee:	2b40      	cmp	r3, #64	@ 0x40
 800adf0:	d005      	beq.n	800adfe <USBD_StdItfReq+0x26>
 800adf2:	2b40      	cmp	r3, #64	@ 0x40
 800adf4:	d852      	bhi.n	800ae9c <USBD_StdItfReq+0xc4>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <USBD_StdItfReq+0x26>
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d14e      	bne.n	800ae9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d840      	bhi.n	800ae8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	889b      	ldrh	r3, [r3, #4]
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d836      	bhi.n	800ae84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	889b      	ldrh	r3, [r3, #4]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fedb 	bl	800abda <USBD_CoreFindIF>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2bff      	cmp	r3, #255	@ 0xff
 800ae2c:	d01d      	beq.n	800ae6a <USBD_StdItfReq+0x92>
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d11a      	bne.n	800ae6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae34:	7bba      	ldrb	r2, [r7, #14]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	32ae      	adds	r2, #174	@ 0xae
 800ae3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00f      	beq.n	800ae64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae44:	7bba      	ldrb	r2, [r7, #14]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae4c:	7bba      	ldrb	r2, [r7, #14]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	32ae      	adds	r2, #174	@ 0xae
 800ae52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	4798      	blx	r3
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae62:	e004      	b.n	800ae6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae64:	2303      	movs	r3, #3
 800ae66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae68:	e001      	b.n	800ae6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	88db      	ldrh	r3, [r3, #6]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d110      	bne.n	800ae98 <USBD_StdItfReq+0xc0>
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10d      	bne.n	800ae98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fdc7 	bl	800ba10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae82:	e009      	b.n	800ae98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fcf7 	bl	800b87a <USBD_CtlError>
          break;
 800ae8c:	e004      	b.n	800ae98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fcf2 	bl	800b87a <USBD_CtlError>
          break;
 800ae96:	e000      	b.n	800ae9a <USBD_StdItfReq+0xc2>
          break;
 800ae98:	bf00      	nop
      }
      break;
 800ae9a:	e004      	b.n	800aea6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fceb 	bl	800b87a <USBD_CtlError>
      break;
 800aea4:	bf00      	nop
  }

  return ret;
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	889b      	ldrh	r3, [r3, #4]
 800aec2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aecc:	2b40      	cmp	r3, #64	@ 0x40
 800aece:	d007      	beq.n	800aee0 <USBD_StdEPReq+0x30>
 800aed0:	2b40      	cmp	r3, #64	@ 0x40
 800aed2:	f200 817f 	bhi.w	800b1d4 <USBD_StdEPReq+0x324>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d02a      	beq.n	800af30 <USBD_StdEPReq+0x80>
 800aeda:	2b20      	cmp	r3, #32
 800aedc:	f040 817a 	bne.w	800b1d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fe85 	bl	800abf4 <USBD_CoreFindEP>
 800aeea:	4603      	mov	r3, r0
 800aeec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeee:	7b7b      	ldrb	r3, [r7, #13]
 800aef0:	2bff      	cmp	r3, #255	@ 0xff
 800aef2:	f000 8174 	beq.w	800b1de <USBD_StdEPReq+0x32e>
 800aef6:	7b7b      	ldrb	r3, [r7, #13]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f040 8170 	bne.w	800b1de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aefe:	7b7a      	ldrb	r2, [r7, #13]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af06:	7b7a      	ldrb	r2, [r7, #13]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	32ae      	adds	r2, #174	@ 0xae
 800af0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 8163 	beq.w	800b1de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af18:	7b7a      	ldrb	r2, [r7, #13]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	32ae      	adds	r2, #174	@ 0xae
 800af1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af2e:	e156      	b.n	800b1de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	785b      	ldrb	r3, [r3, #1]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d008      	beq.n	800af4a <USBD_StdEPReq+0x9a>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	f300 8145 	bgt.w	800b1c8 <USBD_StdEPReq+0x318>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 809b 	beq.w	800b07a <USBD_StdEPReq+0x1ca>
 800af44:	2b01      	cmp	r3, #1
 800af46:	d03c      	beq.n	800afc2 <USBD_StdEPReq+0x112>
 800af48:	e13e      	b.n	800b1c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b02      	cmp	r3, #2
 800af54:	d002      	beq.n	800af5c <USBD_StdEPReq+0xac>
 800af56:	2b03      	cmp	r3, #3
 800af58:	d016      	beq.n	800af88 <USBD_StdEPReq+0xd8>
 800af5a:	e02c      	b.n	800afb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00d      	beq.n	800af7e <USBD_StdEPReq+0xce>
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b80      	cmp	r3, #128	@ 0x80
 800af66:	d00a      	beq.n	800af7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 f963 	bl	800c238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af72:	2180      	movs	r1, #128	@ 0x80
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 f95f 	bl	800c238 <USBD_LL_StallEP>
 800af7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af7c:	e020      	b.n	800afc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fc7a 	bl	800b87a <USBD_CtlError>
              break;
 800af86:	e01b      	b.n	800afc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	885b      	ldrh	r3, [r3, #2]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10e      	bne.n	800afae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00b      	beq.n	800afae <USBD_StdEPReq+0xfe>
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b80      	cmp	r3, #128	@ 0x80
 800af9a:	d008      	beq.n	800afae <USBD_StdEPReq+0xfe>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	88db      	ldrh	r3, [r3, #6]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d104      	bne.n	800afae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f001 f945 	bl	800c238 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fd2e 	bl	800ba10 <USBD_CtlSendStatus>

              break;
 800afb4:	e004      	b.n	800afc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fc5e 	bl	800b87a <USBD_CtlError>
              break;
 800afbe:	bf00      	nop
          }
          break;
 800afc0:	e107      	b.n	800b1d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d002      	beq.n	800afd4 <USBD_StdEPReq+0x124>
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d016      	beq.n	800b000 <USBD_StdEPReq+0x150>
 800afd2:	e04b      	b.n	800b06c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00d      	beq.n	800aff6 <USBD_StdEPReq+0x146>
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	2b80      	cmp	r3, #128	@ 0x80
 800afde:	d00a      	beq.n	800aff6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 f927 	bl	800c238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afea:	2180      	movs	r1, #128	@ 0x80
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 f923 	bl	800c238 <USBD_LL_StallEP>
 800aff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aff4:	e040      	b.n	800b078 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fc3e 	bl	800b87a <USBD_CtlError>
              break;
 800affe:	e03b      	b.n	800b078 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	885b      	ldrh	r3, [r3, #2]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d136      	bne.n	800b076 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 f92d 	bl	800c276 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fcf7 	bl	800ba10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff fde4 	bl	800abf4 <USBD_CoreFindEP>
 800b02c:	4603      	mov	r3, r0
 800b02e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b030:	7b7b      	ldrb	r3, [r7, #13]
 800b032:	2bff      	cmp	r3, #255	@ 0xff
 800b034:	d01f      	beq.n	800b076 <USBD_StdEPReq+0x1c6>
 800b036:	7b7b      	ldrb	r3, [r7, #13]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d11c      	bne.n	800b076 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b03c:	7b7a      	ldrb	r2, [r7, #13]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b044:	7b7a      	ldrb	r2, [r7, #13]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	32ae      	adds	r2, #174	@ 0xae
 800b04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d010      	beq.n	800b076 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b054:	7b7a      	ldrb	r2, [r7, #13]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	32ae      	adds	r2, #174	@ 0xae
 800b05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	4798      	blx	r3
 800b066:	4603      	mov	r3, r0
 800b068:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b06a:	e004      	b.n	800b076 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fc03 	bl	800b87a <USBD_CtlError>
              break;
 800b074:	e000      	b.n	800b078 <USBD_StdEPReq+0x1c8>
              break;
 800b076:	bf00      	nop
          }
          break;
 800b078:	e0ab      	b.n	800b1d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d002      	beq.n	800b08c <USBD_StdEPReq+0x1dc>
 800b086:	2b03      	cmp	r3, #3
 800b088:	d032      	beq.n	800b0f0 <USBD_StdEPReq+0x240>
 800b08a:	e097      	b.n	800b1bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d007      	beq.n	800b0a2 <USBD_StdEPReq+0x1f2>
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	2b80      	cmp	r3, #128	@ 0x80
 800b096:	d004      	beq.n	800b0a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fbed 	bl	800b87a <USBD_CtlError>
                break;
 800b0a0:	e091      	b.n	800b1c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	da0b      	bge.n	800b0c2 <USBD_StdEPReq+0x212>
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	3310      	adds	r3, #16
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	3304      	adds	r3, #4
 800b0c0:	e00b      	b.n	800b0da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	3304      	adds	r3, #4
 800b0da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fc37 	bl	800b95c <USBD_CtlSendData>
              break;
 800b0ee:	e06a      	b.n	800b1c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	da11      	bge.n	800b11c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	f003 020f 	and.w	r2, r3, #15
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	440b      	add	r3, r1
 800b10a:	3324      	adds	r3, #36	@ 0x24
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d117      	bne.n	800b142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fbb0 	bl	800b87a <USBD_CtlError>
                  break;
 800b11a:	e054      	b.n	800b1c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	f003 020f 	and.w	r2, r3, #15
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	440b      	add	r3, r1
 800b12e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fb9d 	bl	800b87a <USBD_CtlError>
                  break;
 800b140:	e041      	b.n	800b1c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b146:	2b00      	cmp	r3, #0
 800b148:	da0b      	bge.n	800b162 <USBD_StdEPReq+0x2b2>
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	3310      	adds	r3, #16
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	3304      	adds	r3, #4
 800b160:	e00b      	b.n	800b17a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	4413      	add	r3, r2
 800b178:	3304      	adds	r3, #4
 800b17a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <USBD_StdEPReq+0x2d8>
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	2b80      	cmp	r3, #128	@ 0x80
 800b186:	d103      	bne.n	800b190 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	e00e      	b.n	800b1ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b190:	7bbb      	ldrb	r3, [r7, #14]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 f88d 	bl	800c2b4 <USBD_LL_IsStallEP>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	e002      	b.n	800b1ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fbd1 	bl	800b95c <USBD_CtlSendData>
              break;
 800b1ba:	e004      	b.n	800b1c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fb5b 	bl	800b87a <USBD_CtlError>
              break;
 800b1c4:	bf00      	nop
          }
          break;
 800b1c6:	e004      	b.n	800b1d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fb55 	bl	800b87a <USBD_CtlError>
          break;
 800b1d0:	bf00      	nop
      }
      break;
 800b1d2:	e005      	b.n	800b1e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fb4f 	bl	800b87a <USBD_CtlError>
      break;
 800b1dc:	e000      	b.n	800b1e0 <USBD_StdEPReq+0x330>
      break;
 800b1de:	bf00      	nop
  }

  return ret;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	885b      	ldrh	r3, [r3, #2]
 800b206:	0a1b      	lsrs	r3, r3, #8
 800b208:	b29b      	uxth	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2b06      	cmp	r3, #6
 800b20e:	f200 8128 	bhi.w	800b462 <USBD_GetDescriptor+0x276>
 800b212:	a201      	add	r2, pc, #4	@ (adr r2, 800b218 <USBD_GetDescriptor+0x2c>)
 800b214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b218:	0800b235 	.word	0x0800b235
 800b21c:	0800b24d 	.word	0x0800b24d
 800b220:	0800b28d 	.word	0x0800b28d
 800b224:	0800b463 	.word	0x0800b463
 800b228:	0800b463 	.word	0x0800b463
 800b22c:	0800b403 	.word	0x0800b403
 800b230:	0800b42f 	.word	0x0800b42f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	7c12      	ldrb	r2, [r2, #16]
 800b240:	f107 0108 	add.w	r1, r7, #8
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
 800b248:	60f8      	str	r0, [r7, #12]
      break;
 800b24a:	e112      	b.n	800b472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	7c1b      	ldrb	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10d      	bne.n	800b270 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25c:	f107 0208 	add.w	r2, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	2202      	movs	r2, #2
 800b26c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b26e:	e100      	b.n	800b472 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b278:	f107 0208 	add.w	r2, r7, #8
 800b27c:	4610      	mov	r0, r2
 800b27e:	4798      	blx	r3
 800b280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
      break;
 800b28a:	e0f2      	b.n	800b472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	885b      	ldrh	r3, [r3, #2]
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b05      	cmp	r3, #5
 800b294:	f200 80ac 	bhi.w	800b3f0 <USBD_GetDescriptor+0x204>
 800b298:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a0 <USBD_GetDescriptor+0xb4>)
 800b29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29e:	bf00      	nop
 800b2a0:	0800b2b9 	.word	0x0800b2b9
 800b2a4:	0800b2ed 	.word	0x0800b2ed
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b355 	.word	0x0800b355
 800b2b0:	0800b389 	.word	0x0800b389
 800b2b4:	0800b3bd 	.word	0x0800b3bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00b      	beq.n	800b2dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	7c12      	ldrb	r2, [r2, #16]
 800b2d0:	f107 0108 	add.w	r1, r7, #8
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4798      	blx	r3
 800b2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2da:	e091      	b.n	800b400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 facb 	bl	800b87a <USBD_CtlError>
            err++;
 800b2e4:	7afb      	ldrb	r3, [r7, #11]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ea:	e089      	b.n	800b400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	7c12      	ldrb	r2, [r2, #16]
 800b304:	f107 0108 	add.w	r1, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b30e:	e077      	b.n	800b400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fab1 	bl	800b87a <USBD_CtlError>
            err++;
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	3301      	adds	r3, #1
 800b31c:	72fb      	strb	r3, [r7, #11]
          break;
 800b31e:	e06f      	b.n	800b400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	7c12      	ldrb	r2, [r2, #16]
 800b338:	f107 0108 	add.w	r1, r7, #8
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b342:	e05d      	b.n	800b400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fa97 	bl	800b87a <USBD_CtlError>
            err++;
 800b34c:	7afb      	ldrb	r3, [r7, #11]
 800b34e:	3301      	adds	r3, #1
 800b350:	72fb      	strb	r3, [r7, #11]
          break;
 800b352:	e055      	b.n	800b400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	7c12      	ldrb	r2, [r2, #16]
 800b36c:	f107 0108 	add.w	r1, r7, #8
 800b370:	4610      	mov	r0, r2
 800b372:	4798      	blx	r3
 800b374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b376:	e043      	b.n	800b400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa7d 	bl	800b87a <USBD_CtlError>
            err++;
 800b380:	7afb      	ldrb	r3, [r7, #11]
 800b382:	3301      	adds	r3, #1
 800b384:	72fb      	strb	r3, [r7, #11]
          break;
 800b386:	e03b      	b.n	800b400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00b      	beq.n	800b3ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	7c12      	ldrb	r2, [r2, #16]
 800b3a0:	f107 0108 	add.w	r1, r7, #8
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	4798      	blx	r3
 800b3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3aa:	e029      	b.n	800b400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa63 	bl	800b87a <USBD_CtlError>
            err++;
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ba:	e021      	b.n	800b400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
 800b3d4:	f107 0108 	add.w	r1, r7, #8
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3de:	e00f      	b.n	800b400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa49 	bl	800b87a <USBD_CtlError>
            err++;
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ee:	e007      	b.n	800b400 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fa41 	bl	800b87a <USBD_CtlError>
          err++;
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3fe:	bf00      	nop
      }
      break;
 800b400:	e037      	b.n	800b472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7c1b      	ldrb	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d109      	bne.n	800b41e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b412:	f107 0208 	add.w	r2, r7, #8
 800b416:	4610      	mov	r0, r2
 800b418:	4798      	blx	r3
 800b41a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b41c:	e029      	b.n	800b472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa2a 	bl	800b87a <USBD_CtlError>
        err++;
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	3301      	adds	r3, #1
 800b42a:	72fb      	strb	r3, [r7, #11]
      break;
 800b42c:	e021      	b.n	800b472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7c1b      	ldrb	r3, [r3, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10d      	bne.n	800b452 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b43e:	f107 0208 	add.w	r2, r7, #8
 800b442:	4610      	mov	r0, r2
 800b444:	4798      	blx	r3
 800b446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	2207      	movs	r2, #7
 800b44e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b450:	e00f      	b.n	800b472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fa10 	bl	800b87a <USBD_CtlError>
        err++;
 800b45a:	7afb      	ldrb	r3, [r7, #11]
 800b45c:	3301      	adds	r3, #1
 800b45e:	72fb      	strb	r3, [r7, #11]
      break;
 800b460:	e007      	b.n	800b472 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fa08 	bl	800b87a <USBD_CtlError>
      err++;
 800b46a:	7afb      	ldrb	r3, [r7, #11]
 800b46c:	3301      	adds	r3, #1
 800b46e:	72fb      	strb	r3, [r7, #11]
      break;
 800b470:	bf00      	nop
  }

  if (err != 0U)
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d11e      	bne.n	800b4b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	88db      	ldrh	r3, [r3, #6]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d016      	beq.n	800b4ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b480:	893b      	ldrh	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00e      	beq.n	800b4a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	88da      	ldrh	r2, [r3, #6]
 800b48a:	893b      	ldrh	r3, [r7, #8]
 800b48c:	4293      	cmp	r3, r2
 800b48e:	bf28      	it	cs
 800b490:	4613      	movcs	r3, r2
 800b492:	b29b      	uxth	r3, r3
 800b494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b496:	893b      	ldrh	r3, [r7, #8]
 800b498:	461a      	mov	r2, r3
 800b49a:	68f9      	ldr	r1, [r7, #12]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fa5d 	bl	800b95c <USBD_CtlSendData>
 800b4a2:	e009      	b.n	800b4b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f9e7 	bl	800b87a <USBD_CtlError>
 800b4ac:	e004      	b.n	800b4b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 faae 	bl	800ba10 <USBD_CtlSendStatus>
 800b4b4:	e000      	b.n	800b4b8 <USBD_GetDescriptor+0x2cc>
    return;
 800b4b6:	bf00      	nop
  }
}
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop

0800b4c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	889b      	ldrh	r3, [r3, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d131      	bne.n	800b536 <USBD_SetAddress+0x76>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	88db      	ldrh	r3, [r3, #6]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d12d      	bne.n	800b536 <USBD_SetAddress+0x76>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	885b      	ldrh	r3, [r3, #2]
 800b4de:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4e0:	d829      	bhi.n	800b536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	885b      	ldrh	r3, [r3, #2]
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d104      	bne.n	800b504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f9bc 	bl	800b87a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b502:	e01d      	b.n	800b540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7bfa      	ldrb	r2, [r7, #15]
 800b508:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fefb 	bl	800c30c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fa7a 	bl	800ba10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d004      	beq.n	800b52c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2202      	movs	r2, #2
 800b526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52a:	e009      	b.n	800b540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b534:	e004      	b.n	800b540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f99e 	bl	800b87a <USBD_CtlError>
  }
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	885b      	ldrh	r3, [r3, #2]
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	4b4e      	ldr	r3, [pc, #312]	@ (800b698 <USBD_SetConfig+0x150>)
 800b55e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b560:	4b4d      	ldr	r3, [pc, #308]	@ (800b698 <USBD_SetConfig+0x150>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d905      	bls.n	800b574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f985 	bl	800b87a <USBD_CtlError>
    return USBD_FAIL;
 800b570:	2303      	movs	r3, #3
 800b572:	e08c      	b.n	800b68e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d002      	beq.n	800b586 <USBD_SetConfig+0x3e>
 800b580:	2b03      	cmp	r3, #3
 800b582:	d029      	beq.n	800b5d8 <USBD_SetConfig+0x90>
 800b584:	e075      	b.n	800b672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b586:	4b44      	ldr	r3, [pc, #272]	@ (800b698 <USBD_SetConfig+0x150>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d020      	beq.n	800b5d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b58e:	4b42      	ldr	r3, [pc, #264]	@ (800b698 <USBD_SetConfig+0x150>)
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b598:	4b3f      	ldr	r3, [pc, #252]	@ (800b698 <USBD_SetConfig+0x150>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7fe ffe9 	bl	800a576 <USBD_SetClassConfig>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d008      	beq.n	800b5c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f962 	bl	800b87a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5be:	e065      	b.n	800b68c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fa25 	bl	800ba10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5ce:	e05d      	b.n	800b68c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fa1d 	bl	800ba10 <USBD_CtlSendStatus>
      break;
 800b5d6:	e059      	b.n	800b68c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5d8:	4b2f      	ldr	r3, [pc, #188]	@ (800b698 <USBD_SetConfig+0x150>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d112      	bne.n	800b606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b5e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b698 <USBD_SetConfig+0x150>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5f2:	4b29      	ldr	r3, [pc, #164]	@ (800b698 <USBD_SetConfig+0x150>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7fe ffd8 	bl	800a5ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa06 	bl	800ba10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b604:	e042      	b.n	800b68c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b606:	4b24      	ldr	r3, [pc, #144]	@ (800b698 <USBD_SetConfig+0x150>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d02a      	beq.n	800b66a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7fe ffc6 	bl	800a5ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b622:	4b1d      	ldr	r3, [pc, #116]	@ (800b698 <USBD_SetConfig+0x150>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b62c:	4b1a      	ldr	r3, [pc, #104]	@ (800b698 <USBD_SetConfig+0x150>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7fe ff9f 	bl	800a576 <USBD_SetClassConfig>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00f      	beq.n	800b662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f918 	bl	800b87a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7fe ffab 	bl	800a5ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2202      	movs	r2, #2
 800b65c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b660:	e014      	b.n	800b68c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f9d4 	bl	800ba10 <USBD_CtlSendStatus>
      break;
 800b668:	e010      	b.n	800b68c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f9d0 	bl	800ba10 <USBD_CtlSendStatus>
      break;
 800b670:	e00c      	b.n	800b68c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f900 	bl	800b87a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b67a:	4b07      	ldr	r3, [pc, #28]	@ (800b698 <USBD_SetConfig+0x150>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7fe ff94 	bl	800a5ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b686:	2303      	movs	r3, #3
 800b688:	73fb      	strb	r3, [r7, #15]
      break;
 800b68a:	bf00      	nop
  }

  return ret;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	200023e0 	.word	0x200023e0

0800b69c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	88db      	ldrh	r3, [r3, #6]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d004      	beq.n	800b6b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f8e2 	bl	800b87a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6b6:	e023      	b.n	800b700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	dc02      	bgt.n	800b6ca <USBD_GetConfig+0x2e>
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dc03      	bgt.n	800b6d0 <USBD_GetConfig+0x34>
 800b6c8:	e015      	b.n	800b6f6 <USBD_GetConfig+0x5a>
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d00b      	beq.n	800b6e6 <USBD_GetConfig+0x4a>
 800b6ce:	e012      	b.n	800b6f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	3308      	adds	r3, #8
 800b6da:	2201      	movs	r2, #1
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f93c 	bl	800b95c <USBD_CtlSendData>
        break;
 800b6e4:	e00c      	b.n	800b700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f934 	bl	800b95c <USBD_CtlSendData>
        break;
 800b6f4:	e004      	b.n	800b700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f8be 	bl	800b87a <USBD_CtlError>
        break;
 800b6fe:	bf00      	nop
}
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	3b01      	subs	r3, #1
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d81e      	bhi.n	800b75e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	88db      	ldrh	r3, [r3, #6]
 800b724:	2b02      	cmp	r3, #2
 800b726:	d004      	beq.n	800b732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f8a5 	bl	800b87a <USBD_CtlError>
        break;
 800b730:	e01a      	b.n	800b768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2201      	movs	r2, #1
 800b736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d005      	beq.n	800b74e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f043 0202 	orr.w	r2, r3, #2
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	330c      	adds	r3, #12
 800b752:	2202      	movs	r2, #2
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f900 	bl	800b95c <USBD_CtlSendData>
      break;
 800b75c:	e004      	b.n	800b768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f88a 	bl	800b87a <USBD_CtlError>
      break;
 800b766:	bf00      	nop
  }
}
 800b768:	bf00      	nop
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	885b      	ldrh	r3, [r3, #2]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d107      	bne.n	800b792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f940 	bl	800ba10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b790:	e013      	b.n	800b7ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	885b      	ldrh	r3, [r3, #2]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d10b      	bne.n	800b7b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	889b      	ldrh	r3, [r3, #4]
 800b79e:	0a1b      	lsrs	r3, r3, #8
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f930 	bl	800ba10 <USBD_CtlSendStatus>
}
 800b7b0:	e003      	b.n	800b7ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f860 	bl	800b87a <USBD_CtlError>
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d80b      	bhi.n	800b7f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	885b      	ldrh	r3, [r3, #2]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d10c      	bne.n	800b7fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f910 	bl	800ba10 <USBD_CtlSendStatus>
      }
      break;
 800b7f0:	e004      	b.n	800b7fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f840 	bl	800b87a <USBD_CtlError>
      break;
 800b7fa:	e000      	b.n	800b7fe <USBD_ClrFeature+0x3c>
      break;
 800b7fc:	bf00      	nop
  }
}
 800b7fe:	bf00      	nop
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3301      	adds	r3, #1
 800b820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	781a      	ldrb	r2, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7ff fa40 	bl	800acb6 <SWAPBYTE>
 800b836:	4603      	mov	r3, r0
 800b838:	461a      	mov	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3301      	adds	r3, #1
 800b842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3301      	adds	r3, #1
 800b848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f7ff fa33 	bl	800acb6 <SWAPBYTE>
 800b850:	4603      	mov	r3, r0
 800b852:	461a      	mov	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3301      	adds	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3301      	adds	r3, #1
 800b862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f7ff fa26 	bl	800acb6 <SWAPBYTE>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	80da      	strh	r2, [r3, #6]
}
 800b872:	bf00      	nop
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b884:	2180      	movs	r1, #128	@ 0x80
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fcd6 	bl	800c238 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b88c:	2100      	movs	r1, #0
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fcd2 	bl	800c238 <USBD_LL_StallEP>
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d036      	beq.n	800b920 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8b6:	6938      	ldr	r0, [r7, #16]
 800b8b8:	f000 f836 	bl	800b928 <USBD_GetLen>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	7812      	ldrb	r2, [r2, #0]
 800b8d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	2203      	movs	r2, #3
 800b8e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8ec:	e013      	b.n	800b916 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	7812      	ldrb	r2, [r2, #0]
 800b8f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	613b      	str	r3, [r7, #16]
    idx++;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	3301      	adds	r3, #1
 800b904:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	4413      	add	r3, r2
 800b90c:	2200      	movs	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	3301      	adds	r3, #1
 800b914:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e7      	bne.n	800b8ee <USBD_GetString+0x52>
 800b91e:	e000      	b.n	800b922 <USBD_GetString+0x86>
    return;
 800b920:	bf00      	nop
  }
}
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b938:	e005      	b.n	800b946 <USBD_GetLen+0x1e>
  {
    len++;
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	3301      	adds	r3, #1
 800b93e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	3301      	adds	r3, #1
 800b944:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1f5      	bne.n	800b93a <USBD_GetLen+0x12>
  }

  return len;
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	2100      	movs	r1, #0
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f000 fce1 	bl	800c34a <USBD_LL_Transmit>

  return USBD_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	60f8      	str	r0, [r7, #12]
 800b99a:	60b9      	str	r1, [r7, #8]
 800b99c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f000 fcd0 	bl	800c34a <USBD_LL_Transmit>

  return USBD_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2203      	movs	r2, #3
 800b9c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fcd4 	bl	800c38c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	2100      	movs	r1, #0
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 fcc3 	bl	800c38c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba20:	2300      	movs	r3, #0
 800ba22:	2200      	movs	r2, #0
 800ba24:	2100      	movs	r1, #0
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fc8f 	bl	800c34a <USBD_LL_Transmit>

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2205      	movs	r2, #5
 800ba42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba46:	2300      	movs	r3, #0
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fc9d 	bl	800c38c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba60:	2200      	movs	r2, #0
 800ba62:	4912      	ldr	r1, [pc, #72]	@ (800baac <MX_USB_DEVICE_Init+0x50>)
 800ba64:	4812      	ldr	r0, [pc, #72]	@ (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba66:	f7fe fd09 	bl	800a47c <USBD_Init>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba70:	f7f6 f952 	bl	8001d18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba74:	490f      	ldr	r1, [pc, #60]	@ (800bab4 <MX_USB_DEVICE_Init+0x58>)
 800ba76:	480e      	ldr	r0, [pc, #56]	@ (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba78:	f7fe fd30 	bl	800a4dc <USBD_RegisterClass>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba82:	f7f6 f949 	bl	8001d18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba86:	490c      	ldr	r1, [pc, #48]	@ (800bab8 <MX_USB_DEVICE_Init+0x5c>)
 800ba88:	4809      	ldr	r0, [pc, #36]	@ (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba8a:	f7fe fc21 	bl	800a2d0 <USBD_CDC_RegisterInterface>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba94:	f7f6 f940 	bl	8001d18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ba98:	4805      	ldr	r0, [pc, #20]	@ (800bab0 <MX_USB_DEVICE_Init+0x54>)
 800ba9a:	f7fe fd55 	bl	800a548 <USBD_Start>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baa4:	f7f6 f938 	bl	8001d18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baa8:	bf00      	nop
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	200001d8 	.word	0x200001d8
 800bab0:	200023e4 	.word	0x200023e4
 800bab4:	20000144 	.word	0x20000144
 800bab8:	200001c4 	.word	0x200001c4

0800babc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bac0:	2200      	movs	r2, #0
 800bac2:	4905      	ldr	r1, [pc, #20]	@ (800bad8 <CDC_Init_FS+0x1c>)
 800bac4:	4805      	ldr	r0, [pc, #20]	@ (800badc <CDC_Init_FS+0x20>)
 800bac6:	f7fe fc1d 	bl	800a304 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baca:	4905      	ldr	r1, [pc, #20]	@ (800bae0 <CDC_Init_FS+0x24>)
 800bacc:	4803      	ldr	r0, [pc, #12]	@ (800badc <CDC_Init_FS+0x20>)
 800bace:	f7fe fc3b 	bl	800a348 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	20002ac0 	.word	0x20002ac0
 800badc:	200023e4 	.word	0x200023e4
 800bae0:	200026c0 	.word	0x200026c0

0800bae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bae4:	b480      	push	{r7}
 800bae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800baea:	4618      	mov	r0, r3
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	6039      	str	r1, [r7, #0]
 800bafe:	71fb      	strb	r3, [r7, #7]
 800bb00:	4613      	mov	r3, r2
 800bb02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b23      	cmp	r3, #35	@ 0x23
 800bb08:	d84a      	bhi.n	800bba0 <CDC_Control_FS+0xac>
 800bb0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <CDC_Control_FS+0x1c>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bba1 	.word	0x0800bba1
 800bb14:	0800bba1 	.word	0x0800bba1
 800bb18:	0800bba1 	.word	0x0800bba1
 800bb1c:	0800bba1 	.word	0x0800bba1
 800bb20:	0800bba1 	.word	0x0800bba1
 800bb24:	0800bba1 	.word	0x0800bba1
 800bb28:	0800bba1 	.word	0x0800bba1
 800bb2c:	0800bba1 	.word	0x0800bba1
 800bb30:	0800bba1 	.word	0x0800bba1
 800bb34:	0800bba1 	.word	0x0800bba1
 800bb38:	0800bba1 	.word	0x0800bba1
 800bb3c:	0800bba1 	.word	0x0800bba1
 800bb40:	0800bba1 	.word	0x0800bba1
 800bb44:	0800bba1 	.word	0x0800bba1
 800bb48:	0800bba1 	.word	0x0800bba1
 800bb4c:	0800bba1 	.word	0x0800bba1
 800bb50:	0800bba1 	.word	0x0800bba1
 800bb54:	0800bba1 	.word	0x0800bba1
 800bb58:	0800bba1 	.word	0x0800bba1
 800bb5c:	0800bba1 	.word	0x0800bba1
 800bb60:	0800bba1 	.word	0x0800bba1
 800bb64:	0800bba1 	.word	0x0800bba1
 800bb68:	0800bba1 	.word	0x0800bba1
 800bb6c:	0800bba1 	.word	0x0800bba1
 800bb70:	0800bba1 	.word	0x0800bba1
 800bb74:	0800bba1 	.word	0x0800bba1
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bba1 	.word	0x0800bba1
 800bb80:	0800bba1 	.word	0x0800bba1
 800bb84:	0800bba1 	.word	0x0800bba1
 800bb88:	0800bba1 	.word	0x0800bba1
 800bb8c:	0800bba1 	.word	0x0800bba1
 800bb90:	0800bba1 	.word	0x0800bba1
 800bb94:	0800bba1 	.word	0x0800bba1
 800bb98:	0800bba1 	.word	0x0800bba1
 800bb9c:	0800bba1 	.word	0x0800bba1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bba0:	bf00      	nop
  }

  return (USBD_OK);
 800bba2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4805      	ldr	r0, [pc, #20]	@ (800bbd4 <CDC_Receive_FS+0x24>)
 800bbbe:	f7fe fbc3 	bl	800a348 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbc2:	4804      	ldr	r0, [pc, #16]	@ (800bbd4 <CDC_Receive_FS+0x24>)
 800bbc4:	f7fe fc24 	bl	800a410 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bbc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	200023e4 	.word	0x200023e4

0800bbd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bbe8:	4b0d      	ldr	r3, [pc, #52]	@ (800bc20 <CDC_Transmit_FS+0x48>)
 800bbea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d001      	beq.n	800bbfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e00b      	b.n	800bc16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbfe:	887b      	ldrh	r3, [r7, #2]
 800bc00:	461a      	mov	r2, r3
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	4806      	ldr	r0, [pc, #24]	@ (800bc20 <CDC_Transmit_FS+0x48>)
 800bc06:	f7fe fb7d 	bl	800a304 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc0a:	4805      	ldr	r0, [pc, #20]	@ (800bc20 <CDC_Transmit_FS+0x48>)
 800bc0c:	f7fe fbba 	bl	800a384 <USBD_CDC_TransmitPacket>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	200023e4 	.word	0x200023e4

0800bc24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	6039      	str	r1, [r7, #0]
 800bc52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2212      	movs	r2, #18
 800bc58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc5a:	4b03      	ldr	r3, [pc, #12]	@ (800bc68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	200001f4 	.word	0x200001f4

0800bc6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	6039      	str	r1, [r7, #0]
 800bc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2204      	movs	r2, #4
 800bc7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc7e:	4b03      	ldr	r3, [pc, #12]	@ (800bc8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20000208 	.word	0x20000208

0800bc90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	6039      	str	r1, [r7, #0]
 800bc9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc9c:	79fb      	ldrb	r3, [r7, #7]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d105      	bne.n	800bcae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	4907      	ldr	r1, [pc, #28]	@ (800bcc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bca6:	4808      	ldr	r0, [pc, #32]	@ (800bcc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bca8:	f7ff fdf8 	bl	800b89c <USBD_GetString>
 800bcac:	e004      	b.n	800bcb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	4904      	ldr	r1, [pc, #16]	@ (800bcc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcb2:	4805      	ldr	r0, [pc, #20]	@ (800bcc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcb4:	f7ff fdf2 	bl	800b89c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcb8:	4b02      	ldr	r3, [pc, #8]	@ (800bcc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20002ec0 	.word	0x20002ec0
 800bcc8:	0800d8c4 	.word	0x0800d8c4

0800bccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	6039      	str	r1, [r7, #0]
 800bcd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	4904      	ldr	r1, [pc, #16]	@ (800bcec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcdc:	4804      	ldr	r0, [pc, #16]	@ (800bcf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcde:	f7ff fddd 	bl	800b89c <USBD_GetString>
  return USBD_StrDesc;
 800bce2:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20002ec0 	.word	0x20002ec0
 800bcf0:	0800d8dc 	.word	0x0800d8dc

0800bcf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	221a      	movs	r2, #26
 800bd04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd06:	f000 f843 	bl	800bd90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd0a:	4b02      	ldr	r3, [pc, #8]	@ (800bd14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	2000020c 	.word	0x2000020c

0800bd18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd24:	79fb      	ldrb	r3, [r7, #7]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d105      	bne.n	800bd36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4907      	ldr	r1, [pc, #28]	@ (800bd4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd2e:	4808      	ldr	r0, [pc, #32]	@ (800bd50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd30:	f7ff fdb4 	bl	800b89c <USBD_GetString>
 800bd34:	e004      	b.n	800bd40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4904      	ldr	r1, [pc, #16]	@ (800bd4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd3a:	4805      	ldr	r0, [pc, #20]	@ (800bd50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd3c:	f7ff fdae 	bl	800b89c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd40:	4b02      	ldr	r3, [pc, #8]	@ (800bd4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20002ec0 	.word	0x20002ec0
 800bd50:	0800d8f0 	.word	0x0800d8f0

0800bd54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	6039      	str	r1, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d105      	bne.n	800bd72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	4907      	ldr	r1, [pc, #28]	@ (800bd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd6a:	4808      	ldr	r0, [pc, #32]	@ (800bd8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd6c:	f7ff fd96 	bl	800b89c <USBD_GetString>
 800bd70:	e004      	b.n	800bd7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4904      	ldr	r1, [pc, #16]	@ (800bd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd76:	4805      	ldr	r0, [pc, #20]	@ (800bd8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd78:	f7ff fd90 	bl	800b89c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd7c:	4b02      	ldr	r3, [pc, #8]	@ (800bd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20002ec0 	.word	0x20002ec0
 800bd8c:	0800d8fc 	.word	0x0800d8fc

0800bd90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd96:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd4 <Get_SerialNum+0x44>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd8 <Get_SerialNum+0x48>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bda2:	4b0e      	ldr	r3, [pc, #56]	@ (800bddc <Get_SerialNum+0x4c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4413      	add	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d009      	beq.n	800bdca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdb6:	2208      	movs	r2, #8
 800bdb8:	4909      	ldr	r1, [pc, #36]	@ (800bde0 <Get_SerialNum+0x50>)
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 f814 	bl	800bde8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	4908      	ldr	r1, [pc, #32]	@ (800bde4 <Get_SerialNum+0x54>)
 800bdc4:	68b8      	ldr	r0, [r7, #8]
 800bdc6:	f000 f80f 	bl	800bde8 <IntToUnicode>
  }
}
 800bdca:	bf00      	nop
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	1fff7a10 	.word	0x1fff7a10
 800bdd8:	1fff7a14 	.word	0x1fff7a14
 800bddc:	1fff7a18 	.word	0x1fff7a18
 800bde0:	2000020e 	.word	0x2000020e
 800bde4:	2000021e 	.word	0x2000021e

0800bde8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	75fb      	strb	r3, [r7, #23]
 800bdfe:	e027      	b.n	800be50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	0f1b      	lsrs	r3, r3, #28
 800be04:	2b09      	cmp	r3, #9
 800be06:	d80b      	bhi.n	800be20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	0f1b      	lsrs	r3, r3, #28
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	005b      	lsls	r3, r3, #1
 800be12:	4619      	mov	r1, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	440b      	add	r3, r1
 800be18:	3230      	adds	r2, #48	@ 0x30
 800be1a:	b2d2      	uxtb	r2, r2
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	e00a      	b.n	800be36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	0f1b      	lsrs	r3, r3, #28
 800be24:	b2da      	uxtb	r2, r3
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	4619      	mov	r1, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	440b      	add	r3, r1
 800be30:	3237      	adds	r2, #55	@ 0x37
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	011b      	lsls	r3, r3, #4
 800be3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	3301      	adds	r3, #1
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	4413      	add	r3, r2
 800be46:	2200      	movs	r2, #0
 800be48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	3301      	adds	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]
 800be50:	7dfa      	ldrb	r2, [r7, #23]
 800be52:	79fb      	ldrb	r3, [r7, #7]
 800be54:	429a      	cmp	r2, r3
 800be56:	d3d3      	bcc.n	800be00 <IntToUnicode+0x18>
  }
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	371c      	adds	r7, #28
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
	...

0800be68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	@ 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be70:	f107 0314 	add.w	r3, r7, #20
 800be74:	2200      	movs	r2, #0
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	605a      	str	r2, [r3, #4]
 800be7a:	609a      	str	r2, [r3, #8]
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be88:	d13a      	bne.n	800bf00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be8a:	2300      	movs	r3, #0
 800be8c:	613b      	str	r3, [r7, #16]
 800be8e:	4b1e      	ldr	r3, [pc, #120]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800be90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be92:	4a1d      	ldr	r2, [pc, #116]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800be94:	f043 0301 	orr.w	r3, r3, #1
 800be98:	6313      	str	r3, [r2, #48]	@ 0x30
 800be9a:	4b1b      	ldr	r3, [pc, #108]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800be9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	613b      	str	r3, [r7, #16]
 800bea4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bea6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800beaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beac:	2302      	movs	r3, #2
 800beae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800beb4:	2303      	movs	r3, #3
 800beb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800beb8:	230a      	movs	r3, #10
 800beba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bebc:	f107 0314 	add.w	r3, r7, #20
 800bec0:	4619      	mov	r1, r3
 800bec2:	4812      	ldr	r0, [pc, #72]	@ (800bf0c <HAL_PCD_MspInit+0xa4>)
 800bec4:	f7f8 f992 	bl	80041ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bec8:	4b0f      	ldr	r3, [pc, #60]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800beca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800becc:	4a0e      	ldr	r2, [pc, #56]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800bece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bed2:	6353      	str	r3, [r2, #52]	@ 0x34
 800bed4:	2300      	movs	r3, #0
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	4b0b      	ldr	r3, [pc, #44]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800beda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bedc:	4a0a      	ldr	r2, [pc, #40]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800bede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bee2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bee4:	4b08      	ldr	r3, [pc, #32]	@ (800bf08 <HAL_PCD_MspInit+0xa0>)
 800bee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bef0:	2200      	movs	r2, #0
 800bef2:	2100      	movs	r1, #0
 800bef4:	2043      	movs	r0, #67	@ 0x43
 800bef6:	f7f7 ff1f 	bl	8003d38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800befa:	2043      	movs	r0, #67	@ 0x43
 800befc:	f7f7 ff38 	bl	8003d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf00:	bf00      	nop
 800bf02:	3728      	adds	r7, #40	@ 0x28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	40023800 	.word	0x40023800
 800bf0c:	40020000 	.word	0x40020000

0800bf10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800bf24:	4619      	mov	r1, r3
 800bf26:	4610      	mov	r0, r2
 800bf28:	f7fe fb5b 	bl	800a5e2 <USBD_LL_SetupStage>
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800bf46:	78fa      	ldrb	r2, [r7, #3]
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	00db      	lsls	r3, r3, #3
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	440b      	add	r3, r1
 800bf54:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	78fb      	ldrb	r3, [r7, #3]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	f7fe fb95 	bl	800a68c <USBD_LL_DataOutStage>
}
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	460b      	mov	r3, r1
 800bf74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800bf7c:	78fa      	ldrb	r2, [r7, #3]
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	4613      	mov	r3, r2
 800bf82:	00db      	lsls	r3, r3, #3
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	440b      	add	r3, r1
 800bf8a:	334c      	adds	r3, #76	@ 0x4c
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	78fb      	ldrb	r3, [r7, #3]
 800bf90:	4619      	mov	r1, r3
 800bf92:	f7fe fc2e 	bl	800a7f2 <USBD_LL_DataInStage>
}
 800bf96:	bf00      	nop
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fe fd62 	bl	800aa76 <USBD_LL_SOF>
}
 800bfb2:	bf00      	nop
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d001      	beq.n	800bfd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfce:	f7f5 fea3 	bl	8001d18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bfd8:	7bfa      	ldrb	r2, [r7, #15]
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fd0c 	bl	800a9fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fcb4 	bl	800a956 <USBD_LL_Reset>
}
 800bfee:	bf00      	nop
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fd07 	bl	800aa1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6812      	ldr	r2, [r2, #0]
 800c01a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c02c:	4b04      	ldr	r3, [pc, #16]	@ (800c040 <HAL_PCD_SuspendCallback+0x48>)
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	4a03      	ldr	r2, [pc, #12]	@ (800c040 <HAL_PCD_SuspendCallback+0x48>)
 800c032:	f043 0306 	orr.w	r3, r3, #6
 800c036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	e000ed00 	.word	0xe000ed00

0800c044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fcf7 	bl	800aa46 <USBD_LL_Resume>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c072:	78fa      	ldrb	r2, [r7, #3]
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fd4f 	bl	800ab1a <USBD_LL_IsoOUTIncomplete>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c096:	78fa      	ldrb	r2, [r7, #3]
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fd0b 	bl	800aab6 <USBD_LL_IsoINIncomplete>
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fd61 	bl	800ab7e <USBD_LL_DevConnected>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fd5e 	bl	800ab94 <USBD_LL_DevDisconnected>
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d13c      	bne.n	800c16a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0f0:	4a20      	ldr	r2, [pc, #128]	@ (800c174 <USBD_LL_Init+0x94>)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c174 <USBD_LL_Init+0x94>)
 800c0fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c100:	4b1c      	ldr	r3, [pc, #112]	@ (800c174 <USBD_LL_Init+0x94>)
 800c102:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c108:	4b1a      	ldr	r3, [pc, #104]	@ (800c174 <USBD_LL_Init+0x94>)
 800c10a:	2204      	movs	r2, #4
 800c10c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c10e:	4b19      	ldr	r3, [pc, #100]	@ (800c174 <USBD_LL_Init+0x94>)
 800c110:	2202      	movs	r2, #2
 800c112:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c114:	4b17      	ldr	r3, [pc, #92]	@ (800c174 <USBD_LL_Init+0x94>)
 800c116:	2200      	movs	r2, #0
 800c118:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c11a:	4b16      	ldr	r3, [pc, #88]	@ (800c174 <USBD_LL_Init+0x94>)
 800c11c:	2202      	movs	r2, #2
 800c11e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c120:	4b14      	ldr	r3, [pc, #80]	@ (800c174 <USBD_LL_Init+0x94>)
 800c122:	2200      	movs	r2, #0
 800c124:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c126:	4b13      	ldr	r3, [pc, #76]	@ (800c174 <USBD_LL_Init+0x94>)
 800c128:	2200      	movs	r2, #0
 800c12a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c12c:	4b11      	ldr	r3, [pc, #68]	@ (800c174 <USBD_LL_Init+0x94>)
 800c12e:	2200      	movs	r2, #0
 800c130:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c132:	4b10      	ldr	r3, [pc, #64]	@ (800c174 <USBD_LL_Init+0x94>)
 800c134:	2200      	movs	r2, #0
 800c136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c138:	4b0e      	ldr	r3, [pc, #56]	@ (800c174 <USBD_LL_Init+0x94>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c13e:	480d      	ldr	r0, [pc, #52]	@ (800c174 <USBD_LL_Init+0x94>)
 800c140:	f7f8 f9f1 	bl	8004526 <HAL_PCD_Init>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c14a:	f7f5 fde5 	bl	8001d18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c14e:	2180      	movs	r1, #128	@ 0x80
 800c150:	4808      	ldr	r0, [pc, #32]	@ (800c174 <USBD_LL_Init+0x94>)
 800c152:	f7f9 fc48 	bl	80059e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c156:	2240      	movs	r2, #64	@ 0x40
 800c158:	2100      	movs	r1, #0
 800c15a:	4806      	ldr	r0, [pc, #24]	@ (800c174 <USBD_LL_Init+0x94>)
 800c15c:	f7f9 fbfc 	bl	8005958 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c160:	2280      	movs	r2, #128	@ 0x80
 800c162:	2101      	movs	r1, #1
 800c164:	4803      	ldr	r0, [pc, #12]	@ (800c174 <USBD_LL_Init+0x94>)
 800c166:	f7f9 fbf7 	bl	8005958 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	200030c0 	.word	0x200030c0

0800c178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f8 fae6 	bl	8004760 <HAL_PCD_Start>
 800c194:	4603      	mov	r3, r0
 800c196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 f942 	bl	800c424 <USBD_Get_USB_Status>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b084      	sub	sp, #16
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	4608      	mov	r0, r1
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4603      	mov	r3, r0
 800c1be:	70fb      	strb	r3, [r7, #3]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70bb      	strb	r3, [r7, #2]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c1d6:	78bb      	ldrb	r3, [r7, #2]
 800c1d8:	883a      	ldrh	r2, [r7, #0]
 800c1da:	78f9      	ldrb	r1, [r7, #3]
 800c1dc:	f7f8 ffb7 	bl	800514e <HAL_PCD_EP_Open>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f91c 	bl	800c424 <USBD_Get_USB_Status>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	460b      	mov	r3, r1
 800c204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c20a:	2300      	movs	r3, #0
 800c20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c214:	78fa      	ldrb	r2, [r7, #3]
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f9 f800 	bl	800521e <HAL_PCD_EP_Close>
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	4618      	mov	r0, r3
 800c226:	f000 f8fd 	bl	800c424 <USBD_Get_USB_Status>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c252:	78fa      	ldrb	r2, [r7, #3]
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7f9 f8d8 	bl	800540c <HAL_PCD_EP_SetStall>
 800c25c:	4603      	mov	r3, r0
 800c25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f8de 	bl	800c424 <USBD_Get_USB_Status>
 800c268:	4603      	mov	r3, r0
 800c26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c286:	2300      	movs	r3, #0
 800c288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c290:	78fa      	ldrb	r2, [r7, #3]
 800c292:	4611      	mov	r1, r2
 800c294:	4618      	mov	r0, r3
 800c296:	f7f9 f91d 	bl	80054d4 <HAL_PCD_EP_ClrStall>
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f8bf 	bl	800c424 <USBD_Get_USB_Status>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da0b      	bge.n	800c2e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	4413      	add	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	333e      	adds	r3, #62	@ 0x3e
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	e00b      	b.n	800c300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2ee:	68f9      	ldr	r1, [r7, #12]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c2fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c326:	78fa      	ldrb	r2, [r7, #3]
 800c328:	4611      	mov	r1, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7f8 feea 	bl	8005104 <HAL_PCD_SetAddress>
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c334:	7bfb      	ldrb	r3, [r7, #15]
 800c336:	4618      	mov	r0, r3
 800c338:	f000 f874 	bl	800c424 <USBD_Get_USB_Status>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c340:	7bbb      	ldrb	r3, [r7, #14]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af00      	add	r7, sp, #0
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	603b      	str	r3, [r7, #0]
 800c356:	460b      	mov	r3, r1
 800c358:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c368:	7af9      	ldrb	r1, [r7, #11]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	f7f9 f803 	bl	8005378 <HAL_PCD_EP_Transmit>
 800c372:	4603      	mov	r3, r0
 800c374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f853 	bl	800c424 <USBD_Get_USB_Status>
 800c37e:	4603      	mov	r3, r0
 800c380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c382:	7dbb      	ldrb	r3, [r7, #22]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	460b      	mov	r3, r1
 800c39a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3aa:	7af9      	ldrb	r1, [r7, #11]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	f7f8 ff7f 	bl	80052b2 <HAL_PCD_EP_Receive>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 f832 	bl	800c424 <USBD_Get_USB_Status>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3718      	adds	r7, #24
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b082      	sub	sp, #8
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7f8 ffaf 	bl	8005348 <HAL_PCD_EP_GetRxCount>
 800c3ea:	4603      	mov	r3, r0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3fc:	4b03      	ldr	r3, [pc, #12]	@ (800c40c <USBD_static_malloc+0x18>)
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	200035cc 	.word	0x200035cc

0800c410 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]

}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	2b03      	cmp	r3, #3
 800c436:	d817      	bhi.n	800c468 <USBD_Get_USB_Status+0x44>
 800c438:	a201      	add	r2, pc, #4	@ (adr r2, 800c440 <USBD_Get_USB_Status+0x1c>)
 800c43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43e:	bf00      	nop
 800c440:	0800c451 	.word	0x0800c451
 800c444:	0800c457 	.word	0x0800c457
 800c448:	0800c45d 	.word	0x0800c45d
 800c44c:	0800c463 	.word	0x0800c463
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
    break;
 800c454:	e00b      	b.n	800c46e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c456:	2303      	movs	r3, #3
 800c458:	73fb      	strb	r3, [r7, #15]
    break;
 800c45a:	e008      	b.n	800c46e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c45c:	2301      	movs	r3, #1
 800c45e:	73fb      	strb	r3, [r7, #15]
    break;
 800c460:	e005      	b.n	800c46e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c462:	2303      	movs	r3, #3
 800c464:	73fb      	strb	r3, [r7, #15]
    break;
 800c466:	e002      	b.n	800c46e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c468:	2303      	movs	r3, #3
 800c46a:	73fb      	strb	r3, [r7, #15]
    break;
 800c46c:	bf00      	nop
  }
  return usb_status;
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <siprintf>:
 800c47c:	b40e      	push	{r1, r2, r3}
 800c47e:	b500      	push	{lr}
 800c480:	b09c      	sub	sp, #112	@ 0x70
 800c482:	ab1d      	add	r3, sp, #116	@ 0x74
 800c484:	9002      	str	r0, [sp, #8]
 800c486:	9006      	str	r0, [sp, #24]
 800c488:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c48c:	4809      	ldr	r0, [pc, #36]	@ (800c4b4 <siprintf+0x38>)
 800c48e:	9107      	str	r1, [sp, #28]
 800c490:	9104      	str	r1, [sp, #16]
 800c492:	4909      	ldr	r1, [pc, #36]	@ (800c4b8 <siprintf+0x3c>)
 800c494:	f853 2b04 	ldr.w	r2, [r3], #4
 800c498:	9105      	str	r1, [sp, #20]
 800c49a:	6800      	ldr	r0, [r0, #0]
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	a902      	add	r1, sp, #8
 800c4a0:	f000 fa42 	bl	800c928 <_svfiprintf_r>
 800c4a4:	9b02      	ldr	r3, [sp, #8]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	b01c      	add	sp, #112	@ 0x70
 800c4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b0:	b003      	add	sp, #12
 800c4b2:	4770      	bx	lr
 800c4b4:	20000228 	.word	0x20000228
 800c4b8:	ffff0208 	.word	0xffff0208

0800c4bc <siscanf>:
 800c4bc:	b40e      	push	{r1, r2, r3}
 800c4be:	b530      	push	{r4, r5, lr}
 800c4c0:	b09c      	sub	sp, #112	@ 0x70
 800c4c2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c4c4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c4c8:	f854 5b04 	ldr.w	r5, [r4], #4
 800c4cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c4d0:	9002      	str	r0, [sp, #8]
 800c4d2:	9006      	str	r0, [sp, #24]
 800c4d4:	f7f3 fe84 	bl	80001e0 <strlen>
 800c4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c508 <siscanf+0x4c>)
 800c4da:	9003      	str	r0, [sp, #12]
 800c4dc:	9007      	str	r0, [sp, #28]
 800c4de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4e0:	480a      	ldr	r0, [pc, #40]	@ (800c50c <siscanf+0x50>)
 800c4e2:	9401      	str	r4, [sp, #4]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4e8:	9314      	str	r3, [sp, #80]	@ 0x50
 800c4ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4f2:	462a      	mov	r2, r5
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	a902      	add	r1, sp, #8
 800c4f8:	6800      	ldr	r0, [r0, #0]
 800c4fa:	f000 fb69 	bl	800cbd0 <__ssvfiscanf_r>
 800c4fe:	b01c      	add	sp, #112	@ 0x70
 800c500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c504:	b003      	add	sp, #12
 800c506:	4770      	bx	lr
 800c508:	0800c511 	.word	0x0800c511
 800c50c:	20000228 	.word	0x20000228

0800c510 <__seofread>:
 800c510:	2000      	movs	r0, #0
 800c512:	4770      	bx	lr

0800c514 <_vsniprintf_r>:
 800c514:	b530      	push	{r4, r5, lr}
 800c516:	4614      	mov	r4, r2
 800c518:	2c00      	cmp	r4, #0
 800c51a:	b09b      	sub	sp, #108	@ 0x6c
 800c51c:	4605      	mov	r5, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	da05      	bge.n	800c52e <_vsniprintf_r+0x1a>
 800c522:	238b      	movs	r3, #139	@ 0x8b
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c52a:	b01b      	add	sp, #108	@ 0x6c
 800c52c:	bd30      	pop	{r4, r5, pc}
 800c52e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c532:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c536:	bf14      	ite	ne
 800c538:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c53c:	4623      	moveq	r3, r4
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	9305      	str	r3, [sp, #20]
 800c542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c546:	9100      	str	r1, [sp, #0]
 800c548:	9104      	str	r1, [sp, #16]
 800c54a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c54e:	4669      	mov	r1, sp
 800c550:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c552:	f000 f9e9 	bl	800c928 <_svfiprintf_r>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	bfbc      	itt	lt
 800c55a:	238b      	movlt	r3, #139	@ 0x8b
 800c55c:	602b      	strlt	r3, [r5, #0]
 800c55e:	2c00      	cmp	r4, #0
 800c560:	d0e3      	beq.n	800c52a <_vsniprintf_r+0x16>
 800c562:	9b00      	ldr	r3, [sp, #0]
 800c564:	2200      	movs	r2, #0
 800c566:	701a      	strb	r2, [r3, #0]
 800c568:	e7df      	b.n	800c52a <_vsniprintf_r+0x16>
	...

0800c56c <vsniprintf>:
 800c56c:	b507      	push	{r0, r1, r2, lr}
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	4613      	mov	r3, r2
 800c572:	460a      	mov	r2, r1
 800c574:	4601      	mov	r1, r0
 800c576:	4803      	ldr	r0, [pc, #12]	@ (800c584 <vsniprintf+0x18>)
 800c578:	6800      	ldr	r0, [r0, #0]
 800c57a:	f7ff ffcb 	bl	800c514 <_vsniprintf_r>
 800c57e:	b003      	add	sp, #12
 800c580:	f85d fb04 	ldr.w	pc, [sp], #4
 800c584:	20000228 	.word	0x20000228

0800c588 <memcmp>:
 800c588:	b510      	push	{r4, lr}
 800c58a:	3901      	subs	r1, #1
 800c58c:	4402      	add	r2, r0
 800c58e:	4290      	cmp	r0, r2
 800c590:	d101      	bne.n	800c596 <memcmp+0xe>
 800c592:	2000      	movs	r0, #0
 800c594:	e005      	b.n	800c5a2 <memcmp+0x1a>
 800c596:	7803      	ldrb	r3, [r0, #0]
 800c598:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	d001      	beq.n	800c5a4 <memcmp+0x1c>
 800c5a0:	1b18      	subs	r0, r3, r4
 800c5a2:	bd10      	pop	{r4, pc}
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	e7f2      	b.n	800c58e <memcmp+0x6>

0800c5a8 <memset>:
 800c5a8:	4402      	add	r2, r0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d100      	bne.n	800c5b2 <memset+0xa>
 800c5b0:	4770      	bx	lr
 800c5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b6:	e7f9      	b.n	800c5ac <memset+0x4>

0800c5b8 <strcat>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	7814      	ldrb	r4, [r2, #0]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d1fa      	bne.n	800c5bc <strcat+0x4>
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	d1f9      	bne.n	800c5c8 <strcat+0x10>
 800c5d4:	bd10      	pop	{r4, pc}

0800c5d6 <strncpy>:
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	3901      	subs	r1, #1
 800c5da:	4603      	mov	r3, r0
 800c5dc:	b132      	cbz	r2, 800c5ec <strncpy+0x16>
 800c5de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5e2:	f803 4b01 	strb.w	r4, [r3], #1
 800c5e6:	3a01      	subs	r2, #1
 800c5e8:	2c00      	cmp	r4, #0
 800c5ea:	d1f7      	bne.n	800c5dc <strncpy+0x6>
 800c5ec:	441a      	add	r2, r3
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d100      	bne.n	800c5f6 <strncpy+0x20>
 800c5f4:	bd10      	pop	{r4, pc}
 800c5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5fa:	e7f9      	b.n	800c5f0 <strncpy+0x1a>

0800c5fc <__errno>:
 800c5fc:	4b01      	ldr	r3, [pc, #4]	@ (800c604 <__errno+0x8>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000228 	.word	0x20000228

0800c608 <__libc_init_array>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	4d0d      	ldr	r5, [pc, #52]	@ (800c640 <__libc_init_array+0x38>)
 800c60c:	4c0d      	ldr	r4, [pc, #52]	@ (800c644 <__libc_init_array+0x3c>)
 800c60e:	1b64      	subs	r4, r4, r5
 800c610:	10a4      	asrs	r4, r4, #2
 800c612:	2600      	movs	r6, #0
 800c614:	42a6      	cmp	r6, r4
 800c616:	d109      	bne.n	800c62c <__libc_init_array+0x24>
 800c618:	4d0b      	ldr	r5, [pc, #44]	@ (800c648 <__libc_init_array+0x40>)
 800c61a:	4c0c      	ldr	r4, [pc, #48]	@ (800c64c <__libc_init_array+0x44>)
 800c61c:	f001 f8e8 	bl	800d7f0 <_init>
 800c620:	1b64      	subs	r4, r4, r5
 800c622:	10a4      	asrs	r4, r4, #2
 800c624:	2600      	movs	r6, #0
 800c626:	42a6      	cmp	r6, r4
 800c628:	d105      	bne.n	800c636 <__libc_init_array+0x2e>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c630:	4798      	blx	r3
 800c632:	3601      	adds	r6, #1
 800c634:	e7ee      	b.n	800c614 <__libc_init_array+0xc>
 800c636:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63a:	4798      	blx	r3
 800c63c:	3601      	adds	r6, #1
 800c63e:	e7f2      	b.n	800c626 <__libc_init_array+0x1e>
 800c640:	0800ec20 	.word	0x0800ec20
 800c644:	0800ec20 	.word	0x0800ec20
 800c648:	0800ec20 	.word	0x0800ec20
 800c64c:	0800ec24 	.word	0x0800ec24

0800c650 <__retarget_lock_acquire_recursive>:
 800c650:	4770      	bx	lr

0800c652 <__retarget_lock_release_recursive>:
 800c652:	4770      	bx	lr

0800c654 <strcpy>:
 800c654:	4603      	mov	r3, r0
 800c656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65a:	f803 2b01 	strb.w	r2, [r3], #1
 800c65e:	2a00      	cmp	r2, #0
 800c660:	d1f9      	bne.n	800c656 <strcpy+0x2>
 800c662:	4770      	bx	lr

0800c664 <memcpy>:
 800c664:	440a      	add	r2, r1
 800c666:	4291      	cmp	r1, r2
 800c668:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c66c:	d100      	bne.n	800c670 <memcpy+0xc>
 800c66e:	4770      	bx	lr
 800c670:	b510      	push	{r4, lr}
 800c672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c67a:	4291      	cmp	r1, r2
 800c67c:	d1f9      	bne.n	800c672 <memcpy+0xe>
 800c67e:	bd10      	pop	{r4, pc}

0800c680 <_free_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4605      	mov	r5, r0
 800c684:	2900      	cmp	r1, #0
 800c686:	d041      	beq.n	800c70c <_free_r+0x8c>
 800c688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c68c:	1f0c      	subs	r4, r1, #4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bfb8      	it	lt
 800c692:	18e4      	addlt	r4, r4, r3
 800c694:	f000 f8e0 	bl	800c858 <__malloc_lock>
 800c698:	4a1d      	ldr	r2, [pc, #116]	@ (800c710 <_free_r+0x90>)
 800c69a:	6813      	ldr	r3, [r2, #0]
 800c69c:	b933      	cbnz	r3, 800c6ac <_free_r+0x2c>
 800c69e:	6063      	str	r3, [r4, #4]
 800c6a0:	6014      	str	r4, [r2, #0]
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6a8:	f000 b8dc 	b.w	800c864 <__malloc_unlock>
 800c6ac:	42a3      	cmp	r3, r4
 800c6ae:	d908      	bls.n	800c6c2 <_free_r+0x42>
 800c6b0:	6820      	ldr	r0, [r4, #0]
 800c6b2:	1821      	adds	r1, r4, r0
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	bf01      	itttt	eq
 800c6b8:	6819      	ldreq	r1, [r3, #0]
 800c6ba:	685b      	ldreq	r3, [r3, #4]
 800c6bc:	1809      	addeq	r1, r1, r0
 800c6be:	6021      	streq	r1, [r4, #0]
 800c6c0:	e7ed      	b.n	800c69e <_free_r+0x1e>
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	b10b      	cbz	r3, 800c6cc <_free_r+0x4c>
 800c6c8:	42a3      	cmp	r3, r4
 800c6ca:	d9fa      	bls.n	800c6c2 <_free_r+0x42>
 800c6cc:	6811      	ldr	r1, [r2, #0]
 800c6ce:	1850      	adds	r0, r2, r1
 800c6d0:	42a0      	cmp	r0, r4
 800c6d2:	d10b      	bne.n	800c6ec <_free_r+0x6c>
 800c6d4:	6820      	ldr	r0, [r4, #0]
 800c6d6:	4401      	add	r1, r0
 800c6d8:	1850      	adds	r0, r2, r1
 800c6da:	4283      	cmp	r3, r0
 800c6dc:	6011      	str	r1, [r2, #0]
 800c6de:	d1e0      	bne.n	800c6a2 <_free_r+0x22>
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	6053      	str	r3, [r2, #4]
 800c6e6:	4408      	add	r0, r1
 800c6e8:	6010      	str	r0, [r2, #0]
 800c6ea:	e7da      	b.n	800c6a2 <_free_r+0x22>
 800c6ec:	d902      	bls.n	800c6f4 <_free_r+0x74>
 800c6ee:	230c      	movs	r3, #12
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	e7d6      	b.n	800c6a2 <_free_r+0x22>
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	1821      	adds	r1, r4, r0
 800c6f8:	428b      	cmp	r3, r1
 800c6fa:	bf04      	itt	eq
 800c6fc:	6819      	ldreq	r1, [r3, #0]
 800c6fe:	685b      	ldreq	r3, [r3, #4]
 800c700:	6063      	str	r3, [r4, #4]
 800c702:	bf04      	itt	eq
 800c704:	1809      	addeq	r1, r1, r0
 800c706:	6021      	streq	r1, [r4, #0]
 800c708:	6054      	str	r4, [r2, #4]
 800c70a:	e7ca      	b.n	800c6a2 <_free_r+0x22>
 800c70c:	bd38      	pop	{r3, r4, r5, pc}
 800c70e:	bf00      	nop
 800c710:	20003930 	.word	0x20003930

0800c714 <sbrk_aligned>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	4e0f      	ldr	r6, [pc, #60]	@ (800c754 <sbrk_aligned+0x40>)
 800c718:	460c      	mov	r4, r1
 800c71a:	6831      	ldr	r1, [r6, #0]
 800c71c:	4605      	mov	r5, r0
 800c71e:	b911      	cbnz	r1, 800c726 <sbrk_aligned+0x12>
 800c720:	f000 ff34 	bl	800d58c <_sbrk_r>
 800c724:	6030      	str	r0, [r6, #0]
 800c726:	4621      	mov	r1, r4
 800c728:	4628      	mov	r0, r5
 800c72a:	f000 ff2f 	bl	800d58c <_sbrk_r>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	d103      	bne.n	800c73a <sbrk_aligned+0x26>
 800c732:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c736:	4620      	mov	r0, r4
 800c738:	bd70      	pop	{r4, r5, r6, pc}
 800c73a:	1cc4      	adds	r4, r0, #3
 800c73c:	f024 0403 	bic.w	r4, r4, #3
 800c740:	42a0      	cmp	r0, r4
 800c742:	d0f8      	beq.n	800c736 <sbrk_aligned+0x22>
 800c744:	1a21      	subs	r1, r4, r0
 800c746:	4628      	mov	r0, r5
 800c748:	f000 ff20 	bl	800d58c <_sbrk_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	d1f2      	bne.n	800c736 <sbrk_aligned+0x22>
 800c750:	e7ef      	b.n	800c732 <sbrk_aligned+0x1e>
 800c752:	bf00      	nop
 800c754:	2000392c 	.word	0x2000392c

0800c758 <_malloc_r>:
 800c758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c75c:	1ccd      	adds	r5, r1, #3
 800c75e:	f025 0503 	bic.w	r5, r5, #3
 800c762:	3508      	adds	r5, #8
 800c764:	2d0c      	cmp	r5, #12
 800c766:	bf38      	it	cc
 800c768:	250c      	movcc	r5, #12
 800c76a:	2d00      	cmp	r5, #0
 800c76c:	4606      	mov	r6, r0
 800c76e:	db01      	blt.n	800c774 <_malloc_r+0x1c>
 800c770:	42a9      	cmp	r1, r5
 800c772:	d904      	bls.n	800c77e <_malloc_r+0x26>
 800c774:	230c      	movs	r3, #12
 800c776:	6033      	str	r3, [r6, #0]
 800c778:	2000      	movs	r0, #0
 800c77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c854 <_malloc_r+0xfc>
 800c782:	f000 f869 	bl	800c858 <__malloc_lock>
 800c786:	f8d8 3000 	ldr.w	r3, [r8]
 800c78a:	461c      	mov	r4, r3
 800c78c:	bb44      	cbnz	r4, 800c7e0 <_malloc_r+0x88>
 800c78e:	4629      	mov	r1, r5
 800c790:	4630      	mov	r0, r6
 800c792:	f7ff ffbf 	bl	800c714 <sbrk_aligned>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	4604      	mov	r4, r0
 800c79a:	d158      	bne.n	800c84e <_malloc_r+0xf6>
 800c79c:	f8d8 4000 	ldr.w	r4, [r8]
 800c7a0:	4627      	mov	r7, r4
 800c7a2:	2f00      	cmp	r7, #0
 800c7a4:	d143      	bne.n	800c82e <_malloc_r+0xd6>
 800c7a6:	2c00      	cmp	r4, #0
 800c7a8:	d04b      	beq.n	800c842 <_malloc_r+0xea>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	eb04 0903 	add.w	r9, r4, r3
 800c7b4:	f000 feea 	bl	800d58c <_sbrk_r>
 800c7b8:	4581      	cmp	r9, r0
 800c7ba:	d142      	bne.n	800c842 <_malloc_r+0xea>
 800c7bc:	6821      	ldr	r1, [r4, #0]
 800c7be:	1a6d      	subs	r5, r5, r1
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f7ff ffa6 	bl	800c714 <sbrk_aligned>
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d03a      	beq.n	800c842 <_malloc_r+0xea>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	442b      	add	r3, r5
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	bb62      	cbnz	r2, 800c834 <_malloc_r+0xdc>
 800c7da:	f8c8 7000 	str.w	r7, [r8]
 800c7de:	e00f      	b.n	800c800 <_malloc_r+0xa8>
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	1b52      	subs	r2, r2, r5
 800c7e4:	d420      	bmi.n	800c828 <_malloc_r+0xd0>
 800c7e6:	2a0b      	cmp	r2, #11
 800c7e8:	d917      	bls.n	800c81a <_malloc_r+0xc2>
 800c7ea:	1961      	adds	r1, r4, r5
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	6025      	str	r5, [r4, #0]
 800c7f0:	bf18      	it	ne
 800c7f2:	6059      	strne	r1, [r3, #4]
 800c7f4:	6863      	ldr	r3, [r4, #4]
 800c7f6:	bf08      	it	eq
 800c7f8:	f8c8 1000 	streq.w	r1, [r8]
 800c7fc:	5162      	str	r2, [r4, r5]
 800c7fe:	604b      	str	r3, [r1, #4]
 800c800:	4630      	mov	r0, r6
 800c802:	f000 f82f 	bl	800c864 <__malloc_unlock>
 800c806:	f104 000b 	add.w	r0, r4, #11
 800c80a:	1d23      	adds	r3, r4, #4
 800c80c:	f020 0007 	bic.w	r0, r0, #7
 800c810:	1ac2      	subs	r2, r0, r3
 800c812:	bf1c      	itt	ne
 800c814:	1a1b      	subne	r3, r3, r0
 800c816:	50a3      	strne	r3, [r4, r2]
 800c818:	e7af      	b.n	800c77a <_malloc_r+0x22>
 800c81a:	6862      	ldr	r2, [r4, #4]
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	bf0c      	ite	eq
 800c820:	f8c8 2000 	streq.w	r2, [r8]
 800c824:	605a      	strne	r2, [r3, #4]
 800c826:	e7eb      	b.n	800c800 <_malloc_r+0xa8>
 800c828:	4623      	mov	r3, r4
 800c82a:	6864      	ldr	r4, [r4, #4]
 800c82c:	e7ae      	b.n	800c78c <_malloc_r+0x34>
 800c82e:	463c      	mov	r4, r7
 800c830:	687f      	ldr	r7, [r7, #4]
 800c832:	e7b6      	b.n	800c7a2 <_malloc_r+0x4a>
 800c834:	461a      	mov	r2, r3
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	42a3      	cmp	r3, r4
 800c83a:	d1fb      	bne.n	800c834 <_malloc_r+0xdc>
 800c83c:	2300      	movs	r3, #0
 800c83e:	6053      	str	r3, [r2, #4]
 800c840:	e7de      	b.n	800c800 <_malloc_r+0xa8>
 800c842:	230c      	movs	r3, #12
 800c844:	6033      	str	r3, [r6, #0]
 800c846:	4630      	mov	r0, r6
 800c848:	f000 f80c 	bl	800c864 <__malloc_unlock>
 800c84c:	e794      	b.n	800c778 <_malloc_r+0x20>
 800c84e:	6005      	str	r5, [r0, #0]
 800c850:	e7d6      	b.n	800c800 <_malloc_r+0xa8>
 800c852:	bf00      	nop
 800c854:	20003930 	.word	0x20003930

0800c858 <__malloc_lock>:
 800c858:	4801      	ldr	r0, [pc, #4]	@ (800c860 <__malloc_lock+0x8>)
 800c85a:	f7ff bef9 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800c85e:	bf00      	nop
 800c860:	20003928 	.word	0x20003928

0800c864 <__malloc_unlock>:
 800c864:	4801      	ldr	r0, [pc, #4]	@ (800c86c <__malloc_unlock+0x8>)
 800c866:	f7ff bef4 	b.w	800c652 <__retarget_lock_release_recursive>
 800c86a:	bf00      	nop
 800c86c:	20003928 	.word	0x20003928

0800c870 <__ssputs_r>:
 800c870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c874:	688e      	ldr	r6, [r1, #8]
 800c876:	461f      	mov	r7, r3
 800c878:	42be      	cmp	r6, r7
 800c87a:	680b      	ldr	r3, [r1, #0]
 800c87c:	4682      	mov	sl, r0
 800c87e:	460c      	mov	r4, r1
 800c880:	4690      	mov	r8, r2
 800c882:	d82d      	bhi.n	800c8e0 <__ssputs_r+0x70>
 800c884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c888:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c88c:	d026      	beq.n	800c8dc <__ssputs_r+0x6c>
 800c88e:	6965      	ldr	r5, [r4, #20]
 800c890:	6909      	ldr	r1, [r1, #16]
 800c892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c896:	eba3 0901 	sub.w	r9, r3, r1
 800c89a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c89e:	1c7b      	adds	r3, r7, #1
 800c8a0:	444b      	add	r3, r9
 800c8a2:	106d      	asrs	r5, r5, #1
 800c8a4:	429d      	cmp	r5, r3
 800c8a6:	bf38      	it	cc
 800c8a8:	461d      	movcc	r5, r3
 800c8aa:	0553      	lsls	r3, r2, #21
 800c8ac:	d527      	bpl.n	800c8fe <__ssputs_r+0x8e>
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	f7ff ff52 	bl	800c758 <_malloc_r>
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	b360      	cbz	r0, 800c912 <__ssputs_r+0xa2>
 800c8b8:	6921      	ldr	r1, [r4, #16]
 800c8ba:	464a      	mov	r2, r9
 800c8bc:	f7ff fed2 	bl	800c664 <memcpy>
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	6126      	str	r6, [r4, #16]
 800c8ce:	6165      	str	r5, [r4, #20]
 800c8d0:	444e      	add	r6, r9
 800c8d2:	eba5 0509 	sub.w	r5, r5, r9
 800c8d6:	6026      	str	r6, [r4, #0]
 800c8d8:	60a5      	str	r5, [r4, #8]
 800c8da:	463e      	mov	r6, r7
 800c8dc:	42be      	cmp	r6, r7
 800c8de:	d900      	bls.n	800c8e2 <__ssputs_r+0x72>
 800c8e0:	463e      	mov	r6, r7
 800c8e2:	6820      	ldr	r0, [r4, #0]
 800c8e4:	4632      	mov	r2, r6
 800c8e6:	4641      	mov	r1, r8
 800c8e8:	f000 fe35 	bl	800d556 <memmove>
 800c8ec:	68a3      	ldr	r3, [r4, #8]
 800c8ee:	1b9b      	subs	r3, r3, r6
 800c8f0:	60a3      	str	r3, [r4, #8]
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	4433      	add	r3, r6
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fe:	462a      	mov	r2, r5
 800c900:	f000 fe54 	bl	800d5ac <_realloc_r>
 800c904:	4606      	mov	r6, r0
 800c906:	2800      	cmp	r0, #0
 800c908:	d1e0      	bne.n	800c8cc <__ssputs_r+0x5c>
 800c90a:	6921      	ldr	r1, [r4, #16]
 800c90c:	4650      	mov	r0, sl
 800c90e:	f7ff feb7 	bl	800c680 <_free_r>
 800c912:	230c      	movs	r3, #12
 800c914:	f8ca 3000 	str.w	r3, [sl]
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c91e:	81a3      	strh	r3, [r4, #12]
 800c920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c924:	e7e9      	b.n	800c8fa <__ssputs_r+0x8a>
	...

0800c928 <_svfiprintf_r>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	4698      	mov	r8, r3
 800c92e:	898b      	ldrh	r3, [r1, #12]
 800c930:	061b      	lsls	r3, r3, #24
 800c932:	b09d      	sub	sp, #116	@ 0x74
 800c934:	4607      	mov	r7, r0
 800c936:	460d      	mov	r5, r1
 800c938:	4614      	mov	r4, r2
 800c93a:	d510      	bpl.n	800c95e <_svfiprintf_r+0x36>
 800c93c:	690b      	ldr	r3, [r1, #16]
 800c93e:	b973      	cbnz	r3, 800c95e <_svfiprintf_r+0x36>
 800c940:	2140      	movs	r1, #64	@ 0x40
 800c942:	f7ff ff09 	bl	800c758 <_malloc_r>
 800c946:	6028      	str	r0, [r5, #0]
 800c948:	6128      	str	r0, [r5, #16]
 800c94a:	b930      	cbnz	r0, 800c95a <_svfiprintf_r+0x32>
 800c94c:	230c      	movs	r3, #12
 800c94e:	603b      	str	r3, [r7, #0]
 800c950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c954:	b01d      	add	sp, #116	@ 0x74
 800c956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95a:	2340      	movs	r3, #64	@ 0x40
 800c95c:	616b      	str	r3, [r5, #20]
 800c95e:	2300      	movs	r3, #0
 800c960:	9309      	str	r3, [sp, #36]	@ 0x24
 800c962:	2320      	movs	r3, #32
 800c964:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c968:	f8cd 800c 	str.w	r8, [sp, #12]
 800c96c:	2330      	movs	r3, #48	@ 0x30
 800c96e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb0c <_svfiprintf_r+0x1e4>
 800c972:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c976:	f04f 0901 	mov.w	r9, #1
 800c97a:	4623      	mov	r3, r4
 800c97c:	469a      	mov	sl, r3
 800c97e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c982:	b10a      	cbz	r2, 800c988 <_svfiprintf_r+0x60>
 800c984:	2a25      	cmp	r2, #37	@ 0x25
 800c986:	d1f9      	bne.n	800c97c <_svfiprintf_r+0x54>
 800c988:	ebba 0b04 	subs.w	fp, sl, r4
 800c98c:	d00b      	beq.n	800c9a6 <_svfiprintf_r+0x7e>
 800c98e:	465b      	mov	r3, fp
 800c990:	4622      	mov	r2, r4
 800c992:	4629      	mov	r1, r5
 800c994:	4638      	mov	r0, r7
 800c996:	f7ff ff6b 	bl	800c870 <__ssputs_r>
 800c99a:	3001      	adds	r0, #1
 800c99c:	f000 80a7 	beq.w	800caee <_svfiprintf_r+0x1c6>
 800c9a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9a2:	445a      	add	r2, fp
 800c9a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 809f 	beq.w	800caee <_svfiprintf_r+0x1c6>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c9b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ba:	f10a 0a01 	add.w	sl, sl, #1
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	9307      	str	r3, [sp, #28]
 800c9c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9c8:	4654      	mov	r4, sl
 800c9ca:	2205      	movs	r2, #5
 800c9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d0:	484e      	ldr	r0, [pc, #312]	@ (800cb0c <_svfiprintf_r+0x1e4>)
 800c9d2:	f7f3 fc0d 	bl	80001f0 <memchr>
 800c9d6:	9a04      	ldr	r2, [sp, #16]
 800c9d8:	b9d8      	cbnz	r0, 800ca12 <_svfiprintf_r+0xea>
 800c9da:	06d0      	lsls	r0, r2, #27
 800c9dc:	bf44      	itt	mi
 800c9de:	2320      	movmi	r3, #32
 800c9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9e4:	0711      	lsls	r1, r2, #28
 800c9e6:	bf44      	itt	mi
 800c9e8:	232b      	movmi	r3, #43	@ 0x2b
 800c9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9f4:	d015      	beq.n	800ca22 <_svfiprintf_r+0xfa>
 800c9f6:	9a07      	ldr	r2, [sp, #28]
 800c9f8:	4654      	mov	r4, sl
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f04f 0c0a 	mov.w	ip, #10
 800ca00:	4621      	mov	r1, r4
 800ca02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca06:	3b30      	subs	r3, #48	@ 0x30
 800ca08:	2b09      	cmp	r3, #9
 800ca0a:	d94b      	bls.n	800caa4 <_svfiprintf_r+0x17c>
 800ca0c:	b1b0      	cbz	r0, 800ca3c <_svfiprintf_r+0x114>
 800ca0e:	9207      	str	r2, [sp, #28]
 800ca10:	e014      	b.n	800ca3c <_svfiprintf_r+0x114>
 800ca12:	eba0 0308 	sub.w	r3, r0, r8
 800ca16:	fa09 f303 	lsl.w	r3, r9, r3
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	9304      	str	r3, [sp, #16]
 800ca1e:	46a2      	mov	sl, r4
 800ca20:	e7d2      	b.n	800c9c8 <_svfiprintf_r+0xa0>
 800ca22:	9b03      	ldr	r3, [sp, #12]
 800ca24:	1d19      	adds	r1, r3, #4
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	9103      	str	r1, [sp, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bfbb      	ittet	lt
 800ca2e:	425b      	neglt	r3, r3
 800ca30:	f042 0202 	orrlt.w	r2, r2, #2
 800ca34:	9307      	strge	r3, [sp, #28]
 800ca36:	9307      	strlt	r3, [sp, #28]
 800ca38:	bfb8      	it	lt
 800ca3a:	9204      	strlt	r2, [sp, #16]
 800ca3c:	7823      	ldrb	r3, [r4, #0]
 800ca3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca40:	d10a      	bne.n	800ca58 <_svfiprintf_r+0x130>
 800ca42:	7863      	ldrb	r3, [r4, #1]
 800ca44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca46:	d132      	bne.n	800caae <_svfiprintf_r+0x186>
 800ca48:	9b03      	ldr	r3, [sp, #12]
 800ca4a:	1d1a      	adds	r2, r3, #4
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	9203      	str	r2, [sp, #12]
 800ca50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca54:	3402      	adds	r4, #2
 800ca56:	9305      	str	r3, [sp, #20]
 800ca58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb1c <_svfiprintf_r+0x1f4>
 800ca5c:	7821      	ldrb	r1, [r4, #0]
 800ca5e:	2203      	movs	r2, #3
 800ca60:	4650      	mov	r0, sl
 800ca62:	f7f3 fbc5 	bl	80001f0 <memchr>
 800ca66:	b138      	cbz	r0, 800ca78 <_svfiprintf_r+0x150>
 800ca68:	9b04      	ldr	r3, [sp, #16]
 800ca6a:	eba0 000a 	sub.w	r0, r0, sl
 800ca6e:	2240      	movs	r2, #64	@ 0x40
 800ca70:	4082      	lsls	r2, r0
 800ca72:	4313      	orrs	r3, r2
 800ca74:	3401      	adds	r4, #1
 800ca76:	9304      	str	r3, [sp, #16]
 800ca78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7c:	4824      	ldr	r0, [pc, #144]	@ (800cb10 <_svfiprintf_r+0x1e8>)
 800ca7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca82:	2206      	movs	r2, #6
 800ca84:	f7f3 fbb4 	bl	80001f0 <memchr>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d036      	beq.n	800cafa <_svfiprintf_r+0x1d2>
 800ca8c:	4b21      	ldr	r3, [pc, #132]	@ (800cb14 <_svfiprintf_r+0x1ec>)
 800ca8e:	bb1b      	cbnz	r3, 800cad8 <_svfiprintf_r+0x1b0>
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	3307      	adds	r3, #7
 800ca94:	f023 0307 	bic.w	r3, r3, #7
 800ca98:	3308      	adds	r3, #8
 800ca9a:	9303      	str	r3, [sp, #12]
 800ca9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca9e:	4433      	add	r3, r6
 800caa0:	9309      	str	r3, [sp, #36]	@ 0x24
 800caa2:	e76a      	b.n	800c97a <_svfiprintf_r+0x52>
 800caa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800caa8:	460c      	mov	r4, r1
 800caaa:	2001      	movs	r0, #1
 800caac:	e7a8      	b.n	800ca00 <_svfiprintf_r+0xd8>
 800caae:	2300      	movs	r3, #0
 800cab0:	3401      	adds	r4, #1
 800cab2:	9305      	str	r3, [sp, #20]
 800cab4:	4619      	mov	r1, r3
 800cab6:	f04f 0c0a 	mov.w	ip, #10
 800caba:	4620      	mov	r0, r4
 800cabc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cac0:	3a30      	subs	r2, #48	@ 0x30
 800cac2:	2a09      	cmp	r2, #9
 800cac4:	d903      	bls.n	800cace <_svfiprintf_r+0x1a6>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d0c6      	beq.n	800ca58 <_svfiprintf_r+0x130>
 800caca:	9105      	str	r1, [sp, #20]
 800cacc:	e7c4      	b.n	800ca58 <_svfiprintf_r+0x130>
 800cace:	fb0c 2101 	mla	r1, ip, r1, r2
 800cad2:	4604      	mov	r4, r0
 800cad4:	2301      	movs	r3, #1
 800cad6:	e7f0      	b.n	800caba <_svfiprintf_r+0x192>
 800cad8:	ab03      	add	r3, sp, #12
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	462a      	mov	r2, r5
 800cade:	4b0e      	ldr	r3, [pc, #56]	@ (800cb18 <_svfiprintf_r+0x1f0>)
 800cae0:	a904      	add	r1, sp, #16
 800cae2:	4638      	mov	r0, r7
 800cae4:	f3af 8000 	nop.w
 800cae8:	1c42      	adds	r2, r0, #1
 800caea:	4606      	mov	r6, r0
 800caec:	d1d6      	bne.n	800ca9c <_svfiprintf_r+0x174>
 800caee:	89ab      	ldrh	r3, [r5, #12]
 800caf0:	065b      	lsls	r3, r3, #25
 800caf2:	f53f af2d 	bmi.w	800c950 <_svfiprintf_r+0x28>
 800caf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800caf8:	e72c      	b.n	800c954 <_svfiprintf_r+0x2c>
 800cafa:	ab03      	add	r3, sp, #12
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	462a      	mov	r2, r5
 800cb00:	4b05      	ldr	r3, [pc, #20]	@ (800cb18 <_svfiprintf_r+0x1f0>)
 800cb02:	a904      	add	r1, sp, #16
 800cb04:	4638      	mov	r0, r7
 800cb06:	f000 fa45 	bl	800cf94 <_printf_i>
 800cb0a:	e7ed      	b.n	800cae8 <_svfiprintf_r+0x1c0>
 800cb0c:	0800eac8 	.word	0x0800eac8
 800cb10:	0800ead2 	.word	0x0800ead2
 800cb14:	00000000 	.word	0x00000000
 800cb18:	0800c871 	.word	0x0800c871
 800cb1c:	0800eace 	.word	0x0800eace

0800cb20 <_sungetc_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	1c4b      	adds	r3, r1, #1
 800cb24:	4614      	mov	r4, r2
 800cb26:	d103      	bne.n	800cb30 <_sungetc_r+0x10>
 800cb28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	8993      	ldrh	r3, [r2, #12]
 800cb32:	f023 0320 	bic.w	r3, r3, #32
 800cb36:	8193      	strh	r3, [r2, #12]
 800cb38:	6853      	ldr	r3, [r2, #4]
 800cb3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cb3c:	b2cd      	uxtb	r5, r1
 800cb3e:	b18a      	cbz	r2, 800cb64 <_sungetc_r+0x44>
 800cb40:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cb42:	429a      	cmp	r2, r3
 800cb44:	dd08      	ble.n	800cb58 <_sungetc_r+0x38>
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	1e5a      	subs	r2, r3, #1
 800cb4a:	6022      	str	r2, [r4, #0]
 800cb4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	3301      	adds	r3, #1
 800cb54:	6063      	str	r3, [r4, #4]
 800cb56:	e7e9      	b.n	800cb2c <_sungetc_r+0xc>
 800cb58:	4621      	mov	r1, r4
 800cb5a:	f000 fcc2 	bl	800d4e2 <__submore>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0f1      	beq.n	800cb46 <_sungetc_r+0x26>
 800cb62:	e7e1      	b.n	800cb28 <_sungetc_r+0x8>
 800cb64:	6921      	ldr	r1, [r4, #16]
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	b141      	cbz	r1, 800cb7c <_sungetc_r+0x5c>
 800cb6a:	4291      	cmp	r1, r2
 800cb6c:	d206      	bcs.n	800cb7c <_sungetc_r+0x5c>
 800cb6e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800cb72:	42a9      	cmp	r1, r5
 800cb74:	d102      	bne.n	800cb7c <_sungetc_r+0x5c>
 800cb76:	3a01      	subs	r2, #1
 800cb78:	6022      	str	r2, [r4, #0]
 800cb7a:	e7ea      	b.n	800cb52 <_sungetc_r+0x32>
 800cb7c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800cb80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb84:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb86:	2303      	movs	r3, #3
 800cb88:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cb8a:	4623      	mov	r3, r4
 800cb8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	2301      	movs	r3, #1
 800cb94:	e7de      	b.n	800cb54 <_sungetc_r+0x34>

0800cb96 <__ssrefill_r>:
 800cb96:	b510      	push	{r4, lr}
 800cb98:	460c      	mov	r4, r1
 800cb9a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cb9c:	b169      	cbz	r1, 800cbba <__ssrefill_r+0x24>
 800cb9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cba2:	4299      	cmp	r1, r3
 800cba4:	d001      	beq.n	800cbaa <__ssrefill_r+0x14>
 800cba6:	f7ff fd6b 	bl	800c680 <_free_r>
 800cbaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbac:	6063      	str	r3, [r4, #4]
 800cbae:	2000      	movs	r0, #0
 800cbb0:	6360      	str	r0, [r4, #52]	@ 0x34
 800cbb2:	b113      	cbz	r3, 800cbba <__ssrefill_r+0x24>
 800cbb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	6063      	str	r3, [r4, #4]
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f043 0320 	orr.w	r3, r3, #32
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbce:	e7f3      	b.n	800cbb8 <__ssrefill_r+0x22>

0800cbd0 <__ssvfiscanf_r>:
 800cbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800cbda:	2100      	movs	r1, #0
 800cbdc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800cbe0:	49a5      	ldr	r1, [pc, #660]	@ (800ce78 <__ssvfiscanf_r+0x2a8>)
 800cbe2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800cbe4:	f10d 0804 	add.w	r8, sp, #4
 800cbe8:	49a4      	ldr	r1, [pc, #656]	@ (800ce7c <__ssvfiscanf_r+0x2ac>)
 800cbea:	4fa5      	ldr	r7, [pc, #660]	@ (800ce80 <__ssvfiscanf_r+0x2b0>)
 800cbec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	7813      	ldrb	r3, [r2, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 8158 	beq.w	800ceae <__ssvfiscanf_r+0x2de>
 800cbfe:	5cf9      	ldrb	r1, [r7, r3]
 800cc00:	f011 0108 	ands.w	r1, r1, #8
 800cc04:	f102 0501 	add.w	r5, r2, #1
 800cc08:	d019      	beq.n	800cc3e <__ssvfiscanf_r+0x6e>
 800cc0a:	6863      	ldr	r3, [r4, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	dd0f      	ble.n	800cc30 <__ssvfiscanf_r+0x60>
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	5cba      	ldrb	r2, [r7, r2]
 800cc16:	0712      	lsls	r2, r2, #28
 800cc18:	d401      	bmi.n	800cc1e <__ssvfiscanf_r+0x4e>
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	e7eb      	b.n	800cbf6 <__ssvfiscanf_r+0x26>
 800cc1e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cc20:	3201      	adds	r2, #1
 800cc22:	9245      	str	r2, [sp, #276]	@ 0x114
 800cc24:	6862      	ldr	r2, [r4, #4]
 800cc26:	3301      	adds	r3, #1
 800cc28:	3a01      	subs	r2, #1
 800cc2a:	6062      	str	r2, [r4, #4]
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	e7ec      	b.n	800cc0a <__ssvfiscanf_r+0x3a>
 800cc30:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cc32:	4621      	mov	r1, r4
 800cc34:	4630      	mov	r0, r6
 800cc36:	4798      	blx	r3
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d0e9      	beq.n	800cc10 <__ssvfiscanf_r+0x40>
 800cc3c:	e7ed      	b.n	800cc1a <__ssvfiscanf_r+0x4a>
 800cc3e:	2b25      	cmp	r3, #37	@ 0x25
 800cc40:	d012      	beq.n	800cc68 <__ssvfiscanf_r+0x98>
 800cc42:	4699      	mov	r9, r3
 800cc44:	6863      	ldr	r3, [r4, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f340 8093 	ble.w	800cd72 <__ssvfiscanf_r+0x1a2>
 800cc4c:	6822      	ldr	r2, [r4, #0]
 800cc4e:	7813      	ldrb	r3, [r2, #0]
 800cc50:	454b      	cmp	r3, r9
 800cc52:	f040 812c 	bne.w	800ceae <__ssvfiscanf_r+0x2de>
 800cc56:	6863      	ldr	r3, [r4, #4]
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	6063      	str	r3, [r4, #4]
 800cc5c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800cc5e:	3201      	adds	r2, #1
 800cc60:	3301      	adds	r3, #1
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	9345      	str	r3, [sp, #276]	@ 0x114
 800cc66:	e7d8      	b.n	800cc1a <__ssvfiscanf_r+0x4a>
 800cc68:	9141      	str	r1, [sp, #260]	@ 0x104
 800cc6a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800cc6c:	7853      	ldrb	r3, [r2, #1]
 800cc6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc70:	bf02      	ittt	eq
 800cc72:	2310      	moveq	r3, #16
 800cc74:	1c95      	addeq	r5, r2, #2
 800cc76:	9341      	streq	r3, [sp, #260]	@ 0x104
 800cc78:	220a      	movs	r2, #10
 800cc7a:	46a9      	mov	r9, r5
 800cc7c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800cc80:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800cc84:	2b09      	cmp	r3, #9
 800cc86:	d91e      	bls.n	800ccc6 <__ssvfiscanf_r+0xf6>
 800cc88:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ce84 <__ssvfiscanf_r+0x2b4>
 800cc8c:	2203      	movs	r2, #3
 800cc8e:	4650      	mov	r0, sl
 800cc90:	f7f3 faae 	bl	80001f0 <memchr>
 800cc94:	b138      	cbz	r0, 800cca6 <__ssvfiscanf_r+0xd6>
 800cc96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cc98:	eba0 000a 	sub.w	r0, r0, sl
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	4083      	lsls	r3, r0
 800cca0:	4313      	orrs	r3, r2
 800cca2:	9341      	str	r3, [sp, #260]	@ 0x104
 800cca4:	464d      	mov	r5, r9
 800cca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ccaa:	2b78      	cmp	r3, #120	@ 0x78
 800ccac:	d806      	bhi.n	800ccbc <__ssvfiscanf_r+0xec>
 800ccae:	2b57      	cmp	r3, #87	@ 0x57
 800ccb0:	d810      	bhi.n	800ccd4 <__ssvfiscanf_r+0x104>
 800ccb2:	2b25      	cmp	r3, #37	@ 0x25
 800ccb4:	d0c5      	beq.n	800cc42 <__ssvfiscanf_r+0x72>
 800ccb6:	d857      	bhi.n	800cd68 <__ssvfiscanf_r+0x198>
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d065      	beq.n	800cd88 <__ssvfiscanf_r+0x1b8>
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ccc0:	230a      	movs	r3, #10
 800ccc2:	9342      	str	r3, [sp, #264]	@ 0x108
 800ccc4:	e078      	b.n	800cdb8 <__ssvfiscanf_r+0x1e8>
 800ccc6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ccc8:	fb02 1103 	mla	r1, r2, r3, r1
 800cccc:	3930      	subs	r1, #48	@ 0x30
 800ccce:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ccd0:	464d      	mov	r5, r9
 800ccd2:	e7d2      	b.n	800cc7a <__ssvfiscanf_r+0xaa>
 800ccd4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ccd8:	2a20      	cmp	r2, #32
 800ccda:	d8ef      	bhi.n	800ccbc <__ssvfiscanf_r+0xec>
 800ccdc:	a101      	add	r1, pc, #4	@ (adr r1, 800cce4 <__ssvfiscanf_r+0x114>)
 800ccde:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cce2:	bf00      	nop
 800cce4:	0800cd97 	.word	0x0800cd97
 800cce8:	0800ccbd 	.word	0x0800ccbd
 800ccec:	0800ccbd 	.word	0x0800ccbd
 800ccf0:	0800cdf1 	.word	0x0800cdf1
 800ccf4:	0800ccbd 	.word	0x0800ccbd
 800ccf8:	0800ccbd 	.word	0x0800ccbd
 800ccfc:	0800ccbd 	.word	0x0800ccbd
 800cd00:	0800ccbd 	.word	0x0800ccbd
 800cd04:	0800ccbd 	.word	0x0800ccbd
 800cd08:	0800ccbd 	.word	0x0800ccbd
 800cd0c:	0800ccbd 	.word	0x0800ccbd
 800cd10:	0800ce07 	.word	0x0800ce07
 800cd14:	0800cded 	.word	0x0800cded
 800cd18:	0800cd6f 	.word	0x0800cd6f
 800cd1c:	0800cd6f 	.word	0x0800cd6f
 800cd20:	0800cd6f 	.word	0x0800cd6f
 800cd24:	0800ccbd 	.word	0x0800ccbd
 800cd28:	0800cda9 	.word	0x0800cda9
 800cd2c:	0800ccbd 	.word	0x0800ccbd
 800cd30:	0800ccbd 	.word	0x0800ccbd
 800cd34:	0800ccbd 	.word	0x0800ccbd
 800cd38:	0800ccbd 	.word	0x0800ccbd
 800cd3c:	0800ce17 	.word	0x0800ce17
 800cd40:	0800cdb1 	.word	0x0800cdb1
 800cd44:	0800cd8f 	.word	0x0800cd8f
 800cd48:	0800ccbd 	.word	0x0800ccbd
 800cd4c:	0800ccbd 	.word	0x0800ccbd
 800cd50:	0800ce13 	.word	0x0800ce13
 800cd54:	0800ccbd 	.word	0x0800ccbd
 800cd58:	0800cded 	.word	0x0800cded
 800cd5c:	0800ccbd 	.word	0x0800ccbd
 800cd60:	0800ccbd 	.word	0x0800ccbd
 800cd64:	0800cd97 	.word	0x0800cd97
 800cd68:	3b45      	subs	r3, #69	@ 0x45
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d8a6      	bhi.n	800ccbc <__ssvfiscanf_r+0xec>
 800cd6e:	2305      	movs	r3, #5
 800cd70:	e021      	b.n	800cdb6 <__ssvfiscanf_r+0x1e6>
 800cd72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cd74:	4621      	mov	r1, r4
 800cd76:	4630      	mov	r0, r6
 800cd78:	4798      	blx	r3
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	f43f af66 	beq.w	800cc4c <__ssvfiscanf_r+0x7c>
 800cd80:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cd82:	2800      	cmp	r0, #0
 800cd84:	f040 808b 	bne.w	800ce9e <__ssvfiscanf_r+0x2ce>
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd8c:	e08b      	b.n	800cea6 <__ssvfiscanf_r+0x2d6>
 800cd8e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cd90:	f042 0220 	orr.w	r2, r2, #32
 800cd94:	9241      	str	r2, [sp, #260]	@ 0x104
 800cd96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cd98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd9c:	9241      	str	r2, [sp, #260]	@ 0x104
 800cd9e:	2210      	movs	r2, #16
 800cda0:	2b6e      	cmp	r3, #110	@ 0x6e
 800cda2:	9242      	str	r2, [sp, #264]	@ 0x108
 800cda4:	d902      	bls.n	800cdac <__ssvfiscanf_r+0x1dc>
 800cda6:	e005      	b.n	800cdb4 <__ssvfiscanf_r+0x1e4>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	9342      	str	r3, [sp, #264]	@ 0x108
 800cdac:	2303      	movs	r3, #3
 800cdae:	e002      	b.n	800cdb6 <__ssvfiscanf_r+0x1e6>
 800cdb0:	2308      	movs	r3, #8
 800cdb2:	9342      	str	r3, [sp, #264]	@ 0x108
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	dd39      	ble.n	800ce32 <__ssvfiscanf_r+0x262>
 800cdbe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cdc0:	0659      	lsls	r1, r3, #25
 800cdc2:	d404      	bmi.n	800cdce <__ssvfiscanf_r+0x1fe>
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	781a      	ldrb	r2, [r3, #0]
 800cdc8:	5cba      	ldrb	r2, [r7, r2]
 800cdca:	0712      	lsls	r2, r2, #28
 800cdcc:	d438      	bmi.n	800ce40 <__ssvfiscanf_r+0x270>
 800cdce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	dc47      	bgt.n	800ce64 <__ssvfiscanf_r+0x294>
 800cdd4:	466b      	mov	r3, sp
 800cdd6:	4622      	mov	r2, r4
 800cdd8:	a941      	add	r1, sp, #260	@ 0x104
 800cdda:	4630      	mov	r0, r6
 800cddc:	f000 f9fa 	bl	800d1d4 <_scanf_chars>
 800cde0:	2801      	cmp	r0, #1
 800cde2:	d064      	beq.n	800ceae <__ssvfiscanf_r+0x2de>
 800cde4:	2802      	cmp	r0, #2
 800cde6:	f47f af18 	bne.w	800cc1a <__ssvfiscanf_r+0x4a>
 800cdea:	e7c9      	b.n	800cd80 <__ssvfiscanf_r+0x1b0>
 800cdec:	220a      	movs	r2, #10
 800cdee:	e7d7      	b.n	800cda0 <__ssvfiscanf_r+0x1d0>
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	f000 fb3c 	bl	800d470 <__sccl>
 800cdf8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cdfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdfe:	9341      	str	r3, [sp, #260]	@ 0x104
 800ce00:	4605      	mov	r5, r0
 800ce02:	2301      	movs	r3, #1
 800ce04:	e7d7      	b.n	800cdb6 <__ssvfiscanf_r+0x1e6>
 800ce06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ce08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0c:	9341      	str	r3, [sp, #260]	@ 0x104
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e7d1      	b.n	800cdb6 <__ssvfiscanf_r+0x1e6>
 800ce12:	2302      	movs	r3, #2
 800ce14:	e7cf      	b.n	800cdb6 <__ssvfiscanf_r+0x1e6>
 800ce16:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ce18:	06c3      	lsls	r3, r0, #27
 800ce1a:	f53f aefe 	bmi.w	800cc1a <__ssvfiscanf_r+0x4a>
 800ce1e:	9b00      	ldr	r3, [sp, #0]
 800ce20:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ce22:	1d19      	adds	r1, r3, #4
 800ce24:	9100      	str	r1, [sp, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	07c0      	lsls	r0, r0, #31
 800ce2a:	bf4c      	ite	mi
 800ce2c:	801a      	strhmi	r2, [r3, #0]
 800ce2e:	601a      	strpl	r2, [r3, #0]
 800ce30:	e6f3      	b.n	800cc1a <__ssvfiscanf_r+0x4a>
 800ce32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ce34:	4621      	mov	r1, r4
 800ce36:	4630      	mov	r0, r6
 800ce38:	4798      	blx	r3
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	d0bf      	beq.n	800cdbe <__ssvfiscanf_r+0x1ee>
 800ce3e:	e79f      	b.n	800cd80 <__ssvfiscanf_r+0x1b0>
 800ce40:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ce42:	3201      	adds	r2, #1
 800ce44:	9245      	str	r2, [sp, #276]	@ 0x114
 800ce46:	6862      	ldr	r2, [r4, #4]
 800ce48:	3a01      	subs	r2, #1
 800ce4a:	2a00      	cmp	r2, #0
 800ce4c:	6062      	str	r2, [r4, #4]
 800ce4e:	dd02      	ble.n	800ce56 <__ssvfiscanf_r+0x286>
 800ce50:	3301      	adds	r3, #1
 800ce52:	6023      	str	r3, [r4, #0]
 800ce54:	e7b6      	b.n	800cdc4 <__ssvfiscanf_r+0x1f4>
 800ce56:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ce58:	4621      	mov	r1, r4
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	4798      	blx	r3
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d0b0      	beq.n	800cdc4 <__ssvfiscanf_r+0x1f4>
 800ce62:	e78d      	b.n	800cd80 <__ssvfiscanf_r+0x1b0>
 800ce64:	2b04      	cmp	r3, #4
 800ce66:	dc0f      	bgt.n	800ce88 <__ssvfiscanf_r+0x2b8>
 800ce68:	466b      	mov	r3, sp
 800ce6a:	4622      	mov	r2, r4
 800ce6c:	a941      	add	r1, sp, #260	@ 0x104
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f000 fa0a 	bl	800d288 <_scanf_i>
 800ce74:	e7b4      	b.n	800cde0 <__ssvfiscanf_r+0x210>
 800ce76:	bf00      	nop
 800ce78:	0800cb21 	.word	0x0800cb21
 800ce7c:	0800cb97 	.word	0x0800cb97
 800ce80:	0800eb17 	.word	0x0800eb17
 800ce84:	0800eace 	.word	0x0800eace
 800ce88:	4b0a      	ldr	r3, [pc, #40]	@ (800ceb4 <__ssvfiscanf_r+0x2e4>)
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f43f aec5 	beq.w	800cc1a <__ssvfiscanf_r+0x4a>
 800ce90:	466b      	mov	r3, sp
 800ce92:	4622      	mov	r2, r4
 800ce94:	a941      	add	r1, sp, #260	@ 0x104
 800ce96:	4630      	mov	r0, r6
 800ce98:	f3af 8000 	nop.w
 800ce9c:	e7a0      	b.n	800cde0 <__ssvfiscanf_r+0x210>
 800ce9e:	89a3      	ldrh	r3, [r4, #12]
 800cea0:	065b      	lsls	r3, r3, #25
 800cea2:	f53f af71 	bmi.w	800cd88 <__ssvfiscanf_r+0x1b8>
 800cea6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ceb0:	e7f9      	b.n	800cea6 <__ssvfiscanf_r+0x2d6>
 800ceb2:	bf00      	nop
 800ceb4:	00000000 	.word	0x00000000

0800ceb8 <_printf_common>:
 800ceb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cebc:	4616      	mov	r6, r2
 800cebe:	4698      	mov	r8, r3
 800cec0:	688a      	ldr	r2, [r1, #8]
 800cec2:	690b      	ldr	r3, [r1, #16]
 800cec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	bfb8      	it	lt
 800cecc:	4613      	movlt	r3, r2
 800cece:	6033      	str	r3, [r6, #0]
 800ced0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ced4:	4607      	mov	r7, r0
 800ced6:	460c      	mov	r4, r1
 800ced8:	b10a      	cbz	r2, 800cede <_printf_common+0x26>
 800ceda:	3301      	adds	r3, #1
 800cedc:	6033      	str	r3, [r6, #0]
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	0699      	lsls	r1, r3, #26
 800cee2:	bf42      	ittt	mi
 800cee4:	6833      	ldrmi	r3, [r6, #0]
 800cee6:	3302      	addmi	r3, #2
 800cee8:	6033      	strmi	r3, [r6, #0]
 800ceea:	6825      	ldr	r5, [r4, #0]
 800ceec:	f015 0506 	ands.w	r5, r5, #6
 800cef0:	d106      	bne.n	800cf00 <_printf_common+0x48>
 800cef2:	f104 0a19 	add.w	sl, r4, #25
 800cef6:	68e3      	ldr	r3, [r4, #12]
 800cef8:	6832      	ldr	r2, [r6, #0]
 800cefa:	1a9b      	subs	r3, r3, r2
 800cefc:	42ab      	cmp	r3, r5
 800cefe:	dc26      	bgt.n	800cf4e <_printf_common+0x96>
 800cf00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf04:	6822      	ldr	r2, [r4, #0]
 800cf06:	3b00      	subs	r3, #0
 800cf08:	bf18      	it	ne
 800cf0a:	2301      	movne	r3, #1
 800cf0c:	0692      	lsls	r2, r2, #26
 800cf0e:	d42b      	bmi.n	800cf68 <_printf_common+0xb0>
 800cf10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf14:	4641      	mov	r1, r8
 800cf16:	4638      	mov	r0, r7
 800cf18:	47c8      	blx	r9
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d01e      	beq.n	800cf5c <_printf_common+0xa4>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	6922      	ldr	r2, [r4, #16]
 800cf22:	f003 0306 	and.w	r3, r3, #6
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	bf02      	ittt	eq
 800cf2a:	68e5      	ldreq	r5, [r4, #12]
 800cf2c:	6833      	ldreq	r3, [r6, #0]
 800cf2e:	1aed      	subeq	r5, r5, r3
 800cf30:	68a3      	ldr	r3, [r4, #8]
 800cf32:	bf0c      	ite	eq
 800cf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf38:	2500      	movne	r5, #0
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	bfc4      	itt	gt
 800cf3e:	1a9b      	subgt	r3, r3, r2
 800cf40:	18ed      	addgt	r5, r5, r3
 800cf42:	2600      	movs	r6, #0
 800cf44:	341a      	adds	r4, #26
 800cf46:	42b5      	cmp	r5, r6
 800cf48:	d11a      	bne.n	800cf80 <_printf_common+0xc8>
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	e008      	b.n	800cf60 <_printf_common+0xa8>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	4652      	mov	r2, sl
 800cf52:	4641      	mov	r1, r8
 800cf54:	4638      	mov	r0, r7
 800cf56:	47c8      	blx	r9
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d103      	bne.n	800cf64 <_printf_common+0xac>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf64:	3501      	adds	r5, #1
 800cf66:	e7c6      	b.n	800cef6 <_printf_common+0x3e>
 800cf68:	18e1      	adds	r1, r4, r3
 800cf6a:	1c5a      	adds	r2, r3, #1
 800cf6c:	2030      	movs	r0, #48	@ 0x30
 800cf6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf72:	4422      	add	r2, r4
 800cf74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf7c:	3302      	adds	r3, #2
 800cf7e:	e7c7      	b.n	800cf10 <_printf_common+0x58>
 800cf80:	2301      	movs	r3, #1
 800cf82:	4622      	mov	r2, r4
 800cf84:	4641      	mov	r1, r8
 800cf86:	4638      	mov	r0, r7
 800cf88:	47c8      	blx	r9
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d0e6      	beq.n	800cf5c <_printf_common+0xa4>
 800cf8e:	3601      	adds	r6, #1
 800cf90:	e7d9      	b.n	800cf46 <_printf_common+0x8e>
	...

0800cf94 <_printf_i>:
 800cf94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf98:	7e0f      	ldrb	r7, [r1, #24]
 800cf9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf9c:	2f78      	cmp	r7, #120	@ 0x78
 800cf9e:	4691      	mov	r9, r2
 800cfa0:	4680      	mov	r8, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	469a      	mov	sl, r3
 800cfa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfaa:	d807      	bhi.n	800cfbc <_printf_i+0x28>
 800cfac:	2f62      	cmp	r7, #98	@ 0x62
 800cfae:	d80a      	bhi.n	800cfc6 <_printf_i+0x32>
 800cfb0:	2f00      	cmp	r7, #0
 800cfb2:	f000 80d2 	beq.w	800d15a <_printf_i+0x1c6>
 800cfb6:	2f58      	cmp	r7, #88	@ 0x58
 800cfb8:	f000 80b9 	beq.w	800d12e <_printf_i+0x19a>
 800cfbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfc4:	e03a      	b.n	800d03c <_printf_i+0xa8>
 800cfc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cfca:	2b15      	cmp	r3, #21
 800cfcc:	d8f6      	bhi.n	800cfbc <_printf_i+0x28>
 800cfce:	a101      	add	r1, pc, #4	@ (adr r1, 800cfd4 <_printf_i+0x40>)
 800cfd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfd4:	0800d02d 	.word	0x0800d02d
 800cfd8:	0800d041 	.word	0x0800d041
 800cfdc:	0800cfbd 	.word	0x0800cfbd
 800cfe0:	0800cfbd 	.word	0x0800cfbd
 800cfe4:	0800cfbd 	.word	0x0800cfbd
 800cfe8:	0800cfbd 	.word	0x0800cfbd
 800cfec:	0800d041 	.word	0x0800d041
 800cff0:	0800cfbd 	.word	0x0800cfbd
 800cff4:	0800cfbd 	.word	0x0800cfbd
 800cff8:	0800cfbd 	.word	0x0800cfbd
 800cffc:	0800cfbd 	.word	0x0800cfbd
 800d000:	0800d141 	.word	0x0800d141
 800d004:	0800d06b 	.word	0x0800d06b
 800d008:	0800d0fb 	.word	0x0800d0fb
 800d00c:	0800cfbd 	.word	0x0800cfbd
 800d010:	0800cfbd 	.word	0x0800cfbd
 800d014:	0800d163 	.word	0x0800d163
 800d018:	0800cfbd 	.word	0x0800cfbd
 800d01c:	0800d06b 	.word	0x0800d06b
 800d020:	0800cfbd 	.word	0x0800cfbd
 800d024:	0800cfbd 	.word	0x0800cfbd
 800d028:	0800d103 	.word	0x0800d103
 800d02c:	6833      	ldr	r3, [r6, #0]
 800d02e:	1d1a      	adds	r2, r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6032      	str	r2, [r6, #0]
 800d034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d03c:	2301      	movs	r3, #1
 800d03e:	e09d      	b.n	800d17c <_printf_i+0x1e8>
 800d040:	6833      	ldr	r3, [r6, #0]
 800d042:	6820      	ldr	r0, [r4, #0]
 800d044:	1d19      	adds	r1, r3, #4
 800d046:	6031      	str	r1, [r6, #0]
 800d048:	0606      	lsls	r6, r0, #24
 800d04a:	d501      	bpl.n	800d050 <_printf_i+0xbc>
 800d04c:	681d      	ldr	r5, [r3, #0]
 800d04e:	e003      	b.n	800d058 <_printf_i+0xc4>
 800d050:	0645      	lsls	r5, r0, #25
 800d052:	d5fb      	bpl.n	800d04c <_printf_i+0xb8>
 800d054:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d058:	2d00      	cmp	r5, #0
 800d05a:	da03      	bge.n	800d064 <_printf_i+0xd0>
 800d05c:	232d      	movs	r3, #45	@ 0x2d
 800d05e:	426d      	negs	r5, r5
 800d060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d064:	4859      	ldr	r0, [pc, #356]	@ (800d1cc <_printf_i+0x238>)
 800d066:	230a      	movs	r3, #10
 800d068:	e011      	b.n	800d08e <_printf_i+0xfa>
 800d06a:	6821      	ldr	r1, [r4, #0]
 800d06c:	6833      	ldr	r3, [r6, #0]
 800d06e:	0608      	lsls	r0, r1, #24
 800d070:	f853 5b04 	ldr.w	r5, [r3], #4
 800d074:	d402      	bmi.n	800d07c <_printf_i+0xe8>
 800d076:	0649      	lsls	r1, r1, #25
 800d078:	bf48      	it	mi
 800d07a:	b2ad      	uxthmi	r5, r5
 800d07c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d07e:	4853      	ldr	r0, [pc, #332]	@ (800d1cc <_printf_i+0x238>)
 800d080:	6033      	str	r3, [r6, #0]
 800d082:	bf14      	ite	ne
 800d084:	230a      	movne	r3, #10
 800d086:	2308      	moveq	r3, #8
 800d088:	2100      	movs	r1, #0
 800d08a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d08e:	6866      	ldr	r6, [r4, #4]
 800d090:	60a6      	str	r6, [r4, #8]
 800d092:	2e00      	cmp	r6, #0
 800d094:	bfa2      	ittt	ge
 800d096:	6821      	ldrge	r1, [r4, #0]
 800d098:	f021 0104 	bicge.w	r1, r1, #4
 800d09c:	6021      	strge	r1, [r4, #0]
 800d09e:	b90d      	cbnz	r5, 800d0a4 <_printf_i+0x110>
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	d04b      	beq.n	800d13c <_printf_i+0x1a8>
 800d0a4:	4616      	mov	r6, r2
 800d0a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0aa:	fb03 5711 	mls	r7, r3, r1, r5
 800d0ae:	5dc7      	ldrb	r7, [r0, r7]
 800d0b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0b4:	462f      	mov	r7, r5
 800d0b6:	42bb      	cmp	r3, r7
 800d0b8:	460d      	mov	r5, r1
 800d0ba:	d9f4      	bls.n	800d0a6 <_printf_i+0x112>
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d10b      	bne.n	800d0d8 <_printf_i+0x144>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	07df      	lsls	r7, r3, #31
 800d0c4:	d508      	bpl.n	800d0d8 <_printf_i+0x144>
 800d0c6:	6923      	ldr	r3, [r4, #16]
 800d0c8:	6861      	ldr	r1, [r4, #4]
 800d0ca:	4299      	cmp	r1, r3
 800d0cc:	bfde      	ittt	le
 800d0ce:	2330      	movle	r3, #48	@ 0x30
 800d0d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d0d8:	1b92      	subs	r2, r2, r6
 800d0da:	6122      	str	r2, [r4, #16]
 800d0dc:	f8cd a000 	str.w	sl, [sp]
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	aa03      	add	r2, sp, #12
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f7ff fee6 	bl	800ceb8 <_printf_common>
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d14a      	bne.n	800d186 <_printf_i+0x1f2>
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0f4:	b004      	add	sp, #16
 800d0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	f043 0320 	orr.w	r3, r3, #32
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	4833      	ldr	r0, [pc, #204]	@ (800d1d0 <_printf_i+0x23c>)
 800d104:	2778      	movs	r7, #120	@ 0x78
 800d106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	6831      	ldr	r1, [r6, #0]
 800d10e:	061f      	lsls	r7, r3, #24
 800d110:	f851 5b04 	ldr.w	r5, [r1], #4
 800d114:	d402      	bmi.n	800d11c <_printf_i+0x188>
 800d116:	065f      	lsls	r7, r3, #25
 800d118:	bf48      	it	mi
 800d11a:	b2ad      	uxthmi	r5, r5
 800d11c:	6031      	str	r1, [r6, #0]
 800d11e:	07d9      	lsls	r1, r3, #31
 800d120:	bf44      	itt	mi
 800d122:	f043 0320 	orrmi.w	r3, r3, #32
 800d126:	6023      	strmi	r3, [r4, #0]
 800d128:	b11d      	cbz	r5, 800d132 <_printf_i+0x19e>
 800d12a:	2310      	movs	r3, #16
 800d12c:	e7ac      	b.n	800d088 <_printf_i+0xf4>
 800d12e:	4827      	ldr	r0, [pc, #156]	@ (800d1cc <_printf_i+0x238>)
 800d130:	e7e9      	b.n	800d106 <_printf_i+0x172>
 800d132:	6823      	ldr	r3, [r4, #0]
 800d134:	f023 0320 	bic.w	r3, r3, #32
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	e7f6      	b.n	800d12a <_printf_i+0x196>
 800d13c:	4616      	mov	r6, r2
 800d13e:	e7bd      	b.n	800d0bc <_printf_i+0x128>
 800d140:	6833      	ldr	r3, [r6, #0]
 800d142:	6825      	ldr	r5, [r4, #0]
 800d144:	6961      	ldr	r1, [r4, #20]
 800d146:	1d18      	adds	r0, r3, #4
 800d148:	6030      	str	r0, [r6, #0]
 800d14a:	062e      	lsls	r6, r5, #24
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	d501      	bpl.n	800d154 <_printf_i+0x1c0>
 800d150:	6019      	str	r1, [r3, #0]
 800d152:	e002      	b.n	800d15a <_printf_i+0x1c6>
 800d154:	0668      	lsls	r0, r5, #25
 800d156:	d5fb      	bpl.n	800d150 <_printf_i+0x1bc>
 800d158:	8019      	strh	r1, [r3, #0]
 800d15a:	2300      	movs	r3, #0
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	4616      	mov	r6, r2
 800d160:	e7bc      	b.n	800d0dc <_printf_i+0x148>
 800d162:	6833      	ldr	r3, [r6, #0]
 800d164:	1d1a      	adds	r2, r3, #4
 800d166:	6032      	str	r2, [r6, #0]
 800d168:	681e      	ldr	r6, [r3, #0]
 800d16a:	6862      	ldr	r2, [r4, #4]
 800d16c:	2100      	movs	r1, #0
 800d16e:	4630      	mov	r0, r6
 800d170:	f7f3 f83e 	bl	80001f0 <memchr>
 800d174:	b108      	cbz	r0, 800d17a <_printf_i+0x1e6>
 800d176:	1b80      	subs	r0, r0, r6
 800d178:	6060      	str	r0, [r4, #4]
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	2300      	movs	r3, #0
 800d180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d184:	e7aa      	b.n	800d0dc <_printf_i+0x148>
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	4632      	mov	r2, r6
 800d18a:	4649      	mov	r1, r9
 800d18c:	4640      	mov	r0, r8
 800d18e:	47d0      	blx	sl
 800d190:	3001      	adds	r0, #1
 800d192:	d0ad      	beq.n	800d0f0 <_printf_i+0x15c>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	079b      	lsls	r3, r3, #30
 800d198:	d413      	bmi.n	800d1c2 <_printf_i+0x22e>
 800d19a:	68e0      	ldr	r0, [r4, #12]
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	4298      	cmp	r0, r3
 800d1a0:	bfb8      	it	lt
 800d1a2:	4618      	movlt	r0, r3
 800d1a4:	e7a6      	b.n	800d0f4 <_printf_i+0x160>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	47d0      	blx	sl
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d09d      	beq.n	800d0f0 <_printf_i+0x15c>
 800d1b4:	3501      	adds	r5, #1
 800d1b6:	68e3      	ldr	r3, [r4, #12]
 800d1b8:	9903      	ldr	r1, [sp, #12]
 800d1ba:	1a5b      	subs	r3, r3, r1
 800d1bc:	42ab      	cmp	r3, r5
 800d1be:	dcf2      	bgt.n	800d1a6 <_printf_i+0x212>
 800d1c0:	e7eb      	b.n	800d19a <_printf_i+0x206>
 800d1c2:	2500      	movs	r5, #0
 800d1c4:	f104 0619 	add.w	r6, r4, #25
 800d1c8:	e7f5      	b.n	800d1b6 <_printf_i+0x222>
 800d1ca:	bf00      	nop
 800d1cc:	0800ead9 	.word	0x0800ead9
 800d1d0:	0800eaea 	.word	0x0800eaea

0800d1d4 <_scanf_chars>:
 800d1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d8:	4615      	mov	r5, r2
 800d1da:	688a      	ldr	r2, [r1, #8]
 800d1dc:	4680      	mov	r8, r0
 800d1de:	460c      	mov	r4, r1
 800d1e0:	b932      	cbnz	r2, 800d1f0 <_scanf_chars+0x1c>
 800d1e2:	698a      	ldr	r2, [r1, #24]
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	bf14      	ite	ne
 800d1e8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800d1ec:	2201      	moveq	r2, #1
 800d1ee:	608a      	str	r2, [r1, #8]
 800d1f0:	6822      	ldr	r2, [r4, #0]
 800d1f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d284 <_scanf_chars+0xb0>
 800d1f6:	06d1      	lsls	r1, r2, #27
 800d1f8:	bf5f      	itttt	pl
 800d1fa:	681a      	ldrpl	r2, [r3, #0]
 800d1fc:	1d11      	addpl	r1, r2, #4
 800d1fe:	6019      	strpl	r1, [r3, #0]
 800d200:	6816      	ldrpl	r6, [r2, #0]
 800d202:	2700      	movs	r7, #0
 800d204:	69a0      	ldr	r0, [r4, #24]
 800d206:	b188      	cbz	r0, 800d22c <_scanf_chars+0x58>
 800d208:	2801      	cmp	r0, #1
 800d20a:	d107      	bne.n	800d21c <_scanf_chars+0x48>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	781a      	ldrb	r2, [r3, #0]
 800d210:	6963      	ldr	r3, [r4, #20]
 800d212:	5c9b      	ldrb	r3, [r3, r2]
 800d214:	b953      	cbnz	r3, 800d22c <_scanf_chars+0x58>
 800d216:	2f00      	cmp	r7, #0
 800d218:	d031      	beq.n	800d27e <_scanf_chars+0xaa>
 800d21a:	e022      	b.n	800d262 <_scanf_chars+0x8e>
 800d21c:	2802      	cmp	r0, #2
 800d21e:	d120      	bne.n	800d262 <_scanf_chars+0x8e>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d228:	071b      	lsls	r3, r3, #28
 800d22a:	d41a      	bmi.n	800d262 <_scanf_chars+0x8e>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	06da      	lsls	r2, r3, #27
 800d230:	bf5e      	ittt	pl
 800d232:	682b      	ldrpl	r3, [r5, #0]
 800d234:	781b      	ldrbpl	r3, [r3, #0]
 800d236:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d23a:	682a      	ldr	r2, [r5, #0]
 800d23c:	686b      	ldr	r3, [r5, #4]
 800d23e:	3201      	adds	r2, #1
 800d240:	602a      	str	r2, [r5, #0]
 800d242:	68a2      	ldr	r2, [r4, #8]
 800d244:	3b01      	subs	r3, #1
 800d246:	3a01      	subs	r2, #1
 800d248:	606b      	str	r3, [r5, #4]
 800d24a:	3701      	adds	r7, #1
 800d24c:	60a2      	str	r2, [r4, #8]
 800d24e:	b142      	cbz	r2, 800d262 <_scanf_chars+0x8e>
 800d250:	2b00      	cmp	r3, #0
 800d252:	dcd7      	bgt.n	800d204 <_scanf_chars+0x30>
 800d254:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d258:	4629      	mov	r1, r5
 800d25a:	4640      	mov	r0, r8
 800d25c:	4798      	blx	r3
 800d25e:	2800      	cmp	r0, #0
 800d260:	d0d0      	beq.n	800d204 <_scanf_chars+0x30>
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	f013 0310 	ands.w	r3, r3, #16
 800d268:	d105      	bne.n	800d276 <_scanf_chars+0xa2>
 800d26a:	68e2      	ldr	r2, [r4, #12]
 800d26c:	3201      	adds	r2, #1
 800d26e:	60e2      	str	r2, [r4, #12]
 800d270:	69a2      	ldr	r2, [r4, #24]
 800d272:	b102      	cbz	r2, 800d276 <_scanf_chars+0xa2>
 800d274:	7033      	strb	r3, [r6, #0]
 800d276:	6923      	ldr	r3, [r4, #16]
 800d278:	443b      	add	r3, r7
 800d27a:	6123      	str	r3, [r4, #16]
 800d27c:	2000      	movs	r0, #0
 800d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d282:	bf00      	nop
 800d284:	0800eb17 	.word	0x0800eb17

0800d288 <_scanf_i>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	4698      	mov	r8, r3
 800d28e:	4b74      	ldr	r3, [pc, #464]	@ (800d460 <_scanf_i+0x1d8>)
 800d290:	460c      	mov	r4, r1
 800d292:	4682      	mov	sl, r0
 800d294:	4616      	mov	r6, r2
 800d296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d29a:	b087      	sub	sp, #28
 800d29c:	ab03      	add	r3, sp, #12
 800d29e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d2a2:	4b70      	ldr	r3, [pc, #448]	@ (800d464 <_scanf_i+0x1dc>)
 800d2a4:	69a1      	ldr	r1, [r4, #24]
 800d2a6:	4a70      	ldr	r2, [pc, #448]	@ (800d468 <_scanf_i+0x1e0>)
 800d2a8:	2903      	cmp	r1, #3
 800d2aa:	bf08      	it	eq
 800d2ac:	461a      	moveq	r2, r3
 800d2ae:	68a3      	ldr	r3, [r4, #8]
 800d2b0:	9201      	str	r2, [sp, #4]
 800d2b2:	1e5a      	subs	r2, r3, #1
 800d2b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d2b8:	bf88      	it	hi
 800d2ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d2be:	4627      	mov	r7, r4
 800d2c0:	bf82      	ittt	hi
 800d2c2:	eb03 0905 	addhi.w	r9, r3, r5
 800d2c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d2ca:	60a3      	strhi	r3, [r4, #8]
 800d2cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d2d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d2d4:	bf98      	it	ls
 800d2d6:	f04f 0900 	movls.w	r9, #0
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	463d      	mov	r5, r7
 800d2de:	f04f 0b00 	mov.w	fp, #0
 800d2e2:	6831      	ldr	r1, [r6, #0]
 800d2e4:	ab03      	add	r3, sp, #12
 800d2e6:	7809      	ldrb	r1, [r1, #0]
 800d2e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d2ec:	2202      	movs	r2, #2
 800d2ee:	f7f2 ff7f 	bl	80001f0 <memchr>
 800d2f2:	b328      	cbz	r0, 800d340 <_scanf_i+0xb8>
 800d2f4:	f1bb 0f01 	cmp.w	fp, #1
 800d2f8:	d159      	bne.n	800d3ae <_scanf_i+0x126>
 800d2fa:	6862      	ldr	r2, [r4, #4]
 800d2fc:	b92a      	cbnz	r2, 800d30a <_scanf_i+0x82>
 800d2fe:	6822      	ldr	r2, [r4, #0]
 800d300:	2108      	movs	r1, #8
 800d302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d306:	6061      	str	r1, [r4, #4]
 800d308:	6022      	str	r2, [r4, #0]
 800d30a:	6822      	ldr	r2, [r4, #0]
 800d30c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d310:	6022      	str	r2, [r4, #0]
 800d312:	68a2      	ldr	r2, [r4, #8]
 800d314:	1e51      	subs	r1, r2, #1
 800d316:	60a1      	str	r1, [r4, #8]
 800d318:	b192      	cbz	r2, 800d340 <_scanf_i+0xb8>
 800d31a:	6832      	ldr	r2, [r6, #0]
 800d31c:	1c51      	adds	r1, r2, #1
 800d31e:	6031      	str	r1, [r6, #0]
 800d320:	7812      	ldrb	r2, [r2, #0]
 800d322:	f805 2b01 	strb.w	r2, [r5], #1
 800d326:	6872      	ldr	r2, [r6, #4]
 800d328:	3a01      	subs	r2, #1
 800d32a:	2a00      	cmp	r2, #0
 800d32c:	6072      	str	r2, [r6, #4]
 800d32e:	dc07      	bgt.n	800d340 <_scanf_i+0xb8>
 800d330:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d334:	4631      	mov	r1, r6
 800d336:	4650      	mov	r0, sl
 800d338:	4790      	blx	r2
 800d33a:	2800      	cmp	r0, #0
 800d33c:	f040 8085 	bne.w	800d44a <_scanf_i+0x1c2>
 800d340:	f10b 0b01 	add.w	fp, fp, #1
 800d344:	f1bb 0f03 	cmp.w	fp, #3
 800d348:	d1cb      	bne.n	800d2e2 <_scanf_i+0x5a>
 800d34a:	6863      	ldr	r3, [r4, #4]
 800d34c:	b90b      	cbnz	r3, 800d352 <_scanf_i+0xca>
 800d34e:	230a      	movs	r3, #10
 800d350:	6063      	str	r3, [r4, #4]
 800d352:	6863      	ldr	r3, [r4, #4]
 800d354:	4945      	ldr	r1, [pc, #276]	@ (800d46c <_scanf_i+0x1e4>)
 800d356:	6960      	ldr	r0, [r4, #20]
 800d358:	1ac9      	subs	r1, r1, r3
 800d35a:	f000 f889 	bl	800d470 <__sccl>
 800d35e:	f04f 0b00 	mov.w	fp, #0
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	6822      	ldr	r2, [r4, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d03d      	beq.n	800d3e6 <_scanf_i+0x15e>
 800d36a:	6831      	ldr	r1, [r6, #0]
 800d36c:	6960      	ldr	r0, [r4, #20]
 800d36e:	f891 c000 	ldrb.w	ip, [r1]
 800d372:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d376:	2800      	cmp	r0, #0
 800d378:	d035      	beq.n	800d3e6 <_scanf_i+0x15e>
 800d37a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d37e:	d124      	bne.n	800d3ca <_scanf_i+0x142>
 800d380:	0510      	lsls	r0, r2, #20
 800d382:	d522      	bpl.n	800d3ca <_scanf_i+0x142>
 800d384:	f10b 0b01 	add.w	fp, fp, #1
 800d388:	f1b9 0f00 	cmp.w	r9, #0
 800d38c:	d003      	beq.n	800d396 <_scanf_i+0x10e>
 800d38e:	3301      	adds	r3, #1
 800d390:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d394:	60a3      	str	r3, [r4, #8]
 800d396:	6873      	ldr	r3, [r6, #4]
 800d398:	3b01      	subs	r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	6073      	str	r3, [r6, #4]
 800d39e:	dd1b      	ble.n	800d3d8 <_scanf_i+0x150>
 800d3a0:	6833      	ldr	r3, [r6, #0]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	6033      	str	r3, [r6, #0]
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	60a3      	str	r3, [r4, #8]
 800d3ac:	e7d9      	b.n	800d362 <_scanf_i+0xda>
 800d3ae:	f1bb 0f02 	cmp.w	fp, #2
 800d3b2:	d1ae      	bne.n	800d312 <_scanf_i+0x8a>
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d3ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d3be:	d1bf      	bne.n	800d340 <_scanf_i+0xb8>
 800d3c0:	2110      	movs	r1, #16
 800d3c2:	6061      	str	r1, [r4, #4]
 800d3c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3c8:	e7a2      	b.n	800d310 <_scanf_i+0x88>
 800d3ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d3ce:	6022      	str	r2, [r4, #0]
 800d3d0:	780b      	ldrb	r3, [r1, #0]
 800d3d2:	f805 3b01 	strb.w	r3, [r5], #1
 800d3d6:	e7de      	b.n	800d396 <_scanf_i+0x10e>
 800d3d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4650      	mov	r0, sl
 800d3e0:	4798      	blx	r3
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d0df      	beq.n	800d3a6 <_scanf_i+0x11e>
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	05d9      	lsls	r1, r3, #23
 800d3ea:	d50d      	bpl.n	800d408 <_scanf_i+0x180>
 800d3ec:	42bd      	cmp	r5, r7
 800d3ee:	d909      	bls.n	800d404 <_scanf_i+0x17c>
 800d3f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d3f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	4798      	blx	r3
 800d3fe:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800d402:	464d      	mov	r5, r9
 800d404:	42bd      	cmp	r5, r7
 800d406:	d028      	beq.n	800d45a <_scanf_i+0x1d2>
 800d408:	6822      	ldr	r2, [r4, #0]
 800d40a:	f012 0210 	ands.w	r2, r2, #16
 800d40e:	d113      	bne.n	800d438 <_scanf_i+0x1b0>
 800d410:	702a      	strb	r2, [r5, #0]
 800d412:	6863      	ldr	r3, [r4, #4]
 800d414:	9e01      	ldr	r6, [sp, #4]
 800d416:	4639      	mov	r1, r7
 800d418:	4650      	mov	r0, sl
 800d41a:	47b0      	blx	r6
 800d41c:	f8d8 3000 	ldr.w	r3, [r8]
 800d420:	6821      	ldr	r1, [r4, #0]
 800d422:	1d1a      	adds	r2, r3, #4
 800d424:	f8c8 2000 	str.w	r2, [r8]
 800d428:	f011 0f20 	tst.w	r1, #32
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	d00f      	beq.n	800d450 <_scanf_i+0x1c8>
 800d430:	6018      	str	r0, [r3, #0]
 800d432:	68e3      	ldr	r3, [r4, #12]
 800d434:	3301      	adds	r3, #1
 800d436:	60e3      	str	r3, [r4, #12]
 800d438:	6923      	ldr	r3, [r4, #16]
 800d43a:	1bed      	subs	r5, r5, r7
 800d43c:	445d      	add	r5, fp
 800d43e:	442b      	add	r3, r5
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	2000      	movs	r0, #0
 800d444:	b007      	add	sp, #28
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	f04f 0b00 	mov.w	fp, #0
 800d44e:	e7ca      	b.n	800d3e6 <_scanf_i+0x15e>
 800d450:	07ca      	lsls	r2, r1, #31
 800d452:	bf4c      	ite	mi
 800d454:	8018      	strhmi	r0, [r3, #0]
 800d456:	6018      	strpl	r0, [r3, #0]
 800d458:	e7eb      	b.n	800d432 <_scanf_i+0x1aa>
 800d45a:	2001      	movs	r0, #1
 800d45c:	e7f2      	b.n	800d444 <_scanf_i+0x1bc>
 800d45e:	bf00      	nop
 800d460:	0800d90c 	.word	0x0800d90c
 800d464:	0800d6fd 	.word	0x0800d6fd
 800d468:	0800d7dd 	.word	0x0800d7dd
 800d46c:	0800eb0b 	.word	0x0800eb0b

0800d470 <__sccl>:
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	780b      	ldrb	r3, [r1, #0]
 800d474:	4604      	mov	r4, r0
 800d476:	2b5e      	cmp	r3, #94	@ 0x5e
 800d478:	bf0b      	itete	eq
 800d47a:	784b      	ldrbeq	r3, [r1, #1]
 800d47c:	1c4a      	addne	r2, r1, #1
 800d47e:	1c8a      	addeq	r2, r1, #2
 800d480:	2100      	movne	r1, #0
 800d482:	bf08      	it	eq
 800d484:	2101      	moveq	r1, #1
 800d486:	3801      	subs	r0, #1
 800d488:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d48c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d490:	42a8      	cmp	r0, r5
 800d492:	d1fb      	bne.n	800d48c <__sccl+0x1c>
 800d494:	b90b      	cbnz	r3, 800d49a <__sccl+0x2a>
 800d496:	1e50      	subs	r0, r2, #1
 800d498:	bd70      	pop	{r4, r5, r6, pc}
 800d49a:	f081 0101 	eor.w	r1, r1, #1
 800d49e:	54e1      	strb	r1, [r4, r3]
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d4a8:	2d2d      	cmp	r5, #45	@ 0x2d
 800d4aa:	d005      	beq.n	800d4b8 <__sccl+0x48>
 800d4ac:	2d5d      	cmp	r5, #93	@ 0x5d
 800d4ae:	d016      	beq.n	800d4de <__sccl+0x6e>
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	d0f1      	beq.n	800d498 <__sccl+0x28>
 800d4b4:	462b      	mov	r3, r5
 800d4b6:	e7f2      	b.n	800d49e <__sccl+0x2e>
 800d4b8:	7846      	ldrb	r6, [r0, #1]
 800d4ba:	2e5d      	cmp	r6, #93	@ 0x5d
 800d4bc:	d0fa      	beq.n	800d4b4 <__sccl+0x44>
 800d4be:	42b3      	cmp	r3, r6
 800d4c0:	dcf8      	bgt.n	800d4b4 <__sccl+0x44>
 800d4c2:	3002      	adds	r0, #2
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	3201      	adds	r2, #1
 800d4c8:	4296      	cmp	r6, r2
 800d4ca:	54a1      	strb	r1, [r4, r2]
 800d4cc:	dcfb      	bgt.n	800d4c6 <__sccl+0x56>
 800d4ce:	1af2      	subs	r2, r6, r3
 800d4d0:	3a01      	subs	r2, #1
 800d4d2:	1c5d      	adds	r5, r3, #1
 800d4d4:	42b3      	cmp	r3, r6
 800d4d6:	bfa8      	it	ge
 800d4d8:	2200      	movge	r2, #0
 800d4da:	18ab      	adds	r3, r5, r2
 800d4dc:	e7e1      	b.n	800d4a2 <__sccl+0x32>
 800d4de:	4610      	mov	r0, r2
 800d4e0:	e7da      	b.n	800d498 <__sccl+0x28>

0800d4e2 <__submore>:
 800d4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d4ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4ee:	4299      	cmp	r1, r3
 800d4f0:	d11d      	bne.n	800d52e <__submore+0x4c>
 800d4f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d4f6:	f7ff f92f 	bl	800c758 <_malloc_r>
 800d4fa:	b918      	cbnz	r0, 800d504 <__submore+0x22>
 800d4fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d508:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d50a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d50e:	6360      	str	r0, [r4, #52]	@ 0x34
 800d510:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d514:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d518:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d51c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d520:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d524:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d528:	6020      	str	r0, [r4, #0]
 800d52a:	2000      	movs	r0, #0
 800d52c:	e7e8      	b.n	800d500 <__submore+0x1e>
 800d52e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d530:	0077      	lsls	r7, r6, #1
 800d532:	463a      	mov	r2, r7
 800d534:	f000 f83a 	bl	800d5ac <_realloc_r>
 800d538:	4605      	mov	r5, r0
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d0de      	beq.n	800d4fc <__submore+0x1a>
 800d53e:	eb00 0806 	add.w	r8, r0, r6
 800d542:	4601      	mov	r1, r0
 800d544:	4632      	mov	r2, r6
 800d546:	4640      	mov	r0, r8
 800d548:	f7ff f88c 	bl	800c664 <memcpy>
 800d54c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d550:	f8c4 8000 	str.w	r8, [r4]
 800d554:	e7e9      	b.n	800d52a <__submore+0x48>

0800d556 <memmove>:
 800d556:	4288      	cmp	r0, r1
 800d558:	b510      	push	{r4, lr}
 800d55a:	eb01 0402 	add.w	r4, r1, r2
 800d55e:	d902      	bls.n	800d566 <memmove+0x10>
 800d560:	4284      	cmp	r4, r0
 800d562:	4623      	mov	r3, r4
 800d564:	d807      	bhi.n	800d576 <memmove+0x20>
 800d566:	1e43      	subs	r3, r0, #1
 800d568:	42a1      	cmp	r1, r4
 800d56a:	d008      	beq.n	800d57e <memmove+0x28>
 800d56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d570:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d574:	e7f8      	b.n	800d568 <memmove+0x12>
 800d576:	4402      	add	r2, r0
 800d578:	4601      	mov	r1, r0
 800d57a:	428a      	cmp	r2, r1
 800d57c:	d100      	bne.n	800d580 <memmove+0x2a>
 800d57e:	bd10      	pop	{r4, pc}
 800d580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d584:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d588:	e7f7      	b.n	800d57a <memmove+0x24>
	...

0800d58c <_sbrk_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4d06      	ldr	r5, [pc, #24]	@ (800d5a8 <_sbrk_r+0x1c>)
 800d590:	2300      	movs	r3, #0
 800d592:	4604      	mov	r4, r0
 800d594:	4608      	mov	r0, r1
 800d596:	602b      	str	r3, [r5, #0]
 800d598:	f7f5 fcba 	bl	8002f10 <_sbrk>
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	d102      	bne.n	800d5a6 <_sbrk_r+0x1a>
 800d5a0:	682b      	ldr	r3, [r5, #0]
 800d5a2:	b103      	cbz	r3, 800d5a6 <_sbrk_r+0x1a>
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	20003924 	.word	0x20003924

0800d5ac <_realloc_r>:
 800d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	4615      	mov	r5, r2
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	b921      	cbnz	r1, 800d5c2 <_realloc_r+0x16>
 800d5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5bc:	4611      	mov	r1, r2
 800d5be:	f7ff b8cb 	b.w	800c758 <_malloc_r>
 800d5c2:	b92a      	cbnz	r2, 800d5d0 <_realloc_r+0x24>
 800d5c4:	f7ff f85c 	bl	800c680 <_free_r>
 800d5c8:	2400      	movs	r4, #0
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	f000 f906 	bl	800d7e0 <_malloc_usable_size_r>
 800d5d4:	4285      	cmp	r5, r0
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	d802      	bhi.n	800d5e0 <_realloc_r+0x34>
 800d5da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5de:	d8f4      	bhi.n	800d5ca <_realloc_r+0x1e>
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	f7ff f8b8 	bl	800c758 <_malloc_r>
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0ec      	beq.n	800d5c8 <_realloc_r+0x1c>
 800d5ee:	42b5      	cmp	r5, r6
 800d5f0:	462a      	mov	r2, r5
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	bf28      	it	cs
 800d5f6:	4632      	movcs	r2, r6
 800d5f8:	f7ff f834 	bl	800c664 <memcpy>
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4640      	mov	r0, r8
 800d600:	f7ff f83e 	bl	800c680 <_free_r>
 800d604:	463c      	mov	r4, r7
 800d606:	e7e0      	b.n	800d5ca <_realloc_r+0x1e>

0800d608 <_strtol_l.constprop.0>:
 800d608:	2b24      	cmp	r3, #36	@ 0x24
 800d60a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d60e:	4686      	mov	lr, r0
 800d610:	4690      	mov	r8, r2
 800d612:	d801      	bhi.n	800d618 <_strtol_l.constprop.0+0x10>
 800d614:	2b01      	cmp	r3, #1
 800d616:	d106      	bne.n	800d626 <_strtol_l.constprop.0+0x1e>
 800d618:	f7fe fff0 	bl	800c5fc <__errno>
 800d61c:	2316      	movs	r3, #22
 800d61e:	6003      	str	r3, [r0, #0]
 800d620:	2000      	movs	r0, #0
 800d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d626:	4834      	ldr	r0, [pc, #208]	@ (800d6f8 <_strtol_l.constprop.0+0xf0>)
 800d628:	460d      	mov	r5, r1
 800d62a:	462a      	mov	r2, r5
 800d62c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d630:	5d06      	ldrb	r6, [r0, r4]
 800d632:	f016 0608 	ands.w	r6, r6, #8
 800d636:	d1f8      	bne.n	800d62a <_strtol_l.constprop.0+0x22>
 800d638:	2c2d      	cmp	r4, #45	@ 0x2d
 800d63a:	d12d      	bne.n	800d698 <_strtol_l.constprop.0+0x90>
 800d63c:	782c      	ldrb	r4, [r5, #0]
 800d63e:	2601      	movs	r6, #1
 800d640:	1c95      	adds	r5, r2, #2
 800d642:	f033 0210 	bics.w	r2, r3, #16
 800d646:	d109      	bne.n	800d65c <_strtol_l.constprop.0+0x54>
 800d648:	2c30      	cmp	r4, #48	@ 0x30
 800d64a:	d12a      	bne.n	800d6a2 <_strtol_l.constprop.0+0x9a>
 800d64c:	782a      	ldrb	r2, [r5, #0]
 800d64e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d652:	2a58      	cmp	r2, #88	@ 0x58
 800d654:	d125      	bne.n	800d6a2 <_strtol_l.constprop.0+0x9a>
 800d656:	786c      	ldrb	r4, [r5, #1]
 800d658:	2310      	movs	r3, #16
 800d65a:	3502      	adds	r5, #2
 800d65c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d660:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d664:	2200      	movs	r2, #0
 800d666:	fbbc f9f3 	udiv	r9, ip, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	fb03 ca19 	mls	sl, r3, r9, ip
 800d670:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d674:	2f09      	cmp	r7, #9
 800d676:	d81b      	bhi.n	800d6b0 <_strtol_l.constprop.0+0xa8>
 800d678:	463c      	mov	r4, r7
 800d67a:	42a3      	cmp	r3, r4
 800d67c:	dd27      	ble.n	800d6ce <_strtol_l.constprop.0+0xc6>
 800d67e:	1c57      	adds	r7, r2, #1
 800d680:	d007      	beq.n	800d692 <_strtol_l.constprop.0+0x8a>
 800d682:	4581      	cmp	r9, r0
 800d684:	d320      	bcc.n	800d6c8 <_strtol_l.constprop.0+0xc0>
 800d686:	d101      	bne.n	800d68c <_strtol_l.constprop.0+0x84>
 800d688:	45a2      	cmp	sl, r4
 800d68a:	db1d      	blt.n	800d6c8 <_strtol_l.constprop.0+0xc0>
 800d68c:	fb00 4003 	mla	r0, r0, r3, r4
 800d690:	2201      	movs	r2, #1
 800d692:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d696:	e7eb      	b.n	800d670 <_strtol_l.constprop.0+0x68>
 800d698:	2c2b      	cmp	r4, #43	@ 0x2b
 800d69a:	bf04      	itt	eq
 800d69c:	782c      	ldrbeq	r4, [r5, #0]
 800d69e:	1c95      	addeq	r5, r2, #2
 800d6a0:	e7cf      	b.n	800d642 <_strtol_l.constprop.0+0x3a>
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1da      	bne.n	800d65c <_strtol_l.constprop.0+0x54>
 800d6a6:	2c30      	cmp	r4, #48	@ 0x30
 800d6a8:	bf0c      	ite	eq
 800d6aa:	2308      	moveq	r3, #8
 800d6ac:	230a      	movne	r3, #10
 800d6ae:	e7d5      	b.n	800d65c <_strtol_l.constprop.0+0x54>
 800d6b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6b4:	2f19      	cmp	r7, #25
 800d6b6:	d801      	bhi.n	800d6bc <_strtol_l.constprop.0+0xb4>
 800d6b8:	3c37      	subs	r4, #55	@ 0x37
 800d6ba:	e7de      	b.n	800d67a <_strtol_l.constprop.0+0x72>
 800d6bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6c0:	2f19      	cmp	r7, #25
 800d6c2:	d804      	bhi.n	800d6ce <_strtol_l.constprop.0+0xc6>
 800d6c4:	3c57      	subs	r4, #87	@ 0x57
 800d6c6:	e7d8      	b.n	800d67a <_strtol_l.constprop.0+0x72>
 800d6c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6cc:	e7e1      	b.n	800d692 <_strtol_l.constprop.0+0x8a>
 800d6ce:	1c53      	adds	r3, r2, #1
 800d6d0:	d108      	bne.n	800d6e4 <_strtol_l.constprop.0+0xdc>
 800d6d2:	2322      	movs	r3, #34	@ 0x22
 800d6d4:	f8ce 3000 	str.w	r3, [lr]
 800d6d8:	4660      	mov	r0, ip
 800d6da:	f1b8 0f00 	cmp.w	r8, #0
 800d6de:	d0a0      	beq.n	800d622 <_strtol_l.constprop.0+0x1a>
 800d6e0:	1e69      	subs	r1, r5, #1
 800d6e2:	e006      	b.n	800d6f2 <_strtol_l.constprop.0+0xea>
 800d6e4:	b106      	cbz	r6, 800d6e8 <_strtol_l.constprop.0+0xe0>
 800d6e6:	4240      	negs	r0, r0
 800d6e8:	f1b8 0f00 	cmp.w	r8, #0
 800d6ec:	d099      	beq.n	800d622 <_strtol_l.constprop.0+0x1a>
 800d6ee:	2a00      	cmp	r2, #0
 800d6f0:	d1f6      	bne.n	800d6e0 <_strtol_l.constprop.0+0xd8>
 800d6f2:	f8c8 1000 	str.w	r1, [r8]
 800d6f6:	e794      	b.n	800d622 <_strtol_l.constprop.0+0x1a>
 800d6f8:	0800eb17 	.word	0x0800eb17

0800d6fc <_strtol_r>:
 800d6fc:	f7ff bf84 	b.w	800d608 <_strtol_l.constprop.0>

0800d700 <_strtoul_l.constprop.0>:
 800d700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d704:	4e34      	ldr	r6, [pc, #208]	@ (800d7d8 <_strtoul_l.constprop.0+0xd8>)
 800d706:	4686      	mov	lr, r0
 800d708:	460d      	mov	r5, r1
 800d70a:	4628      	mov	r0, r5
 800d70c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d710:	5d37      	ldrb	r7, [r6, r4]
 800d712:	f017 0708 	ands.w	r7, r7, #8
 800d716:	d1f8      	bne.n	800d70a <_strtoul_l.constprop.0+0xa>
 800d718:	2c2d      	cmp	r4, #45	@ 0x2d
 800d71a:	d12f      	bne.n	800d77c <_strtoul_l.constprop.0+0x7c>
 800d71c:	782c      	ldrb	r4, [r5, #0]
 800d71e:	2701      	movs	r7, #1
 800d720:	1c85      	adds	r5, r0, #2
 800d722:	f033 0010 	bics.w	r0, r3, #16
 800d726:	d109      	bne.n	800d73c <_strtoul_l.constprop.0+0x3c>
 800d728:	2c30      	cmp	r4, #48	@ 0x30
 800d72a:	d12c      	bne.n	800d786 <_strtoul_l.constprop.0+0x86>
 800d72c:	7828      	ldrb	r0, [r5, #0]
 800d72e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d732:	2858      	cmp	r0, #88	@ 0x58
 800d734:	d127      	bne.n	800d786 <_strtoul_l.constprop.0+0x86>
 800d736:	786c      	ldrb	r4, [r5, #1]
 800d738:	2310      	movs	r3, #16
 800d73a:	3502      	adds	r5, #2
 800d73c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800d740:	2600      	movs	r6, #0
 800d742:	fbb8 f8f3 	udiv	r8, r8, r3
 800d746:	fb03 f908 	mul.w	r9, r3, r8
 800d74a:	ea6f 0909 	mvn.w	r9, r9
 800d74e:	4630      	mov	r0, r6
 800d750:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d754:	f1bc 0f09 	cmp.w	ip, #9
 800d758:	d81c      	bhi.n	800d794 <_strtoul_l.constprop.0+0x94>
 800d75a:	4664      	mov	r4, ip
 800d75c:	42a3      	cmp	r3, r4
 800d75e:	dd2a      	ble.n	800d7b6 <_strtoul_l.constprop.0+0xb6>
 800d760:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800d764:	d007      	beq.n	800d776 <_strtoul_l.constprop.0+0x76>
 800d766:	4580      	cmp	r8, r0
 800d768:	d322      	bcc.n	800d7b0 <_strtoul_l.constprop.0+0xb0>
 800d76a:	d101      	bne.n	800d770 <_strtoul_l.constprop.0+0x70>
 800d76c:	45a1      	cmp	r9, r4
 800d76e:	db1f      	blt.n	800d7b0 <_strtoul_l.constprop.0+0xb0>
 800d770:	fb00 4003 	mla	r0, r0, r3, r4
 800d774:	2601      	movs	r6, #1
 800d776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d77a:	e7e9      	b.n	800d750 <_strtoul_l.constprop.0+0x50>
 800d77c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d77e:	bf04      	itt	eq
 800d780:	782c      	ldrbeq	r4, [r5, #0]
 800d782:	1c85      	addeq	r5, r0, #2
 800d784:	e7cd      	b.n	800d722 <_strtoul_l.constprop.0+0x22>
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1d8      	bne.n	800d73c <_strtoul_l.constprop.0+0x3c>
 800d78a:	2c30      	cmp	r4, #48	@ 0x30
 800d78c:	bf0c      	ite	eq
 800d78e:	2308      	moveq	r3, #8
 800d790:	230a      	movne	r3, #10
 800d792:	e7d3      	b.n	800d73c <_strtoul_l.constprop.0+0x3c>
 800d794:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d798:	f1bc 0f19 	cmp.w	ip, #25
 800d79c:	d801      	bhi.n	800d7a2 <_strtoul_l.constprop.0+0xa2>
 800d79e:	3c37      	subs	r4, #55	@ 0x37
 800d7a0:	e7dc      	b.n	800d75c <_strtoul_l.constprop.0+0x5c>
 800d7a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d7a6:	f1bc 0f19 	cmp.w	ip, #25
 800d7aa:	d804      	bhi.n	800d7b6 <_strtoul_l.constprop.0+0xb6>
 800d7ac:	3c57      	subs	r4, #87	@ 0x57
 800d7ae:	e7d5      	b.n	800d75c <_strtoul_l.constprop.0+0x5c>
 800d7b0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800d7b4:	e7df      	b.n	800d776 <_strtoul_l.constprop.0+0x76>
 800d7b6:	1c73      	adds	r3, r6, #1
 800d7b8:	d106      	bne.n	800d7c8 <_strtoul_l.constprop.0+0xc8>
 800d7ba:	2322      	movs	r3, #34	@ 0x22
 800d7bc:	f8ce 3000 	str.w	r3, [lr]
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	b932      	cbnz	r2, 800d7d2 <_strtoul_l.constprop.0+0xd2>
 800d7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	b107      	cbz	r7, 800d7cc <_strtoul_l.constprop.0+0xcc>
 800d7ca:	4240      	negs	r0, r0
 800d7cc:	2a00      	cmp	r2, #0
 800d7ce:	d0f9      	beq.n	800d7c4 <_strtoul_l.constprop.0+0xc4>
 800d7d0:	b106      	cbz	r6, 800d7d4 <_strtoul_l.constprop.0+0xd4>
 800d7d2:	1e69      	subs	r1, r5, #1
 800d7d4:	6011      	str	r1, [r2, #0]
 800d7d6:	e7f5      	b.n	800d7c4 <_strtoul_l.constprop.0+0xc4>
 800d7d8:	0800eb17 	.word	0x0800eb17

0800d7dc <_strtoul_r>:
 800d7dc:	f7ff bf90 	b.w	800d700 <_strtoul_l.constprop.0>

0800d7e0 <_malloc_usable_size_r>:
 800d7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7e4:	1f18      	subs	r0, r3, #4
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	bfbc      	itt	lt
 800d7ea:	580b      	ldrlt	r3, [r1, r0]
 800d7ec:	18c0      	addlt	r0, r0, r3
 800d7ee:	4770      	bx	lr

0800d7f0 <_init>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	bf00      	nop
 800d7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7f6:	bc08      	pop	{r3}
 800d7f8:	469e      	mov	lr, r3
 800d7fa:	4770      	bx	lr

0800d7fc <_fini>:
 800d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fe:	bf00      	nop
 800d800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d802:	bc08      	pop	{r3}
 800d804:	469e      	mov	lr, r3
 800d806:	4770      	bx	lr
