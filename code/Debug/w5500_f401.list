
w5500_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c628  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d8  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daa0  0800daa0  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daa8  0800daa8  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daa8  0800daa8  0001daa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800dab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000369c  20000270  0800dd20  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000390c  0800dd20  0002390c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b221  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aed  00000000  00000000  0003b504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  0003fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000139a  00000000  00000000  000419a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4ac  00000000  00000000  00042d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eaa5  00000000  00000000  0005e1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3b8c  00000000  00000000  0007cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071a8  00000000  00000000  00120818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001279c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c7b0 	.word	0x0800c7b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	0800c7b0 	.word	0x0800c7b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	f003 0307 	and.w	r3, r3, #7
}
 800059a:	4618      	mov	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db0b      	blt.n	80005d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 021f 	and.w	r2, r3, #31
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <__NVIC_EnableIRQ+0x38>)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	095b      	lsrs	r3, r3, #5
 80005c8:	2001      	movs	r0, #1
 80005ca:	fa00 f202 	lsl.w	r2, r0, r2
 80005ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e100 	.word	0xe000e100

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	f1c3 0307 	rsb	r3, r3, #7
 8000652:	2b04      	cmp	r3, #4
 8000654:	bf28      	it	cs
 8000656:	2304      	movcs	r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3304      	adds	r3, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d902      	bls.n	8000668 <NVIC_EncodePriority+0x30>
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3b03      	subs	r3, #3
 8000666:	e000      	b.n	800066a <NVIC_EncodePriority+0x32>
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 32ff 	mov.w	r2, #4294967295
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43da      	mvns	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43d9      	mvns	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4313      	orrs	r3, r2
         );
}
 8000692:	4618      	mov	r0, r3
 8000694:	3724      	adds	r7, #36	; 0x24
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f043 0201 	orr.w	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f043 0201 	orr.w	r2, r3, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60da      	str	r2, [r3, #12]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60da      	str	r2, [r3, #12]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	615a      	str	r2, [r3, #20]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800074a:	b480      	push	{r7}
 800074c:	b089      	sub	sp, #36	; 0x24
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	330c      	adds	r3, #12
 8000756:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	e853 3f00 	ldrex	r3, [r3]
 800075e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	330c      	adds	r3, #12
 800076c:	69fa      	ldr	r2, [r7, #28]
 800076e:	61ba      	str	r2, [r7, #24]
 8000770:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000772:	6979      	ldr	r1, [r7, #20]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	e841 2300 	strex	r3, r2, [r1]
 800077a:	613b      	str	r3, [r7, #16]
   return(result);
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1e7      	bne.n	8000752 <LL_USART_EnableIT_RXNE+0x8>
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	619a      	str	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	041a      	lsls	r2, r3, #16
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	619a      	str	r2, [r3, #24]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	4907      	ldr	r1, [pc, #28]	; (80007f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4013      	ands	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <LL_APB2_GRP1_EnableClock+0x2c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4013      	ands	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800

0800082c <send_ip_to_uart>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void send_ip_to_uart(){
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af02      	add	r7, sp, #8
	char ip1=ip2=ip3=ip4=0;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <send_ip_to_uart+0x88>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <send_ip_to_uart+0x88>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <send_ip_to_uart+0x8c>)
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <send_ip_to_uart+0x8c>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <send_ip_to_uart+0x90>)
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <send_ip_to_uart+0x90>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	75fb      	strb	r3, [r7, #23]
	char out[17];
	ip1 = ReadFromEEPROM(EEPROM_ADRESS_START);
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <send_ip_to_uart+0x94>)
 8000850:	f000 fe68 	bl	8001524 <ReadFromEEPROM>
 8000854:	4603      	mov	r3, r0
 8000856:	75fb      	strb	r3, [r7, #23]
	ip2 = ReadFromEEPROM(EEPROM_ADRESS_START+4);
 8000858:	481a      	ldr	r0, [pc, #104]	; (80008c4 <send_ip_to_uart+0x98>)
 800085a:	f000 fe63 	bl	8001524 <ReadFromEEPROM>
 800085e:	4603      	mov	r3, r0
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <send_ip_to_uart+0x90>)
 8000864:	701a      	strb	r2, [r3, #0]
	ip3 = ReadFromEEPROM(EEPROM_ADRESS_START+8);
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <send_ip_to_uart+0x9c>)
 8000868:	f000 fe5c 	bl	8001524 <ReadFromEEPROM>
 800086c:	4603      	mov	r3, r0
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <send_ip_to_uart+0x8c>)
 8000872:	701a      	strb	r2, [r3, #0]
	ip4 = ReadFromEEPROM(EEPROM_ADRESS_START+12);
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <send_ip_to_uart+0xa0>)
 8000876:	f000 fe55 	bl	8001524 <ReadFromEEPROM>
 800087a:	4603      	mov	r3, r0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <send_ip_to_uart+0x88>)
 8000880:	701a      	strb	r2, [r3, #0]
	sprintf(out, "%d.%d.%d.%d\n\r",ip1,ip2,ip3,ip4);
 8000882:	7dfa      	ldrb	r2, [r7, #23]
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <send_ip_to_uart+0x90>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461c      	mov	r4, r3
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <send_ip_to_uart+0x8c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <send_ip_to_uart+0x88>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	1d38      	adds	r0, r7, #4
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	9100      	str	r1, [sp, #0]
 800089a:	4623      	mov	r3, r4
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <send_ip_to_uart+0xa4>)
 800089e:	f00b fa6f 	bl	800bd80 <siprintf>
	USART1_Send_String(out);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fe21 	bl	80014ec <USART1_Send_String>
}
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200002d9 	.word	0x200002d9
 80008b8:	200002d8 	.word	0x200002d8
 80008bc:	200002d7 	.word	0x200002d7
 80008c0:	08030000 	.word	0x08030000
 80008c4:	08030004 	.word	0x08030004
 80008c8:	08030008 	.word	0x08030008
 80008cc:	0803000c 	.word	0x0803000c
 80008d0:	0800c7c8 	.word	0x0800c7c8

080008d4 <Set_outputs>:


void Set_outputs (char* str_rx1)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '1')) out1[0] = 1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b41      	cmp	r3, #65	; 0x41
 80008e2:	d111      	bne.n	8000908 <Set_outputs+0x34>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b4d      	cmp	r3, #77	; 0x4d
 80008ec:	d10c      	bne.n	8000908 <Set_outputs+0x34>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3302      	adds	r3, #2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b31      	cmp	r3, #49	; 0x31
 80008f6:	d107      	bne.n	8000908 <Set_outputs+0x34>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3303      	adds	r3, #3
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b31      	cmp	r3, #49	; 0x31
 8000900:	d102      	bne.n	8000908 <Set_outputs+0x34>
 8000902:	4b86      	ldr	r3, [pc, #536]	; (8000b1c <Set_outputs+0x248>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '0')) out1[0] = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b41      	cmp	r3, #65	; 0x41
 800090e:	d111      	bne.n	8000934 <Set_outputs+0x60>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b4d      	cmp	r3, #77	; 0x4d
 8000918:	d10c      	bne.n	8000934 <Set_outputs+0x60>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3302      	adds	r3, #2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b31      	cmp	r3, #49	; 0x31
 8000922:	d107      	bne.n	8000934 <Set_outputs+0x60>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3303      	adds	r3, #3
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b30      	cmp	r3, #48	; 0x30
 800092c:	d102      	bne.n	8000934 <Set_outputs+0x60>
 800092e:	4b7b      	ldr	r3, [pc, #492]	; (8000b1c <Set_outputs+0x248>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '1')) out1[1] = 1;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b41      	cmp	r3, #65	; 0x41
 800093a:	d111      	bne.n	8000960 <Set_outputs+0x8c>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b4d      	cmp	r3, #77	; 0x4d
 8000944:	d10c      	bne.n	8000960 <Set_outputs+0x8c>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3302      	adds	r3, #2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b31      	cmp	r3, #49	; 0x31
 800094e:	d107      	bne.n	8000960 <Set_outputs+0x8c>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3304      	adds	r3, #4
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b31      	cmp	r3, #49	; 0x31
 8000958:	d102      	bne.n	8000960 <Set_outputs+0x8c>
 800095a:	4b70      	ldr	r3, [pc, #448]	; (8000b1c <Set_outputs+0x248>)
 800095c:	2201      	movs	r2, #1
 800095e:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '0')) out1[1] = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b41      	cmp	r3, #65	; 0x41
 8000966:	d111      	bne.n	800098c <Set_outputs+0xb8>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3301      	adds	r3, #1
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b4d      	cmp	r3, #77	; 0x4d
 8000970:	d10c      	bne.n	800098c <Set_outputs+0xb8>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3302      	adds	r3, #2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b31      	cmp	r3, #49	; 0x31
 800097a:	d107      	bne.n	800098c <Set_outputs+0xb8>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3304      	adds	r3, #4
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b30      	cmp	r3, #48	; 0x30
 8000984:	d102      	bne.n	800098c <Set_outputs+0xb8>
 8000986:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <Set_outputs+0x248>)
 8000988:	2200      	movs	r2, #0
 800098a:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '1')) out1[2] = 1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b41      	cmp	r3, #65	; 0x41
 8000992:	d111      	bne.n	80009b8 <Set_outputs+0xe4>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3301      	adds	r3, #1
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b4d      	cmp	r3, #77	; 0x4d
 800099c:	d10c      	bne.n	80009b8 <Set_outputs+0xe4>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3302      	adds	r3, #2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b31      	cmp	r3, #49	; 0x31
 80009a6:	d107      	bne.n	80009b8 <Set_outputs+0xe4>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3305      	adds	r3, #5
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b31      	cmp	r3, #49	; 0x31
 80009b0:	d102      	bne.n	80009b8 <Set_outputs+0xe4>
 80009b2:	4b5a      	ldr	r3, [pc, #360]	; (8000b1c <Set_outputs+0x248>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '0')) out1[2] = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b41      	cmp	r3, #65	; 0x41
 80009be:	d111      	bne.n	80009e4 <Set_outputs+0x110>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b4d      	cmp	r3, #77	; 0x4d
 80009c8:	d10c      	bne.n	80009e4 <Set_outputs+0x110>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b31      	cmp	r3, #49	; 0x31
 80009d2:	d107      	bne.n	80009e4 <Set_outputs+0x110>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3305      	adds	r3, #5
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b30      	cmp	r3, #48	; 0x30
 80009dc:	d102      	bne.n	80009e4 <Set_outputs+0x110>
 80009de:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <Set_outputs+0x248>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '1')) out1[3] = 1;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b41      	cmp	r3, #65	; 0x41
 80009ea:	d111      	bne.n	8000a10 <Set_outputs+0x13c>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b4d      	cmp	r3, #77	; 0x4d
 80009f4:	d10c      	bne.n	8000a10 <Set_outputs+0x13c>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3302      	adds	r3, #2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b31      	cmp	r3, #49	; 0x31
 80009fe:	d107      	bne.n	8000a10 <Set_outputs+0x13c>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3306      	adds	r3, #6
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b31      	cmp	r3, #49	; 0x31
 8000a08:	d102      	bne.n	8000a10 <Set_outputs+0x13c>
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <Set_outputs+0x248>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '0')) out1[3] = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b41      	cmp	r3, #65	; 0x41
 8000a16:	d111      	bne.n	8000a3c <Set_outputs+0x168>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b4d      	cmp	r3, #77	; 0x4d
 8000a20:	d10c      	bne.n	8000a3c <Set_outputs+0x168>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3302      	adds	r3, #2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b31      	cmp	r3, #49	; 0x31
 8000a2a:	d107      	bne.n	8000a3c <Set_outputs+0x168>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3306      	adds	r3, #6
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b30      	cmp	r3, #48	; 0x30
 8000a34:	d102      	bne.n	8000a3c <Set_outputs+0x168>
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <Set_outputs+0x248>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '1')) out1[4] = 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b41      	cmp	r3, #65	; 0x41
 8000a42:	d111      	bne.n	8000a68 <Set_outputs+0x194>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3301      	adds	r3, #1
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b4d      	cmp	r3, #77	; 0x4d
 8000a4c:	d10c      	bne.n	8000a68 <Set_outputs+0x194>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3302      	adds	r3, #2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b31      	cmp	r3, #49	; 0x31
 8000a56:	d107      	bne.n	8000a68 <Set_outputs+0x194>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3307      	adds	r3, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b31      	cmp	r3, #49	; 0x31
 8000a60:	d102      	bne.n	8000a68 <Set_outputs+0x194>
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <Set_outputs+0x248>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '0')) out1[4] = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b41      	cmp	r3, #65	; 0x41
 8000a6e:	d111      	bne.n	8000a94 <Set_outputs+0x1c0>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b4d      	cmp	r3, #77	; 0x4d
 8000a78:	d10c      	bne.n	8000a94 <Set_outputs+0x1c0>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b31      	cmp	r3, #49	; 0x31
 8000a82:	d107      	bne.n	8000a94 <Set_outputs+0x1c0>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3307      	adds	r3, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b30      	cmp	r3, #48	; 0x30
 8000a8c:	d102      	bne.n	8000a94 <Set_outputs+0x1c0>
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <Set_outputs+0x248>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	711a      	strb	r2, [r3, #4]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '1')) out1[5] = 1;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b41      	cmp	r3, #65	; 0x41
 8000a9a:	d111      	bne.n	8000ac0 <Set_outputs+0x1ec>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b4d      	cmp	r3, #77	; 0x4d
 8000aa4:	d10c      	bne.n	8000ac0 <Set_outputs+0x1ec>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b31      	cmp	r3, #49	; 0x31
 8000aae:	d107      	bne.n	8000ac0 <Set_outputs+0x1ec>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b31      	cmp	r3, #49	; 0x31
 8000ab8:	d102      	bne.n	8000ac0 <Set_outputs+0x1ec>
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <Set_outputs+0x248>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '0')) out1[5] = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b41      	cmp	r3, #65	; 0x41
 8000ac6:	d111      	bne.n	8000aec <Set_outputs+0x218>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b4d      	cmp	r3, #77	; 0x4d
 8000ad0:	d10c      	bne.n	8000aec <Set_outputs+0x218>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b31      	cmp	r3, #49	; 0x31
 8000ada:	d107      	bne.n	8000aec <Set_outputs+0x218>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b30      	cmp	r3, #48	; 0x30
 8000ae4:	d102      	bne.n	8000aec <Set_outputs+0x218>
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <Set_outputs+0x248>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '1')) out1[6] = 1;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b41      	cmp	r3, #65	; 0x41
 8000af2:	d115      	bne.n	8000b20 <Set_outputs+0x24c>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b4d      	cmp	r3, #77	; 0x4d
 8000afc:	d110      	bne.n	8000b20 <Set_outputs+0x24c>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3302      	adds	r3, #2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b31      	cmp	r3, #49	; 0x31
 8000b06:	d10b      	bne.n	8000b20 <Set_outputs+0x24c>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3309      	adds	r3, #9
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b31      	cmp	r3, #49	; 0x31
 8000b10:	d106      	bne.n	8000b20 <Set_outputs+0x24c>
 8000b12:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <Set_outputs+0x248>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	719a      	strb	r2, [r3, #6]
 8000b18:	e002      	b.n	8000b20 <Set_outputs+0x24c>
 8000b1a:	bf00      	nop
 8000b1c:	200002a8 	.word	0x200002a8
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '0')) out1[6] = 0;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b41      	cmp	r3, #65	; 0x41
 8000b26:	d111      	bne.n	8000b4c <Set_outputs+0x278>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b4d      	cmp	r3, #77	; 0x4d
 8000b30:	d10c      	bne.n	8000b4c <Set_outputs+0x278>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3302      	adds	r3, #2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b31      	cmp	r3, #49	; 0x31
 8000b3a:	d107      	bne.n	8000b4c <Set_outputs+0x278>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3309      	adds	r3, #9
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b30      	cmp	r3, #48	; 0x30
 8000b44:	d102      	bne.n	8000b4c <Set_outputs+0x278>
 8000b46:	4b86      	ldr	r3, [pc, #536]	; (8000d60 <Set_outputs+0x48c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '1')) out1[7] = 1;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b41      	cmp	r3, #65	; 0x41
 8000b52:	d111      	bne.n	8000b78 <Set_outputs+0x2a4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3301      	adds	r3, #1
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b4d      	cmp	r3, #77	; 0x4d
 8000b5c:	d10c      	bne.n	8000b78 <Set_outputs+0x2a4>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3302      	adds	r3, #2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b31      	cmp	r3, #49	; 0x31
 8000b66:	d107      	bne.n	8000b78 <Set_outputs+0x2a4>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	330a      	adds	r3, #10
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b31      	cmp	r3, #49	; 0x31
 8000b70:	d102      	bne.n	8000b78 <Set_outputs+0x2a4>
 8000b72:	4b7b      	ldr	r3, [pc, #492]	; (8000d60 <Set_outputs+0x48c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '0')) out1[7] = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b41      	cmp	r3, #65	; 0x41
 8000b7e:	d111      	bne.n	8000ba4 <Set_outputs+0x2d0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3301      	adds	r3, #1
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b4d      	cmp	r3, #77	; 0x4d
 8000b88:	d10c      	bne.n	8000ba4 <Set_outputs+0x2d0>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b31      	cmp	r3, #49	; 0x31
 8000b92:	d107      	bne.n	8000ba4 <Set_outputs+0x2d0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	330a      	adds	r3, #10
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b30      	cmp	r3, #48	; 0x30
 8000b9c:	d102      	bne.n	8000ba4 <Set_outputs+0x2d0>
 8000b9e:	4b70      	ldr	r3, [pc, #448]	; (8000d60 <Set_outputs+0x48c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '1')) out2[0] = 1;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b41      	cmp	r3, #65	; 0x41
 8000baa:	d111      	bne.n	8000bd0 <Set_outputs+0x2fc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b4d      	cmp	r3, #77	; 0x4d
 8000bb4:	d10c      	bne.n	8000bd0 <Set_outputs+0x2fc>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b31      	cmp	r3, #49	; 0x31
 8000bbe:	d107      	bne.n	8000bd0 <Set_outputs+0x2fc>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	330b      	adds	r3, #11
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b31      	cmp	r3, #49	; 0x31
 8000bc8:	d102      	bne.n	8000bd0 <Set_outputs+0x2fc>
 8000bca:	4b66      	ldr	r3, [pc, #408]	; (8000d64 <Set_outputs+0x490>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '0')) out2[0] = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b41      	cmp	r3, #65	; 0x41
 8000bd6:	d111      	bne.n	8000bfc <Set_outputs+0x328>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b4d      	cmp	r3, #77	; 0x4d
 8000be0:	d10c      	bne.n	8000bfc <Set_outputs+0x328>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b31      	cmp	r3, #49	; 0x31
 8000bea:	d107      	bne.n	8000bfc <Set_outputs+0x328>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	330b      	adds	r3, #11
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b30      	cmp	r3, #48	; 0x30
 8000bf4:	d102      	bne.n	8000bfc <Set_outputs+0x328>
 8000bf6:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <Set_outputs+0x490>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '1')) out2[1] = 1;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b41      	cmp	r3, #65	; 0x41
 8000c02:	d111      	bne.n	8000c28 <Set_outputs+0x354>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b4d      	cmp	r3, #77	; 0x4d
 8000c0c:	d10c      	bne.n	8000c28 <Set_outputs+0x354>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3302      	adds	r3, #2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b31      	cmp	r3, #49	; 0x31
 8000c16:	d107      	bne.n	8000c28 <Set_outputs+0x354>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	330c      	adds	r3, #12
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b31      	cmp	r3, #49	; 0x31
 8000c20:	d102      	bne.n	8000c28 <Set_outputs+0x354>
 8000c22:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <Set_outputs+0x490>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '0')) out2[1] = 0;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b41      	cmp	r3, #65	; 0x41
 8000c2e:	d111      	bne.n	8000c54 <Set_outputs+0x380>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b4d      	cmp	r3, #77	; 0x4d
 8000c38:	d10c      	bne.n	8000c54 <Set_outputs+0x380>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b31      	cmp	r3, #49	; 0x31
 8000c42:	d107      	bne.n	8000c54 <Set_outputs+0x380>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	330c      	adds	r3, #12
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b30      	cmp	r3, #48	; 0x30
 8000c4c:	d102      	bne.n	8000c54 <Set_outputs+0x380>
 8000c4e:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <Set_outputs+0x490>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '1')) out2[2] = 1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b41      	cmp	r3, #65	; 0x41
 8000c5a:	d111      	bne.n	8000c80 <Set_outputs+0x3ac>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b4d      	cmp	r3, #77	; 0x4d
 8000c64:	d10c      	bne.n	8000c80 <Set_outputs+0x3ac>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b31      	cmp	r3, #49	; 0x31
 8000c6e:	d107      	bne.n	8000c80 <Set_outputs+0x3ac>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	330d      	adds	r3, #13
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b31      	cmp	r3, #49	; 0x31
 8000c78:	d102      	bne.n	8000c80 <Set_outputs+0x3ac>
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <Set_outputs+0x490>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '0')) out2[2] = 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b41      	cmp	r3, #65	; 0x41
 8000c86:	d111      	bne.n	8000cac <Set_outputs+0x3d8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b4d      	cmp	r3, #77	; 0x4d
 8000c90:	d10c      	bne.n	8000cac <Set_outputs+0x3d8>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3302      	adds	r3, #2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b31      	cmp	r3, #49	; 0x31
 8000c9a:	d107      	bne.n	8000cac <Set_outputs+0x3d8>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	330d      	adds	r3, #13
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b30      	cmp	r3, #48	; 0x30
 8000ca4:	d102      	bne.n	8000cac <Set_outputs+0x3d8>
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <Set_outputs+0x490>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '1')) out2[3] = 1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b41      	cmp	r3, #65	; 0x41
 8000cb2:	d111      	bne.n	8000cd8 <Set_outputs+0x404>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b4d      	cmp	r3, #77	; 0x4d
 8000cbc:	d10c      	bne.n	8000cd8 <Set_outputs+0x404>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b31      	cmp	r3, #49	; 0x31
 8000cc6:	d107      	bne.n	8000cd8 <Set_outputs+0x404>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330e      	adds	r3, #14
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b31      	cmp	r3, #49	; 0x31
 8000cd0:	d102      	bne.n	8000cd8 <Set_outputs+0x404>
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <Set_outputs+0x490>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '0')) out2[3] = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b41      	cmp	r3, #65	; 0x41
 8000cde:	d111      	bne.n	8000d04 <Set_outputs+0x430>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ce8:	d10c      	bne.n	8000d04 <Set_outputs+0x430>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b31      	cmp	r3, #49	; 0x31
 8000cf2:	d107      	bne.n	8000d04 <Set_outputs+0x430>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	330e      	adds	r3, #14
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b30      	cmp	r3, #48	; 0x30
 8000cfc:	d102      	bne.n	8000d04 <Set_outputs+0x430>
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <Set_outputs+0x490>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '1')) out2[4] = 1;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b41      	cmp	r3, #65	; 0x41
 8000d0a:	d111      	bne.n	8000d30 <Set_outputs+0x45c>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b4d      	cmp	r3, #77	; 0x4d
 8000d14:	d10c      	bne.n	8000d30 <Set_outputs+0x45c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b31      	cmp	r3, #49	; 0x31
 8000d1e:	d107      	bne.n	8000d30 <Set_outputs+0x45c>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	330f      	adds	r3, #15
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b31      	cmp	r3, #49	; 0x31
 8000d28:	d102      	bne.n	8000d30 <Set_outputs+0x45c>
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <Set_outputs+0x490>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '0')) out2[4] = 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b41      	cmp	r3, #65	; 0x41
 8000d36:	d117      	bne.n	8000d68 <Set_outputs+0x494>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b4d      	cmp	r3, #77	; 0x4d
 8000d40:	d112      	bne.n	8000d68 <Set_outputs+0x494>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3302      	adds	r3, #2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b31      	cmp	r3, #49	; 0x31
 8000d4a:	d10d      	bne.n	8000d68 <Set_outputs+0x494>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	330f      	adds	r3, #15
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b30      	cmp	r3, #48	; 0x30
 8000d54:	d108      	bne.n	8000d68 <Set_outputs+0x494>
 8000d56:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <Set_outputs+0x490>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	711a      	strb	r2, [r3, #4]
 8000d5c:	e004      	b.n	8000d68 <Set_outputs+0x494>
 8000d5e:	bf00      	nop
 8000d60:	200002a8 	.word	0x200002a8
 8000d64:	200002b0 	.word	0x200002b0

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '1')) out2[5] = 1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b41      	cmp	r3, #65	; 0x41
 8000d6e:	d111      	bne.n	8000d94 <Set_outputs+0x4c0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b4d      	cmp	r3, #77	; 0x4d
 8000d78:	d10c      	bne.n	8000d94 <Set_outputs+0x4c0>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b31      	cmp	r3, #49	; 0x31
 8000d82:	d107      	bne.n	8000d94 <Set_outputs+0x4c0>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3310      	adds	r3, #16
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b31      	cmp	r3, #49	; 0x31
 8000d8c:	d102      	bne.n	8000d94 <Set_outputs+0x4c0>
 8000d8e:	4b99      	ldr	r3, [pc, #612]	; (8000ff4 <Set_outputs+0x720>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '0')) out2[5] = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b41      	cmp	r3, #65	; 0x41
 8000d9a:	d111      	bne.n	8000dc0 <Set_outputs+0x4ec>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b4d      	cmp	r3, #77	; 0x4d
 8000da4:	d10c      	bne.n	8000dc0 <Set_outputs+0x4ec>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3302      	adds	r3, #2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b31      	cmp	r3, #49	; 0x31
 8000dae:	d107      	bne.n	8000dc0 <Set_outputs+0x4ec>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3310      	adds	r3, #16
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b30      	cmp	r3, #48	; 0x30
 8000db8:	d102      	bne.n	8000dc0 <Set_outputs+0x4ec>
 8000dba:	4b8e      	ldr	r3, [pc, #568]	; (8000ff4 <Set_outputs+0x720>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '1')) out2[6] = 1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b41      	cmp	r3, #65	; 0x41
 8000dc6:	d111      	bne.n	8000dec <Set_outputs+0x518>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b4d      	cmp	r3, #77	; 0x4d
 8000dd0:	d10c      	bne.n	8000dec <Set_outputs+0x518>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b31      	cmp	r3, #49	; 0x31
 8000dda:	d107      	bne.n	8000dec <Set_outputs+0x518>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3311      	adds	r3, #17
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b31      	cmp	r3, #49	; 0x31
 8000de4:	d102      	bne.n	8000dec <Set_outputs+0x518>
 8000de6:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <Set_outputs+0x720>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	719a      	strb	r2, [r3, #6]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '0')) out2[6] = 0;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b41      	cmp	r3, #65	; 0x41
 8000df2:	d111      	bne.n	8000e18 <Set_outputs+0x544>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3301      	adds	r3, #1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b4d      	cmp	r3, #77	; 0x4d
 8000dfc:	d10c      	bne.n	8000e18 <Set_outputs+0x544>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3302      	adds	r3, #2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b31      	cmp	r3, #49	; 0x31
 8000e06:	d107      	bne.n	8000e18 <Set_outputs+0x544>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3311      	adds	r3, #17
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b30      	cmp	r3, #48	; 0x30
 8000e10:	d102      	bne.n	8000e18 <Set_outputs+0x544>
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <Set_outputs+0x720>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '1')) out2[7] = 1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b41      	cmp	r3, #65	; 0x41
 8000e1e:	d111      	bne.n	8000e44 <Set_outputs+0x570>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b4d      	cmp	r3, #77	; 0x4d
 8000e28:	d10c      	bne.n	8000e44 <Set_outputs+0x570>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b31      	cmp	r3, #49	; 0x31
 8000e32:	d107      	bne.n	8000e44 <Set_outputs+0x570>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3312      	adds	r3, #18
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b31      	cmp	r3, #49	; 0x31
 8000e3c:	d102      	bne.n	8000e44 <Set_outputs+0x570>
 8000e3e:	4b6d      	ldr	r3, [pc, #436]	; (8000ff4 <Set_outputs+0x720>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '0')) out2[7] = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b41      	cmp	r3, #65	; 0x41
 8000e4a:	d111      	bne.n	8000e70 <Set_outputs+0x59c>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b4d      	cmp	r3, #77	; 0x4d
 8000e54:	d10c      	bne.n	8000e70 <Set_outputs+0x59c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b31      	cmp	r3, #49	; 0x31
 8000e5e:	d107      	bne.n	8000e70 <Set_outputs+0x59c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3312      	adds	r3, #18
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b30      	cmp	r3, #48	; 0x30
 8000e68:	d102      	bne.n	8000e70 <Set_outputs+0x59c>
 8000e6a:	4b62      	ldr	r3, [pc, #392]	; (8000ff4 <Set_outputs+0x720>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(flag_ok ==1)){ USART1_Send_String ("OK"); flag_ok=0;}
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b41      	cmp	r3, #65	; 0x41
 8000e76:	d10e      	bne.n	8000e96 <Set_outputs+0x5c2>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b4d      	cmp	r3, #77	; 0x4d
 8000e80:	d109      	bne.n	8000e96 <Set_outputs+0x5c2>
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <Set_outputs+0x724>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <Set_outputs+0x5c2>
 8000e8a:	485c      	ldr	r0, [pc, #368]	; (8000ffc <Set_outputs+0x728>)
 8000e8c:	f000 fb2e 	bl	80014ec <USART1_Send_String>
 8000e90:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <Set_outputs+0x724>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]

		if (out1[0] ==1) LL_GPIO_SetOutputPin(OUT1_GPIO_Port, OUT1_Pin); else LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000e96:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <Set_outputs+0x72c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d104      	bne.n	8000ea8 <Set_outputs+0x5d4>
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4858      	ldr	r0, [pc, #352]	; (8001004 <Set_outputs+0x730>)
 8000ea2:	f7ff fc75 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000ea6:	e003      	b.n	8000eb0 <Set_outputs+0x5dc>
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4856      	ldr	r0, [pc, #344]	; (8001004 <Set_outputs+0x730>)
 8000eac:	f7ff fc7e 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[1] ==1) LL_GPIO_SetOutputPin(OUT2_GPIO_Port, OUT2_Pin); else LL_GPIO_ResetOutputPin(OUT2_GPIO_Port, OUT2_Pin);
 8000eb0:	4b53      	ldr	r3, [pc, #332]	; (8001000 <Set_outputs+0x72c>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d104      	bne.n	8000ec2 <Set_outputs+0x5ee>
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4852      	ldr	r0, [pc, #328]	; (8001004 <Set_outputs+0x730>)
 8000ebc:	f7ff fc68 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000ec0:	e003      	b.n	8000eca <Set_outputs+0x5f6>
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	484f      	ldr	r0, [pc, #316]	; (8001004 <Set_outputs+0x730>)
 8000ec6:	f7ff fc71 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[2] ==1) LL_GPIO_SetOutputPin(OUT3_GPIO_Port, OUT3_Pin); else LL_GPIO_ResetOutputPin(OUT3_GPIO_Port, OUT3_Pin);
 8000eca:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <Set_outputs+0x72c>)
 8000ecc:	789b      	ldrb	r3, [r3, #2]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d104      	bne.n	8000edc <Set_outputs+0x608>
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	484b      	ldr	r0, [pc, #300]	; (8001004 <Set_outputs+0x730>)
 8000ed6:	f7ff fc5b 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000eda:	e003      	b.n	8000ee4 <Set_outputs+0x610>
 8000edc:	2104      	movs	r1, #4
 8000ede:	4849      	ldr	r0, [pc, #292]	; (8001004 <Set_outputs+0x730>)
 8000ee0:	f7ff fc64 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[3] ==1) LL_GPIO_SetOutputPin(OUT4_GPIO_Port, OUT4_Pin); else LL_GPIO_ResetOutputPin(OUT4_GPIO_Port, OUT4_Pin);
 8000ee4:	4b46      	ldr	r3, [pc, #280]	; (8001000 <Set_outputs+0x72c>)
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d104      	bne.n	8000ef6 <Set_outputs+0x622>
 8000eec:	2108      	movs	r1, #8
 8000eee:	4845      	ldr	r0, [pc, #276]	; (8001004 <Set_outputs+0x730>)
 8000ef0:	f7ff fc4e 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000ef4:	e003      	b.n	8000efe <Set_outputs+0x62a>
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4842      	ldr	r0, [pc, #264]	; (8001004 <Set_outputs+0x730>)
 8000efa:	f7ff fc57 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[4] ==1) LL_GPIO_SetOutputPin(OUT5_GPIO_Port, OUT5_Pin); else LL_GPIO_ResetOutputPin(OUT5_GPIO_Port, OUT5_Pin);
 8000efe:	4b40      	ldr	r3, [pc, #256]	; (8001000 <Set_outputs+0x72c>)
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d104      	bne.n	8000f10 <Set_outputs+0x63c>
 8000f06:	2110      	movs	r1, #16
 8000f08:	483e      	ldr	r0, [pc, #248]	; (8001004 <Set_outputs+0x730>)
 8000f0a:	f7ff fc41 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f0e:	e003      	b.n	8000f18 <Set_outputs+0x644>
 8000f10:	2110      	movs	r1, #16
 8000f12:	483c      	ldr	r0, [pc, #240]	; (8001004 <Set_outputs+0x730>)
 8000f14:	f7ff fc4a 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[5] ==1) LL_GPIO_SetOutputPin(OUT6_GPIO_Port, OUT6_Pin); else LL_GPIO_ResetOutputPin(OUT6_GPIO_Port, OUT6_Pin);
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <Set_outputs+0x72c>)
 8000f1a:	795b      	ldrb	r3, [r3, #5]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d104      	bne.n	8000f2a <Set_outputs+0x656>
 8000f20:	2120      	movs	r1, #32
 8000f22:	4838      	ldr	r0, [pc, #224]	; (8001004 <Set_outputs+0x730>)
 8000f24:	f7ff fc34 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f28:	e003      	b.n	8000f32 <Set_outputs+0x65e>
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	4835      	ldr	r0, [pc, #212]	; (8001004 <Set_outputs+0x730>)
 8000f2e:	f7ff fc3d 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[6] ==1) LL_GPIO_SetOutputPin(OUT7_GPIO_Port, OUT7_Pin); else LL_GPIO_ResetOutputPin(OUT7_GPIO_Port, OUT7_Pin);
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <Set_outputs+0x72c>)
 8000f34:	799b      	ldrb	r3, [r3, #6]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d104      	bne.n	8000f44 <Set_outputs+0x670>
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4831      	ldr	r0, [pc, #196]	; (8001004 <Set_outputs+0x730>)
 8000f3e:	f7ff fc27 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f42:	e003      	b.n	8000f4c <Set_outputs+0x678>
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	482f      	ldr	r0, [pc, #188]	; (8001004 <Set_outputs+0x730>)
 8000f48:	f7ff fc30 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[7] ==1) LL_GPIO_SetOutputPin(OUT8_GPIO_Port, OUT8_Pin); else LL_GPIO_ResetOutputPin(OUT8_GPIO_Port, OUT8_Pin);
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <Set_outputs+0x72c>)
 8000f4e:	79db      	ldrb	r3, [r3, #7]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d104      	bne.n	8000f5e <Set_outputs+0x68a>
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	482b      	ldr	r0, [pc, #172]	; (8001004 <Set_outputs+0x730>)
 8000f58:	f7ff fc1a 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f5c:	e003      	b.n	8000f66 <Set_outputs+0x692>
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	4828      	ldr	r0, [pc, #160]	; (8001004 <Set_outputs+0x730>)
 8000f62:	f7ff fc23 	bl	80007ac <LL_GPIO_ResetOutputPin>

		if (out2[0] ==1) LL_GPIO_SetOutputPin(OUT9_GPIO_Port, OUT9_Pin); else LL_GPIO_ResetOutputPin(OUT9_GPIO_Port, OUT9_Pin);
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <Set_outputs+0x720>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d105      	bne.n	8000f7a <Set_outputs+0x6a6>
 8000f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f72:	4824      	ldr	r0, [pc, #144]	; (8001004 <Set_outputs+0x730>)
 8000f74:	f7ff fc0c 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f78:	e004      	b.n	8000f84 <Set_outputs+0x6b0>
 8000f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7e:	4821      	ldr	r0, [pc, #132]	; (8001004 <Set_outputs+0x730>)
 8000f80:	f7ff fc14 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[1] ==1) LL_GPIO_SetOutputPin(OUT10_GPIO_Port, OUT10_Pin); else LL_GPIO_ResetOutputPin(OUT10_GPIO_Port, OUT10_Pin);
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <Set_outputs+0x720>)
 8000f86:	785b      	ldrb	r3, [r3, #1]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d105      	bne.n	8000f98 <Set_outputs+0x6c4>
 8000f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f90:	481c      	ldr	r0, [pc, #112]	; (8001004 <Set_outputs+0x730>)
 8000f92:	f7ff fbfd 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f96:	e004      	b.n	8000fa2 <Set_outputs+0x6ce>
 8000f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <Set_outputs+0x730>)
 8000f9e:	f7ff fc05 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[2] ==1) LL_GPIO_SetOutputPin(OUT11_GPIO_Port, OUT11_Pin); else LL_GPIO_ResetOutputPin(OUT11_GPIO_Port, OUT11_Pin);
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <Set_outputs+0x720>)
 8000fa4:	789b      	ldrb	r3, [r3, #2]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d105      	bne.n	8000fb6 <Set_outputs+0x6e2>
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <Set_outputs+0x730>)
 8000fb0:	f7ff fbee 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000fb4:	e004      	b.n	8000fc0 <Set_outputs+0x6ec>
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	4812      	ldr	r0, [pc, #72]	; (8001004 <Set_outputs+0x730>)
 8000fbc:	f7ff fbf6 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[3] ==1) LL_GPIO_SetOutputPin(OUT12_GPIO_Port, OUT12_Pin); else LL_GPIO_ResetOutputPin(OUT12_GPIO_Port, OUT12_Pin);
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <Set_outputs+0x720>)
 8000fc2:	78db      	ldrb	r3, [r3, #3]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d105      	bne.n	8000fd4 <Set_outputs+0x700>
 8000fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <Set_outputs+0x730>)
 8000fce:	f7ff fbdf 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000fd2:	e004      	b.n	8000fde <Set_outputs+0x70a>
 8000fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <Set_outputs+0x730>)
 8000fda:	f7ff fbe7 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[4] ==1) LL_GPIO_SetOutputPin(OUT13_GPIO_Port, OUT13_Pin); else LL_GPIO_ResetOutputPin(OUT13_GPIO_Port, OUT13_Pin);
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <Set_outputs+0x720>)
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d110      	bne.n	8001008 <Set_outputs+0x734>
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <Set_outputs+0x730>)
 8000fec:	f7ff fbd0 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000ff0:	e00f      	b.n	8001012 <Set_outputs+0x73e>
 8000ff2:	bf00      	nop
 8000ff4:	200002b0 	.word	0x200002b0
 8000ff8:	200002a5 	.word	0x200002a5
 8000ffc:	0800c7d8 	.word	0x0800c7d8
 8001000:	200002a8 	.word	0x200002a8
 8001004:	40020400 	.word	0x40020400
 8001008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <Set_outputs+0x7a0>)
 800100e:	f7ff fbcd 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[5] ==1) LL_GPIO_SetOutputPin(OUT14_GPIO_Port, OUT14_Pin); else LL_GPIO_ResetOutputPin(OUT14_GPIO_Port, OUT14_Pin);
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <Set_outputs+0x7a4>)
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <Set_outputs+0x752>
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4815      	ldr	r0, [pc, #84]	; (8001074 <Set_outputs+0x7a0>)
 8001020:	f7ff fbb6 	bl	8000790 <LL_GPIO_SetOutputPin>
 8001024:	e004      	b.n	8001030 <Set_outputs+0x75c>
 8001026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <Set_outputs+0x7a0>)
 800102c:	f7ff fbbe 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[6] ==1) LL_GPIO_SetOutputPin(OUT15_GPIO_Port, OUT15_Pin); else LL_GPIO_ResetOutputPin(OUT15_GPIO_Port, OUT15_Pin);
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <Set_outputs+0x7a4>)
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <Set_outputs+0x770>
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <Set_outputs+0x7a0>)
 800103e:	f7ff fba7 	bl	8000790 <LL_GPIO_SetOutputPin>
 8001042:	e004      	b.n	800104e <Set_outputs+0x77a>
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <Set_outputs+0x7a0>)
 800104a:	f7ff fbaf 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <Set_outputs+0x7a4>)
 8001050:	79db      	ldrb	r3, [r3, #7]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d105      	bne.n	8001062 <Set_outputs+0x78e>
 8001056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <Set_outputs+0x7a8>)
 800105c:	f7ff fb98 	bl	8000790 <LL_GPIO_SetOutputPin>

}
 8001060:	e004      	b.n	800106c <Set_outputs+0x798>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <Set_outputs+0x7a8>)
 8001068:	f7ff fba0 	bl	80007ac <LL_GPIO_ResetOutputPin>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020400 	.word	0x40020400
 8001078:	200002b0 	.word	0x200002b0
 800107c:	40020000 	.word	0x40020000

08001080 <UART_Printf>:
                            .dns = {8, 8, 8, 8},
                            .dhcp = NETINFO_STATIC };



void UART_Printf(const char* fmt, ...) {
 8001080:	b40f      	push	{r0, r1, r2, r3}
 8001082:	b580      	push	{r7, lr}
 8001084:	b0c2      	sub	sp, #264	; 0x108
 8001086:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001088:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800108c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001094:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800109a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800109e:	f107 0008 	add.w	r0, r7, #8
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	f00a feb4 	bl	800be18 <vsniprintf>
    CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f893 	bl	80001e0 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00a fa09 	bl	800b4dc <CDC_Transmit_FS>
    va_end(args);
}
 80010ca:	bf00      	nop
 80010cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr
	...

080010dc <BuildStartPage>:
		"<p><a href='/switch'>Antenna switch</a></p>"
		"<p><a href='/toggle'>Toggle switch</a></p>"
		"<p><a href='/label'>Config name of labels</a></p>";


void BuildStartPage (char* buf){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	strcpy(buf,http_200_header);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <BuildStartPage+0x48>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	4611      	mov	r1, r2
 80010ec:	2352      	movs	r3, #82	; 0x52
 80010ee:	461a      	mov	r2, r3
 80010f0:	f00a ff0e 	bl	800bf10 <memcpy>
	strcat(buf, (char *)startPage);
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <BuildStartPage+0x4c>)
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f00a feb4 	bl	800be64 <strcat>
	strcat(buf, (char *)SVG);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f86f 	bl	80001e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <BuildStartPage+0x50>)
 800110c:	4618      	mov	r0, r3
 800110e:	4611      	mov	r1, r2
 8001110:	f241 03e5 	movw	r3, #4325	; 0x10e5
 8001114:	461a      	mov	r2, r3
 8001116:	f00a fefb 	bl	800bf10 <memcpy>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	0800d9a4 	.word	0x0800d9a4
 8001128:	20000018 	.word	0x20000018
 800112c:	0800c8bc 	.word	0x0800c8bc

08001130 <W5500_Select>:
/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
void W5500_Select(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2110      	movs	r1, #16
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <W5500_Select+0x14>)
 800113a:	f002 fe5b 	bl	8003df4 <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020000 	.word	0x40020000

08001148 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2110      	movs	r1, #16
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <W5500_Unselect+0x14>)
 8001152:	f002 fe4f 	bl	8003df4 <HAL_GPIO_WritePin>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020000 	.word	0x40020000

08001160 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 800116c:	887a      	ldrh	r2, [r7, #2]
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <W5500_ReadBuff+0x24>)
 8001176:	f004 ff35 	bl	8005fe4 <HAL_SPI_Receive>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200022e8 	.word	0x200022e8

08001188 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <W5500_WriteBuff+0x24>)
 800119e:	f004 fde5 	bl	8005d6c <HAL_SPI_Transmit>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200022e8 	.word	0x200022e8

080011b0 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	2101      	movs	r1, #1
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffd0 	bl	8001160 <W5500_ReadBuff>
    return byte;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	2101      	movs	r1, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffd5 	bl	8001188 <W5500_WriteBuff>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <loopback_tcps>:


int32_t loopback_tcps(uint8_t sn, char *buf, uint16_t port) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	80bb      	strh	r3, [r7, #4]
	int32_t ret;
	uint32_t size = 0, sentsize = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
	char *url;

	switch (getSn_SR(sn)) {
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	3301      	adds	r3, #1
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fd4b 	bl	8002ca8 <WIZCHIP_READ>
 8001212:	4603      	mov	r3, r0
 8001214:	2b1c      	cmp	r3, #28
 8001216:	f200 812c 	bhi.w	8001472 <loopback_tcps+0x28a>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <loopback_tcps+0x38>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001441 	.word	0x08001441
 8001224:	08001473 	.word	0x08001473
 8001228:	08001473 	.word	0x08001473
 800122c:	08001473 	.word	0x08001473
 8001230:	08001473 	.word	0x08001473
 8001234:	08001473 	.word	0x08001473
 8001238:	08001473 	.word	0x08001473
 800123c:	08001473 	.word	0x08001473
 8001240:	08001473 	.word	0x08001473
 8001244:	08001473 	.word	0x08001473
 8001248:	08001473 	.word	0x08001473
 800124c:	08001473 	.word	0x08001473
 8001250:	08001473 	.word	0x08001473
 8001254:	08001473 	.word	0x08001473
 8001258:	08001473 	.word	0x08001473
 800125c:	08001473 	.word	0x08001473
 8001260:	08001473 	.word	0x08001473
 8001264:	08001473 	.word	0x08001473
 8001268:	08001473 	.word	0x08001473
 800126c:	0800141f 	.word	0x0800141f
 8001270:	08001473 	.word	0x08001473
 8001274:	08001473 	.word	0x08001473
 8001278:	08001473 	.word	0x08001473
 800127c:	08001295 	.word	0x08001295
 8001280:	08001473 	.word	0x08001473
 8001284:	08001473 	.word	0x08001473
 8001288:	08001473 	.word	0x08001473
 800128c:	08001473 	.word	0x08001473
 8001290:	080013f3 	.word	0x080013f3
	case SOCK_ESTABLISHED:
		if (getSn_IR(sn) & Sn_IR_CON) {
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	3301      	adds	r3, #1
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fd01 	bl	8002ca8 <WIZCHIP_READ>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00e      	beq.n	80012ce <loopback_tcps+0xe6>
			UART_Printf("%d:Connected\r\n", sn);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4874      	ldr	r0, [pc, #464]	; (8001488 <loopback_tcps+0x2a0>)
 80012b6:	f7ff fee3 	bl	8001080 <UART_Printf>
			setSn_IR(sn, Sn_IR_CON);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	3301      	adds	r3, #1
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fd39 	bl	8002d40 <WIZCHIP_WRITE>
		}
		if ((size = getSn_RX_RSR(sn)) > 0) {
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fe8e 	bl	8002ff2 <getSn_RX_RSR>
 80012d6:	4603      	mov	r3, r0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80ca 	beq.w	8001476 <loopback_tcps+0x28e>
			if (size > DATA_BUF_SIZE)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f242 0204 	movw	r2, #8196	; 0x2004
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d902      	bls.n	80012f2 <loopback_tcps+0x10a>
				size = DATA_BUF_SIZE;
 80012ec:	f242 0304 	movw	r3, #8196	; 0x2004
 80012f0:	617b      	str	r3, [r7, #20]
			ret = recv(sn, buf, size);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 feee 	bl	80020dc <recv>
 8001300:	60f8      	str	r0, [r7, #12]
			if (ret <= 0)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dc01      	bgt.n	800130c <loopback_tcps+0x124>
				return ret;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	e0b8      	b.n	800147e <loopback_tcps+0x296>
			sentsize = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
//=============================================
			if (memcmp(buf, "GET ", 4) == 0) {
 8001310:	2204      	movs	r2, #4
 8001312:	495e      	ldr	r1, [pc, #376]	; (800148c <loopback_tcps+0x2a4>)
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f00a fd8d 	bl	800be34 <memcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d163      	bne.n	80013e8 <loopback_tcps+0x200>
				url = buf + 4;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	60bb      	str	r3, [r7, #8]

				if (memcmp(url, "/status", 7) == 0) {
 8001326:	2207      	movs	r2, #7
 8001328:	4959      	ldr	r1, [pc, #356]	; (8001490 <loopback_tcps+0x2a8>)
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f00a fd82 	bl	800be34 <memcmp>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <loopback_tcps+0x158>
					strcpy(buf, (char *)post_url);
 8001336:	4957      	ldr	r1, [pc, #348]	; (8001494 <loopback_tcps+0x2ac>)
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f00a fde1 	bl	800bf00 <strcpy>
 800133e:	e02f      	b.n	80013a0 <loopback_tcps+0x1b8>
				} else if ((memcmp(url, "/ H", 3) == 0)) {
 8001340:	2203      	movs	r2, #3
 8001342:	4955      	ldr	r1, [pc, #340]	; (8001498 <loopback_tcps+0x2b0>)
 8001344:	68b8      	ldr	r0, [r7, #8]
 8001346:	f00a fd75 	bl	800be34 <memcmp>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <loopback_tcps+0x170>
					BuildStartPage(buf);
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f7ff fec3 	bl	80010dc <BuildStartPage>
 8001356:	e023      	b.n	80013a0 <loopback_tcps+0x1b8>
				} else if (memcmp(url, "/AM1", 4) == 0) {
 8001358:	2204      	movs	r2, #4
 800135a:	4950      	ldr	r1, [pc, #320]	; (800149c <loopback_tcps+0x2b4>)
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f00a fd69 	bl	800be34 <memcmp>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d113      	bne.n	8001390 <loopback_tcps+0x1a8>
					get_url = url + 1;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3301      	adds	r3, #1
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <loopback_tcps+0x2b8>)
 800136e:	6013      	str	r3, [r2, #0]
					strncpy(post_url, (char *)get_url,19);
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <loopback_tcps+0x2b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2213      	movs	r2, #19
 8001376:	4619      	mov	r1, r3
 8001378:	4846      	ldr	r0, [pc, #280]	; (8001494 <loopback_tcps+0x2ac>)
 800137a:	f00a fd82 	bl	800be82 <strncpy>
					Set_outputs(get_url);
 800137e:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <loopback_tcps+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff faa6 	bl	80008d4 <Set_outputs>
					BuildStartPage(buf);
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f7ff fea7 	bl	80010dc <BuildStartPage>
 800138e:	e007      	b.n	80013a0 <loopback_tcps+0x1b8>
				}else

				{
					strcpy(buf, http_404_header);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <loopback_tcps+0x2bc>)
 8001394:	4618      	mov	r0, r3
 8001396:	4611      	mov	r1, r2
 8001398:	2359      	movs	r3, #89	; 0x59
 800139a:	461a      	mov	r2, r3
 800139c:	f00a fdb8 	bl	800bf10 <memcpy>
				}
				//======================================================
				size = strlen(buf);
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f7fe ff1d 	bl	80001e0 <strlen>
 80013a6:	6178      	str	r0, [r7, #20]
				while (size != sentsize) {
 80013a8:	e01a      	b.n	80013e0 <loopback_tcps+0x1f8>
					ret = send(sn, buf + sentsize, size - sentsize);
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd92 	bl	8001ee8 <send>
 80013c4:	60f8      	str	r0, [r7, #12]
					if (ret < 0) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da05      	bge.n	80013d8 <loopback_tcps+0x1f0>
						close(sn);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fc4c 	bl	8001c6c <close>
						return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	e052      	b.n	800147e <loopback_tcps+0x296>
					}
					sentsize += ret;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4413      	add	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
				while (size != sentsize) {
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1e0      	bne.n	80013aa <loopback_tcps+0x1c2>
				}
			}
			disconnect(sn);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fd06 	bl	8001dfc <disconnect>
		}
		break;
 80013f0:	e041      	b.n	8001476 <loopback_tcps+0x28e>
	case SOCK_CLOSE_WAIT:
		UART_Printf("%d:CloseWait\r\n", sn);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4619      	mov	r1, r3
 80013f6:	482c      	ldr	r0, [pc, #176]	; (80014a8 <loopback_tcps+0x2c0>)
 80013f8:	f7ff fe42 	bl	8001080 <UART_Printf>
		if ((ret = disconnect(sn)) != SOCK_OK)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fcfc 	bl	8001dfc <disconnect>
 8001404:	4603      	mov	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <loopback_tcps+0x22a>
			return ret;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	e035      	b.n	800147e <loopback_tcps+0x296>
		UART_Printf("%d:Closed\r\n", sn);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4619      	mov	r1, r3
 8001416:	4825      	ldr	r0, [pc, #148]	; (80014ac <loopback_tcps+0x2c4>)
 8001418:	f7ff fe32 	bl	8001080 <UART_Printf>
		break;
 800141c:	e02e      	b.n	800147c <loopback_tcps+0x294>
	case SOCK_INIT:
		UART_Printf("%d:Listen, port [%d]\r\n", sn, port);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	88ba      	ldrh	r2, [r7, #4]
 8001422:	4619      	mov	r1, r3
 8001424:	4822      	ldr	r0, [pc, #136]	; (80014b0 <loopback_tcps+0x2c8>)
 8001426:	f7ff fe2b 	bl	8001080 <UART_Printf>
		if ((ret = listen(sn)) != SOCK_OK)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fc8b 	bl	8001d48 <listen>
 8001432:	4603      	mov	r3, r0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d01e      	beq.n	800147a <loopback_tcps+0x292>
			return ret;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	e01e      	b.n	800147e <loopback_tcps+0x296>
		break;
	case SOCK_CLOSED:
		UART_Printf("%d:LBTStart\r\n", sn);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4619      	mov	r1, r3
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <loopback_tcps+0x2cc>)
 8001446:	f7ff fe1b 	bl	8001080 <UART_Printf>
		if ((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn)
 800144a:	88ba      	ldrh	r2, [r7, #4]
 800144c:	79f8      	ldrb	r0, [r7, #7]
 800144e:	2300      	movs	r3, #0
 8001450:	2101      	movs	r1, #1
 8001452:	f000 faf7 	bl	8001a44 <socket>
 8001456:	4603      	mov	r3, r0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <loopback_tcps+0x27e>
			return ret;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	e00b      	b.n	800147e <loopback_tcps+0x296>
		UART_Printf("%d:Opened\r\n", sn);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4619      	mov	r1, r3
 800146a:	4813      	ldr	r0, [pc, #76]	; (80014b8 <loopback_tcps+0x2d0>)
 800146c:	f7ff fe08 	bl	8001080 <UART_Printf>
		break;
 8001470:	e004      	b.n	800147c <loopback_tcps+0x294>
	default:
		break;
 8001472:	bf00      	nop
 8001474:	e002      	b.n	800147c <loopback_tcps+0x294>
		break;
 8001476:	bf00      	nop
 8001478:	e000      	b.n	800147c <loopback_tcps+0x294>
		break;
 800147a:	bf00      	nop
	}
	return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	0800c7dc 	.word	0x0800c7dc
 800148c:	0800c7ec 	.word	0x0800c7ec
 8001490:	0800c7f4 	.word	0x0800c7f4
 8001494:	200002bc 	.word	0x200002bc
 8001498:	0800c7fc 	.word	0x0800c7fc
 800149c:	0800c800 	.word	0x0800c800
 80014a0:	200002b8 	.word	0x200002b8
 80014a4:	0800d9f8 	.word	0x0800d9f8
 80014a8:	0800c808 	.word	0x0800c808
 80014ac:	0800c818 	.word	0x0800c818
 80014b0:	0800c824 	.word	0x0800c824
 80014b4:	0800c83c 	.word	0x0800c83c
 80014b8:	0800c84c 	.word	0x0800c84c

080014bc <USART1_Send>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */


void USART1_Send (char chr){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & USART_SR_TC));
 80014c6:	bf00      	nop
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <USART1_Send+0x2c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f9      	beq.n	80014c8 <USART1_Send+0xc>
	USART1->DR = chr;
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <USART1_Send+0x2c>)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	6053      	str	r3, [r2, #4]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40011000 	.word	0x40011000

080014ec <USART1_Send_String>:

void USART1_Send_String (char* str){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
	while(str[i])
 80014f8:	e009      	b.n	800150e <USART1_Send_String+0x22>
	USART1_Send (str[i++]);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	73fa      	strb	r2, [r7, #15]
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ffd7 	bl	80014bc <USART1_Send>
	while(str[i])
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ef      	bne.n	80014fa <USART1_Send_String+0xe>
}
 800151a:	bf00      	nop
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <ReadFromEEPROM>:

     HAL_FLASH_Lock();
}

uint32_t ReadFromEEPROM (uint32_t address)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return (*(__IO uint32_t *)address);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f002 f969 	bl	8003818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f8bf 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 f9f7 	bl	800193c <MX_GPIO_Init>
  MX_TIM10_Init();
 800154e:	f000 f95f 	bl	8001810 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8001552:	f009 ff05 	bl	800b360 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001556:	f000 f925 	bl	80017a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800155a:	f000 f98f 	bl	800187c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableIT_UPDATE(TIM10);
 800155e:	4848      	ldr	r0, [pc, #288]	; (8001680 <main+0x144>)
 8001560:	f7ff f8bd 	bl	80006de <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM10);
 8001564:	4846      	ldr	r0, [pc, #280]	; (8001680 <main+0x144>)
 8001566:	f7ff f89a 	bl	800069e <LL_TIM_EnableCounter>
	LL_USART_Enable(USART1);
 800156a:	4846      	ldr	r0, [pc, #280]	; (8001684 <main+0x148>)
 800156c:	f7ff f8c7 	bl	80006fe <LL_USART_Enable>
	LL_USART_EnableIT_RXNE(USART1);
 8001570:	4844      	ldr	r0, [pc, #272]	; (8001684 <main+0x148>)
 8001572:	f7ff f8ea 	bl	800074a <LL_USART_EnableIT_RXNE>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2108      	movs	r1, #8
 800157a:	4843      	ldr	r0, [pc, #268]	; (8001688 <main+0x14c>)
 800157c:	f002 fc3a 	bl	8003df4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f002 f98b 	bl	800389c <HAL_Delay>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2108      	movs	r1, #8
 800158a:	483f      	ldr	r0, [pc, #252]	; (8001688 <main+0x14c>)
 800158c:	f002 fc32 	bl	8003df4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001594:	f002 f982 	bl	800389c <HAL_Delay>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001598:	493c      	ldr	r1, [pc, #240]	; (800168c <main+0x150>)
 800159a:	483d      	ldr	r0, [pc, #244]	; (8001690 <main+0x154>)
 800159c:	f001 fe90 	bl	80032c0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80015a0:	493c      	ldr	r1, [pc, #240]	; (8001694 <main+0x158>)
 80015a2:	483d      	ldr	r0, [pc, #244]	; (8001698 <main+0x15c>)
 80015a4:	f001 feb2 	bl	800330c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80015a8:	493c      	ldr	r1, [pc, #240]	; (800169c <main+0x160>)
 80015aa:	483d      	ldr	r0, [pc, #244]	; (80016a0 <main+0x164>)
 80015ac:	f001 feda 	bl	8003364 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 80015b0:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <main+0x168>)
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ba:	e883 0003 	stmia.w	r3, {r0, r1}

	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80015be:	f107 0208 	add.w	r2, r7, #8
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 ff81 	bl	80034d0 <wizchip_init>
	gWIZNETINFO.gw[1] = ReadFromEEPROM(EEPROM_ADRESS_START+20);
	gWIZNETINFO.gw[2] = ReadFromEEPROM(EEPROM_ADRESS_START+24);
	gWIZNETINFO.gw[3] = ReadFromEEPROM(EEPROM_ADRESS_START+28);*/


	wizchip_setnetinfo(&gWIZNETINFO);
 80015ce:	4836      	ldr	r0, [pc, #216]	; (80016a8 <main+0x16c>)
 80015d0:	f002 f80a 	bl	80035e8 <wizchip_setnetinfo>

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80015d4:	4934      	ldr	r1, [pc, #208]	; (80016a8 <main+0x16c>)
 80015d6:	2000      	movs	r0, #0
 80015d8:	f001 fef0 	bl	80033bc <ctlnetwork>
	HAL_Delay(1000);
 80015dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e0:	f002 f95c 	bl	800389c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 80015e4:	2300      	movs	r3, #0
 80015e6:	2250      	movs	r2, #80	; 0x50
 80015e8:	2101      	movs	r1, #1
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fa2a 	bl	8001a44 <socket>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <main+0x170>)
 80015f6:	701a      	strb	r2, [r3, #0]
		/*if (stat != HTTP_SOCKET)
			UART_Printf("socket() failed, code = %d\r\n", stat);
		else
			UART_Printf("Socket created, connecting...\r\n");*/
		stat = listen(HTTP_SOCKET);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 fba5 	bl	8001d48 <listen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <main+0x170>)
 8001604:	701a      	strb	r2, [r3, #0]
		/*if (stat != SOCK_OK)
			UART_Printf("listen() failed, code = %d\r\n", stat);
		else
			UART_Printf("listen() OK\r\n");*/
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 8001606:	e019      	b.n	800163c <main+0x100>
			HAL_Delay(5);
 8001608:	2005      	movs	r0, #5
 800160a:	f002 f947 	bl	800389c <HAL_Delay>
			if (flag_usb == 1) {
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <main+0x174>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d109      	bne.n	800162a <main+0xee>
				flag_usb = 0;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <main+0x174>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
				strcpy(post_url,(char *) str_rx2);
 800161c:	4925      	ldr	r1, [pc, #148]	; (80016b4 <main+0x178>)
 800161e:	4826      	ldr	r0, [pc, #152]	; (80016b8 <main+0x17c>)
 8001620:	f00a fc6e 	bl	800bf00 <strcpy>
				Set_outputs(str_rx2);
 8001624:	4823      	ldr	r0, [pc, #140]	; (80016b4 <main+0x178>)
 8001626:	f7ff f955 	bl	80008d4 <Set_outputs>
			}
			if (flag_get_ip == 1){
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <main+0x180>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d104      	bne.n	800163c <main+0x100>
				flag_get_ip = 0;
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <main+0x180>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
				send_ip_to_uart();
 8001638:	f7ff f8f8 	bl	800082c <send_ip_to_uart>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 800163c:	f44f 7042 	mov.w	r0, #776	; 0x308
 8001640:	f001 fb32 	bl	8002ca8 <WIZCHIP_READ>
 8001644:	4603      	mov	r3, r0
 8001646:	2b14      	cmp	r3, #20
 8001648:	d0de      	beq.n	8001608 <main+0xcc>
		}
		/*UART_Printf("Input connection\r\n");
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
			UART_Printf("Error socket status\r\n");*/
		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	461a      	mov	r2, r3
 800164e:	2104      	movs	r1, #4
 8001650:	2000      	movs	r0, #0
 8001652:	f000 fdf9 	bl	8002248 <getsockopt>
		UART_Printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 8001656:	793b      	ldrb	r3, [r7, #4]
 8001658:	4619      	mov	r1, r3
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	461a      	mov	r2, r3
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	4618      	mov	r0, r3
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4603      	mov	r3, r0
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <main+0x184>)
 800166a:	f7ff fd09 	bl	8001080 <UART_Printf>

		loopback_tcps(HTTP_SOCKET, gDATABUF, 80);
 800166e:	2250      	movs	r2, #80	; 0x50
 8001670:	4914      	ldr	r1, [pc, #80]	; (80016c4 <main+0x188>)
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fdb8 	bl	80011e8 <loopback_tcps>

		close(HTTP_SOCKET);
 8001678:	2000      	movs	r0, #0
 800167a:	f000 faf7 	bl	8001c6c <close>
	while (1) {
 800167e:	e7b1      	b.n	80015e4 <main+0xa8>
 8001680:	40014400 	.word	0x40014400
 8001684:	40011000 	.word	0x40011000
 8001688:	40020000 	.word	0x40020000
 800168c:	08001149 	.word	0x08001149
 8001690:	08001131 	.word	0x08001131
 8001694:	080011cb 	.word	0x080011cb
 8001698:	080011b1 	.word	0x080011b1
 800169c:	08001189 	.word	0x08001189
 80016a0:	08001161 	.word	0x08001161
 80016a4:	0800c86c 	.word	0x0800c86c
 80016a8:	20000000 	.word	0x20000000
 80016ac:	200022e4 	.word	0x200022e4
 80016b0:	200002d5 	.word	0x200002d5
 80016b4:	2000028c 	.word	0x2000028c
 80016b8:	200002bc 	.word	0x200002bc
 80016bc:	200002de 	.word	0x200002de
 80016c0:	0800c858 	.word	0x0800c858
 80016c4:	200002e0 	.word	0x200002e0

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	; 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	; 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00a fbbc 	bl	800be54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <SystemClock_Config+0xd4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <SystemClock_Config+0xd4>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <SystemClock_Config+0xd4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <SystemClock_Config+0xd8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <SystemClock_Config+0xd8>)
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <SystemClock_Config+0xd8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001728:	2301      	movs	r3, #1
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800173c:	2319      	movs	r3, #25
 800173e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001746:	2304      	movs	r3, #4
 8001748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800174a:	2307      	movs	r3, #7
 800174c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fde4 	bl	8005320 <HAL_RCC_OscConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800175e:	f000 f96b 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001766:	2302      	movs	r3, #2
 8001768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	2102      	movs	r1, #2
 800177e:	4618      	mov	r0, r3
 8001780:	f004 f846 	bl	8005810 <HAL_RCC_ClockConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800178a:	f000 f955 	bl	8001a38 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800178e:	f004 f925 	bl	80059dc <HAL_RCC_EnableCSS>
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_SPI1_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <MX_SPI1_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_SPI1_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_SPI1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_SPI1_Init+0x64>)
 80017d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SPI1_Init+0x64>)
 80017d8:	2208      	movs	r2, #8
 80017da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SPI1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SPI1_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_SPI1_Init+0x64>)
 80017f6:	f004 fa30 	bl	8005c5a <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001800:	f000 f91a 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200022e8 	.word	0x200022e8
 800180c:	40013000 	.word	0x40013000

08001810 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 8001824:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001828:	f7fe ffe8 	bl	80007fc <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800182c:	f7fe feae 	bl	800058c <__NVIC_GetPriorityGrouping>
 8001830:	4603      	mov	r3, r0
 8001832:	2200      	movs	r2, #0
 8001834:	210f      	movs	r1, #15
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fefe 	bl	8000638 <NVIC_EncodePriority>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	2019      	movs	r0, #25
 8001842:	f7fe fecf 	bl	80005e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001846:	2019      	movs	r0, #25
 8001848:	f7fe feae 	bl	80005a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 800184c:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8001850:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 8001856:	f240 13f3 	movw	r3, #499	; 0x1f3
 800185a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_TIM10_Init+0x68>)
 8001866:	f005 fe1f 	bl	80074a8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 800186a:	4803      	ldr	r0, [pc, #12]	; (8001878 <MX_TIM10_Init+0x68>)
 800186c:	f7fe ff27 	bl	80006be <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40014400 	.word	0x40014400

0800187c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08e      	sub	sp, #56	; 0x38
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80018a6:	2010      	movs	r0, #16
 80018a8:	f7fe ffa8 	bl	80007fc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7fe ff8d 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80018b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018b8:	2302      	movs	r3, #2
 80018ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80018c8:	2307      	movs	r3, #7
 80018ca:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4818      	ldr	r0, [pc, #96]	; (8001934 <MX_USART1_UART_Init+0xb8>)
 80018d2:	f005 fc02 	bl	80070da <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018d6:	f7fe fe59 	bl	800058c <__NVIC_GetPriorityGrouping>
 80018da:	4603      	mov	r3, r0
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fea9 	bl	8000638 <NVIC_EncodePriority>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4619      	mov	r1, r3
 80018ea:	2025      	movs	r0, #37	; 0x25
 80018ec:	f7fe fe7a 	bl	80005e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80018f0:	2025      	movs	r0, #37	; 0x25
 80018f2:	f7fe fe59 	bl	80005a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80018f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018fa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001908:	230c      	movs	r3, #12
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_USART1_UART_Init+0xbc>)
 800191c:	f006 f8a6 	bl	8007a6c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART1_UART_Init+0xbc>)
 8001922:	f7fe fefc 	bl	800071e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_USART1_UART_Init+0xbc>)
 8001928:	f7fe fee9 	bl	80006fe <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3738      	adds	r7, #56	; 0x38
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40020000 	.word	0x40020000
 8001938:	40011000 	.word	0x40011000

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001952:	2004      	movs	r0, #4
 8001954:	f7fe ff3a 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001958:	2080      	movs	r0, #128	; 0x80
 800195a:	f7fe ff37 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800195e:	2001      	movs	r0, #1
 8001960:	f7fe ff34 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001964:	2002      	movs	r0, #2
 8001966:	f7fe ff31 	bl	80007cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 800196a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196e:	4826      	ldr	r0, [pc, #152]	; (8001a08 <MX_GPIO_Init+0xcc>)
 8001970:	f7fe ff1c 	bl	80007ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin);
 8001974:	f248 0118 	movw	r1, #32792	; 0x8018
 8001978:	4824      	ldr	r0, [pc, #144]	; (8001a0c <MX_GPIO_Init+0xd0>)
 800197a:	f7fe ff17 	bl	80007ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 800197e:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001982:	4823      	ldr	r0, [pc, #140]	; (8001a10 <MX_GPIO_Init+0xd4>)
 8001984:	f7fe ff12 	bl	80007ac <LL_GPIO_ResetOutputPin>
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8001988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800198e:	2301      	movs	r3, #1
 8001990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_GPIO_Init+0xcc>)
 80019a4:	f005 fb99 	bl	80070da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_Pin;
 80019a8:	2301      	movs	r3, #1
 80019aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019ba:	f005 fb8e 	bl	80070da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin;
 80019be:	f248 0318 	movw	r3, #32792	; 0x8018
 80019c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019c4:	2301      	movs	r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_GPIO_Init+0xd0>)
 80019da:	f005 fb7e 	bl	80070da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 80019de:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80019e2:	603b      	str	r3, [r7, #0]
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019e4:	2301      	movs	r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	463b      	mov	r3, r7
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_GPIO_Init+0xd4>)
 80019fa:	f005 fb6e 	bl	80070da <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020400 	.word	0x40020400

08001a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a26:	f001 ff19 	bl	800385c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40010000 	.word	0x40010000

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	4603      	mov	r3, r0
 8001a58:	71bb      	strb	r3, [r7, #6]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d902      	bls.n	8001a6e <socket+0x2a>
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	e0f0      	b.n	8001c50 <socket+0x20c>
	switch(protocol)
 8001a6e:	79bb      	ldrb	r3, [r7, #6]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d005      	beq.n	8001a80 <socket+0x3c>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dd11      	ble.n	8001a9c <socket+0x58>
 8001a78:	3b02      	subs	r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d80e      	bhi.n	8001a9c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001a7e:	e011      	b.n	8001aa4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2204      	movs	r2, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a8c:	f001 f9a6 	bl	8002ddc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <socket+0x5e>
 8001a96:	f06f 0302 	mvn.w	r3, #2
 8001a9a:	e0d9      	b.n	8001c50 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001a9c:	f06f 0304 	mvn.w	r3, #4
 8001aa0:	e0d6      	b.n	8001c50 <socket+0x20c>
	    break;
 8001aa2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <socket+0x70>
 8001aae:	f06f 0305 	mvn.w	r3, #5
 8001ab2:	e0cd      	b.n	8001c50 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d028      	beq.n	8001b0c <socket+0xc8>
	{
   	switch(protocol)
 8001aba:	79bb      	ldrb	r3, [r7, #6]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d002      	beq.n	8001ac6 <socket+0x82>
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d008      	beq.n	8001ad6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001ac4:	e022      	b.n	8001b0c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d11a      	bne.n	8001b06 <socket+0xc2>
 8001ad0:	f06f 0305 	mvn.w	r3, #5
 8001ad4:	e0bc      	b.n	8001c50 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db02      	blt.n	8001aee <socket+0xaa>
 8001ae8:	f06f 0305 	mvn.w	r3, #5
 8001aec:	e0b0      	b.n	8001c50 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db04      	blt.n	8001b0a <socket+0xc6>
 8001b00:	f06f 0305 	mvn.w	r3, #5
 8001b04:	e0a4      	b.n	8001c50 <socket+0x20c>
   	      break;
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <socket+0xc8>
   	      break;
 8001b0a:	bf00      	nop
   	}
   }
	close(sn);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f8ac 	bl	8001c6c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	3301      	adds	r3, #1
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b22:	f023 030f 	bic.w	r3, r3, #15
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	f001 f904 	bl	8002d40 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d110      	bne.n	8001b60 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <socket+0x214>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	b291      	uxth	r1, r2
 8001b46:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <socket+0x214>)
 8001b48:	8011      	strh	r1, [r2, #0]
 8001b4a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <socket+0x214>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d103      	bne.n	8001b60 <socket+0x11c>
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <socket+0x214>)
 8001b5a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001b5e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	3301      	adds	r3, #1
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f001 f8e1 	bl	8002d40 <WIZCHIP_WRITE>
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	3301      	adds	r3, #1
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	88bb      	ldrh	r3, [r7, #4]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f001 f8d4 	bl	8002d40 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 f8ca 	bl	8002d40 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001bac:	bf00      	nop
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 f874 	bl	8002ca8 <WIZCHIP_READ>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f3      	bne.n	8001bae <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <socket+0x218>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <socket+0x218>)
 8001be2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <socket+0x218>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <socket+0x218>)
 8001c00:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2201      	movs	r2, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <socket+0x21c>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4013      	ands	r3, r2
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <socket+0x21c>)
 8001c1e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <socket+0x220>)
 8001c24:	2100      	movs	r1, #0
 8001c26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <socket+0x224>)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001c32:	bf00      	nop
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	3301      	adds	r3, #1
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 f831 	bl	8002ca8 <WIZCHIP_READ>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f3      	beq.n	8001c34 <socket+0x1f0>
   return (int8_t)sn;
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	200000f6 	.word	0x200000f6
 8001c5c:	20002340 	.word	0x20002340
 8001c60:	20002342 	.word	0x20002342
 8001c64:	20002344 	.word	0x20002344
 8001c68:	20002354 	.word	0x20002354

08001c6c <close>:

int8_t close(uint8_t sn)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d902      	bls.n	8001c82 <close+0x16>
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e055      	b.n	8001d2e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3301      	adds	r3, #1
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c8e:	2110      	movs	r1, #16
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 f855 	bl	8002d40 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001c96:	bf00      	nop
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 ffff 	bl	8002ca8 <WIZCHIP_READ>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f3      	bne.n	8001c98 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cbc:	211f      	movs	r1, #31
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 f83e 	bl	8002d40 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <close+0xcc>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <close+0xcc>)
 8001ce0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <close+0xd0>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <close+0xd0>)
 8001cfe:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <close+0xd4>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <close+0xd8>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001d12:	bf00      	nop
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	3301      	adds	r3, #1
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 ffc1 	bl	8002ca8 <WIZCHIP_READ>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f3      	bne.n	8001d14 <close+0xa8>
	return SOCK_OK;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20002340 	.word	0x20002340
 8001d3c:	20002342 	.word	0x20002342
 8001d40:	20002344 	.word	0x20002344
 8001d44:	20002354 	.word	0x20002354

08001d48 <listen>:

int8_t listen(uint8_t sn)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d902      	bls.n	8001d5e <listen+0x16>
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e049      	b.n	8001df2 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	3301      	adds	r3, #1
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 ff9e 	bl	8002ca8 <WIZCHIP_READ>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d002      	beq.n	8001d7c <listen+0x34>
 8001d76:	f06f 0304 	mvn.w	r3, #4
 8001d7a:	e03a      	b.n	8001df2 <listen+0xaa>
	CHECK_SOCKINIT();
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	3301      	adds	r3, #1
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 ff8d 	bl	8002ca8 <WIZCHIP_READ>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b13      	cmp	r3, #19
 8001d92:	d002      	beq.n	8001d9a <listen+0x52>
 8001d94:	f06f 0302 	mvn.w	r3, #2
 8001d98:	e02b      	b.n	8001df2 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3301      	adds	r3, #1
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 ffc9 	bl	8002d40 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001dae:	bf00      	nop
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	3301      	adds	r3, #1
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 ff73 	bl	8002ca8 <WIZCHIP_READ>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f3      	bne.n	8001db0 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001dc8:	e006      	b.n	8001dd8 <listen+0x90>
   {
         close(sn);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff4d 	bl	8001c6c <close>
         return SOCKERR_SOCKCLOSED;
 8001dd2:	f06f 0303 	mvn.w	r3, #3
 8001dd6:	e00c      	b.n	8001df2 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	3301      	adds	r3, #1
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 ff5f 	bl	8002ca8 <WIZCHIP_READ>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b14      	cmp	r3, #20
 8001dee:	d1ec      	bne.n	8001dca <listen+0x82>
   }
   return SOCK_OK;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d902      	bls.n	8001e12 <disconnect+0x16>
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	e062      	b.n	8001ed8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	3301      	adds	r3, #1
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 ff44 	bl	8002ca8 <WIZCHIP_READ>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d002      	beq.n	8001e30 <disconnect+0x34>
 8001e2a:	f06f 0304 	mvn.w	r3, #4
 8001e2e:	e053      	b.n	8001ed8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3301      	adds	r3, #1
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff7e 	bl	8002d40 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001e44:	bf00      	nop
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 ff28 	bl	8002ca8 <WIZCHIP_READ>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f3      	bne.n	8001e46 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2201      	movs	r2, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <disconnect+0xe4>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4013      	ands	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <disconnect+0xe4>)
 8001e7a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <disconnect+0xe8>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	fa42 f303 	asr.w	r3, r2, r3
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <disconnect+0xc2>
 8001e90:	2300      	movs	r3, #0
 8001e92:	e021      	b.n	8001ed8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	3301      	adds	r3, #1
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 ff01 	bl	8002ca8 <WIZCHIP_READ>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <disconnect+0xc2>
	   {
	      close(sn);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff feda 	bl	8001c6c <close>
	      return SOCKERR_TIMEOUT;
 8001eb8:	f06f 030c 	mvn.w	r3, #12
 8001ebc:	e00c      	b.n	8001ed8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 feec 	bl	8002ca8 <WIZCHIP_READ>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1de      	bne.n	8001e94 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20002342 	.word	0x20002342
 8001ee4:	20002340 	.word	0x20002340

08001ee8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d902      	bls.n	8001f0c <send+0x24>
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	e0de      	b.n	80020ca <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	3301      	adds	r3, #1
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fec7 	bl	8002ca8 <WIZCHIP_READ>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d002      	beq.n	8001f2a <send+0x42>
 8001f24:	f06f 0304 	mvn.w	r3, #4
 8001f28:	e0cf      	b.n	80020ca <send+0x1e2>
   CHECK_SOCKDATA();
 8001f2a:	88bb      	ldrh	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <send+0x4e>
 8001f30:	f06f 030d 	mvn.w	r3, #13
 8001f34:	e0c9      	b.n	80020ca <send+0x1e2>
   tmp = getSn_SR(sn);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 feb0 	bl	8002ca8 <WIZCHIP_READ>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b17      	cmp	r3, #23
 8001f50:	d005      	beq.n	8001f5e <send+0x76>
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	d002      	beq.n	8001f5e <send+0x76>
 8001f58:	f06f 0306 	mvn.w	r3, #6
 8001f5c:	e0b5      	b.n	80020ca <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <send+0x1ec>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	fa42 f303 	asr.w	r3, r2, r3
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d039      	beq.n	8001fe6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3301      	adds	r3, #1
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fe92 	bl	8002ca8 <WIZCHIP_READ>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d019      	beq.n	8001fca <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fecb 	bl	8002d40 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2201      	movs	r2, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <send+0x1ec>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <send+0x1ec>)
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	e00d      	b.n	8001fe6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <send+0xfa>
      {
         close(sn);
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fe48 	bl	8001c6c <close>
         return SOCKERR_TIMEOUT;
 8001fdc:	f06f 030c 	mvn.w	r3, #12
 8001fe0:	e073      	b.n	80020ca <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e071      	b.n	80020ca <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3301      	adds	r3, #1
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fe58 	bl	8002ca8 <WIZCHIP_READ>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002000:	88ba      	ldrh	r2, [r7, #4]
 8002002:	89bb      	ldrh	r3, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d901      	bls.n	800200c <send+0x124>
 8002008:	89bb      	ldrh	r3, [r7, #12]
 800200a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 ffa4 	bl	8002f5c <getSn_TX_FSR>
 8002014:	4603      	mov	r3, r0
 8002016:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	3301      	adds	r3, #1
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fe3f 	bl	8002ca8 <WIZCHIP_READ>
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b17      	cmp	r3, #23
 8002032:	d009      	beq.n	8002048 <send+0x160>
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b1c      	cmp	r3, #28
 8002038:	d006      	beq.n	8002048 <send+0x160>
      {
         close(sn);
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe15 	bl	8001c6c <close>
         return SOCKERR_SOCKSTATUS;
 8002042:	f06f 0306 	mvn.w	r3, #6
 8002046:	e040      	b.n	80020ca <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <send+0x1f0>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	fa42 f303 	asr.w	r3, r2, r3
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <send+0x180>
 800205c:	88ba      	ldrh	r2, [r7, #4]
 800205e:	89bb      	ldrh	r3, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d901      	bls.n	8002068 <send+0x180>
 8002064:	2300      	movs	r3, #0
 8002066:	e030      	b.n	80020ca <send+0x1e2>
      if(len <= freesize) break;
 8002068:	88ba      	ldrh	r2, [r7, #4]
 800206a:	89bb      	ldrh	r3, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d900      	bls.n	8002072 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002070:	e7cc      	b.n	800200c <send+0x124>
      if(len <= freesize) break;
 8002072:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002074:	88ba      	ldrh	r2, [r7, #4]
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f804 	bl	8003088 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3301      	adds	r3, #1
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800208c:	2120      	movs	r1, #32
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fe56 	bl	8002d40 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002094:	bf00      	nop
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	3301      	adds	r3, #1
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fe00 	bl	8002ca8 <WIZCHIP_READ>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f3      	bne.n	8002096 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2201      	movs	r2, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <send+0x1ec>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <send+0x1ec>)
 80020c6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80020c8:	88bb      	ldrh	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20002342 	.word	0x20002342
 80020d8:	20002340 	.word	0x20002340

080020dc <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	4613      	mov	r3, r2
 80020ea:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d902      	bls.n	8002100 <recv+0x24>
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e09c      	b.n	800223a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3301      	adds	r3, #1
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fdcd 	bl	8002ca8 <WIZCHIP_READ>
 800210e:	4603      	mov	r3, r0
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	2b01      	cmp	r3, #1
 8002116:	d002      	beq.n	800211e <recv+0x42>
 8002118:	f06f 0304 	mvn.w	r3, #4
 800211c:	e08d      	b.n	800223a <recv+0x15e>
   CHECK_SOCKDATA();
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <recv+0x4e>
 8002124:	f06f 030d 	mvn.w	r3, #13
 8002128:	e087      	b.n	800223a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	3301      	adds	r3, #1
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fdb6 	bl	8002ca8 <WIZCHIP_READ>
 800213c:	4603      	mov	r3, r0
 800213e:	b29b      	uxth	r3, r3
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002144:	89ba      	ldrh	r2, [r7, #12]
 8002146:	88bb      	ldrh	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d201      	bcs.n	8002150 <recv+0x74>
 800214c:	89bb      	ldrh	r3, [r7, #12]
 800214e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 ff4d 	bl	8002ff2 <getSn_RX_RSR>
 8002158:	4603      	mov	r3, r0
 800215a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3301      	adds	r3, #1
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fd9d 	bl	8002ca8 <WIZCHIP_READ>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b17      	cmp	r3, #23
 8002176:	d026      	beq.n	80021c6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b1c      	cmp	r3, #28
 800217c:	d11c      	bne.n	80021b8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800217e:	89bb      	ldrh	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d133      	bne.n	80021ec <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fee8 	bl	8002f5c <getSn_TX_FSR>
 800218c:	4603      	mov	r3, r0
 800218e:	461c      	mov	r4, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3301      	adds	r3, #1
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fd83 	bl	8002ca8 <WIZCHIP_READ>
 80021a2:	4603      	mov	r3, r0
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	429c      	cmp	r4, r3
 80021a8:	d10d      	bne.n	80021c6 <recv+0xea>
               {
                  close(sn);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fd5d 	bl	8001c6c <close>
                  return SOCKERR_SOCKSTATUS;
 80021b2:	f06f 0306 	mvn.w	r3, #6
 80021b6:	e040      	b.n	800223a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fd56 	bl	8001c6c <close>
               return SOCKERR_SOCKSTATUS;
 80021c0:	f06f 0306 	mvn.w	r3, #6
 80021c4:	e039      	b.n	800223a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <recv+0x168>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	fa42 f303 	asr.w	r3, r2, r3
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <recv+0x108>
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <recv+0x108>
 80021e0:	2300      	movs	r3, #0
 80021e2:	e02a      	b.n	800223a <recv+0x15e>
         if(recvsize != 0) break;
 80021e4:	89bb      	ldrh	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80021ea:	e7b1      	b.n	8002150 <recv+0x74>
               if(recvsize != 0) break;
 80021ec:	bf00      	nop
 80021ee:	e000      	b.n	80021f2 <recv+0x116>
         if(recvsize != 0) break;
 80021f0:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80021f2:	89ba      	ldrh	r2, [r7, #12]
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d201      	bcs.n	80021fe <recv+0x122>
 80021fa:	89bb      	ldrh	r3, [r7, #12]
 80021fc:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80021fe:	88ba      	ldrh	r2, [r7, #4]
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 ff9b 	bl	8003140 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	3301      	adds	r3, #1
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002216:	2140      	movs	r1, #64	; 0x40
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fd91 	bl	8002d40 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800221e:	bf00      	nop
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3301      	adds	r3, #1
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fd3b 	bl	8002ca8 <WIZCHIP_READ>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f3      	bne.n	8002220 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002238:	88bb      	ldrh	r3, [r7, #4]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bd90      	pop	{r4, r7, pc}
 8002242:	bf00      	nop
 8002244:	20002340 	.word	0x20002340

08002248 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	603a      	str	r2, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	460b      	mov	r3, r1
 8002256:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d902      	bls.n	8002264 <getsockopt+0x1c>
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	e101      	b.n	8002468 <getsockopt+0x220>
   switch(sotype)
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	f200 80fa 	bhi.w	8002460 <getsockopt+0x218>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <getsockopt+0x2c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080022c5 	.word	0x080022c5
 800227c:	080022e1 	.word	0x080022e1
 8002280:	080022fd 	.word	0x080022fd
 8002284:	08002337 	.word	0x08002337
 8002288:	0800234f 	.word	0x0800234f
 800228c:	08002461 	.word	0x08002461
 8002290:	08002389 	.word	0x08002389
 8002294:	080023c3 	.word	0x080023c3
 8002298:	080023d5 	.word	0x080023d5
 800229c:	080023e7 	.word	0x080023e7
 80022a0:	08002403 	.word	0x08002403
 80022a4:	0800243b 	.word	0x0800243b
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	3301      	adds	r3, #1
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fcf9 	bl	8002ca8 <WIZCHIP_READ>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f023 030f 	bic.w	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
         break;
 80022c2:	e0d0      	b.n	8002466 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3301      	adds	r3, #1
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fce9 	bl	8002ca8 <WIZCHIP_READ>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
         break;
 80022de:	e0c2      	b.n	8002466 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3301      	adds	r3, #1
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fcdb 	bl	8002ca8 <WIZCHIP_READ>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	701a      	strb	r2, [r3, #0]
         break;
 80022fa:	e0b4      	b.n	8002466 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	3301      	adds	r3, #1
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fccd 	bl	8002ca8 <WIZCHIP_READ>
 800230e:	4603      	mov	r3, r0
 8002310:	b29b      	uxth	r3, r3
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b29c      	uxth	r4, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3301      	adds	r3, #1
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fcc0 	bl	8002ca8 <WIZCHIP_READ>
 8002328:	4603      	mov	r3, r0
 800232a:	b29b      	uxth	r3, r3
 800232c:	4423      	add	r3, r4
 800232e:	b29a      	uxth	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	801a      	strh	r2, [r3, #0]
         break;
 8002334:	e097      	b.n	8002466 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3301      	adds	r3, #1
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002342:	2204      	movs	r2, #4
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fd48 	bl	8002ddc <WIZCHIP_READ_BUF>
         break;
 800234c:	e08b      	b.n	8002466 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3301      	adds	r3, #1
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fca4 	bl	8002ca8 <WIZCHIP_READ>
 8002360:	4603      	mov	r3, r0
 8002362:	b29b      	uxth	r3, r3
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b29c      	uxth	r4, r3
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3301      	adds	r3, #1
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fc97 	bl	8002ca8 <WIZCHIP_READ>
 800237a:	4603      	mov	r3, r0
 800237c:	b29b      	uxth	r3, r3
 800237e:	4423      	add	r3, r4
 8002380:	b29a      	uxth	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	801a      	strh	r2, [r3, #0]
         break;
 8002386:	e06e      	b.n	8002466 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	3301      	adds	r3, #1
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fc89 	bl	8002ca8 <WIZCHIP_READ>
 8002396:	4603      	mov	r3, r0
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	2b01      	cmp	r3, #1
 800239e:	d002      	beq.n	80023a6 <getsockopt+0x15e>
 80023a0:	f06f 0304 	mvn.w	r3, #4
 80023a4:	e060      	b.n	8002468 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	3301      	adds	r3, #1
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fc78 	bl	8002ca8 <WIZCHIP_READ>
 80023b8:	4603      	mov	r3, r0
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	801a      	strh	r2, [r3, #0]
         break;
 80023c0:	e051      	b.n	8002466 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fdc9 	bl	8002f5c <getSn_TX_FSR>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	801a      	strh	r2, [r3, #0]
         break;
 80023d2:	e048      	b.n	8002466 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fe0b 	bl	8002ff2 <getSn_RX_RSR>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	801a      	strh	r2, [r3, #0]
         break;
 80023e4:	e03f      	b.n	8002466 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3301      	adds	r3, #1
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fc58 	bl	8002ca8 <WIZCHIP_READ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
         break;
 8002400:	e031      	b.n	8002466 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3301      	adds	r3, #1
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fc4c 	bl	8002ca8 <WIZCHIP_READ>
 8002410:	4603      	mov	r3, r0
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fde8 	bl	8002ff2 <getSn_RX_RSR>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800242a:	e01c      	b.n	8002466 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <getsockopt+0x228>)
 8002430:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	801a      	strh	r2, [r3, #0]
         break;
 8002438:	e015      	b.n	8002466 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	3301      	adds	r3, #1
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fc30 	bl	8002ca8 <WIZCHIP_READ>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 800244e:	f06f 0304 	mvn.w	r3, #4
 8002452:	e009      	b.n	8002468 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <getsockopt+0x22c>)
 8002458:	5cd2      	ldrb	r2, [r2, r3]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	701a      	strb	r2, [r3, #0]
         break;
 800245e:	e002      	b.n	8002466 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8002460:	f06f 0301 	mvn.w	r3, #1
 8002464:	e000      	b.n	8002468 <getsockopt+0x220>
   }
   return SOCK_OK;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	20002344 	.word	0x20002344
 8002474:	20002354 	.word	0x20002354

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_MspInit+0x4c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_SPI_MspInit+0x94>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d133      	bne.n	8002552 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_SPI_MspInit+0x98>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_SPI_MspInit+0x98>)
 80024f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_SPI_MspInit+0x98>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_SPI_MspInit+0x98>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_SPI_MspInit+0x98>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_SPI_MspInit+0x98>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002522:	23e0      	movs	r3, #224	; 0xe0
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002532:	2305      	movs	r3, #5
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <HAL_SPI_MspInit+0x9c>)
 800253e:	f001 fad5 	bl	8003aec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2023      	movs	r0, #35	; 0x23
 8002548:	f001 fa84 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800254c:	2023      	movs	r0, #35	; 0x23
 800254e:	f001 fa9d 	bl	8003a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40013000 	.word	0x40013000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_InitTick+0xd0>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <HAL_InitTick+0xd0>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6453      	str	r3, [r2, #68]	; 0x44
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_InitTick+0xd0>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fb0e 	bl	8005bc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025a4:	f003 faf8 	bl	8005b98 <HAL_RCC_GetPCLK2Freq>
 80025a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_InitTick+0xd4>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9b      	lsrs	r3, r3, #18
 80025b4:	3b01      	subs	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_InitTick+0xd8>)
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_InitTick+0xdc>)
 80025bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_InitTick+0xd8>)
 80025c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_InitTick+0xd8>)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_InitTick+0xd8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_InitTick+0xd8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_InitTick+0xd8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025de:	4818      	ldr	r0, [pc, #96]	; (8002640 <HAL_InitTick+0xd8>)
 80025e0:	f004 f9f6 	bl	80069d0 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11b      	bne.n	800262a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025f2:	4813      	ldr	r0, [pc, #76]	; (8002640 <HAL_InitTick+0xd8>)
 80025f4:	f004 fa46 	bl	8006a84 <HAL_TIM_Base_Start_IT>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002602:	2b00      	cmp	r3, #0
 8002604:	d111      	bne.n	800262a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002606:	2019      	movs	r0, #25
 8002608:	f001 fa40 	bl	8003a8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	d808      	bhi.n	8002624 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002612:	2200      	movs	r2, #0
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	2019      	movs	r0, #25
 8002618:	f001 fa1c 	bl	8003a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_InitTick+0xe0>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e002      	b.n	800262a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800262a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800262e:	4618      	mov	r0, r3
 8002630:	3730      	adds	r7, #48	; 0x30
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	431bde83 	.word	0x431bde83
 8002640:	2000235c 	.word	0x2000235c
 8002644:	40010000 	.word	0x40010000
 8002648:	20000128 	.word	0x20000128

0800264c <LL_TIM_ClearFlag_UPDATE>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f06f 0201 	mvn.w	r2, #1
 800265a:	611a      	str	r2, [r3, #16]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4013      	ands	r3, r2
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43d9      	mvns	r1, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	400b      	ands	r3, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80026c4:	f003 faae 	bl	8005c24 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x8>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002722:	f7ff ffa1 	bl	8002668 <LL_TIM_IsActiveFlag_UPDATE>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <TIM1_UP_TIM10_IRQHandler+0x20>
			LL_TIM_ClearFlag_UPDATE(TIM10);
 800272c:	4806      	ldr	r0, [pc, #24]	; (8002748 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800272e:	f7ff ff8d 	bl	800264c <LL_TIM_ClearFlag_UPDATE>
			LL_GPIO_TogglePin(GPIOC, LED_Pin);
 8002732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <TIM1_UP_TIM10_IRQHandler+0x30>)
 8002738:	f7ff ffa9 	bl	800268e <LL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800273c:	4804      	ldr	r0, [pc, #16]	; (8002750 <TIM1_UP_TIM10_IRQHandler+0x34>)
 800273e:	f004 fa03 	bl	8006b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40014400 	.word	0x40014400
 800274c:	40020800 	.word	0x40020800
 8002750:	2000235c 	.word	0x2000235c

08002754 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <SPI1_IRQHandler+0x10>)
 800275a:	f003 fef7 	bl	800654c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200022e8 	.word	0x200022e8

08002768 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	char letter;
	static uint8_t i = 0;
	letter = USART1->DR;
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <USART1_IRQHandler+0x3c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	71fb      	strb	r3, [r7, #7]
	if (letter != '\r') {
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b0d      	cmp	r3, #13
 8002778:	d01a      	beq.n	80027b0 <USART1_IRQHandler+0x48>
		str_rx2[i] = letter;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <USART1_IRQHandler+0x40>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	4619      	mov	r1, r3
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <USART1_IRQHandler+0x44>)
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	5453      	strb	r3, [r2, r1]
		i++;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <USART1_IRQHandler+0x40>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <USART1_IRQHandler+0x40>)
 8002790:	701a      	strb	r2, [r3, #0]
		if (i == 24)
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <USART1_IRQHandler+0x40>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b18      	cmp	r3, #24
 8002798:	f040 8224 	bne.w	8002be4 <USART1_IRQHandler+0x47c>
			i = 0;
 800279c:	4b02      	ldr	r3, [pc, #8]	; (80027a8 <USART1_IRQHandler+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80027a2:	e21f      	b.n	8002be4 <USART1_IRQHandler+0x47c>
 80027a4:	40011000 	.word	0x40011000
 80027a8:	200023a4 	.word	0x200023a4
 80027ac:	2000028c 	.word	0x2000028c
		str_rx2[i] = '\r';
 80027b0:	4b9b      	ldr	r3, [pc, #620]	; (8002a20 <USART1_IRQHandler+0x2b8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b9b      	ldr	r3, [pc, #620]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027b8:	210d      	movs	r1, #13
 80027ba:	5499      	strb	r1, [r3, r2]
		i = 0;
 80027bc:	4b98      	ldr	r3, [pc, #608]	; (8002a20 <USART1_IRQHandler+0x2b8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
		flag_ok = 1;
 80027c2:	4b99      	ldr	r3, [pc, #612]	; (8002a28 <USART1_IRQHandler+0x2c0>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='G')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 80027c8:	4b96      	ldr	r3, [pc, #600]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b47      	cmp	r3, #71	; 0x47
 80027ce:	d10a      	bne.n	80027e6 <USART1_IRQHandler+0x7e>
 80027d0:	4b94      	ldr	r3, [pc, #592]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b45      	cmp	r3, #69	; 0x45
 80027d6:	d106      	bne.n	80027e6 <USART1_IRQHandler+0x7e>
 80027d8:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	2b54      	cmp	r3, #84	; 0x54
 80027de:	d102      	bne.n	80027e6 <USART1_IRQHandler+0x7e>
			flag_get_ip = 1;
 80027e0:	4b92      	ldr	r3, [pc, #584]	; (8002a2c <USART1_IRQHandler+0x2c4>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='A')&&(str_rx2[1]=='M')&&(str_rx2[2]=='1')){
 80027e6:	4b8f      	ldr	r3, [pc, #572]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b41      	cmp	r3, #65	; 0x41
 80027ec:	d10a      	bne.n	8002804 <USART1_IRQHandler+0x9c>
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b4d      	cmp	r3, #77	; 0x4d
 80027f4:	d106      	bne.n	8002804 <USART1_IRQHandler+0x9c>
 80027f6:	4b8b      	ldr	r3, [pc, #556]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80027f8:	789b      	ldrb	r3, [r3, #2]
 80027fa:	2b31      	cmp	r3, #49	; 0x31
 80027fc:	d102      	bne.n	8002804 <USART1_IRQHandler+0x9c>
			flag_usb = 1;
 80027fe:	4b8c      	ldr	r3, [pc, #560]	; (8002a30 <USART1_IRQHandler+0x2c8>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'I') && (str_rx2[1] == 'P')) {
 8002804:	4b87      	ldr	r3, [pc, #540]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b49      	cmp	r3, #73	; 0x49
 800280a:	f040 80e9 	bne.w	80029e0 <USART1_IRQHandler+0x278>
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	2b50      	cmp	r3, #80	; 0x50
 8002814:	f040 80e4 	bne.w	80029e0 <USART1_IRQHandler+0x278>
			if (str_rx2[2] == '1') {
 8002818:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800281a:	789b      	ldrb	r3, [r3, #2]
 800281c:	2b31      	cmp	r3, #49	; 0x31
 800281e:	d134      	bne.n	800288a <USART1_IRQHandler+0x122>
				if (str_rx2[3] != ';') {
 8002820:	4b80      	ldr	r3, [pc, #512]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002822:	78db      	ldrb	r3, [r3, #3]
 8002824:	2b3b      	cmp	r3, #59	; 0x3b
 8002826:	d00f      	beq.n	8002848 <USART1_IRQHandler+0xe0>
					ip1 = (str_rx2[3] - 48) * 100;
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	461a      	mov	r2, r3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4413      	add	r3, r2
 8002832:	461a      	mov	r2, r3
 8002834:	0091      	lsls	r1, r2, #2
 8002836:	461a      	mov	r2, r3
 8002838:	460b      	mov	r3, r1
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3340      	adds	r3, #64	; 0x40
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b7b      	ldr	r3, [pc, #492]	; (8002a34 <USART1_IRQHandler+0x2cc>)
 8002846:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	2b3b      	cmp	r3, #59	; 0x3b
 800284e:	d00e      	beq.n	800286e <USART1_IRQHandler+0x106>
					ip1 = ip1 + (str_rx2[4] - 48) * 10;
 8002850:	4b74      	ldr	r3, [pc, #464]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002852:	791b      	ldrb	r3, [r3, #4]
 8002854:	461a      	mov	r2, r3
 8002856:	0092      	lsls	r2, r2, #2
 8002858:	4413      	add	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b75      	ldr	r3, [pc, #468]	; (8002a34 <USART1_IRQHandler+0x2cc>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3320      	adds	r3, #32
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b72      	ldr	r3, [pc, #456]	; (8002a34 <USART1_IRQHandler+0x2cc>)
 800286c:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002870:	795b      	ldrb	r3, [r3, #5]
 8002872:	2b3b      	cmp	r3, #59	; 0x3b
 8002874:	d009      	beq.n	800288a <USART1_IRQHandler+0x122>
					ip1 = ip1 + (str_rx2[5] - 48);
 8002876:	4b6b      	ldr	r3, [pc, #428]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002878:	795a      	ldrb	r2, [r3, #5]
 800287a:	4b6e      	ldr	r3, [pc, #440]	; (8002a34 <USART1_IRQHandler+0x2cc>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3b30      	subs	r3, #48	; 0x30
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b6b      	ldr	r3, [pc, #428]	; (8002a34 <USART1_IRQHandler+0x2cc>)
 8002888:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 800288a:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800288c:	789b      	ldrb	r3, [r3, #2]
 800288e:	2b32      	cmp	r3, #50	; 0x32
 8002890:	d134      	bne.n	80028fc <USART1_IRQHandler+0x194>
				if (str_rx2[3] != ';') {
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002894:	78db      	ldrb	r3, [r3, #3]
 8002896:	2b3b      	cmp	r3, #59	; 0x3b
 8002898:	d00f      	beq.n	80028ba <USART1_IRQHandler+0x152>
					ip2 = (str_rx2[3] - 48) * 100;
 800289a:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800289c:	78db      	ldrb	r3, [r3, #3]
 800289e:	461a      	mov	r2, r3
 80028a0:	0092      	lsls	r2, r2, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	0091      	lsls	r1, r2, #2
 80028a8:	461a      	mov	r2, r3
 80028aa:	460b      	mov	r3, r1
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3340      	adds	r3, #64	; 0x40
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <USART1_IRQHandler+0x2d0>)
 80028b8:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	2b3b      	cmp	r3, #59	; 0x3b
 80028c0:	d00e      	beq.n	80028e0 <USART1_IRQHandler+0x178>
					ip2 = ip2 + (str_rx2[4] - 48) * 10;
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80028c4:	791b      	ldrb	r3, [r3, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <USART1_IRQHandler+0x2d0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3320      	adds	r3, #32
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <USART1_IRQHandler+0x2d0>)
 80028de:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80028e2:	795b      	ldrb	r3, [r3, #5]
 80028e4:	2b3b      	cmp	r3, #59	; 0x3b
 80028e6:	d009      	beq.n	80028fc <USART1_IRQHandler+0x194>
					ip2 = ip2 + (str_rx2[5] - 48);
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80028ea:	795a      	ldrb	r2, [r3, #5]
 80028ec:	4b52      	ldr	r3, [pc, #328]	; (8002a38 <USART1_IRQHandler+0x2d0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3b30      	subs	r3, #48	; 0x30
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <USART1_IRQHandler+0x2d0>)
 80028fa:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80028fe:	789b      	ldrb	r3, [r3, #2]
 8002900:	2b33      	cmp	r3, #51	; 0x33
 8002902:	d134      	bne.n	800296e <USART1_IRQHandler+0x206>
				if (str_rx2[3] != ';') {
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002906:	78db      	ldrb	r3, [r3, #3]
 8002908:	2b3b      	cmp	r3, #59	; 0x3b
 800290a:	d00f      	beq.n	800292c <USART1_IRQHandler+0x1c4>
					ip3 = (str_rx2[3] - 48) * 100;
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800290e:	78db      	ldrb	r3, [r3, #3]
 8002910:	461a      	mov	r2, r3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4413      	add	r3, r2
 8002916:	461a      	mov	r2, r3
 8002918:	0091      	lsls	r1, r2, #2
 800291a:	461a      	mov	r2, r3
 800291c:	460b      	mov	r3, r1
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3340      	adds	r3, #64	; 0x40
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <USART1_IRQHandler+0x2d4>)
 800292a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	2b3b      	cmp	r3, #59	; 0x3b
 8002932:	d00e      	beq.n	8002952 <USART1_IRQHandler+0x1ea>
					ip3 = ip3 + (str_rx2[4] - 48) * 10;
 8002934:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002936:	791b      	ldrb	r3, [r3, #4]
 8002938:	461a      	mov	r2, r3
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <USART1_IRQHandler+0x2d4>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3320      	adds	r3, #32
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <USART1_IRQHandler+0x2d4>)
 8002950:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002954:	795b      	ldrb	r3, [r3, #5]
 8002956:	2b3b      	cmp	r3, #59	; 0x3b
 8002958:	d009      	beq.n	800296e <USART1_IRQHandler+0x206>
					ip3 = ip3 + (str_rx2[5] - 48);
 800295a:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 800295c:	795a      	ldrb	r2, [r3, #5]
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <USART1_IRQHandler+0x2d4>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3b30      	subs	r3, #48	; 0x30
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <USART1_IRQHandler+0x2d4>)
 800296c:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002970:	789b      	ldrb	r3, [r3, #2]
 8002972:	2b34      	cmp	r3, #52	; 0x34
 8002974:	d134      	bne.n	80029e0 <USART1_IRQHandler+0x278>
				if (str_rx2[3] != ';') {
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	2b3b      	cmp	r3, #59	; 0x3b
 800297c:	d00f      	beq.n	800299e <USART1_IRQHandler+0x236>
					ip4 = (str_rx2[3] - 48) * 100;
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002980:	78db      	ldrb	r3, [r3, #3]
 8002982:	461a      	mov	r2, r3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4413      	add	r3, r2
 8002988:	461a      	mov	r2, r3
 800298a:	0091      	lsls	r1, r2, #2
 800298c:	461a      	mov	r2, r3
 800298e:	460b      	mov	r3, r1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3340      	adds	r3, #64	; 0x40
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <USART1_IRQHandler+0x2d8>)
 800299c:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029a0:	791b      	ldrb	r3, [r3, #4]
 80029a2:	2b3b      	cmp	r3, #59	; 0x3b
 80029a4:	d00e      	beq.n	80029c4 <USART1_IRQHandler+0x25c>
					ip4 = ip4 + (str_rx2[4] - 48) * 10;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <USART1_IRQHandler+0x2d8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3320      	adds	r3, #32
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <USART1_IRQHandler+0x2d8>)
 80029c2:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029c6:	795b      	ldrb	r3, [r3, #5]
 80029c8:	2b3b      	cmp	r3, #59	; 0x3b
 80029ca:	d009      	beq.n	80029e0 <USART1_IRQHandler+0x278>
					ip4 = ip4 + (str_rx2[5] - 48);
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029ce:	795a      	ldrb	r2, [r3, #5]
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <USART1_IRQHandler+0x2d8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3b30      	subs	r3, #48	; 0x30
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <USART1_IRQHandler+0x2d8>)
 80029de:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'G') && (str_rx2[1] == 'W')) {
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b47      	cmp	r3, #71	; 0x47
 80029e6:	f040 80fd 	bne.w	8002be4 <USART1_IRQHandler+0x47c>
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b57      	cmp	r3, #87	; 0x57
 80029f0:	f040 80f8 	bne.w	8002be4 <USART1_IRQHandler+0x47c>
			if (str_rx2[2] == '1') {
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	2b31      	cmp	r3, #49	; 0x31
 80029fa:	d148      	bne.n	8002a8e <USART1_IRQHandler+0x326>
				if (str_rx2[3] != ';') {
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 80029fe:	78db      	ldrb	r3, [r3, #3]
 8002a00:	2b3b      	cmp	r3, #59	; 0x3b
 8002a02:	d023      	beq.n	8002a4c <USART1_IRQHandler+0x2e4>
					gw1 = (str_rx2[3] - 48) * 100;
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <USART1_IRQHandler+0x2bc>)
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	0091      	lsls	r1, r2, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	460b      	mov	r3, r1
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e012      	b.n	8002a44 <USART1_IRQHandler+0x2dc>
 8002a1e:	bf00      	nop
 8002a20:	200023a4 	.word	0x200023a4
 8002a24:	2000028c 	.word	0x2000028c
 8002a28:	200002a5 	.word	0x200002a5
 8002a2c:	200002de 	.word	0x200002de
 8002a30:	200002d5 	.word	0x200002d5
 8002a34:	200002d6 	.word	0x200002d6
 8002a38:	200002d7 	.word	0x200002d7
 8002a3c:	200002d8 	.word	0x200002d8
 8002a40:	200002d9 	.word	0x200002d9
 8002a44:	3340      	adds	r3, #64	; 0x40
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <USART1_IRQHandler+0x488>)
 8002a4a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002a4c:	4b69      	ldr	r3, [pc, #420]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002a4e:	791b      	ldrb	r3, [r3, #4]
 8002a50:	2b3b      	cmp	r3, #59	; 0x3b
 8002a52:	d00e      	beq.n	8002a72 <USART1_IRQHandler+0x30a>
					gw1 = gw1 + (str_rx2[4] - 48) * 10;
 8002a54:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002a56:	791b      	ldrb	r3, [r3, #4]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <USART1_IRQHandler+0x488>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3320      	adds	r3, #32
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b60      	ldr	r3, [pc, #384]	; (8002bf0 <USART1_IRQHandler+0x488>)
 8002a70:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002a72:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002a74:	795b      	ldrb	r3, [r3, #5]
 8002a76:	2b3b      	cmp	r3, #59	; 0x3b
 8002a78:	d009      	beq.n	8002a8e <USART1_IRQHandler+0x326>
					gw1 = gw1 + (str_rx2[5] - 48);
 8002a7a:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002a7c:	795a      	ldrb	r2, [r3, #5]
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <USART1_IRQHandler+0x488>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3b30      	subs	r3, #48	; 0x30
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <USART1_IRQHandler+0x488>)
 8002a8c:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 8002a8e:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002a90:	789b      	ldrb	r3, [r3, #2]
 8002a92:	2b32      	cmp	r3, #50	; 0x32
 8002a94:	d134      	bne.n	8002b00 <USART1_IRQHandler+0x398>
				if (str_rx2[3] != ';') {
 8002a96:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	2b3b      	cmp	r3, #59	; 0x3b
 8002a9c:	d00f      	beq.n	8002abe <USART1_IRQHandler+0x356>
					gw2 = (str_rx2[3] - 48) * 100;
 8002a9e:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	0091      	lsls	r1, r2, #2
 8002aac:	461a      	mov	r2, r3
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3340      	adds	r3, #64	; 0x40
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <USART1_IRQHandler+0x490>)
 8002abc:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002abe:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002ac0:	791b      	ldrb	r3, [r3, #4]
 8002ac2:	2b3b      	cmp	r3, #59	; 0x3b
 8002ac4:	d00e      	beq.n	8002ae4 <USART1_IRQHandler+0x37c>
					gw2 = gw2 + (str_rx2[4] - 48) * 10;
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <USART1_IRQHandler+0x490>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3320      	adds	r3, #32
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b45      	ldr	r3, [pc, #276]	; (8002bf8 <USART1_IRQHandler+0x490>)
 8002ae2:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002ae6:	795b      	ldrb	r3, [r3, #5]
 8002ae8:	2b3b      	cmp	r3, #59	; 0x3b
 8002aea:	d009      	beq.n	8002b00 <USART1_IRQHandler+0x398>
					gw2 = gw2 + (str_rx2[5] - 48);
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002aee:	795a      	ldrb	r2, [r3, #5]
 8002af0:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <USART1_IRQHandler+0x490>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4413      	add	r3, r2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3b30      	subs	r3, #48	; 0x30
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <USART1_IRQHandler+0x490>)
 8002afe:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 8002b00:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	2b33      	cmp	r3, #51	; 0x33
 8002b06:	d134      	bne.n	8002b72 <USART1_IRQHandler+0x40a>
				if (str_rx2[3] != ';') {
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b0a:	78db      	ldrb	r3, [r3, #3]
 8002b0c:	2b3b      	cmp	r3, #59	; 0x3b
 8002b0e:	d00f      	beq.n	8002b30 <USART1_IRQHandler+0x3c8>
					gw3 = (str_rx2[3] - 48) * 100;
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b12:	78db      	ldrb	r3, [r3, #3]
 8002b14:	461a      	mov	r2, r3
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	0091      	lsls	r1, r2, #2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3340      	adds	r3, #64	; 0x40
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <USART1_IRQHandler+0x494>)
 8002b2e:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b32:	791b      	ldrb	r3, [r3, #4]
 8002b34:	2b3b      	cmp	r3, #59	; 0x3b
 8002b36:	d00e      	beq.n	8002b56 <USART1_IRQHandler+0x3ee>
					gw3 = gw3 + (str_rx2[4] - 48) * 10;
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <USART1_IRQHandler+0x494>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3320      	adds	r3, #32
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <USART1_IRQHandler+0x494>)
 8002b54:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b58:	795b      	ldrb	r3, [r3, #5]
 8002b5a:	2b3b      	cmp	r3, #59	; 0x3b
 8002b5c:	d009      	beq.n	8002b72 <USART1_IRQHandler+0x40a>
					gw3 = gw3 + (str_rx2[5] - 48);
 8002b5e:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b60:	795a      	ldrb	r2, [r3, #5]
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <USART1_IRQHandler+0x494>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3b30      	subs	r3, #48	; 0x30
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <USART1_IRQHandler+0x494>)
 8002b70:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b74:	789b      	ldrb	r3, [r3, #2]
 8002b76:	2b34      	cmp	r3, #52	; 0x34
 8002b78:	d134      	bne.n	8002be4 <USART1_IRQHandler+0x47c>
				if (str_rx2[3] != ';') {
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b7c:	78db      	ldrb	r3, [r3, #3]
 8002b7e:	2b3b      	cmp	r3, #59	; 0x3b
 8002b80:	d00f      	beq.n	8002ba2 <USART1_IRQHandler+0x43a>
					gw4 = (str_rx2[3] - 48) * 100;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	461a      	mov	r2, r3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	0091      	lsls	r1, r2, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	460b      	mov	r3, r1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <USART1_IRQHandler+0x498>)
 8002ba0:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002ba4:	791b      	ldrb	r3, [r3, #4]
 8002ba6:	2b3b      	cmp	r3, #59	; 0x3b
 8002ba8:	d00e      	beq.n	8002bc8 <USART1_IRQHandler+0x460>
					gw4 = gw4 + (str_rx2[4] - 48) * 10;
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <USART1_IRQHandler+0x498>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3320      	adds	r3, #32
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <USART1_IRQHandler+0x498>)
 8002bc6:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002bca:	795b      	ldrb	r3, [r3, #5]
 8002bcc:	2b3b      	cmp	r3, #59	; 0x3b
 8002bce:	d009      	beq.n	8002be4 <USART1_IRQHandler+0x47c>
					gw4 = gw4 + (str_rx2[5] - 48);
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <USART1_IRQHandler+0x48c>)
 8002bd2:	795a      	ldrb	r2, [r3, #5]
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <USART1_IRQHandler+0x498>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3b30      	subs	r3, #48	; 0x30
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <USART1_IRQHandler+0x498>)
 8002be2:	701a      	strb	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	200002da 	.word	0x200002da
 8002bf4:	2000028c 	.word	0x2000028c
 8002bf8:	200002db 	.word	0x200002db
 8002bfc:	200002dc 	.word	0x200002dc
 8002c00:	200002dd 	.word	0x200002dd

08002c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <OTG_FS_IRQHandler+0x10>)
 8002c0a:	f001 fa5c 	bl	80040c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20003098 	.word	0x20003098

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f009 f92e 	bl	800bea8 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20010000 	.word	0x20010000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	200023a8 	.word	0x200023a8
 8002c80:	20003910 	.word	0x20003910

08002c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <WIZCHIP_READ+0x24>
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d114      	bne.n	8002cf6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	0c12      	lsrs	r2, r2, #16
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	0a12      	lsrs	r2, r2, #8
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4798      	blx	r3
 8002cf4:	e011      	b.n	8002d1a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f107 020c 	add.w	r2, r7, #12
 8002d14:	2103      	movs	r1, #3
 8002d16:	4610      	mov	r0, r2
 8002d18:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4798      	blx	r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d2a:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <WIZCHIP_READ+0x94>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	4798      	blx	r3
   return ret;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200000fc 	.word	0x200000fc

08002d40 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002d4c:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d119      	bne.n	8002d9c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	0c12      	lsrs	r2, r2, #16
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4610      	mov	r0, r2
 8002d74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	0a12      	lsrs	r2, r2, #8
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	4610      	mov	r0, r2
 8002d82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4610      	mov	r0, r2
 8002d98:	4798      	blx	r3
 8002d9a:	e013      	b.n	8002dc4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	f107 020c 	add.w	r2, r7, #12
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002dca:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <WIZCHIP_WRITE+0x98>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	4798      	blx	r3
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200000fc 	.word	0x200000fc

08002ddc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <WIZCHIP_READ_BUF+0x2a>
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d126      	bne.n	8002e54 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	0c12      	lsrs	r2, r2, #16
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	4610      	mov	r0, r2
 8002e12:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002e14:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	0a12      	lsrs	r2, r2, #8
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	82fb      	strh	r3, [r7, #22]
 8002e32:	e00a      	b.n	8002e4a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	8afa      	ldrh	r2, [r7, #22]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	188c      	adds	r4, r1, r2
 8002e3e:	4798      	blx	r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002e44:	8afb      	ldrh	r3, [r7, #22]
 8002e46:	3301      	adds	r3, #1
 8002e48:	82fb      	strh	r3, [r7, #22]
 8002e4a:	8afa      	ldrh	r2, [r7, #22]
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3f0      	bcc.n	8002e34 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e52:	e017      	b.n	8002e84 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f107 0210 	add.w	r2, r7, #16
 8002e72:	2103      	movs	r1, #3
 8002e74:	4610      	mov	r0, r2
 8002e76:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	68b8      	ldr	r0, [r7, #8]
 8002e82:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002e8a:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <WIZCHIP_READ_BUF+0xbc>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	4798      	blx	r3
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	200000fc 	.word	0x200000fc

08002e9c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d126      	bne.n	8002f14 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	0c12      	lsrs	r2, r2, #16
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	0a12      	lsrs	r2, r2, #8
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	4610      	mov	r0, r2
 8002eec:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	82fb      	strh	r3, [r7, #22]
 8002ef2:	e00a      	b.n	8002f0a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	8afa      	ldrh	r2, [r7, #22]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	440a      	add	r2, r1
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	4610      	mov	r0, r2
 8002f02:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f04:	8afb      	ldrh	r3, [r7, #22]
 8002f06:	3301      	adds	r3, #1
 8002f08:	82fb      	strh	r3, [r7, #22]
 8002f0a:	8afa      	ldrh	r2, [r7, #22]
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3f0      	bcc.n	8002ef4 <WIZCHIP_WRITE_BUF+0x58>
 8002f12:	e017      	b.n	8002f44 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f107 0210 	add.w	r2, r7, #16
 8002f32:	2103      	movs	r1, #3
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	68b8      	ldr	r0, [r7, #8]
 8002f42:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002f4a:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <WIZCHIP_WRITE_BUF+0xbc>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	4798      	blx	r3
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200000fc 	.word	0x200000fc

08002f5c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	81fb      	strh	r3, [r7, #14]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3301      	adds	r3, #1
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe94 	bl	8002ca8 <WIZCHIP_READ>
 8002f80:	4603      	mov	r3, r0
 8002f82:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002f84:	89bb      	ldrh	r3, [r7, #12]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	b29c      	uxth	r4, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe86 	bl	8002ca8 <WIZCHIP_READ>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4423      	add	r3, r4
 8002fa2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002fa4:	89bb      	ldrh	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01a      	beq.n	8002fe0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fe76 	bl	8002ca8 <WIZCHIP_READ>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b29c      	uxth	r4, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3301      	adds	r3, #1
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe68 	bl	8002ca8 <WIZCHIP_READ>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4423      	add	r3, r4
 8002fde:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002fe0:	89fa      	ldrh	r2, [r7, #14]
 8002fe2:	89bb      	ldrh	r3, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1c2      	bne.n	8002f6e <getSn_TX_FSR+0x12>
   return val;
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd90      	pop	{r4, r7, pc}

08002ff2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002ff2:	b590      	push	{r4, r7, lr}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	81fb      	strh	r3, [r7, #14]
 8003000:	2300      	movs	r3, #0
 8003002:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	3301      	adds	r3, #1
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fe49 	bl	8002ca8 <WIZCHIP_READ>
 8003016:	4603      	mov	r3, r0
 8003018:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800301a:	89bb      	ldrh	r3, [r7, #12]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	b29c      	uxth	r4, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	3301      	adds	r3, #1
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fe3b 	bl	8002ca8 <WIZCHIP_READ>
 8003032:	4603      	mov	r3, r0
 8003034:	b29b      	uxth	r3, r3
 8003036:	4423      	add	r3, r4
 8003038:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800303a:	89bb      	ldrh	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01a      	beq.n	8003076 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3301      	adds	r3, #1
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe2b 	bl	8002ca8 <WIZCHIP_READ>
 8003052:	4603      	mov	r3, r0
 8003054:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	b29c      	uxth	r4, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	3301      	adds	r3, #1
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fe1d 	bl	8002ca8 <WIZCHIP_READ>
 800306e:	4603      	mov	r3, r0
 8003070:	b29b      	uxth	r3, r3
 8003072:	4423      	add	r3, r4
 8003074:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003076:	89fa      	ldrh	r2, [r7, #14]
 8003078:	89bb      	ldrh	r3, [r7, #12]
 800307a:	429a      	cmp	r2, r3
 800307c:	d1c2      	bne.n	8003004 <getSn_RX_RSR+0x12>
   return val;
 800307e:	89fb      	ldrh	r3, [r7, #14]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}

08003088 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
 8003094:	4613      	mov	r3, r2
 8003096:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d048      	beq.n	8003138 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3301      	adds	r3, #1
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fdf8 	bl	8002ca8 <WIZCHIP_READ>
 80030b8:	4603      	mov	r3, r0
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	b29c      	uxth	r4, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	3301      	adds	r3, #1
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fdeb 	bl	8002ca8 <WIZCHIP_READ>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4423      	add	r3, r4
 80030d8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80030da:	89fb      	ldrh	r3, [r7, #14]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	3202      	adds	r2, #2
 80030e4:	00d2      	lsls	r2, r2, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80030ea:	88bb      	ldrh	r3, [r7, #4]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	68b8      	ldr	r0, [r7, #8]
 80030f2:	f7ff fed3 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80030f6:	89fa      	ldrh	r2, [r7, #14]
 80030f8:	88bb      	ldrh	r3, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	3301      	adds	r3, #1
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800310a:	461a      	mov	r2, r3
 800310c:	89fb      	ldrh	r3, [r7, #14]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	b29b      	uxth	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7ff fe12 	bl	8002d40 <WIZCHIP_WRITE>
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	3301      	adds	r3, #1
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003128:	461a      	mov	r2, r3
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7ff fe05 	bl	8002d40 <WIZCHIP_WRITE>
 8003136:	e000      	b.n	800313a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003138:	bf00      	nop
}
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
 800314c:	4613      	mov	r3, r2
 800314e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003158:	88bb      	ldrh	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d048      	beq.n	80031f0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3301      	adds	r3, #1
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fd9c 	bl	8002ca8 <WIZCHIP_READ>
 8003170:	4603      	mov	r3, r0
 8003172:	b29b      	uxth	r3, r3
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	b29c      	uxth	r4, r3
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	3301      	adds	r3, #1
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fd8f 	bl	8002ca8 <WIZCHIP_READ>
 800318a:	4603      	mov	r3, r0
 800318c:	b29b      	uxth	r3, r3
 800318e:	4423      	add	r3, r4
 8003190:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	3203      	adds	r2, #3
 800319c:	00d2      	lsls	r2, r2, #3
 800319e:	4413      	add	r3, r2
 80031a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80031a2:	88bb      	ldrh	r3, [r7, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	68b8      	ldr	r0, [r7, #8]
 80031aa:	f7ff fe17 	bl	8002ddc <WIZCHIP_READ_BUF>
   ptr += len;
 80031ae:	89fa      	ldrh	r2, [r7, #14]
 80031b0:	88bb      	ldrh	r3, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	3301      	adds	r3, #1
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80031c2:	461a      	mov	r2, r3
 80031c4:	89fb      	ldrh	r3, [r7, #14]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7ff fdb6 	bl	8002d40 <WIZCHIP_WRITE>
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	3301      	adds	r3, #1
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80031e0:	461a      	mov	r2, r3
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7ff fda9 	bl	8002d40 <WIZCHIP_WRITE>
 80031ee:	e000      	b.n	80031f2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80031f0:	bf00      	nop
}
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}

080031f8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
 800326c:	2300      	movs	r3, #0
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	807b      	strh	r3, [r7, #2]
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <reg_wizchip_cs_cbfunc+0x16>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <reg_wizchip_cs_cbfunc+0x40>)
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <reg_wizchip_cs_cbfunc+0x44>)
 80032da:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <reg_wizchip_cs_cbfunc+0x40>)
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <reg_wizchip_cs_cbfunc+0x48>)
 80032e0:	619a      	str	r2, [r3, #24]
 80032e2:	e006      	b.n	80032f2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80032e4:	4a06      	ldr	r2, [pc, #24]	; (8003300 <reg_wizchip_cs_cbfunc+0x40>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80032ea:	4a05      	ldr	r2, [pc, #20]	; (8003300 <reg_wizchip_cs_cbfunc+0x40>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6193      	str	r3, [r2, #24]
   }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	200000fc 	.word	0x200000fc
 8003304:	08003215 	.word	0x08003215
 8003308:	08003223 	.word	0x08003223

0800330c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003316:	bf00      	nop
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <reg_wizchip_spi_cbfunc+0x4c>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f9      	beq.n	8003318 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <reg_wizchip_spi_cbfunc+0x24>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <reg_wizchip_spi_cbfunc+0x4c>)
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <reg_wizchip_spi_cbfunc+0x50>)
 8003334:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <reg_wizchip_spi_cbfunc+0x4c>)
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <reg_wizchip_spi_cbfunc+0x54>)
 800333a:	621a      	str	r2, [r3, #32]
 800333c:	e006      	b.n	800334c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800333e:	4a06      	ldr	r2, [pc, #24]	; (8003358 <reg_wizchip_spi_cbfunc+0x4c>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <reg_wizchip_spi_cbfunc+0x4c>)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6213      	str	r3, [r2, #32]
   }
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	200000fc 	.word	0x200000fc
 800335c:	08003269 	.word	0x08003269
 8003360:	08003279 	.word	0x08003279

08003364 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800336e:	bf00      	nop
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f9      	beq.n	8003370 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <reg_wizchip_spiburst_cbfunc+0x24>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <reg_wizchip_spiburst_cbfunc+0x50>)
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003390:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
 8003394:	e006      	b.n	80033a4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003396:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	200000fc 	.word	0x200000fc
 80033b4:	0800328f 	.word	0x0800328f
 80033b8:	080032a7 	.word	0x080032a7

080033bc <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d82c      	bhi.n	8003428 <ctlnetwork+0x6c>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <ctlnetwork+0x18>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033ed 	.word	0x080033ed
 80033d8:	080033f5 	.word	0x080033f5
 80033dc:	080033fd 	.word	0x080033fd
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003421 	.word	0x08003421
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80033ec:	6838      	ldr	r0, [r7, #0]
 80033ee:	f000 f8fb 	bl	80035e8 <wizchip_setnetinfo>
         break;
 80033f2:	e01c      	b.n	800342e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80033f4:	6838      	ldr	r0, [r7, #0]
 80033f6:	f000 f937 	bl	8003668 <wizchip_getnetinfo>
         break;
 80033fa:	e018      	b.n	800342e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f971 	bl	80036e8 <wizchip_setnetmode>
 8003406:	4603      	mov	r3, r0
 8003408:	e012      	b.n	8003430 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800340a:	f000 f98f 	bl	800372c <wizchip_getnetmode>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	701a      	strb	r2, [r3, #0]
         break;
 8003416:	e00a      	b.n	800342e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	f000 f98f 	bl	800373c <wizchip_settimeout>
         break;
 800341e:	e006      	b.n	800342e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003420:	6838      	ldr	r0, [r7, #0]
 8003422:	f000 f9ac 	bl	800377e <wizchip_gettimeout>
         break;
 8003426:	e002      	b.n	800342e <ctlnetwork+0x72>
      default:
         return -1;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	e000      	b.n	8003430 <ctlnetwork+0x74>
   }
   return 0;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	2206      	movs	r2, #6
 8003442:	4619      	mov	r1, r3
 8003444:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003448:	f7ff fcc8 	bl	8002ddc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2204      	movs	r2, #4
 8003452:	4619      	mov	r1, r3
 8003454:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003458:	f7ff fcc0 	bl	8002ddc <WIZCHIP_READ_BUF>
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	2204      	movs	r2, #4
 8003462:	4619      	mov	r1, r3
 8003464:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003468:	f7ff fcb8 	bl	8002ddc <WIZCHIP_READ_BUF>
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	2204      	movs	r2, #4
 8003472:	4619      	mov	r1, r3
 8003474:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003478:	f7ff fcb0 	bl	8002ddc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	2000      	movs	r0, #0
 8003480:	f7ff fc5e 	bl	8002d40 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003484:	2000      	movs	r0, #0
 8003486:	f7ff fc0f 	bl	8002ca8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2206      	movs	r2, #6
 800348e:	4619      	mov	r1, r3
 8003490:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003494:	f7ff fd02 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2204      	movs	r2, #4
 800349e:	4619      	mov	r1, r3
 80034a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034a4:	f7ff fcfa 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	2204      	movs	r2, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80034b4:	f7ff fcf2 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	2204      	movs	r2, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80034c4:	f7ff fcea 	bl	8002e9c <WIZCHIP_WRITE_BUF>
}
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80034de:	f7ff ffab 	bl	8003438 <wizchip_sw_reset>
   if(txsize)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d03b      	beq.n	8003560 <wizchip_init+0x90>
   {
      tmp = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e015      	b.n	800351e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	4413      	add	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003508:	2b10      	cmp	r3, #16
 800350a:	dd02      	ble.n	8003512 <wizchip_init+0x42>
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	e066      	b.n	80035e0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	73fb      	strb	r3, [r7, #15]
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	2b07      	cmp	r3, #7
 8003524:	dde5      	ble.n	80034f2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e015      	b.n	8003558 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	3301      	adds	r3, #1
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800353a:	4618      	mov	r0, r3
 800353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff fbfa 	bl	8002d40 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800354c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355c:	2b07      	cmp	r3, #7
 800355e:	dde5      	ble.n	800352c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d03b      	beq.n	80035de <wizchip_init+0x10e>
   {
      tmp = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e015      	b.n	800359c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	7bbb      	ldrb	r3, [r7, #14]
 800357c:	4413      	add	r3, r2
 800357e:	b2db      	uxtb	r3, r3
 8003580:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003586:	2b10      	cmp	r3, #16
 8003588:	dd02      	ble.n	8003590 <wizchip_init+0xc0>
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e027      	b.n	80035e0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3301      	adds	r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a0:	2b07      	cmp	r3, #7
 80035a2:	dde5      	ble.n	8003570 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e015      	b.n	80035d6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	3301      	adds	r3, #1
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80035b8:	4618      	mov	r0, r3
 80035ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7ff fbbb 	bl	8002d40 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	dde5      	ble.n	80035aa <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2206      	movs	r2, #6
 80035f4:	4619      	mov	r1, r3
 80035f6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035fa:	f7ff fc4f 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	330e      	adds	r3, #14
 8003602:	2204      	movs	r2, #4
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 7080 	mov.w	r0, #256	; 0x100
 800360a:	f7ff fc47 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	330a      	adds	r3, #10
 8003612:	2204      	movs	r2, #4
 8003614:	4619      	mov	r1, r3
 8003616:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800361a:	f7ff fc3f 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3306      	adds	r3, #6
 8003622:	2204      	movs	r2, #4
 8003624:	4619      	mov	r1, r3
 8003626:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800362a:	f7ff fc37 	bl	8002e9c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7c9a      	ldrb	r2, [r3, #18]
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <wizchip_setnetinfo+0x78>)
 8003634:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7cda      	ldrb	r2, [r3, #19]
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <wizchip_setnetinfo+0x78>)
 800363c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7d1a      	ldrb	r2, [r3, #20]
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <wizchip_setnetinfo+0x78>)
 8003644:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7d5a      	ldrb	r2, [r3, #21]
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <wizchip_setnetinfo+0x78>)
 800364c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7d9a      	ldrb	r2, [r3, #22]
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <wizchip_setnetinfo+0x7c>)
 8003654:	701a      	strb	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200023ac 	.word	0x200023ac
 8003664:	200023b0 	.word	0x200023b0

08003668 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2206      	movs	r2, #6
 8003674:	4619      	mov	r1, r3
 8003676:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800367a:	f7ff fbaf 	bl	8002ddc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	330e      	adds	r3, #14
 8003682:	2204      	movs	r2, #4
 8003684:	4619      	mov	r1, r3
 8003686:	f44f 7080 	mov.w	r0, #256	; 0x100
 800368a:	f7ff fba7 	bl	8002ddc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	330a      	adds	r3, #10
 8003692:	2204      	movs	r2, #4
 8003694:	4619      	mov	r1, r3
 8003696:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800369a:	f7ff fb9f 	bl	8002ddc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3306      	adds	r3, #6
 80036a2:	2204      	movs	r2, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80036aa:	f7ff fb97 	bl	8002ddc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <wizchip_getnetinfo+0x78>)
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <wizchip_getnetinfo+0x78>)
 80036b8:	785a      	ldrb	r2, [r3, #1]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <wizchip_getnetinfo+0x78>)
 80036c0:	789a      	ldrb	r2, [r3, #2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <wizchip_getnetinfo+0x78>)
 80036c8:	78da      	ldrb	r2, [r3, #3]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <wizchip_getnetinfo+0x7c>)
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	759a      	strb	r2, [r3, #22]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200023ac 	.word	0x200023ac
 80036e4:	200023b0 	.word	0x200023b0

080036e8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <wizchip_setnetmode+0x1e>
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	e00e      	b.n	8003724 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003706:	2000      	movs	r0, #0
 8003708:	f7ff face 	bl	8002ca8 <WIZCHIP_READ>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	4313      	orrs	r3, r2
 8003716:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	4619      	mov	r1, r3
 800371c:	2000      	movs	r0, #0
 800371e:	f7ff fb0f 	bl	8002d40 <WIZCHIP_WRITE>
   return 0;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003730:	2000      	movs	r0, #0
 8003732:	f7ff fab9 	bl	8002ca8 <WIZCHIP_READ>
 8003736:	4603      	mov	r3, r0
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}

0800373c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800374e:	f7ff faf7 	bl	8002d40 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	885b      	ldrh	r3, [r3, #2]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	b29b      	uxth	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003762:	f7ff faed 	bl	8002d40 <WIZCHIP_WRITE>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	885b      	ldrh	r3, [r3, #2]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	4619      	mov	r1, r3
 800376e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003772:	f7ff fae5 	bl	8002d40 <WIZCHIP_WRITE>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800377e:	b590      	push	{r4, r7, lr}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003786:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800378a:	f7ff fa8d 	bl	8002ca8 <WIZCHIP_READ>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003796:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800379a:	f7ff fa85 	bl	8002ca8 <WIZCHIP_READ>
 800379e:	4603      	mov	r3, r0
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b29c      	uxth	r4, r3
 80037a6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80037aa:	f7ff fa7d 	bl	8002ca8 <WIZCHIP_READ>
 80037ae:	4603      	mov	r3, r0
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4423      	add	r3, r4
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	805a      	strh	r2, [r3, #2]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd90      	pop	{r4, r7, pc}
	...

080037c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037c8:	480d      	ldr	r0, [pc, #52]	; (8003800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037ca:	490e      	ldr	r1, [pc, #56]	; (8003804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d0:	e002      	b.n	80037d8 <LoopCopyDataInit>

080037d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d6:	3304      	adds	r3, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037dc:	d3f9      	bcc.n	80037d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037de:	4a0b      	ldr	r2, [pc, #44]	; (800380c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037e0:	4c0b      	ldr	r4, [pc, #44]	; (8003810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e4:	e001      	b.n	80037ea <LoopFillZerobss>

080037e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e8:	3204      	adds	r2, #4

080037ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ec:	d3fb      	bcc.n	80037e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037ee:	f7ff fa49 	bl	8002c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037f2:	f008 fb5f 	bl	800beb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f6:	f7fd fea1 	bl	800153c <main>
  bx  lr    
 80037fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003804:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8003808:	0800dab0 	.word	0x0800dab0
  ldr r2, =_sbss
 800380c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8003810:	2000390c 	.word	0x2000390c

08003814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003814:	e7fe      	b.n	8003814 <ADC_IRQHandler>
	...

08003818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_Init+0x40>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_Init+0x40>)
 8003822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_Init+0x40>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <HAL_Init+0x40>)
 800382e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_Init+0x40>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a07      	ldr	r2, [pc, #28]	; (8003858 <HAL_Init+0x40>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003840:	2003      	movs	r0, #3
 8003842:	f000 f8fc 	bl	8003a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003846:	200f      	movs	r0, #15
 8003848:	f7fe fe8e 	bl	8002568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800384c:	f7fe fe14 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00

0800385c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_IncTick+0x20>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_IncTick+0x24>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4413      	add	r3, r2
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <HAL_IncTick+0x24>)
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	2000012c 	.word	0x2000012c
 8003880:	200023b4 	.word	0x200023b4

08003884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return uwTick;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_GetTick+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	200023b4 	.word	0x200023b4

0800389c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff ffee 	bl	8003884 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d005      	beq.n	80038c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_Delay+0x44>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038c2:	bf00      	nop
 80038c4:	f7ff ffde 	bl	8003884 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d8f7      	bhi.n	80038c4 <HAL_Delay+0x28>
  {
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000012c 	.word	0x2000012c

080038e4 <__NVIC_SetPriorityGrouping>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	; (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_GetPriorityGrouping>:
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <__NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_EnableIRQ>:
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db0b      	blt.n	8003972 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <__NVIC_EnableIRQ+0x38>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EncodePriority>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff4c 	bl	80038e4 <__NVIC_SetPriorityGrouping>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a66:	f7ff ff61 	bl	800392c <__NVIC_GetPriorityGrouping>
 8003a6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	6978      	ldr	r0, [r7, #20]
 8003a72:	f7ff ffb1 	bl	80039d8 <NVIC_EncodePriority>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ff80 	bl	8003984 <__NVIC_SetPriority>
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff54 	bl	8003948 <__NVIC_EnableIRQ>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d004      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00c      	b.n	8003ae0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2205      	movs	r2, #5
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e159      	b.n	8003dbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	f040 8148 	bne.w	8003db6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d005      	beq.n	8003b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d130      	bne.n	8003ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 0201 	and.w	r2, r3, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d017      	beq.n	8003bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d123      	bne.n	8003c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	08da      	lsrs	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3208      	adds	r2, #8
 8003bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	220f      	movs	r2, #15
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	08da      	lsrs	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3208      	adds	r2, #8
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a2 	beq.w	8003db6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <HAL_GPIO_Init+0x2e8>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	4a56      	ldr	r2, [pc, #344]	; (8003dd4 <HAL_GPIO_Init+0x2e8>)
 8003c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c80:	6453      	str	r3, [r2, #68]	; 0x44
 8003c82:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <HAL_GPIO_Init+0x2e8>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_GPIO_Init+0x2ec>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a49      	ldr	r2, [pc, #292]	; (8003ddc <HAL_GPIO_Init+0x2f0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x202>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a48      	ldr	r2, [pc, #288]	; (8003de0 <HAL_GPIO_Init+0x2f4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x1fe>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a47      	ldr	r2, [pc, #284]	; (8003de4 <HAL_GPIO_Init+0x2f8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x1fa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a46      	ldr	r2, [pc, #280]	; (8003de8 <HAL_GPIO_Init+0x2fc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x1f6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a45      	ldr	r2, [pc, #276]	; (8003dec <HAL_GPIO_Init+0x300>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x1f2>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e008      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003cde:	2307      	movs	r3, #7
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e004      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x204>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f002 0203 	and.w	r2, r2, #3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4093      	lsls	r3, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d00:	4935      	ldr	r1, [pc, #212]	; (8003dd8 <HAL_GPIO_Init+0x2ec>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d32:	4a2f      	ldr	r2, [pc, #188]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d5c:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d86:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_GPIO_Init+0x304>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	f67f aea2 	bls.w	8003b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40013800 	.word	0x40013800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	40020800 	.word	0x40020800
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
 8003e00:	4613      	mov	r3, r2
 8003e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e04:	787b      	ldrb	r3, [r7, #1]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e10:	e003      	b.n	8003e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e12:	887b      	ldrh	r3, [r7, #2]
 8003e14:	041a      	lsls	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	619a      	str	r2, [r3, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e28:	b08f      	sub	sp, #60	; 0x3c
 8003e2a:	af0a      	add	r7, sp, #40	; 0x28
 8003e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e10f      	b.n	8004058 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f007 fc8a 	bl	800b76c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f003 ff71 	bl	8007d5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	687e      	ldr	r6, [r7, #4]
 8003e84:	466d      	mov	r5, sp
 8003e86:	f106 0410 	add.w	r4, r6, #16
 8003e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e96:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e9a:	1d33      	adds	r3, r6, #4
 8003e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	f003 fe48 	bl	8007b34 <USB_CoreInit>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0d0      	b.n	8004058 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 ff5f 	bl	8007d80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	e04a      	b.n	8003f5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	333d      	adds	r3, #61	; 0x3d
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	333c      	adds	r3, #60	; 0x3c
 8003eec:	7bfa      	ldrb	r2, [r7, #15]
 8003eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	b298      	uxth	r0, r3
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3344      	adds	r3, #68	; 0x44
 8003f04:	4602      	mov	r2, r0
 8003f06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	3340      	adds	r3, #64	; 0x40
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	3348      	adds	r3, #72	; 0x48
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	334c      	adds	r3, #76	; 0x4c
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3354      	adds	r3, #84	; 0x54
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d3af      	bcc.n	8003ec8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e044      	b.n	8003ff8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d3b5      	bcc.n	8003f6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	687e      	ldr	r6, [r7, #4]
 800400a:	466d      	mov	r5, sp
 800400c:	f106 0410 	add.w	r4, r6, #16
 8004010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800401c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004020:	1d33      	adds	r3, r6, #4
 8004022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004024:	6838      	ldr	r0, [r7, #0]
 8004026:	f003 fef7 	bl	8007e18 <USB_DevInit>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e00d      	b.n	8004058 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f005 f846 	bl	80090e2 <USB_DevDisconnect>

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004060 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_PCD_Start+0x1c>
 8004078:	2302      	movs	r3, #2
 800407a:	e020      	b.n	80040be <HAL_PCD_Start+0x5e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	2b01      	cmp	r3, #1
 800408a:	d109      	bne.n	80040a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004090:	2b01      	cmp	r3, #1
 8004092:	d005      	beq.n	80040a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f003 fe49 	bl	8007d3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fff6 	bl	80090a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040c6:	b590      	push	{r4, r7, lr}
 80040c8:	b08d      	sub	sp, #52	; 0x34
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f005 f8b4 	bl	800924a <USB_GetMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 848a 	bne.w	80049fe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f005 f818 	bl	8009124 <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8480 	beq.w	80049fc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f005 f805 	bl	8009124 <USB_ReadInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d107      	bne.n	8004134 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f002 0202 	and.w	r2, r2, #2
 8004132:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f004 fff3 	bl	8009124 <USB_ReadInterrupts>
 800413e:	4603      	mov	r3, r0
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b10      	cmp	r3, #16
 8004146:	d161      	bne.n	800420c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0210 	bic.w	r2, r2, #16
 8004156:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f003 020f 	and.w	r2, r3, #15
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	0c5b      	lsrs	r3, r3, #17
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	2b02      	cmp	r3, #2
 8004182:	d124      	bne.n	80041ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d035      	beq.n	80041fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800419a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6a38      	ldr	r0, [r7, #32]
 80041a4:	f004 fe2a 	bl	8008dfc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b4:	441a      	add	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6a1a      	ldr	r2, [r3, #32]
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c6:	441a      	add	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
 80041cc:	e016      	b.n	80041fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	0c5b      	lsrs	r3, r3, #17
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d110      	bne.n	80041fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041e0:	2208      	movs	r2, #8
 80041e2:	4619      	mov	r1, r3
 80041e4:	6a38      	ldr	r0, [r7, #32]
 80041e6:	f004 fe09 	bl	8008dfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f6:	441a      	add	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0210 	orr.w	r2, r2, #16
 800420a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f004 ff87 	bl	8009124 <USB_ReadInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004220:	f040 80a7 	bne.w	8004372 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f004 ff8c 	bl	800914a <USB_ReadDevAllOutEpInterrupt>
 8004232:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004234:	e099      	b.n	800436a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 808e 	beq.w	800435e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f004 ffb0 	bl	80091b2 <USB_ReadDevOutEPInterrupt>
 8004252:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	461a      	mov	r2, r3
 800426c:	2301      	movs	r3, #1
 800426e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fec2 	bl	8004ffc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00c      	beq.n	800429c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428e:	461a      	mov	r2, r3
 8004290:	2308      	movs	r3, #8
 8004292:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 ff98 	bl	80051cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b2:	461a      	mov	r2, r3
 80042b4:	2310      	movs	r3, #16
 80042b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d030      	beq.n	8004324 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d109      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	78db      	ldrb	r3, [r3, #3]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d108      	bne.n	8004312 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	b2db      	uxtb	r3, r3
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f007 fb29 	bl	800b964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	461a      	mov	r2, r3
 8004320:	2302      	movs	r3, #2
 8004322:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	461a      	mov	r2, r3
 800433c:	2320      	movs	r3, #32
 800433e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800435c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	3301      	adds	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f af62 	bne.w	8004236 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f004 fed4 	bl	8009124 <USB_ReadInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004386:	f040 80db 	bne.w	8004540 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f004 fef5 	bl	800917e <USB_ReadDevAllInEpInterrupt>
 8004394:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800439a:	e0cd      	b.n	8004538 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80c2 	beq.w	800452c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 ff1b 	bl	80091ee <USB_ReadDevInEPInterrupt>
 80043b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d057      	beq.n	8004474 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2201      	movs	r2, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	43db      	mvns	r3, r3
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e4:	4013      	ands	r3, r2
 80043e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	2301      	movs	r3, #1
 80043f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d132      	bne.n	8004468 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	334c      	adds	r3, #76	; 0x4c
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4403      	add	r3, r0
 8004422:	3348      	adds	r3, #72	; 0x48
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4419      	add	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4403      	add	r3, r0
 8004436:	334c      	adds	r3, #76	; 0x4c
 8004438:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <HAL_PCD_IRQHandler+0x3a2>
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3354      	adds	r3, #84	; 0x54
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d108      	bne.n	8004468 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004460:	461a      	mov	r2, r3
 8004462:	2101      	movs	r1, #1
 8004464:	f004 ff22 	bl	80092ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f007 f9fd 	bl	800b86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	461a      	mov	r2, r3
 800448c:	2308      	movs	r3, #8
 800448e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	2310      	movs	r3, #16
 80044aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	461a      	mov	r2, r3
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d023      	beq.n	800451a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d4:	6a38      	ldr	r0, [r7, #32]
 80044d6:	f003 fe03 	bl	80080e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	3338      	adds	r3, #56	; 0x38
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	78db      	ldrb	r3, [r3, #3]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d108      	bne.n	8004508 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f007 fa40 	bl	800b988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	461a      	mov	r2, r3
 8004516:	2302      	movs	r3, #2
 8004518:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fcdb 	bl	8004ee2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	3301      	adds	r3, #1
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	f47f af2e 	bne.w	800439c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f004 fded 	bl	8009124 <USB_ReadInterrupts>
 800454a:	4603      	mov	r3, r0
 800454c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004554:	d122      	bne.n	800459c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004570:	2b01      	cmp	r3, #1
 8004572:	d108      	bne.n	8004586 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800457c:	2100      	movs	r1, #0
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fec2 	bl	8005308 <HAL_PCDEx_LPM_Callback>
 8004584:	e002      	b.n	800458c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f007 f9de 	bl	800b948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800459a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f004 fdbf 	bl	8009124 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	d112      	bne.n	80045d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d102      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f007 f99a 	bl	800b8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80045d6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f004 fda1 	bl	8009124 <USB_ReadInterrupts>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	f040 80b7 	bne.w	800475e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2110      	movs	r1, #16
 800460a:	4618      	mov	r0, r3
 800460c:	f003 fd68 	bl	80080e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004610:	2300      	movs	r3, #0
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004614:	e046      	b.n	80046a4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004622:	461a      	mov	r2, r3
 8004624:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004628:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004644:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004648:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800465c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800467c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004698:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800469c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	3301      	adds	r3, #1
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3b3      	bcc.n	8004616 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80046c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046da:	f043 030b 	orr.w	r3, r3, #11
 80046de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f0:	f043 030b 	orr.w	r3, r3, #11
 80046f4:	6453      	str	r3, [r2, #68]	; 0x44
 80046f6:	e015      	b.n	8004724 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800470a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800470e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471e:	f043 030b 	orr.w	r3, r3, #11
 8004722:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004732:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004736:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004748:	461a      	mov	r2, r3
 800474a:	f004 fdaf 	bl	80092ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800475c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f004 fcde 	bl	8009124 <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	d124      	bne.n	80047be <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f004 fd74 	bl	8009266 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fd29 	bl	80081da <USB_GetDevSpeed>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681c      	ldr	r4, [r3, #0]
 8004794:	f001 f9f4 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8004798:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	4620      	mov	r0, r4
 80047a4:	f003 fa28 	bl	8007bf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f007 f888 	bl	800b8be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80047bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f004 fcae 	bl	8009124 <USB_ReadInterrupts>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d10a      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f007 f865 	bl	800b8a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f002 0208 	and.w	r2, r2, #8
 80047e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 fc99 	bl	8009124 <USB_ReadInterrupts>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d122      	bne.n	8004842 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004808:	2301      	movs	r3, #1
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	e014      	b.n	8004838 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fb27 	bl	8004e80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	3301      	adds	r3, #1
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	429a      	cmp	r2, r3
 8004840:	d3e5      	bcc.n	800480e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f004 fc6c 	bl	8009124 <USB_ReadInterrupts>
 800484c:	4603      	mov	r3, r0
 800484e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004856:	d13b      	bne.n	80048d0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004858:	2301      	movs	r3, #1
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
 800485c:	e02b      	b.n	80048b6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3340      	adds	r3, #64	; 0x40
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d115      	bne.n	80048b0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004884:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	da12      	bge.n	80048b0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	333f      	adds	r3, #63	; 0x3f
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fae8 	bl	8004e80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	3301      	adds	r3, #1
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3ce      	bcc.n	800485e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80048ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fc25 	bl	8009124 <USB_ReadInterrupts>
 80048da:	4603      	mov	r3, r0
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e4:	d155      	bne.n	8004992 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048e6:	2301      	movs	r3, #1
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	e045      	b.n	8004978 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d12e      	bne.n	8004972 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004914:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004916:	2b00      	cmp	r3, #0
 8004918:	da2b      	bge.n	8004972 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004926:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800492a:	429a      	cmp	r2, r3
 800492c:	d121      	bne.n	8004972 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800496e:	6053      	str	r3, [r2, #4]
            break;
 8004970:	e007      	b.n	8004982 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	3301      	adds	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	429a      	cmp	r2, r3
 8004980:	d3b4      	bcc.n	80048ec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f004 fbc4 	bl	8009124 <USB_ReadInterrupts>
 800499c:	4603      	mov	r3, r0
 800499e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d10a      	bne.n	80049be <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f006 ffff 	bl	800b9ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80049bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 fbae 	bl	8009124 <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d115      	bne.n	80049fe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f006 ffef 	bl	800b9c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e000      	b.n	80049fe <HAL_PCD_IRQHandler+0x938>
      return;
 80049fc:	bf00      	nop
    }
  }
}
 80049fe:	3734      	adds	r7, #52	; 0x34
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_PCD_SetAddress+0x1a>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e013      	b.n	8004a46 <HAL_PCD_SetAddress+0x42>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 fb0c 	bl	8009054 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	4608      	mov	r0, r1
 8004a58:	4611      	mov	r1, r2
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	70fb      	strb	r3, [r7, #3]
 8004a60:	460b      	mov	r3, r1
 8004a62:	803b      	strh	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da0f      	bge.n	8004a94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 020f 	and.w	r2, r3, #15
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	3338      	adds	r3, #56	; 0x38
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	4413      	add	r3, r2
 8004a88:	3304      	adds	r3, #4
 8004a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	705a      	strb	r2, [r3, #1]
 8004a92:	e00f      	b.n	8004ab4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	f003 020f 	and.w	r2, r3, #15
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3304      	adds	r3, #4
 8004aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ac0:	883a      	ldrh	r2, [r7, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	78ba      	ldrb	r2, [r7, #2]
 8004aca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ade:	78bb      	ldrb	r3, [r7, #2]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d102      	bne.n	8004aea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_PCD_EP_Open+0xaa>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e00e      	b.n	8004b16 <HAL_PCD_EP_Open+0xc8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f003 fb8c 	bl	8008224 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004b14:	7afb      	ldrb	r3, [r7, #11]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da0f      	bge.n	8004b52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	f003 020f 	and.w	r2, r3, #15
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	3338      	adds	r3, #56	; 0x38
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	3304      	adds	r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	705a      	strb	r2, [r3, #1]
 8004b50:	e00f      	b.n	8004b72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_PCD_EP_Close+0x6e>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e00e      	b.n	8004baa <HAL_PCD_EP_Close+0x8c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 fbca 	bl	8008334 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3304      	adds	r3, #4
 8004bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2200      	movs	r2, #0
 8004bec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf4:	7afb      	ldrb	r3, [r7, #11]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d102      	bne.n	8004c0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c0e:	7afb      	ldrb	r3, [r7, #11]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	f003 fea9 	bl	800897c <USB_EP0StartXfer>
 8004c2a:	e008      	b.n	8004c3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	f003 fc57 	bl	80084ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	460b      	mov	r3, r1
 8004c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	3338      	adds	r3, #56	; 0x38
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb8:	7afb      	ldrb	r3, [r7, #11]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d102      	bne.n	8004cd2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6979      	ldr	r1, [r7, #20]
 8004cea:	f003 fe47 	bl	800897c <USB_EP0StartXfer>
 8004cee:	e008      	b.n	8004d02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6979      	ldr	r1, [r7, #20]
 8004cfe:	f003 fbf5 	bl	80084ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	f003 020f 	and.w	r2, r3, #15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d901      	bls.n	8004d2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e050      	b.n	8004dcc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da0f      	bge.n	8004d52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 020f 	and.w	r2, r3, #15
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	3338      	adds	r3, #56	; 0x38
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	3304      	adds	r3, #4
 8004d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	705a      	strb	r2, [r3, #1]
 8004d50:	e00d      	b.n	8004d6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	3304      	adds	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_PCD_EP_SetStall+0x82>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e01e      	b.n	8004dcc <HAL_PCD_EP_SetStall+0xc0>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f004 f885 	bl	8008eac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	b2d9      	uxtb	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f004 fa75 	bl	80092ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d901      	bls.n	8004df2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e042      	b.n	8004e78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da0f      	bge.n	8004e1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	3338      	adds	r3, #56	; 0x38
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3304      	adds	r3, #4
 8004e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	705a      	strb	r2, [r3, #1]
 8004e18:	e00f      	b.n	8004e3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	f003 020f 	and.w	r2, r3, #15
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3304      	adds	r3, #4
 8004e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_PCD_EP_ClrStall+0x86>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e00e      	b.n	8004e78 <HAL_PCD_EP_ClrStall+0xa4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f004 f88d 	bl	8008f88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	da0c      	bge.n	8004eae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	3338      	adds	r3, #56	; 0x38
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e00c      	b.n	8004ec8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f003 feac 	bl	8008c2c <USB_EPStopXfer>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b08a      	sub	sp, #40	; 0x28
 8004ee6:	af02      	add	r7, sp, #8
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	3338      	adds	r3, #56	; 0x38
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	3304      	adds	r3, #4
 8004f08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1a      	ldr	r2, [r3, #32]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d901      	bls.n	8004f1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e06c      	b.n	8004ff4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d902      	bls.n	8004f36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3e:	e02b      	b.n	8004f98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d902      	bls.n	8004f5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3303      	adds	r3, #3
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6919      	ldr	r1, [r3, #16]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	6978      	ldr	r0, [r7, #20]
 8004f7c:	f003 ff00 	bl	8008d80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	441a      	add	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d809      	bhi.n	8004fc2 <PCD_WriteEmptyTxFifo+0xe0>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d203      	bcs.n	8004fc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1be      	bne.n	8004f40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d811      	bhi.n	8004ff2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	6939      	ldr	r1, [r7, #16]
 8004fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fee:	4013      	ands	r3, r2
 8004ff0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	333c      	adds	r3, #60	; 0x3c
 8005014:	3304      	adds	r3, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d17b      	bne.n	800512a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4a61      	ldr	r2, [pc, #388]	; (80051c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	f240 80b9 	bls.w	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80b3 	beq.w	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	461a      	mov	r2, r3
 8005060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005064:	6093      	str	r3, [r2, #8]
 8005066:	e0a7      	b.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	461a      	mov	r2, r3
 8005080:	2320      	movs	r3, #32
 8005082:	6093      	str	r3, [r2, #8]
 8005084:	e098      	b.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 8093 	bne.w	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d90f      	bls.n	80050ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	461a      	mov	r2, r3
 80050b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b6:	6093      	str	r3, [r2, #8]
 80050b8:	e07e      	b.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	3304      	adds	r3, #4
 80050ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	0159      	lsls	r1, r3, #5
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	440b      	add	r3, r1
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d114      	bne.n	800511c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005104:	461a      	mov	r2, r3
 8005106:	2101      	movs	r1, #1
 8005108:	f004 f8d0 	bl	80092ac <USB_EP0_OutStart>
 800510c:	e006      	b.n	800511c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	441a      	add	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f006 fb88 	bl	800b838 <HAL_PCD_DataOutStageCallback>
 8005128:	e046      	b.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d124      	bne.n	800517c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	6093      	str	r3, [r2, #8]
 8005150:	e032      	b.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	461a      	mov	r2, r3
 800516a:	2320      	movs	r3, #32
 800516c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f006 fb5f 	bl	800b838 <HAL_PCD_DataOutStageCallback>
 800517a:	e01d      	b.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d114      	bne.n	80051ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d108      	bne.n	80051ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051a4:	461a      	mov	r2, r3
 80051a6:	2100      	movs	r1, #0
 80051a8:	f004 f880 	bl	80092ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f006 fb40 	bl	800b838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	4f54300a 	.word	0x4f54300a
 80051c8:	4f54310a 	.word	0x4f54310a

080051cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	333c      	adds	r3, #60	; 0x3c
 80051e4:	3304      	adds	r3, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <PCD_EP_OutSetupPacket_int+0x88>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d90e      	bls.n	8005220 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f006 faf7 	bl	800b814 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <PCD_EP_OutSetupPacket_int+0x88>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d90c      	bls.n	8005248 <PCD_EP_OutSetupPacket_int+0x7c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d108      	bne.n	8005248 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005240:	461a      	mov	r2, r3
 8005242:	2101      	movs	r1, #1
 8005244:	f004 f832 	bl	80092ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	4f54300a 	.word	0x4f54300a

08005258 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
 8005264:	4613      	mov	r3, r2
 8005266:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005276:	883b      	ldrh	r3, [r7, #0]
 8005278:	0419      	lsls	r1, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	430a      	orrs	r2, r1
 8005282:	629a      	str	r2, [r3, #40]	; 0x28
 8005284:	e028      	b.n	80052d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4413      	add	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e00d      	b.n	80052b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	3301      	adds	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	429a      	cmp	r2, r3
 80052be:	d3ec      	bcc.n	800529a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052c0:	883b      	ldrh	r3, [r7, #0]
 80052c2:	0418      	lsls	r0, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6819      	ldr	r1, [r3, #0]
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	4302      	orrs	r2, r0
 80052d0:	3340      	adds	r3, #64	; 0x40
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	887a      	ldrh	r2, [r7, #2]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e267      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d075      	beq.n	800542a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533e:	4b88      	ldr	r3, [pc, #544]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b04      	cmp	r3, #4
 8005348:	d00c      	beq.n	8005364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534a:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d112      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b82      	ldr	r3, [pc, #520]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d10b      	bne.n	800537c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	4b7e      	ldr	r3, [pc, #504]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05b      	beq.n	8005428 <HAL_RCC_OscConfig+0x108>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d157      	bne.n	8005428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e242      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x74>
 8005386:	4b76      	ldr	r3, [pc, #472]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a75      	ldr	r2, [pc, #468]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e01d      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x98>
 800539e:	4b70      	ldr	r3, [pc, #448]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b6d      	ldr	r3, [pc, #436]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6c      	ldr	r2, [pc, #432]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0xb0>
 80053b8:	4b69      	ldr	r3, [pc, #420]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a68      	ldr	r2, [pc, #416]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d013      	beq.n	8005400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7fe fa54 	bl	8003884 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fe fa50 	bl	8003884 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e207      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b5b      	ldr	r3, [pc, #364]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0xc0>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005400:	f7fe fa40 	bl	8003884 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fe fa3c 	bl	8003884 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e1f3      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541a:	4b51      	ldr	r3, [pc, #324]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0xe8>
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d063      	beq.n	80054fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005442:	4b47      	ldr	r3, [pc, #284]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d11c      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b44      	ldr	r3, [pc, #272]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1c7      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	e03a      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fe f9f5 	bl	8003884 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fe f9f1 	bl	8003884 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1a8      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4925      	ldr	r1, [pc, #148]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCC_OscConfig+0x244>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fe f9d4 	bl	8003884 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fe f9d0 	bl	8003884 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e187      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d036      	beq.n	8005578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe f9b4 	bl	8003884 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005520:	f7fe f9b0 	bl	8003884 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e167      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_OscConfig+0x240>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x200>
 800553e:	e01b      	b.n	8005578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_RCC_OscConfig+0x248>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005546:	f7fe f99d 	bl	8003884 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554e:	f7fe f999 	bl	8003884 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d907      	bls.n	800556c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e150      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005560:	40023800 	.word	0x40023800
 8005564:	42470000 	.word	0x42470000
 8005568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ea      	bne.n	800554e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8097 	beq.w	80056b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a7c      	ldr	r2, [pc, #496]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b77      	ldr	r3, [pc, #476]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c2:	4b74      	ldr	r3, [pc, #464]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a73      	ldr	r2, [pc, #460]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ce:	f7fe f959 	bl	8003884 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d6:	f7fe f955 	bl	8003884 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e10c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e8:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_RCC_OscConfig+0x474>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x2ea>
 80055fc:	4b64      	ldr	r3, [pc, #400]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	4a63      	ldr	r2, [pc, #396]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	; 0x70
 8005608:	e01c      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x30c>
 8005612:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	4a5e      	ldr	r2, [pc, #376]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	6713      	str	r3, [r2, #112]	; 0x70
 800561e:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a5b      	ldr	r2, [pc, #364]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0x324>
 800562c:	4b58      	ldr	r3, [pc, #352]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	4b55      	ldr	r3, [pc, #340]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a54      	ldr	r2, [pc, #336]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800563e:	f023 0304 	bic.w	r3, r3, #4
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fe f91a 	bl	8003884 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fe f916 	bl	8003884 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e0cb      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	4b49      	ldr	r3, [pc, #292]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ee      	beq.n	8005654 <HAL_RCC_OscConfig+0x334>
 8005676:	e014      	b.n	80056a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005678:	f7fe f904 	bl	8003884 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fe f900 	bl	8003884 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0b5      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ee      	bne.n	8005680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	4a38      	ldr	r2, [pc, #224]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80a1 	beq.w	8005800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d05c      	beq.n	8005784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d141      	bne.n	8005756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fe f8d4 	bl	8003884 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fe f8d0 	bl	8003884 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e087      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	491b      	ldr	r1, [pc, #108]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fe f8a9 	bl	8003884 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005736:	f7fe f8a5 	bl	8003884 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e05c      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x416>
 8005754:	e054      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fe f892 	bl	8003884 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fe f88e 	bl	8003884 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e045      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x444>
 8005782:	e03d      	b.n	8005800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e038      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
 8005790:	40023800 	.word	0x40023800
 8005794:	40007000 	.word	0x40007000
 8005798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x4ec>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d028      	beq.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d121      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d11a      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057cc:	4013      	ands	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800

08005810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0cc      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d90c      	bls.n	800584c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0b8      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d020      	beq.n	800589a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005864:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a58      	ldr	r2, [pc, #352]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b50      	ldr	r3, [pc, #320]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	494d      	ldr	r1, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d044      	beq.n	8005930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d003      	beq.n	80058ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e067      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4934      	ldr	r1, [pc, #208]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005900:	f7fd ffc0 	bl	8003884 <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	e00a      	b.n	800591e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fd ffbc 	bl	8003884 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e04f      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 020c 	and.w	r2, r3, #12
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	429a      	cmp	r2, r3
 800592e:	d1eb      	bne.n	8005908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20c      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e032      	b.n	80059be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4916      	ldr	r1, [pc, #88]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005996:	f000 f82d 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	490a      	ldr	r1, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	5ccb      	ldrb	r3, [r1, r3]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_ClockConfig+0x1c8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fc fdd6 	bl	8002568 <HAL_InitTick>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	0800da54 	.word	0x0800da54
 80059d4:	200000f8 	.word	0x200000f8
 80059d8:	20000128 	.word	0x20000128

080059dc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <HAL_RCC_EnableCSS+0x14>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	4247004c 	.word	0x4247004c

080059f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b090      	sub	sp, #64	; 0x40
 80059fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	2300      	movs	r3, #0
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a0c:	4b59      	ldr	r3, [pc, #356]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 030c 	and.w	r3, r3, #12
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d00d      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x40>
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	f200 80a1 	bhi.w	8005b60 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0x34>
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d003      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a26:	e09b      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a2c:	e09b      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a2e:	4b53      	ldr	r3, [pc, #332]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a32:	e098      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a34:	4b4f      	ldr	r3, [pc, #316]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a3e:	4b4d      	ldr	r3, [pc, #308]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d028      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	627a      	str	r2, [r7, #36]	; 0x24
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a60:	fb03 f201 	mul.w	r2, r3, r1
 8005a64:	2300      	movs	r3, #0
 8005a66:	fb00 f303 	mul.w	r3, r0, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a43      	ldr	r2, [pc, #268]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a6e:	fba0 1202 	umull	r1, r2, r0, r2
 8005a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a74:	460a      	mov	r2, r1
 8005a76:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7a:	4413      	add	r3, r2
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	2200      	movs	r2, #0
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	61fa      	str	r2, [r7, #28]
 8005a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a8e:	f7fa fbff 	bl	8000290 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4613      	mov	r3, r2
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9a:	e053      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	099b      	lsrs	r3, r3, #6
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	617a      	str	r2, [r7, #20]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005aae:	f04f 0b00 	mov.w	fp, #0
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	f04f 0000 	mov.w	r0, #0
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	0159      	lsls	r1, r3, #5
 8005ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac4:	0150      	lsls	r0, r2, #5
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	ebb2 080a 	subs.w	r8, r2, sl
 8005ace:	eb63 090b 	sbc.w	r9, r3, fp
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ade:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ae2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ae6:	ebb2 0408 	subs.w	r4, r2, r8
 8005aea:	eb63 0509 	sbc.w	r5, r3, r9
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	00eb      	lsls	r3, r5, #3
 8005af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afc:	00e2      	lsls	r2, r4, #3
 8005afe:	4614      	mov	r4, r2
 8005b00:	461d      	mov	r5, r3
 8005b02:	eb14 030a 	adds.w	r3, r4, sl
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	eb45 030b 	adc.w	r3, r5, fp
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	028b      	lsls	r3, r1, #10
 8005b1e:	4621      	mov	r1, r4
 8005b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b24:	4621      	mov	r1, r4
 8005b26:	028a      	lsls	r2, r1, #10
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2e:	2200      	movs	r2, #0
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	60fa      	str	r2, [r7, #12]
 8005b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b38:	f7fa fbaa 	bl	8000290 <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4613      	mov	r3, r2
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	3301      	adds	r3, #1
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b5e:	e002      	b.n	8005b66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3740      	adds	r7, #64	; 0x40
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b72:	bf00      	nop
 8005b74:	40023800 	.word	0x40023800
 8005b78:	00f42400 	.word	0x00f42400
 8005b7c:	017d7840 	.word	0x017d7840

08005b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	200000f8 	.word	0x200000f8

08005b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b9c:	f7ff fff0 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	0b5b      	lsrs	r3, r3, #13
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	4903      	ldr	r1, [pc, #12]	; (8005bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	0800da64 	.word	0x0800da64

08005bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	220f      	movs	r2, #15
 8005bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0203 	and.w	r2, r3, #3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	08db      	lsrs	r3, r3, #3
 8005bfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <HAL_RCC_GetClockConfig+0x60>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0207 	and.w	r2, r3, #7
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40023c00 	.word	0x40023c00

08005c24 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d104      	bne.n	8005c3e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005c34:	f000 f80a 	bl	8005c4c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800
 8005c48:	4002380e 	.word	0x4002380e

08005c4c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e07b      	b.n	8005d64 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d108      	bne.n	8005c86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7c:	d009      	beq.n	8005c92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	61da      	str	r2, [r3, #28]
 8005c84:	e005      	b.n	8005c92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7fc fc0b 	bl	80024c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	ea42 0103 	orr.w	r1, r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	0c1b      	lsrs	r3, r3, #16
 8005d30:	f003 0104 	and.w	r1, r3, #4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	f003 0210 	and.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69da      	ldr	r2, [r3, #28]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_SPI_Transmit+0x22>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e126      	b.n	8005fdc <HAL_SPI_Transmit+0x270>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d96:	f7fd fd75 	bl	8003884 <HAL_GetTick>
 8005d9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
 8005dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005db0:	e10b      	b.n	8005fca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_SPI_Transmit+0x52>
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc2:	e102      	b.n	8005fca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0a:	d10f      	bne.n	8005e2c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d007      	beq.n	8005e4a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e52:	d14b      	bne.n	8005eec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_Transmit+0xf6>
 8005e5c:	8afb      	ldrh	r3, [r7, #22]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d13e      	bne.n	8005ee0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	881a      	ldrh	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e86:	e02b      	b.n	8005ee0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d112      	bne.n	8005ebc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	881a      	ldrh	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eba:	e011      	b.n	8005ee0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ebc:	f7fd fce2 	bl	8003884 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d803      	bhi.n	8005ed4 <HAL_SPI_Transmit+0x168>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d102      	bne.n	8005eda <HAL_SPI_Transmit+0x16e>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ede:	e074      	b.n	8005fca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1ce      	bne.n	8005e88 <HAL_SPI_Transmit+0x11c>
 8005eea:	e04c      	b.n	8005f86 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_Transmit+0x18e>
 8005ef4:	8afb      	ldrh	r3, [r7, #22]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d140      	bne.n	8005f7c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f20:	e02c      	b.n	8005f7c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d113      	bne.n	8005f58 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f56:	e011      	b.n	8005f7c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f58:	f7fd fc94 	bl	8003884 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d803      	bhi.n	8005f70 <HAL_SPI_Transmit+0x204>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d102      	bne.n	8005f76 <HAL_SPI_Transmit+0x20a>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f7a:	e026      	b.n	8005fca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1cd      	bne.n	8005f22 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 fcde 	bl	800694c <SPI_EndRxTxTransaction>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e000      	b.n	8005fca <HAL_SPI_Transmit+0x25e>
  }

error:
 8005fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006000:	d112      	bne.n	8006028 <HAL_SPI_Receive+0x44>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10e      	bne.n	8006028 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2204      	movs	r2, #4
 800600e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f8f1 	bl	8006206 <HAL_SPI_TransmitReceive>
 8006024:	4603      	mov	r3, r0
 8006026:	e0ea      	b.n	80061fe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_SPI_Receive+0x52>
 8006032:	2302      	movs	r3, #2
 8006034:	e0e3      	b.n	80061fe <HAL_SPI_Receive+0x21a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800603e:	f7fd fc21 	bl	8003884 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d002      	beq.n	8006056 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006050:	2302      	movs	r3, #2
 8006052:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006054:	e0ca      	b.n	80061ec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Receive+0x7e>
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006066:	e0c1      	b.n	80061ec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2204      	movs	r2, #4
 800606c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ae:	d10f      	bne.n	80060d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d007      	beq.n	80060ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d162      	bne.n	80061bc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060f6:	e02e      	b.n	8006156 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d115      	bne.n	8006132 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f103 020c 	add.w	r2, r3, #12
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006130:	e011      	b.n	8006156 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006132:	f7fd fba7 	bl	8003884 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d803      	bhi.n	800614a <HAL_SPI_Receive+0x166>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d102      	bne.n	8006150 <HAL_SPI_Receive+0x16c>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006154:	e04a      	b.n	80061ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1cb      	bne.n	80060f8 <HAL_SPI_Receive+0x114>
 8006160:	e031      	b.n	80061c6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d113      	bne.n	8006198 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	b292      	uxth	r2, r2
 800617c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006196:	e011      	b.n	80061bc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006198:	f7fd fb74 	bl	8003884 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d803      	bhi.n	80061b0 <HAL_SPI_Receive+0x1cc>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d102      	bne.n	80061b6 <HAL_SPI_Receive+0x1d2>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061ba:	e017      	b.n	80061ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1cd      	bne.n	8006162 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 fb58 	bl	8006880 <SPI_EndRxTransaction>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	75fb      	strb	r3, [r7, #23]
 80061e8:	e000      	b.n	80061ec <HAL_SPI_Receive+0x208>
  }

error :
 80061ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08c      	sub	sp, #48	; 0x30
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006214:	2301      	movs	r3, #1
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_SPI_TransmitReceive+0x26>
 8006228:	2302      	movs	r3, #2
 800622a:	e18a      	b.n	8006542 <HAL_SPI_TransmitReceive+0x33c>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006234:	f7fd fb26 	bl	8003884 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800624a:	887b      	ldrh	r3, [r7, #2]
 800624c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800624e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006252:	2b01      	cmp	r3, #1
 8006254:	d00f      	beq.n	8006276 <HAL_SPI_TransmitReceive+0x70>
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625c:	d107      	bne.n	800626e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_SPI_TransmitReceive+0x68>
 8006266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800626a:	2b04      	cmp	r3, #4
 800626c:	d003      	beq.n	8006276 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800626e:	2302      	movs	r3, #2
 8006270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006274:	e15b      	b.n	800652e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x82>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x82>
 8006282:	887b      	ldrh	r3, [r7, #2]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800628e:	e14e      	b.n	800652e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b04      	cmp	r3, #4
 800629a:	d003      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2205      	movs	r2, #5
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	887a      	ldrh	r2, [r7, #2]
 80062ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	887a      	ldrh	r2, [r7, #2]
 80062c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d007      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006300:	d178      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x10a>
 800630a:	8b7b      	ldrh	r3, [r7, #26]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d166      	bne.n	80063de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	881a      	ldrh	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	1c9a      	adds	r2, r3, #2
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006334:	e053      	b.n	80063de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b02      	cmp	r3, #2
 8006342:	d11b      	bne.n	800637c <HAL_SPI_TransmitReceive+0x176>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <HAL_SPI_TransmitReceive+0x176>
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d113      	bne.n	800637c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d119      	bne.n	80063be <HAL_SPI_TransmitReceive+0x1b8>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d014      	beq.n	80063be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	b292      	uxth	r2, r2
 80063a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ba:	2301      	movs	r3, #1
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063be:	f7fd fa61 	bl	8003884 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d807      	bhi.n	80063de <HAL_SPI_TransmitReceive+0x1d8>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d003      	beq.n	80063de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063dc:	e0a7      	b.n	800652e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1a6      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x130>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1a1      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x130>
 80063f2:	e07c      	b.n	80064ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_SPI_TransmitReceive+0x1fc>
 80063fc:	8b7b      	ldrh	r3, [r7, #26]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d16b      	bne.n	80064da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006428:	e057      	b.n	80064da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d11c      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x26c>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d017      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x26c>
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d114      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b01      	cmp	r3, #1
 800647e:	d119      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0x2ae>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d014      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064b0:	2301      	movs	r3, #1
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064b4:	f7fd f9e6 	bl	8003884 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d803      	bhi.n	80064cc <HAL_SPI_TransmitReceive+0x2c6>
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d102      	bne.n	80064d2 <HAL_SPI_TransmitReceive+0x2cc>
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064d8:	e029      	b.n	800652e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1a2      	bne.n	800642a <HAL_SPI_TransmitReceive+0x224>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d19d      	bne.n	800642a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fa2a 	bl	800694c <SPI_EndRxTxTransaction>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800650a:	e010      	b.n	800652e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	e000      	b.n	800652e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800652c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800653e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006542:	4618      	mov	r0, r3
 8006544:	3730      	adds	r7, #48	; 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10e      	bne.n	800658c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
    return;
 800658a:	e0ce      	b.n	800672a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_SPI_IRQHandler+0x5e>
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
    return;
 80065a8:	e0bf      	b.n	800672a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <HAL_SPI_IRQHandler+0x7e>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d105      	bne.n	80065ca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80b0 	beq.w	800672a <HAL_SPI_IRQHandler+0x1de>
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80aa 	beq.w	800672a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d023      	beq.n	8006628 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d011      	beq.n	8006610 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	f043 0204 	orr.w	r2, r3, #4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	e00b      	b.n	8006628 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
        return;
 8006626:	e080      	b.n	800672a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d014      	beq.n	800665c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f043 0208 	orr.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006684:	2b00      	cmp	r3, #0
 8006686:	d04f      	beq.n	8006728 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006696:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_SPI_IRQHandler+0x168>
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d034      	beq.n	800671e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0203 	bic.w	r2, r2, #3
 80066c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d011      	beq.n	80066f0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <HAL_SPI_IRQHandler+0x1e4>)
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fd f9e5 	bl	8003aa8 <HAL_DMA_Abort_IT>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d016      	beq.n	8006726 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fc:	4a0c      	ldr	r2, [pc, #48]	; (8006730 <HAL_SPI_IRQHandler+0x1e4>)
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006704:	4618      	mov	r0, r3
 8006706:	f7fd f9cf 	bl	8003aa8 <HAL_DMA_Abort_IT>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800671c:	e003      	b.n	8006726 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f808 	bl	8006734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006724:	e000      	b.n	8006728 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006726:	bf00      	nop
    return;
 8006728:	bf00      	nop
  }
}
 800672a:	3720      	adds	r7, #32
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	08006749 	.word	0x08006749

08006734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ffe6 	bl	8006734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006780:	f7fd f880 	bl	8003884 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006790:	f7fd f878 	bl	8003884 <HAL_GetTick>
 8006794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	0d1b      	lsrs	r3, r3, #20
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	fb02 f303 	mul.w	r3, r2, r3
 80067a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a6:	e054      	b.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d050      	beq.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b0:	f7fd f868 	bl	8003884 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d902      	bls.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13d      	bne.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067de:	d111      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e8:	d004      	beq.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f2:	d107      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d10f      	bne.n	800682e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800682c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e017      	b.n	8006872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3b01      	subs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d19b      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	200000f8 	.word	0x200000f8

08006880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006894:	d111      	bne.n	80068ba <SPI_EndRxTransaction+0x3a>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689e:	d004      	beq.n	80068aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a8:	d107      	bne.n	80068ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c2:	d12a      	bne.n	800691a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068cc:	d012      	beq.n	80068f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	2180      	movs	r1, #128	; 0x80
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ff49 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d02d      	beq.n	8006940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e8:	f043 0220 	orr.w	r2, r3, #32
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e026      	b.n	8006942 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2101      	movs	r1, #1
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff ff36 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01a      	beq.n	8006940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e013      	b.n	8006942 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	2101      	movs	r1, #1
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff ff23 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	f043 0220 	orr.w	r2, r3, #32
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e000      	b.n	8006942 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006958:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <SPI_EndRxTxTransaction+0x7c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <SPI_EndRxTxTransaction+0x80>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	0d5b      	lsrs	r3, r3, #21
 8006964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006968:	fb02 f303 	mul.w	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006976:	d112      	bne.n	800699e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fef4 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e00f      	b.n	80069be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b80      	cmp	r3, #128	; 0x80
 80069b6:	d0f2      	beq.n	800699e <SPI_EndRxTxTransaction+0x52>
 80069b8:	e000      	b.n	80069bc <SPI_EndRxTxTransaction+0x70>
        break;
 80069ba:	bf00      	nop
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200000f8 	.word	0x200000f8
 80069cc:	165e9f81 	.word	0x165e9f81

080069d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e041      	b.n	8006a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f839 	bl	8006a6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 f9ca 	bl	8006da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d001      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e044      	b.n	8006b26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <HAL_TIM_Base_Start_IT+0xb0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d018      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x6c>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac6:	d013      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1a      	ldr	r2, [pc, #104]	; (8006b38 <HAL_TIM_Base_Start_IT+0xb4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <HAL_TIM_Base_Start_IT+0xb8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x6c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a17      	ldr	r2, [pc, #92]	; (8006b40 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <HAL_TIM_Base_Start_IT+0xc0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d111      	bne.n	8006b14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b06      	cmp	r3, #6
 8006b00:	d010      	beq.n	8006b24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0201 	orr.w	r2, r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b12:	e007      	b.n	8006b24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0201 	orr.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	40000c00 	.word	0x40000c00
 8006b44:	40014000 	.word	0x40014000

08006b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0202 	mvn.w	r2, #2
 8006b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f8ee 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8e0 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8f1 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0204 	mvn.w	r2, #4
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f8c4 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8b6 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f8c7 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0208 	mvn.w	r2, #8
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2204      	movs	r2, #4
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f89a 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f88c 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f89d 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0210 	mvn.w	r2, #16
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2208      	movs	r2, #8
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f870 	bl	8006d6c <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f862 	bl	8006d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f873 	bl	8006d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0201 	mvn.w	r2, #1
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fa fea4 	bl	8001a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	2b80      	cmp	r3, #128	; 0x80
 8006cd8:	d10e      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d107      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f8e2 	bl	8006ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d10e      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f838 	bl	8006d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d10e      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d107      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0220 	mvn.w	r2, #32
 8006d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8ac 	bl	8006ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a34      	ldr	r2, [pc, #208]	; (8006e8c <TIM_Base_SetConfig+0xe4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00f      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d00b      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a31      	ldr	r2, [pc, #196]	; (8006e90 <TIM_Base_SetConfig+0xe8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a30      	ldr	r2, [pc, #192]	; (8006e94 <TIM_Base_SetConfig+0xec>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a2f      	ldr	r2, [pc, #188]	; (8006e98 <TIM_Base_SetConfig+0xf0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d108      	bne.n	8006df2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <TIM_Base_SetConfig+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01b      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e00:	d017      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a22      	ldr	r2, [pc, #136]	; (8006e90 <TIM_Base_SetConfig+0xe8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <TIM_Base_SetConfig+0xec>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00f      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <TIM_Base_SetConfig+0xf0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <TIM_Base_SetConfig+0xf4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <TIM_Base_SetConfig+0xf8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <TIM_Base_SetConfig+0xfc>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <TIM_Base_SetConfig+0xe4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d103      	bne.n	8006e78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	615a      	str	r2, [r3, #20]
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <LL_GPIO_SetPinMode>:
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	; 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	fa93 f3a3 	rbit	r3, r3
 8006eea:	613b      	str	r3, [r7, #16]
  return result;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	fab3 f383 	clz	r3, r3
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8006efc:	43db      	mvns	r3, r3
 8006efe:	401a      	ands	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	fa93 f3a3 	rbit	r3, r3
 8006f0a:	61bb      	str	r3, [r7, #24]
  return result;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	fab3 f383 	clz	r3, r3
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3724      	adds	r7, #36	; 0x24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <LL_GPIO_SetPinOutputType>:
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_GPIO_SetPinSpeed>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b089      	sub	sp, #36	; 0x24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	fa93 f3a3 	rbit	r3, r3
 8006f78:	613b      	str	r3, [r7, #16]
  return result;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	fab3 f383 	clz	r3, r3
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	2103      	movs	r1, #3
 8006f86:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	401a      	ands	r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	fa93 f3a3 	rbit	r3, r3
 8006f98:	61bb      	str	r3, [r7, #24]
  return result;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	fab3 f383 	clz	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	609a      	str	r2, [r3, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	3724      	adds	r7, #36	; 0x24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <LL_GPIO_SetPinPull>:
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b089      	sub	sp, #36	; 0x24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	fa93 f3a3 	rbit	r3, r3
 8006fd6:	613b      	str	r3, [r7, #16]
  return result;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	fab3 f383 	clz	r3, r3
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	401a      	ands	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	fa93 f3a3 	rbit	r3, r3
 8006ff6:	61bb      	str	r3, [r7, #24]
  return result;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	fab3 f383 	clz	r3, r3
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	fa01 f303 	lsl.w	r3, r1, r3
 8007008:	431a      	orrs	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	60da      	str	r2, [r3, #12]
}
 800700e:	bf00      	nop
 8007010:	3724      	adds	r7, #36	; 0x24
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <LL_GPIO_SetAFPin_0_7>:
{
 800701a:	b480      	push	{r7}
 800701c:	b089      	sub	sp, #36	; 0x24
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1a      	ldr	r2, [r3, #32]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	fa93 f3a3 	rbit	r3, r3
 8007034:	613b      	str	r3, [r7, #16]
  return result;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	fab3 f383 	clz	r3, r3
 800703c:	b2db      	uxtb	r3, r3
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	210f      	movs	r1, #15
 8007042:	fa01 f303 	lsl.w	r3, r1, r3
 8007046:	43db      	mvns	r3, r3
 8007048:	401a      	ands	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	fa93 f3a3 	rbit	r3, r3
 8007054:	61bb      	str	r3, [r7, #24]
  return result;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	fab3 f383 	clz	r3, r3
 800705c:	b2db      	uxtb	r3, r3
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	431a      	orrs	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	621a      	str	r2, [r3, #32]
}
 800706c:	bf00      	nop
 800706e:	3724      	adds	r7, #36	; 0x24
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <LL_GPIO_SetAFPin_8_15>:
{
 8007078:	b480      	push	{r7}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	fa93 f3a3 	rbit	r3, r3
 8007094:	613b      	str	r3, [r7, #16]
  return result;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	fab3 f383 	clz	r3, r3
 800709c:	b2db      	uxtb	r3, r3
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	210f      	movs	r1, #15
 80070a2:	fa01 f303 	lsl.w	r3, r1, r3
 80070a6:	43db      	mvns	r3, r3
 80070a8:	401a      	ands	r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	fa93 f3a3 	rbit	r3, r3
 80070b6:	61bb      	str	r3, [r7, #24]
  return result;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	fab3 f383 	clz	r3, r3
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	fa01 f303 	lsl.w	r3, r1, r3
 80070c8:	431a      	orrs	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80070ce:	bf00      	nop
 80070d0:	3724      	adds	r7, #36	; 0x24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b088      	sub	sp, #32
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	fa93 f3a3 	rbit	r3, r3
 80070f8:	613b      	str	r3, [r7, #16]
  return result;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	fab3 f383 	clz	r3, r3
 8007100:	b2db      	uxtb	r3, r3
 8007102:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007104:	e050      	b.n	80071a8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	2101      	movs	r1, #1
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	fa01 f303 	lsl.w	r3, r1, r3
 8007112:	4013      	ands	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d042      	beq.n	80071a2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d003      	beq.n	800712c <LL_GPIO_Init+0x52>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d10d      	bne.n	8007148 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	461a      	mov	r2, r3
 8007132:	69b9      	ldr	r1, [r7, #24]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff12 	bl	8006f5e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	461a      	mov	r2, r3
 8007140:	69b9      	ldr	r1, [r7, #24]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fef3 	bl	8006f2e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	461a      	mov	r2, r3
 800714e:	69b9      	ldr	r1, [r7, #24]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ff33 	bl	8006fbc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d11a      	bne.n	8007194 <LL_GPIO_Init+0xba>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	fa93 f3a3 	rbit	r3, r3
 8007168:	60bb      	str	r3, [r7, #8]
  return result;
 800716a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800716c:	fab3 f383 	clz	r3, r3
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b07      	cmp	r3, #7
 8007174:	d807      	bhi.n	8007186 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	461a      	mov	r2, r3
 800717c:	69b9      	ldr	r1, [r7, #24]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff ff4b 	bl	800701a <LL_GPIO_SetAFPin_0_7>
 8007184:	e006      	b.n	8007194 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	461a      	mov	r2, r3
 800718c:	69b9      	ldr	r1, [r7, #24]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff ff72 	bl	8007078 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	461a      	mov	r2, r3
 800719a:	69b9      	ldr	r1, [r7, #24]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fe97 	bl	8006ed0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3301      	adds	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1a7      	bne.n	8007106 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <LL_RCC_GetSysClkSource+0x18>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 030c 	and.w	r3, r3, #12
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40023800 	.word	0x40023800

080071dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40023800 	.word	0x40023800

080071f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <LL_RCC_GetAPB1Prescaler+0x18>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8007204:	4618      	mov	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40023800 	.word	0x40023800

08007214 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <LL_RCC_GetAPB2Prescaler+0x18>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007220:	4618      	mov	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40023800 	.word	0x40023800

08007230 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <LL_RCC_PLL_GetMainSource+0x18>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800723c:	4618      	mov	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40023800 	.word	0x40023800

0800724c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007250:	4b04      	ldr	r3, [pc, #16]	; (8007264 <LL_RCC_PLL_GetN+0x18>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	099b      	lsrs	r3, r3, #6
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800725a:	4618      	mov	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40023800 	.word	0x40023800

08007268 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <LL_RCC_PLL_GetP+0x18>)
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007274:	4618      	mov	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800

08007284 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <LL_RCC_PLL_GetDivider+0x18>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8007290:	4618      	mov	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40023800 	.word	0x40023800

080072a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80072a8:	f000 f820 	bl	80072ec <RCC_GetSystemClockFreq>
 80072ac:	4602      	mov	r2, r0
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f840 	bl	800733c <RCC_GetHCLKClockFreq>
 80072bc:	4602      	mov	r2, r0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f84e 	bl	8007368 <RCC_GetPCLK1ClockFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f85a 	bl	8007390 <RCC_GetPCLK2ClockFreq>
 80072dc:	4602      	mov	r2, r0
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60da      	str	r2, [r3, #12]
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80072f6:	f7ff ff63 	bl	80071c0 <LL_RCC_GetSysClkSource>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d00c      	beq.n	800731a <RCC_GetSystemClockFreq+0x2e>
 8007300:	2b08      	cmp	r3, #8
 8007302:	d80f      	bhi.n	8007324 <RCC_GetSystemClockFreq+0x38>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <RCC_GetSystemClockFreq+0x22>
 8007308:	2b04      	cmp	r3, #4
 800730a:	d003      	beq.n	8007314 <RCC_GetSystemClockFreq+0x28>
 800730c:	e00a      	b.n	8007324 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <RCC_GetSystemClockFreq+0x48>)
 8007310:	607b      	str	r3, [r7, #4]
      break;
 8007312:	e00a      	b.n	800732a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <RCC_GetSystemClockFreq+0x4c>)
 8007316:	607b      	str	r3, [r7, #4]
      break;
 8007318:	e007      	b.n	800732a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800731a:	2008      	movs	r0, #8
 800731c:	f000 f84c 	bl	80073b8 <RCC_PLL_GetFreqDomain_SYS>
 8007320:	6078      	str	r0, [r7, #4]
      break;
 8007322:	e002      	b.n	800732a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <RCC_GetSystemClockFreq+0x48>)
 8007326:	607b      	str	r3, [r7, #4]
      break;
 8007328:	bf00      	nop
  }

  return frequency;
 800732a:	687b      	ldr	r3, [r7, #4]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	00f42400 	.word	0x00f42400
 8007338:	017d7840 	.word	0x017d7840

0800733c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007344:	f7ff ff4a 	bl	80071dc <LL_RCC_GetAHBPrescaler>
 8007348:	4603      	mov	r3, r0
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	4a04      	ldr	r2, [pc, #16]	; (8007364 <RCC_GetHCLKClockFreq+0x28>)
 8007352:	5cd3      	ldrb	r3, [r2, r3]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	40d3      	lsrs	r3, r2
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	0800da54 	.word	0x0800da54

08007368 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007370:	f7ff ff42 	bl	80071f8 <LL_RCC_GetAPB1Prescaler>
 8007374:	4603      	mov	r3, r0
 8007376:	0a9b      	lsrs	r3, r3, #10
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <RCC_GetPCLK1ClockFreq+0x24>)
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	40d3      	lsrs	r3, r2
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	0800da64 	.word	0x0800da64

08007390 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007398:	f7ff ff3c 	bl	8007214 <LL_RCC_GetAPB2Prescaler>
 800739c:	4603      	mov	r3, r0
 800739e:	0b5b      	lsrs	r3, r3, #13
 80073a0:	4a04      	ldr	r2, [pc, #16]	; (80073b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80073a2:	5cd3      	ldrb	r3, [r2, r3]
 80073a4:	461a      	mov	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	40d3      	lsrs	r3, r2
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	0800da64 	.word	0x0800da64

080073b8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80073cc:	f7ff ff30 	bl	8007230 <LL_RCC_PLL_GetMainSource>
 80073d0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073de:	d003      	beq.n	80073e8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80073e0:	e005      	b.n	80073ee <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80073e4:	617b      	str	r3, [r7, #20]
      break;
 80073e6:	e005      	b.n	80073f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80073ea:	617b      	str	r3, [r7, #20]
      break;
 80073ec:	e002      	b.n	80073f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80073f0:	617b      	str	r3, [r7, #20]
      break;
 80073f2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d113      	bne.n	8007422 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80073fa:	f7ff ff43 	bl	8007284 <LL_RCC_PLL_GetDivider>
 80073fe:	4602      	mov	r2, r0
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	fbb3 f4f2 	udiv	r4, r3, r2
 8007406:	f7ff ff21 	bl	800724c <LL_RCC_PLL_GetN>
 800740a:	4603      	mov	r3, r0
 800740c:	fb03 f404 	mul.w	r4, r3, r4
 8007410:	f7ff ff2a 	bl	8007268 <LL_RCC_PLL_GetP>
 8007414:	4603      	mov	r3, r0
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	3301      	adds	r3, #1
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007420:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007422:	693b      	ldr	r3, [r7, #16]
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd90      	pop	{r4, r7, pc}
 800742c:	00f42400 	.word	0x00f42400
 8007430:	017d7840 	.word	0x017d7840

08007434 <LL_TIM_SetPrescaler>:
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <LL_TIM_SetAutoReload>:
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <LL_TIM_SetRepetitionCounter>:
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f043 0201 	orr.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	615a      	str	r2, [r3, #20]
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a31      	ldr	r2, [pc, #196]	; (8007580 <LL_TIM_Init+0xd8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <LL_TIM_Init+0x38>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c6:	d00b      	beq.n	80074e0 <LL_TIM_Init+0x38>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a2e      	ldr	r2, [pc, #184]	; (8007584 <LL_TIM_Init+0xdc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <LL_TIM_Init+0x38>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a2d      	ldr	r2, [pc, #180]	; (8007588 <LL_TIM_Init+0xe0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <LL_TIM_Init+0x38>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a2c      	ldr	r2, [pc, #176]	; (800758c <LL_TIM_Init+0xe4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d106      	bne.n	80074ee <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a23      	ldr	r2, [pc, #140]	; (8007580 <LL_TIM_Init+0xd8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01b      	beq.n	800752e <LL_TIM_Init+0x86>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fc:	d017      	beq.n	800752e <LL_TIM_Init+0x86>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a20      	ldr	r2, [pc, #128]	; (8007584 <LL_TIM_Init+0xdc>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <LL_TIM_Init+0x86>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <LL_TIM_Init+0xe0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00f      	beq.n	800752e <LL_TIM_Init+0x86>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1e      	ldr	r2, [pc, #120]	; (800758c <LL_TIM_Init+0xe4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <LL_TIM_Init+0x86>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <LL_TIM_Init+0xe8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <LL_TIM_Init+0x86>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <LL_TIM_Init+0xec>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <LL_TIM_Init+0x86>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <LL_TIM_Init+0xf0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d106      	bne.n	800753c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff ff81 	bl	8007450 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff ff6d 	bl	8007434 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a08      	ldr	r2, [pc, #32]	; (8007580 <LL_TIM_Init+0xd8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d105      	bne.n	800756e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff7f 	bl	800746c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ff8a 	bl	8007488 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40010000 	.word	0x40010000
 8007584:	40000400 	.word	0x40000400
 8007588:	40000800 	.word	0x40000800
 800758c:	40000c00 	.word	0x40000c00
 8007590:	40014000 	.word	0x40014000
 8007594:	40014400 	.word	0x40014400
 8007598:	40014800 	.word	0x40014800

0800759c <LL_USART_IsEnabled>:
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b0:	bf0c      	ite	eq
 80075b2:	2301      	moveq	r3, #1
 80075b4:	2300      	movne	r3, #0
 80075b6:	b2db      	uxtb	r3, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_USART_SetStopBitsLength>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	611a      	str	r2, [r3, #16]
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <LL_USART_SetHWFlowCtrl>:
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	615a      	str	r2, [r3, #20]
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <LL_USART_SetBaudRate>:
{
 8007610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007614:	b0c0      	sub	sp, #256	; 0x100
 8007616:	af00      	add	r7, sp, #0
 8007618:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800761c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8007620:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007624:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007630:	f040 810c 	bne.w	800784c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007638:	2200      	movs	r2, #0
 800763a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800763e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007646:	4622      	mov	r2, r4
 8007648:	462b      	mov	r3, r5
 800764a:	1891      	adds	r1, r2, r2
 800764c:	6639      	str	r1, [r7, #96]	; 0x60
 800764e:	415b      	adcs	r3, r3
 8007650:	667b      	str	r3, [r7, #100]	; 0x64
 8007652:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007656:	4621      	mov	r1, r4
 8007658:	eb12 0801 	adds.w	r8, r2, r1
 800765c:	4629      	mov	r1, r5
 800765e:	eb43 0901 	adc.w	r9, r3, r1
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800766e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007676:	4690      	mov	r8, r2
 8007678:	4699      	mov	r9, r3
 800767a:	4623      	mov	r3, r4
 800767c:	eb18 0303 	adds.w	r3, r8, r3
 8007680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007684:	462b      	mov	r3, r5
 8007686:	eb49 0303 	adc.w	r3, r9, r3
 800768a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800768e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007692:	2200      	movs	r2, #0
 8007694:	469a      	mov	sl, r3
 8007696:	4693      	mov	fp, r2
 8007698:	eb1a 030a 	adds.w	r3, sl, sl
 800769c:	65bb      	str	r3, [r7, #88]	; 0x58
 800769e:	eb4b 030b 	adc.w	r3, fp, fp
 80076a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076ac:	f7f8 fdf0 	bl	8000290 <__aeabi_uldivmod>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4b64      	ldr	r3, [pc, #400]	; (8007848 <LL_USART_SetBaudRate+0x238>)
 80076b6:	fba3 2302 	umull	r2, r3, r3, r2
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	b29b      	uxth	r3, r3
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	b29c      	uxth	r4, r3
 80076c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076cc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076d0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	1891      	adds	r1, r2, r2
 80076da:	6539      	str	r1, [r7, #80]	; 0x50
 80076dc:	415b      	adcs	r3, r3
 80076de:	657b      	str	r3, [r7, #84]	; 0x54
 80076e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076e4:	4641      	mov	r1, r8
 80076e6:	1851      	adds	r1, r2, r1
 80076e8:	64b9      	str	r1, [r7, #72]	; 0x48
 80076ea:	4649      	mov	r1, r9
 80076ec:	414b      	adcs	r3, r1
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80076fc:	4659      	mov	r1, fp
 80076fe:	00cb      	lsls	r3, r1, #3
 8007700:	4651      	mov	r1, sl
 8007702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007706:	4651      	mov	r1, sl
 8007708:	00ca      	lsls	r2, r1, #3
 800770a:	4610      	mov	r0, r2
 800770c:	4619      	mov	r1, r3
 800770e:	4603      	mov	r3, r0
 8007710:	4642      	mov	r2, r8
 8007712:	189b      	adds	r3, r3, r2
 8007714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007718:	464b      	mov	r3, r9
 800771a:	460a      	mov	r2, r1
 800771c:	eb42 0303 	adc.w	r3, r2, r3
 8007720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007724:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007728:	2200      	movs	r2, #0
 800772a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800772e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8007732:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007736:	460b      	mov	r3, r1
 8007738:	18db      	adds	r3, r3, r3
 800773a:	643b      	str	r3, [r7, #64]	; 0x40
 800773c:	4613      	mov	r3, r2
 800773e:	eb42 0303 	adc.w	r3, r2, r3
 8007742:	647b      	str	r3, [r7, #68]	; 0x44
 8007744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007748:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800774c:	f7f8 fda0 	bl	8000290 <__aeabi_uldivmod>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4611      	mov	r1, r2
 8007756:	4b3c      	ldr	r3, [pc, #240]	; (8007848 <LL_USART_SetBaudRate+0x238>)
 8007758:	fba3 2301 	umull	r2, r3, r3, r1
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	2264      	movs	r2, #100	; 0x64
 8007760:	fb02 f303 	mul.w	r3, r2, r3
 8007764:	1acb      	subs	r3, r1, r3
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800776c:	4b36      	ldr	r3, [pc, #216]	; (8007848 <LL_USART_SetBaudRate+0x238>)
 800776e:	fba3 2302 	umull	r2, r3, r3, r2
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	b29b      	uxth	r3, r3
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800777e:	b29b      	uxth	r3, r3
 8007780:	4423      	add	r3, r4
 8007782:	b29c      	uxth	r4, r3
 8007784:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007788:	2200      	movs	r2, #0
 800778a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800778e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007792:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	1891      	adds	r1, r2, r2
 800779c:	63b9      	str	r1, [r7, #56]	; 0x38
 800779e:	415b      	adcs	r3, r3
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077a6:	4641      	mov	r1, r8
 80077a8:	1851      	adds	r1, r2, r1
 80077aa:	6339      	str	r1, [r7, #48]	; 0x30
 80077ac:	4649      	mov	r1, r9
 80077ae:	414b      	adcs	r3, r1
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077be:	4659      	mov	r1, fp
 80077c0:	00cb      	lsls	r3, r1, #3
 80077c2:	4651      	mov	r1, sl
 80077c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077c8:	4651      	mov	r1, sl
 80077ca:	00ca      	lsls	r2, r1, #3
 80077cc:	4610      	mov	r0, r2
 80077ce:	4619      	mov	r1, r3
 80077d0:	4603      	mov	r3, r0
 80077d2:	4642      	mov	r2, r8
 80077d4:	189b      	adds	r3, r3, r2
 80077d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077da:	464b      	mov	r3, r9
 80077dc:	460a      	mov	r2, r1
 80077de:	eb42 0303 	adc.w	r3, r2, r3
 80077e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80077f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80077f8:	460b      	mov	r3, r1
 80077fa:	18db      	adds	r3, r3, r3
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fe:	4613      	mov	r3, r2
 8007800:	eb42 0303 	adc.w	r3, r2, r3
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800780a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800780e:	f7f8 fd3f 	bl	8000290 <__aeabi_uldivmod>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <LL_USART_SetBaudRate+0x238>)
 8007818:	fba3 1302 	umull	r1, r3, r3, r2
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	2164      	movs	r1, #100	; 0x64
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	3332      	adds	r3, #50	; 0x32
 800782a:	4a07      	ldr	r2, [pc, #28]	; (8007848 <LL_USART_SetBaudRate+0x238>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	b29b      	uxth	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	b29b      	uxth	r3, r3
 800783a:	4423      	add	r3, r4
 800783c:	b29b      	uxth	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007844:	609a      	str	r2, [r3, #8]
}
 8007846:	e108      	b.n	8007a5a <LL_USART_SetBaudRate+0x44a>
 8007848:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800784c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007850:	2200      	movs	r2, #0
 8007852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007856:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800785a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800785e:	4642      	mov	r2, r8
 8007860:	464b      	mov	r3, r9
 8007862:	1891      	adds	r1, r2, r2
 8007864:	6239      	str	r1, [r7, #32]
 8007866:	415b      	adcs	r3, r3
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
 800786a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800786e:	4641      	mov	r1, r8
 8007870:	1854      	adds	r4, r2, r1
 8007872:	4649      	mov	r1, r9
 8007874:	eb43 0501 	adc.w	r5, r3, r1
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	00eb      	lsls	r3, r5, #3
 8007882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007886:	00e2      	lsls	r2, r4, #3
 8007888:	4614      	mov	r4, r2
 800788a:	461d      	mov	r5, r3
 800788c:	4643      	mov	r3, r8
 800788e:	18e3      	adds	r3, r4, r3
 8007890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007894:	464b      	mov	r3, r9
 8007896:	eb45 0303 	adc.w	r3, r5, r3
 800789a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800789e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80078b8:	4629      	mov	r1, r5
 80078ba:	008b      	lsls	r3, r1, #2
 80078bc:	4621      	mov	r1, r4
 80078be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c2:	4621      	mov	r1, r4
 80078c4:	008a      	lsls	r2, r1, #2
 80078c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80078ca:	f7f8 fce1 	bl	8000290 <__aeabi_uldivmod>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4b65      	ldr	r3, [pc, #404]	; (8007a68 <LL_USART_SetBaudRate+0x458>)
 80078d4:	fba3 2302 	umull	r2, r3, r3, r2
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	b29b      	uxth	r3, r3
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	b29c      	uxth	r4, r3
 80078e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ee:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80078f2:	4642      	mov	r2, r8
 80078f4:	464b      	mov	r3, r9
 80078f6:	1891      	adds	r1, r2, r2
 80078f8:	61b9      	str	r1, [r7, #24]
 80078fa:	415b      	adcs	r3, r3
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007902:	4641      	mov	r1, r8
 8007904:	1851      	adds	r1, r2, r1
 8007906:	6139      	str	r1, [r7, #16]
 8007908:	4649      	mov	r1, r9
 800790a:	414b      	adcs	r3, r1
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800791a:	4659      	mov	r1, fp
 800791c:	00cb      	lsls	r3, r1, #3
 800791e:	4651      	mov	r1, sl
 8007920:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007924:	4651      	mov	r1, sl
 8007926:	00ca      	lsls	r2, r1, #3
 8007928:	4610      	mov	r0, r2
 800792a:	4619      	mov	r1, r3
 800792c:	4603      	mov	r3, r0
 800792e:	4642      	mov	r2, r8
 8007930:	189b      	adds	r3, r3, r2
 8007932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007936:	464b      	mov	r3, r9
 8007938:	460a      	mov	r2, r1
 800793a:	eb42 0303 	adc.w	r3, r2, r3
 800793e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007942:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800794c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800795c:	4649      	mov	r1, r9
 800795e:	008b      	lsls	r3, r1, #2
 8007960:	4641      	mov	r1, r8
 8007962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007966:	4641      	mov	r1, r8
 8007968:	008a      	lsls	r2, r1, #2
 800796a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800796e:	f7f8 fc8f 	bl	8000290 <__aeabi_uldivmod>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4611      	mov	r1, r2
 8007978:	4b3b      	ldr	r3, [pc, #236]	; (8007a68 <LL_USART_SetBaudRate+0x458>)
 800797a:	fba3 2301 	umull	r2, r3, r3, r1
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	2264      	movs	r2, #100	; 0x64
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	1acb      	subs	r3, r1, r3
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	3332      	adds	r3, #50	; 0x32
 800798c:	4a36      	ldr	r2, [pc, #216]	; (8007a68 <LL_USART_SetBaudRate+0x458>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	b29b      	uxth	r3, r3
 8007996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800799a:	b29b      	uxth	r3, r3
 800799c:	4423      	add	r3, r4
 800799e:	b29c      	uxth	r4, r3
 80079a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079a4:	2200      	movs	r2, #0
 80079a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80079a8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079aa:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079ae:	4642      	mov	r2, r8
 80079b0:	464b      	mov	r3, r9
 80079b2:	1891      	adds	r1, r2, r2
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	415b      	adcs	r3, r3
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079be:	4641      	mov	r1, r8
 80079c0:	1851      	adds	r1, r2, r1
 80079c2:	6039      	str	r1, [r7, #0]
 80079c4:	4649      	mov	r1, r9
 80079c6:	414b      	adcs	r3, r1
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079d6:	4659      	mov	r1, fp
 80079d8:	00cb      	lsls	r3, r1, #3
 80079da:	4651      	mov	r1, sl
 80079dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079e0:	4651      	mov	r1, sl
 80079e2:	00ca      	lsls	r2, r1, #3
 80079e4:	4610      	mov	r0, r2
 80079e6:	4619      	mov	r1, r3
 80079e8:	4603      	mov	r3, r0
 80079ea:	4642      	mov	r2, r8
 80079ec:	189b      	adds	r3, r3, r2
 80079ee:	673b      	str	r3, [r7, #112]	; 0x70
 80079f0:	464b      	mov	r3, r9
 80079f2:	460a      	mov	r2, r1
 80079f4:	eb42 0303 	adc.w	r3, r2, r3
 80079f8:	677b      	str	r3, [r7, #116]	; 0x74
 80079fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80079fe:	2200      	movs	r2, #0
 8007a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8007a10:	4649      	mov	r1, r9
 8007a12:	008b      	lsls	r3, r1, #2
 8007a14:	4641      	mov	r1, r8
 8007a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	008a      	lsls	r2, r1, #2
 8007a1e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007a22:	f7f8 fc35 	bl	8000290 <__aeabi_uldivmod>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <LL_USART_SetBaudRate+0x458>)
 8007a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	2164      	movs	r1, #100	; 0x64
 8007a34:	fb01 f303 	mul.w	r3, r1, r3
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	3332      	adds	r3, #50	; 0x32
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <LL_USART_SetBaudRate+0x458>)
 8007a40:	fba2 2303 	umull	r2, r3, r2, r3
 8007a44:	095b      	lsrs	r3, r3, #5
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4423      	add	r3, r4
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a58:	609a      	str	r2, [r3, #8]
}
 8007a5a:	bf00      	nop
 8007a5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a60:	46bd      	mov	sp, r7
 8007a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a66:	bf00      	nop
 8007a68:	51eb851f 	.word	0x51eb851f

08007a6c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fd8c 	bl	800759c <LL_USART_IsEnabled>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d149      	bne.n	8007b1e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007a92:	f023 030c 	bic.w	r3, r3, #12
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	6851      	ldr	r1, [r2, #4]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	68d2      	ldr	r2, [r2, #12]
 8007a9e:	4311      	orrs	r1, r2
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	6912      	ldr	r2, [r2, #16]
 8007aa4:	4311      	orrs	r1, r2
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	6992      	ldr	r2, [r2, #24]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff fd83 	bl	80075c4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff fd90 	bl	80075ea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fbe6 	bl	80072a0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <LL_USART_Init+0xbc>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d102      	bne.n	8007ae2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	e00c      	b.n	8007afc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <LL_USART_Init+0xc0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d102      	bne.n	8007af0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	e005      	b.n	8007afc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <LL_USART_Init+0xc4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d101      	bne.n	8007afc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69b9      	ldr	r1, [r7, #24]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fd79 	bl	8007610 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40011000 	.word	0x40011000
 8007b2c:	40004400 	.word	0x40004400
 8007b30:	40011400 	.word	0x40011400

08007b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b34:	b084      	sub	sp, #16
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	f107 001c 	add.w	r0, r7, #28
 8007b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d122      	bne.n	8007b92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d105      	bne.n	8007b86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 fbee 	bl	8009368 <USB_CoreReset>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]
 8007b90:	e01a      	b.n	8007bc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 fbe2 	bl	8009368 <USB_CoreReset>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8007bba:	e005      	b.n	8007bc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d10b      	bne.n	8007be6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f043 0206 	orr.w	r2, r3, #6
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f043 0220 	orr.w	r2, r3, #32
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bf2:	b004      	add	sp, #16
 8007bf4:	4770      	bx	lr
	...

08007bf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d165      	bne.n	8007cd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a41      	ldr	r2, [pc, #260]	; (8007d14 <USB_SetTurnaroundTime+0x11c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d906      	bls.n	8007c22 <USB_SetTurnaroundTime+0x2a>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a40      	ldr	r2, [pc, #256]	; (8007d18 <USB_SetTurnaroundTime+0x120>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d202      	bcs.n	8007c22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c1c:	230f      	movs	r3, #15
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e062      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a3c      	ldr	r2, [pc, #240]	; (8007d18 <USB_SetTurnaroundTime+0x120>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d306      	bcc.n	8007c38 <USB_SetTurnaroundTime+0x40>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4a3b      	ldr	r2, [pc, #236]	; (8007d1c <USB_SetTurnaroundTime+0x124>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d202      	bcs.n	8007c38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c32:	230e      	movs	r3, #14
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e057      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a38      	ldr	r2, [pc, #224]	; (8007d1c <USB_SetTurnaroundTime+0x124>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d306      	bcc.n	8007c4e <USB_SetTurnaroundTime+0x56>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a37      	ldr	r2, [pc, #220]	; (8007d20 <USB_SetTurnaroundTime+0x128>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c48:	230d      	movs	r3, #13
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e04c      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a33      	ldr	r2, [pc, #204]	; (8007d20 <USB_SetTurnaroundTime+0x128>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d306      	bcc.n	8007c64 <USB_SetTurnaroundTime+0x6c>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4a32      	ldr	r2, [pc, #200]	; (8007d24 <USB_SetTurnaroundTime+0x12c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d802      	bhi.n	8007c64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c5e:	230c      	movs	r3, #12
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e041      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a2f      	ldr	r2, [pc, #188]	; (8007d24 <USB_SetTurnaroundTime+0x12c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d906      	bls.n	8007c7a <USB_SetTurnaroundTime+0x82>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a2e      	ldr	r2, [pc, #184]	; (8007d28 <USB_SetTurnaroundTime+0x130>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d802      	bhi.n	8007c7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c74:	230b      	movs	r3, #11
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e036      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a2a      	ldr	r2, [pc, #168]	; (8007d28 <USB_SetTurnaroundTime+0x130>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d906      	bls.n	8007c90 <USB_SetTurnaroundTime+0x98>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	4a29      	ldr	r2, [pc, #164]	; (8007d2c <USB_SetTurnaroundTime+0x134>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d802      	bhi.n	8007c90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e02b      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a26      	ldr	r2, [pc, #152]	; (8007d2c <USB_SetTurnaroundTime+0x134>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d906      	bls.n	8007ca6 <USB_SetTurnaroundTime+0xae>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4a25      	ldr	r2, [pc, #148]	; (8007d30 <USB_SetTurnaroundTime+0x138>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d202      	bcs.n	8007ca6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ca0:	2309      	movs	r3, #9
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e020      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4a21      	ldr	r2, [pc, #132]	; (8007d30 <USB_SetTurnaroundTime+0x138>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d306      	bcc.n	8007cbc <USB_SetTurnaroundTime+0xc4>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <USB_SetTurnaroundTime+0x13c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d802      	bhi.n	8007cbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e015      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <USB_SetTurnaroundTime+0x13c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d906      	bls.n	8007cd2 <USB_SetTurnaroundTime+0xda>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <USB_SetTurnaroundTime+0x140>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d202      	bcs.n	8007cd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ccc:	2307      	movs	r3, #7
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e00a      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e007      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cde:	2309      	movs	r3, #9
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e001      	b.n	8007ce8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ce4:	2309      	movs	r3, #9
 8007ce6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	029b      	lsls	r3, r3, #10
 8007cfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d00:	431a      	orrs	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	00d8acbf 	.word	0x00d8acbf
 8007d18:	00e4e1c0 	.word	0x00e4e1c0
 8007d1c:	00f42400 	.word	0x00f42400
 8007d20:	01067380 	.word	0x01067380
 8007d24:	011a499f 	.word	0x011a499f
 8007d28:	01312cff 	.word	0x01312cff
 8007d2c:	014ca43f 	.word	0x014ca43f
 8007d30:	016e3600 	.word	0x016e3600
 8007d34:	01a6ab1f 	.word	0x01a6ab1f
 8007d38:	01e84800 	.word	0x01e84800

08007d3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f043 0201 	orr.w	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f023 0201 	bic.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d115      	bne.n	8007dce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dae:	2001      	movs	r0, #1
 8007db0:	f7fb fd74 	bl	800389c <HAL_Delay>
      ms++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fa45 	bl	800924a <USB_GetMode>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d01e      	beq.n	8007e04 <USB_SetCurrentMode+0x84>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b31      	cmp	r3, #49	; 0x31
 8007dca:	d9f0      	bls.n	8007dae <USB_SetCurrentMode+0x2e>
 8007dcc:	e01a      	b.n	8007e04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d115      	bne.n	8007e00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007de0:	2001      	movs	r0, #1
 8007de2:	f7fb fd5b 	bl	800389c <HAL_Delay>
      ms++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fa2c 	bl	800924a <USB_GetMode>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <USB_SetCurrentMode+0x84>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b31      	cmp	r3, #49	; 0x31
 8007dfc:	d9f0      	bls.n	8007de0 <USB_SetCurrentMode+0x60>
 8007dfe:	e001      	b.n	8007e04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e005      	b.n	8007e10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b32      	cmp	r3, #50	; 0x32
 8007e08:	d101      	bne.n	8007e0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e18:	b084      	sub	sp, #16
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e32:	2300      	movs	r3, #0
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	e009      	b.n	8007e4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3340      	adds	r3, #64	; 0x40
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b0e      	cmp	r3, #14
 8007e50:	d9f2      	bls.n	8007e38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11c      	bne.n	8007e92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e66:	f043 0302 	orr.w	r3, r3, #2
 8007e6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8007e90:	e00b      	b.n	8007eaa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	680b      	ldr	r3, [r1, #0]
 8007ec8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10c      	bne.n	8007eea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f965 	bl	80081a8 <USB_SetDevSpeed>
 8007ede:	e008      	b.n	8007ef2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f960 	bl	80081a8 <USB_SetDevSpeed>
 8007ee8:	e003      	b.n	8007ef2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eea:	2103      	movs	r1, #3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f95b 	bl	80081a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ef2:	2110      	movs	r1, #16
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f8f3 	bl	80080e0 <USB_FlushTxFifo>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f91f 	bl	8008148 <USB_FlushRxFifo>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	461a      	mov	r2, r3
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	461a      	mov	r2, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	e043      	b.n	8007fc6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f54:	d118      	bne.n	8007f88 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	e013      	b.n	8007f9a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	e008      	b.n	8007f9a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	461a      	mov	r2, r3
 8007f96:	2300      	movs	r3, #0
 8007f98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d3b7      	bcc.n	8007f3e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	e043      	b.n	800805c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fea:	d118      	bne.n	800801e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffe:	461a      	mov	r2, r3
 8008000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	e013      	b.n	8008030 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	461a      	mov	r2, r3
 8008016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e008      	b.n	8008030 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	461a      	mov	r2, r3
 800802c:	2300      	movs	r3, #0
 800802e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803c:	461a      	mov	r2, r3
 800803e:	2300      	movs	r3, #0
 8008040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804e:	461a      	mov	r2, r3
 8008050:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008054:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	429a      	cmp	r2, r3
 8008062:	d3b7      	bcc.n	8007fd4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008076:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008084:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d105      	bne.n	8008098 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f043 0210 	orr.w	r2, r3, #16
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699a      	ldr	r2, [r3, #24]
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <USB_DevInit+0x2c4>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	f043 0208 	orr.w	r2, r3, #8
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d107      	bne.n	80080cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080c4:	f043 0304 	orr.w	r3, r3, #4
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080d8:	b004      	add	sp, #16
 80080da:	4770      	bx	lr
 80080dc:	803c3800 	.word	0x803c3800

080080e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a13      	ldr	r2, [pc, #76]	; (8008144 <USB_FlushTxFifo+0x64>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d901      	bls.n	8008100 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e01b      	b.n	8008138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	daf2      	bge.n	80080ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	019b      	lsls	r3, r3, #6
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4a08      	ldr	r2, [pc, #32]	; (8008144 <USB_FlushTxFifo+0x64>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d901      	bls.n	800812a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e006      	b.n	8008138 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b20      	cmp	r3, #32
 8008134:	d0f0      	beq.n	8008118 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	00030d40 	.word	0x00030d40

08008148 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4a11      	ldr	r2, [pc, #68]	; (80081a4 <USB_FlushRxFifo+0x5c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d901      	bls.n	8008166 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e018      	b.n	8008198 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	daf2      	bge.n	8008154 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2210      	movs	r2, #16
 8008176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a08      	ldr	r2, [pc, #32]	; (80081a4 <USB_FlushRxFifo+0x5c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e006      	b.n	8008198 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b10      	cmp	r3, #16
 8008194:	d0f0      	beq.n	8008178 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	00030d40 	.word	0x00030d40

080081a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081c8:	4313      	orrs	r3, r2
 80081ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081da:	b480      	push	{r7}
 80081dc:	b087      	sub	sp, #28
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 0306 	and.w	r3, r3, #6
 80081f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081fa:	2300      	movs	r3, #0
 80081fc:	75fb      	strb	r3, [r7, #23]
 80081fe:	e00a      	b.n	8008216 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d002      	beq.n	800820c <USB_GetDevSpeed+0x32>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b06      	cmp	r3, #6
 800820a:	d102      	bne.n	8008212 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800820c:	2302      	movs	r3, #2
 800820e:	75fb      	strb	r3, [r7, #23]
 8008210:	e001      	b.n	8008216 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008212:	230f      	movs	r3, #15
 8008214:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d13a      	bne.n	80082b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008246:	69da      	ldr	r2, [r3, #28]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	2101      	movs	r1, #1
 8008252:	fa01 f303 	lsl.w	r3, r1, r3
 8008256:	b29b      	uxth	r3, r3
 8008258:	68f9      	ldr	r1, [r7, #12]
 800825a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800825e:	4313      	orrs	r3, r2
 8008260:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d155      	bne.n	8008324 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	791b      	ldrb	r3, [r3, #4]
 8008292:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008294:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	059b      	lsls	r3, r3, #22
 800829a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800829c:	4313      	orrs	r3, r2
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	e036      	b.n	8008324 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	2101      	movs	r1, #1
 80082c8:	fa01 f303 	lsl.w	r3, r1, r3
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d11a      	bne.n	8008324 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	791b      	ldrb	r3, [r3, #4]
 8008308:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800830a:	430b      	orrs	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800831a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
	...

08008334 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	785b      	ldrb	r3, [r3, #1]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d161      	bne.n	8008414 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008366:	d11f      	bne.n	80083a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008386:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	2101      	movs	r1, #1
 80083ba:	fa01 f303 	lsl.w	r3, r1, r3
 80083be:	b29b      	uxth	r3, r3
 80083c0:	43db      	mvns	r3, r3
 80083c2:	68f9      	ldr	r1, [r7, #12]
 80083c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083c8:	4013      	ands	r3, r2
 80083ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d2:	69da      	ldr	r2, [r3, #28]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	2101      	movs	r1, #1
 80083de:	fa01 f303 	lsl.w	r3, r1, r3
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	43db      	mvns	r3, r3
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ec:	4013      	ands	r3, r2
 80083ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	0159      	lsls	r1, r3, #5
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	440b      	add	r3, r1
 8008406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840a:	4619      	mov	r1, r3
 800840c:	4b35      	ldr	r3, [pc, #212]	; (80084e4 <USB_DeactivateEndpoint+0x1b0>)
 800840e:	4013      	ands	r3, r2
 8008410:	600b      	str	r3, [r1, #0]
 8008412:	e060      	b.n	80084d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800842a:	d11f      	bne.n	800846c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800844a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800846a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	2101      	movs	r1, #1
 800847e:	fa01 f303 	lsl.w	r3, r1, r3
 8008482:	041b      	lsls	r3, r3, #16
 8008484:	43db      	mvns	r3, r3
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800848c:	4013      	ands	r3, r2
 800848e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	2101      	movs	r1, #1
 80084a2:	fa01 f303 	lsl.w	r3, r1, r3
 80084a6:	041b      	lsls	r3, r3, #16
 80084a8:	43db      	mvns	r3, r3
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084b0:	4013      	ands	r3, r2
 80084b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	0159      	lsls	r1, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	440b      	add	r3, r1
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	4619      	mov	r1, r3
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <USB_DeactivateEndpoint+0x1b4>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	ec337800 	.word	0xec337800
 80084e8:	eff37800 	.word	0xeff37800

080084ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	2b01      	cmp	r3, #1
 800850a:	f040 815c 	bne.w	80087c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d132      	bne.n	800857c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	440a      	add	r2, r1
 8008550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008574:	0cdb      	lsrs	r3, r3, #19
 8008576:	04db      	lsls	r3, r3, #19
 8008578:	6113      	str	r3, [r2, #16]
 800857a:	e074      	b.n	8008666 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008596:	0cdb      	lsrs	r3, r3, #19
 8008598:	04db      	lsls	r3, r3, #19
 800859a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6999      	ldr	r1, [r3, #24]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	440b      	add	r3, r1
 80085d8:	1e59      	subs	r1, r3, #1
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	fbb1 f3f3 	udiv	r3, r1, r3
 80085e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085e4:	4b9d      	ldr	r3, [pc, #628]	; (800885c <USB_EPStartXfer+0x370>)
 80085e6:	400b      	ands	r3, r1
 80085e8:	69b9      	ldr	r1, [r7, #24]
 80085ea:	0148      	lsls	r0, r1, #5
 80085ec:	69f9      	ldr	r1, [r7, #28]
 80085ee:	4401      	add	r1, r0
 80085f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085f4:	4313      	orrs	r3, r2
 80085f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008604:	691a      	ldr	r2, [r3, #16]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800860e:	69b9      	ldr	r1, [r7, #24]
 8008610:	0148      	lsls	r0, r1, #5
 8008612:	69f9      	ldr	r1, [r7, #28]
 8008614:	4401      	add	r1, r0
 8008616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800861a:	4313      	orrs	r3, r2
 800861c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	791b      	ldrb	r3, [r3, #4]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d11f      	bne.n	8008666 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008644:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008664:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d14b      	bne.n	8008704 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	461a      	mov	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	791b      	ldrb	r3, [r3, #4]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d128      	bne.n	80086e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d110      	bne.n	80086c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	69fa      	ldr	r2, [r7, #28]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	e00f      	b.n	80086e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	e133      	b.n	800896c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	0151      	lsls	r1, r2, #5
 8008716:	69fa      	ldr	r2, [r7, #28]
 8008718:	440a      	add	r2, r1
 800871a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008722:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	791b      	ldrb	r3, [r3, #4]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d015      	beq.n	8008758 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 811b 	beq.w	800896c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	2101      	movs	r1, #1
 8008748:	fa01 f303 	lsl.w	r3, r1, r3
 800874c:	69f9      	ldr	r1, [r7, #28]
 800874e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008752:	4313      	orrs	r3, r2
 8008754:	634b      	str	r3, [r1, #52]	; 0x34
 8008756:	e109      	b.n	800896c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008764:	2b00      	cmp	r3, #0
 8008766:	d110      	bne.n	800878a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e00f      	b.n	80087aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6919      	ldr	r1, [r3, #16]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	781a      	ldrb	r2, [r3, #0]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	b298      	uxth	r0, r3
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	4603      	mov	r3, r0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f000 fade 	bl	8008d80 <USB_WritePacket>
 80087c4:	e0d2      	b.n	800896c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e0:	0cdb      	lsrs	r3, r3, #19
 80087e2:	04db      	lsls	r3, r3, #19
 80087e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008800:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008804:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008808:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d126      	bne.n	8008860 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008828:	69b9      	ldr	r1, [r7, #24]
 800882a:	0148      	lsls	r0, r1, #5
 800882c:	69f9      	ldr	r1, [r7, #28]
 800882e:	4401      	add	r1, r0
 8008830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008834:	4313      	orrs	r3, r2
 8008836:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	440a      	add	r2, r1
 800884e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008856:	6113      	str	r3, [r2, #16]
 8008858:	e03a      	b.n	80088d0 <USB_EPStartXfer+0x3e4>
 800885a:	bf00      	nop
 800885c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	699a      	ldr	r2, [r3, #24]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4413      	add	r3, r2
 800886a:	1e5a      	subs	r2, r3, #1
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	fbb2 f3f3 	udiv	r3, r2, r3
 8008874:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	8afa      	ldrh	r2, [r7, #22]
 800887c:	fb03 f202 	mul.w	r2, r3, r2
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	8afb      	ldrh	r3, [r7, #22]
 8008894:	04d9      	lsls	r1, r3, #19
 8008896:	4b38      	ldr	r3, [pc, #224]	; (8008978 <USB_EPStartXfer+0x48c>)
 8008898:	400b      	ands	r3, r1
 800889a:	69b9      	ldr	r1, [r7, #24]
 800889c:	0148      	lsls	r0, r1, #5
 800889e:	69f9      	ldr	r1, [r7, #28]
 80088a0:	4401      	add	r1, r0
 80088a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088a6:	4313      	orrs	r3, r2
 80088a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088c0:	69b9      	ldr	r1, [r7, #24]
 80088c2:	0148      	lsls	r0, r1, #5
 80088c4:	69f9      	ldr	r1, [r7, #28]
 80088c6:	4401      	add	r1, r0
 80088c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088cc:	4313      	orrs	r3, r2
 80088ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d10d      	bne.n	80088f2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6919      	ldr	r1, [r3, #16]
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ee:	460a      	mov	r2, r1
 80088f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	791b      	ldrb	r3, [r3, #4]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d128      	bne.n	800894c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008906:	2b00      	cmp	r3, #0
 8008908:	d110      	bne.n	800892c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	440a      	add	r2, r1
 8008920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	e00f      	b.n	800894c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800894a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800896a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3720      	adds	r7, #32
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	1ff80000 	.word	0x1ff80000

0800897c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b01      	cmp	r3, #1
 800899a:	f040 80ce 	bne.w	8008b3a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d132      	bne.n	8008a0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	0151      	lsls	r1, r2, #5
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	440a      	add	r2, r1
 80089e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a04:	0cdb      	lsrs	r3, r3, #19
 8008a06:	04db      	lsls	r3, r3, #19
 8008a08:	6113      	str	r3, [r2, #16]
 8008a0a:	e04e      	b.n	8008aaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a26:	0cdb      	lsrs	r3, r3, #19
 8008a28:	04db      	lsls	r3, r3, #19
 8008a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	699a      	ldr	r2, [r3, #24]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d903      	bls.n	8008a64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a9a:	6939      	ldr	r1, [r7, #16]
 8008a9c:	0148      	lsls	r0, r1, #5
 8008a9e:	6979      	ldr	r1, [r7, #20]
 8008aa0:	4401      	add	r1, r0
 8008aa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d11e      	bne.n	8008aee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e097      	b.n	8008c1e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8083 	beq.w	8008c1e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	2101      	movs	r1, #1
 8008b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2e:	6979      	ldr	r1, [r7, #20]
 8008b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b34:	4313      	orrs	r3, r2
 8008b36:	634b      	str	r3, [r1, #52]	; 0x34
 8008b38:	e071      	b.n	8008c1e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b54:	0cdb      	lsrs	r3, r3, #19
 8008b56:	04db      	lsls	r3, r3, #19
 8008b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc2:	691a      	ldr	r2, [r3, #16]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bcc:	6939      	ldr	r1, [r7, #16]
 8008bce:	0148      	lsls	r0, r1, #5
 8008bd0:	6979      	ldr	r1, [r7, #20]
 8008bd2:	4401      	add	r1, r0
 8008bd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d10d      	bne.n	8008bfe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6919      	ldr	r1, [r3, #16]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	460a      	mov	r2, r1
 8008bfc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	371c      	adds	r7, #28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d14a      	bne.n	8008ce0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c62:	f040 8086 	bne.w	8008d72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	7812      	ldrb	r2, [r2, #0]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d902      	bls.n	8008cc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cc2:	e056      	b.n	8008d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cdc:	d0e7      	beq.n	8008cae <USB_EPStopXfer+0x82>
 8008cde:	e048      	b.n	8008d72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf8:	d13b      	bne.n	8008d72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d902      	bls.n	8008d58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	75fb      	strb	r3, [r7, #23]
          break;
 8008d56:	e00c      	b.n	8008d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d70:	d0e7      	beq.n	8008d42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	460b      	mov	r3, r1
 8008d90:	71fb      	strb	r3, [r7, #7]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d123      	bne.n	8008dee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008da6:	88bb      	ldrh	r3, [r7, #4]
 8008da8:	3303      	adds	r3, #3
 8008daa:	089b      	lsrs	r3, r3, #2
 8008dac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	61bb      	str	r3, [r7, #24]
 8008db2:	e018      	b.n	8008de6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	031a      	lsls	r2, r3, #12
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	3301      	adds	r3, #1
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d3e2      	bcc.n	8008db4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3724      	adds	r7, #36	; 0x24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b08b      	sub	sp, #44	; 0x2c
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	089b      	lsrs	r3, r3, #2
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	623b      	str	r3, [r7, #32]
 8008e26:	e014      	b.n	8008e52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	3301      	adds	r3, #1
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	3301      	adds	r3, #1
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	3301      	adds	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	623b      	str	r3, [r7, #32]
 8008e52:	6a3a      	ldr	r2, [r7, #32]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3e6      	bcc.n	8008e28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e5a:	8bfb      	ldrh	r3, [r7, #30]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01e      	beq.n	8008e9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	6812      	ldr	r2, [r2, #0]
 8008e72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	701a      	strb	r2, [r3, #0]
      i++;
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	3301      	adds	r3, #1
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e92:	8bfb      	ldrh	r3, [r7, #30]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e98:	8bfb      	ldrh	r3, [r7, #30]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1ea      	bne.n	8008e74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	372c      	adds	r7, #44	; 0x2c
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d12c      	bne.n	8008f22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	db12      	blt.n	8008f00 <USB_EPSetStall+0x54>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00f      	beq.n	8008f00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008efe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e02b      	b.n	8008f7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	db12      	blt.n	8008f5a <USB_EPSetStall+0xae>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00f      	beq.n	8008f5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	785b      	ldrb	r3, [r3, #1]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d128      	bne.n	8008ff6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d003      	beq.n	8008fd4 <USB_EPClearStall+0x4c>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	791b      	ldrb	r3, [r3, #4]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d138      	bne.n	8009046 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	e027      	b.n	8009046 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009014:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d003      	beq.n	8009026 <USB_EPClearStall+0x9e>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	791b      	ldrb	r3, [r3, #4]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d10f      	bne.n	8009046 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009044:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009072:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009076:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800908e:	4313      	orrs	r3, r2
 8009090:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ce:	f023 0302 	bic.w	r3, r3, #2
 80090d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009110:	f043 0302 	orr.w	r3, r3, #2
 8009114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	4013      	ands	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800913c:	68fb      	ldr	r3, [r7, #12]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	4013      	ands	r3, r2
 800916c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	0c1b      	lsrs	r3, r3, #16
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	b29b      	uxth	r3, r3
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4013      	ands	r3, r2
 80091de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091e0:	68bb      	ldr	r3, [r7, #8]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009210:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	fa22 f303 	lsr.w	r3, r2, r3
 800921e:	01db      	lsls	r3, r3, #7
 8009220:	b2db      	uxtb	r3, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4013      	ands	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800923c:	68bb      	ldr	r3, [r7, #8]
}
 800923e:	4618      	mov	r0, r3
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	f003 0301 	and.w	r3, r3, #1
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009266:	b480      	push	{r7}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009280:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800929c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	460b      	mov	r3, r1
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	333c      	adds	r3, #60	; 0x3c
 80092c2:	3304      	adds	r3, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	4a26      	ldr	r2, [pc, #152]	; (8009364 <USB_EP0_OutStart+0xb8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d90a      	bls.n	80092e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092e0:	d101      	bne.n	80092e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e037      	b.n	8009356 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ec:	461a      	mov	r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009314:	f043 0318 	orr.w	r3, r3, #24
 8009318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009328:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800932c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d10f      	bne.n	8009354 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	4f54300a 	.word	0x4f54300a

08009368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a13      	ldr	r2, [pc, #76]	; (80093cc <USB_CoreReset+0x64>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d901      	bls.n	8009386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e01b      	b.n	80093be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	daf2      	bge.n	8009374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f043 0201 	orr.w	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4a09      	ldr	r2, [pc, #36]	; (80093cc <USB_CoreReset+0x64>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d901      	bls.n	80093b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e006      	b.n	80093be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d0f0      	beq.n	800939e <USB_CoreReset+0x36>

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	00030d40 	.word	0x00030d40

080093d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093e0:	f002 fc8a 	bl	800bcf8 <USBD_static_malloc>
 80093e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	32b0      	adds	r2, #176	; 0xb0
 80093f6:	2100      	movs	r1, #0
 80093f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093fc:	2302      	movs	r3, #2
 80093fe:	e0d4      	b.n	80095aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009400:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009404:	2100      	movs	r1, #0
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f002 fd24 	bl	800be54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	32b0      	adds	r2, #176	; 0xb0
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	32b0      	adds	r2, #176	; 0xb0
 8009426:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	7c1b      	ldrb	r3, [r3, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d138      	bne.n	80094aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009438:	4b5e      	ldr	r3, [pc, #376]	; (80095b4 <USBD_CDC_Init+0x1e4>)
 800943a:	7819      	ldrb	r1, [r3, #0]
 800943c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009440:	2202      	movs	r2, #2
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f002 fb35 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009448:	4b5a      	ldr	r3, [pc, #360]	; (80095b4 <USBD_CDC_Init+0x1e4>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3324      	adds	r3, #36	; 0x24
 800945e:	2201      	movs	r2, #1
 8009460:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009462:	4b55      	ldr	r3, [pc, #340]	; (80095b8 <USBD_CDC_Init+0x1e8>)
 8009464:	7819      	ldrb	r1, [r3, #0]
 8009466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800946a:	2202      	movs	r2, #2
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f002 fb20 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009472:	4b51      	ldr	r3, [pc, #324]	; (80095b8 <USBD_CDC_Init+0x1e8>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800948a:	2201      	movs	r2, #1
 800948c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800948e:	4b4b      	ldr	r3, [pc, #300]	; (80095bc <USBD_CDC_Init+0x1ec>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f003 020f 	and.w	r2, r3, #15
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	3326      	adds	r3, #38	; 0x26
 80094a4:	2210      	movs	r2, #16
 80094a6:	801a      	strh	r2, [r3, #0]
 80094a8:	e035      	b.n	8009516 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094aa:	4b42      	ldr	r3, [pc, #264]	; (80095b4 <USBD_CDC_Init+0x1e4>)
 80094ac:	7819      	ldrb	r1, [r3, #0]
 80094ae:	2340      	movs	r3, #64	; 0x40
 80094b0:	2202      	movs	r2, #2
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f002 fafd 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094b8:	4b3e      	ldr	r3, [pc, #248]	; (80095b4 <USBD_CDC_Init+0x1e4>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	f003 020f 	and.w	r2, r3, #15
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	3324      	adds	r3, #36	; 0x24
 80094ce:	2201      	movs	r2, #1
 80094d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094d2:	4b39      	ldr	r3, [pc, #228]	; (80095b8 <USBD_CDC_Init+0x1e8>)
 80094d4:	7819      	ldrb	r1, [r3, #0]
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	2202      	movs	r2, #2
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f002 fae9 	bl	800bab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094e0:	4b35      	ldr	r3, [pc, #212]	; (80095b8 <USBD_CDC_Init+0x1e8>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f003 020f 	and.w	r2, r3, #15
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094f8:	2201      	movs	r2, #1
 80094fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094fc:	4b2f      	ldr	r3, [pc, #188]	; (80095bc <USBD_CDC_Init+0x1ec>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	f003 020f 	and.w	r2, r3, #15
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	3326      	adds	r3, #38	; 0x26
 8009512:	2210      	movs	r2, #16
 8009514:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009516:	4b29      	ldr	r3, [pc, #164]	; (80095bc <USBD_CDC_Init+0x1ec>)
 8009518:	7819      	ldrb	r1, [r3, #0]
 800951a:	2308      	movs	r3, #8
 800951c:	2203      	movs	r2, #3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f002 fac7 	bl	800bab2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009524:	4b25      	ldr	r3, [pc, #148]	; (80095bc <USBD_CDC_Init+0x1ec>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	f003 020f 	and.w	r2, r3, #15
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3324      	adds	r3, #36	; 0x24
 800953a:	2201      	movs	r2, #1
 800953c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	33b0      	adds	r3, #176	; 0xb0
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009574:	2302      	movs	r3, #2
 8009576:	e018      	b.n	80095aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7c1b      	ldrb	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009580:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <USBD_CDC_Init+0x1e8>)
 8009582:	7819      	ldrb	r1, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800958a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f002 fb7e 	bl	800bc90 <USBD_LL_PrepareReceive>
 8009594:	e008      	b.n	80095a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009596:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <USBD_CDC_Init+0x1e8>)
 8009598:	7819      	ldrb	r1, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095a0:	2340      	movs	r3, #64	; 0x40
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f002 fb74 	bl	800bc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	200001b7 	.word	0x200001b7
 80095b8:	200001b8 	.word	0x200001b8
 80095bc:	200001b9 	.word	0x200001b9

080095c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095cc:	4b3a      	ldr	r3, [pc, #232]	; (80096b8 <USBD_CDC_DeInit+0xf8>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f002 fa93 	bl	800bafe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095d8:	4b37      	ldr	r3, [pc, #220]	; (80096b8 <USBD_CDC_DeInit+0xf8>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	3324      	adds	r3, #36	; 0x24
 80095ee:	2200      	movs	r2, #0
 80095f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095f2:	4b32      	ldr	r3, [pc, #200]	; (80096bc <USBD_CDC_DeInit+0xfc>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f002 fa80 	bl	800bafe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095fe:	4b2f      	ldr	r3, [pc, #188]	; (80096bc <USBD_CDC_DeInit+0xfc>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	f003 020f 	and.w	r2, r3, #15
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009616:	2200      	movs	r2, #0
 8009618:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800961a:	4b29      	ldr	r3, [pc, #164]	; (80096c0 <USBD_CDC_DeInit+0x100>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f002 fa6c 	bl	800bafe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009626:	4b26      	ldr	r3, [pc, #152]	; (80096c0 <USBD_CDC_DeInit+0x100>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	f003 020f 	and.w	r2, r3, #15
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	3324      	adds	r3, #36	; 0x24
 800963c:	2200      	movs	r2, #0
 800963e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009640:	4b1f      	ldr	r3, [pc, #124]	; (80096c0 <USBD_CDC_DeInit+0x100>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	f003 020f 	and.w	r2, r3, #15
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	3326      	adds	r3, #38	; 0x26
 8009656:	2200      	movs	r2, #0
 8009658:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	32b0      	adds	r2, #176	; 0xb0
 8009664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01f      	beq.n	80096ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	33b0      	adds	r3, #176	; 0xb0
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	32b0      	adds	r2, #176	; 0xb0
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	4618      	mov	r0, r3
 8009690:	f002 fb40 	bl	800bd14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	32b0      	adds	r2, #176	; 0xb0
 800969e:	2100      	movs	r1, #0
 80096a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200001b7 	.word	0x200001b7
 80096bc:	200001b8 	.word	0x200001b8
 80096c0:	200001b9 	.word	0x200001b9

080096c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	32b0      	adds	r2, #176	; 0xb0
 80096d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e0bf      	b.n	8009874 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d050      	beq.n	80097a2 <USBD_CDC_Setup+0xde>
 8009700:	2b20      	cmp	r3, #32
 8009702:	f040 80af 	bne.w	8009864 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	88db      	ldrh	r3, [r3, #6]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d03a      	beq.n	8009784 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	b25b      	sxtb	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	da1b      	bge.n	8009750 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	33b0      	adds	r3, #176	; 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800972e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	88d2      	ldrh	r2, [r2, #6]
 8009734:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	2b07      	cmp	r3, #7
 800973c:	bf28      	it	cs
 800973e:	2307      	movcs	r3, #7
 8009740:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	89fa      	ldrh	r2, [r7, #14]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 fd89 	bl	800b260 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800974e:	e090      	b.n	8009872 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	785a      	ldrb	r2, [r3, #1]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	88db      	ldrh	r3, [r3, #6]
 800975e:	2b3f      	cmp	r3, #63	; 0x3f
 8009760:	d803      	bhi.n	800976a <USBD_CDC_Setup+0xa6>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	88db      	ldrh	r3, [r3, #6]
 8009766:	b2da      	uxtb	r2, r3
 8009768:	e000      	b.n	800976c <USBD_CDC_Setup+0xa8>
 800976a:	2240      	movs	r2, #64	; 0x40
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009772:	6939      	ldr	r1, [r7, #16]
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800977a:	461a      	mov	r2, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fd9b 	bl	800b2b8 <USBD_CtlPrepareRx>
      break;
 8009782:	e076      	b.n	8009872 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	33b0      	adds	r3, #176	; 0xb0
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	7850      	ldrb	r0, [r2, #1]
 800979a:	2200      	movs	r2, #0
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	4798      	blx	r3
      break;
 80097a0:	e067      	b.n	8009872 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b0b      	cmp	r3, #11
 80097a8:	d851      	bhi.n	800984e <USBD_CDC_Setup+0x18a>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <USBD_CDC_Setup+0xec>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097e1 	.word	0x080097e1
 80097b4:	0800985d 	.word	0x0800985d
 80097b8:	0800984f 	.word	0x0800984f
 80097bc:	0800984f 	.word	0x0800984f
 80097c0:	0800984f 	.word	0x0800984f
 80097c4:	0800984f 	.word	0x0800984f
 80097c8:	0800984f 	.word	0x0800984f
 80097cc:	0800984f 	.word	0x0800984f
 80097d0:	0800984f 	.word	0x0800984f
 80097d4:	0800984f 	.word	0x0800984f
 80097d8:	0800980b 	.word	0x0800980b
 80097dc:	08009835 	.word	0x08009835
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d107      	bne.n	80097fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097ec:	f107 030a 	add.w	r3, r7, #10
 80097f0:	2202      	movs	r2, #2
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fd33 	bl	800b260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097fa:	e032      	b.n	8009862 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fcbd 	bl	800b17e <USBD_CtlError>
            ret = USBD_FAIL;
 8009804:	2303      	movs	r3, #3
 8009806:	75fb      	strb	r3, [r7, #23]
          break;
 8009808:	e02b      	b.n	8009862 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b03      	cmp	r3, #3
 8009814:	d107      	bne.n	8009826 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009816:	f107 030d 	add.w	r3, r7, #13
 800981a:	2201      	movs	r2, #1
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 fd1e 	bl	800b260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009824:	e01d      	b.n	8009862 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 fca8 	bl	800b17e <USBD_CtlError>
            ret = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	75fb      	strb	r3, [r7, #23]
          break;
 8009832:	e016      	b.n	8009862 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b03      	cmp	r3, #3
 800983e:	d00f      	beq.n	8009860 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 fc9b 	bl	800b17e <USBD_CtlError>
            ret = USBD_FAIL;
 8009848:	2303      	movs	r3, #3
 800984a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800984c:	e008      	b.n	8009860 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f001 fc94 	bl	800b17e <USBD_CtlError>
          ret = USBD_FAIL;
 8009856:	2303      	movs	r3, #3
 8009858:	75fb      	strb	r3, [r7, #23]
          break;
 800985a:	e002      	b.n	8009862 <USBD_CDC_Setup+0x19e>
          break;
 800985c:	bf00      	nop
 800985e:	e008      	b.n	8009872 <USBD_CDC_Setup+0x1ae>
          break;
 8009860:	bf00      	nop
      }
      break;
 8009862:	e006      	b.n	8009872 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f001 fc89 	bl	800b17e <USBD_CtlError>
      ret = USBD_FAIL;
 800986c:	2303      	movs	r3, #3
 800986e:	75fb      	strb	r3, [r7, #23]
      break;
 8009870:	bf00      	nop
  }

  return (uint8_t)ret;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	32b0      	adds	r2, #176	; 0xb0
 800989a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e065      	b.n	8009972 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	32b0      	adds	r2, #176	; 0xb0
 80098b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	f003 020f 	and.w	r2, r3, #15
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	3318      	adds	r3, #24
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d02f      	beq.n	8009930 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	f003 020f 	and.w	r2, r3, #15
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	3318      	adds	r3, #24
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	f003 010f 	and.w	r1, r3, #15
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	460b      	mov	r3, r1
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	440b      	add	r3, r1
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4403      	add	r3, r0
 80098f8:	3348      	adds	r3, #72	; 0x48
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009900:	fb01 f303 	mul.w	r3, r1, r3
 8009904:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009906:	2b00      	cmp	r3, #0
 8009908:	d112      	bne.n	8009930 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3318      	adds	r3, #24
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009922:	78f9      	ldrb	r1, [r7, #3]
 8009924:	2300      	movs	r3, #0
 8009926:	2200      	movs	r2, #0
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f002 f990 	bl	800bc4e <USBD_LL_Transmit>
 800992e:	e01f      	b.n	8009970 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	33b0      	adds	r3, #176	; 0xb0
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d010      	beq.n	8009970 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	33b0      	adds	r3, #176	; 0xb0
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800996c:	78fa      	ldrb	r2, [r7, #3]
 800996e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	32b0      	adds	r2, #176	; 0xb0
 8009990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009994:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	32b0      	adds	r2, #176	; 0xb0
 80099a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e01a      	b.n	80099e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099ac:	78fb      	ldrb	r3, [r7, #3]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f002 f98e 	bl	800bcd2 <USBD_LL_GetRxDataSize>
 80099b6:	4602      	mov	r2, r0
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	33b0      	adds	r3, #176	; 0xb0
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80099dc:	4611      	mov	r1, r2
 80099de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	32b0      	adds	r2, #176	; 0xb0
 80099fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d101      	bne.n	8009a0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e025      	b.n	8009a58 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	33b0      	adds	r3, #176	; 0xb0
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01a      	beq.n	8009a56 <USBD_CDC_EP0_RxReady+0x6c>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a26:	2bff      	cmp	r3, #255	; 0xff
 8009a28:	d015      	beq.n	8009a56 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	33b0      	adds	r3, #176	; 0xb0
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	22ff      	movs	r2, #255	; 0xff
 8009a52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a68:	2182      	movs	r1, #130	; 0x82
 8009a6a:	4818      	ldr	r0, [pc, #96]	; (8009acc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a6c:	f000 fd4f 	bl	800a50e <USBD_GetEpDesc>
 8009a70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a72:	2101      	movs	r1, #1
 8009a74:	4815      	ldr	r0, [pc, #84]	; (8009acc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a76:	f000 fd4a 	bl	800a50e <USBD_GetEpDesc>
 8009a7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a7c:	2181      	movs	r1, #129	; 0x81
 8009a7e:	4813      	ldr	r0, [pc, #76]	; (8009acc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a80:	f000 fd45 	bl	800a50e <USBD_GetEpDesc>
 8009a84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2210      	movs	r2, #16
 8009a90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d006      	beq.n	8009aa6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aa0:	711a      	strb	r2, [r3, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d006      	beq.n	8009aba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab4:	711a      	strb	r2, [r3, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2243      	movs	r2, #67	; 0x43
 8009abe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ac0:	4b02      	ldr	r3, [pc, #8]	; (8009acc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000174 	.word	0x20000174

08009ad0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ad8:	2182      	movs	r1, #130	; 0x82
 8009ada:	4818      	ldr	r0, [pc, #96]	; (8009b3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009adc:	f000 fd17 	bl	800a50e <USBD_GetEpDesc>
 8009ae0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	4815      	ldr	r0, [pc, #84]	; (8009b3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ae6:	f000 fd12 	bl	800a50e <USBD_GetEpDesc>
 8009aea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009aec:	2181      	movs	r1, #129	; 0x81
 8009aee:	4813      	ldr	r0, [pc, #76]	; (8009b3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009af0:	f000 fd0d 	bl	800a50e <USBD_GetEpDesc>
 8009af4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2210      	movs	r2, #16
 8009b00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d006      	beq.n	8009b16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	711a      	strb	r2, [r3, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f042 0202 	orr.w	r2, r2, #2
 8009b14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d006      	beq.n	8009b2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	711a      	strb	r2, [r3, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f042 0202 	orr.w	r2, r2, #2
 8009b28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2243      	movs	r2, #67	; 0x43
 8009b2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000174 	.word	0x20000174

08009b40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b48:	2182      	movs	r1, #130	; 0x82
 8009b4a:	4818      	ldr	r0, [pc, #96]	; (8009bac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b4c:	f000 fcdf 	bl	800a50e <USBD_GetEpDesc>
 8009b50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b52:	2101      	movs	r1, #1
 8009b54:	4815      	ldr	r0, [pc, #84]	; (8009bac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b56:	f000 fcda 	bl	800a50e <USBD_GetEpDesc>
 8009b5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b5c:	2181      	movs	r1, #129	; 0x81
 8009b5e:	4813      	ldr	r0, [pc, #76]	; (8009bac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b60:	f000 fcd5 	bl	800a50e <USBD_GetEpDesc>
 8009b64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	2210      	movs	r2, #16
 8009b70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d006      	beq.n	8009b86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b80:	711a      	strb	r2, [r3, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d006      	beq.n	8009b9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b94:	711a      	strb	r2, [r3, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2243      	movs	r2, #67	; 0x43
 8009b9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ba0:	4b02      	ldr	r3, [pc, #8]	; (8009bac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000174 	.word	0x20000174

08009bb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	220a      	movs	r2, #10
 8009bbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000130 	.word	0x20000130

08009bd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e009      	b.n	8009bf8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	33b0      	adds	r3, #176	; 0xb0
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	32b0      	adds	r2, #176	; 0xb0
 8009c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e008      	b.n	8009c3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	32b0      	adds	r2, #176	; 0xb0
 8009c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e004      	b.n	8009c76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	32b0      	adds	r2, #176	; 0xb0
 8009c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	32b0      	adds	r2, #176	; 0xb0
 8009caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e025      	b.n	8009d02 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d11f      	bne.n	8009d00 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009cc8:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <USBD_CDC_TransmitPacket+0x88>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4403      	add	r3, r0
 8009ce2:	3318      	adds	r3, #24
 8009ce4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <USBD_CDC_TransmitPacket+0x88>)
 8009ce8:	7819      	ldrb	r1, [r3, #0]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 ffa9 	bl	800bc4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	200001b7 	.word	0x200001b7

08009d10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32b0      	adds	r2, #176	; 0xb0
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	32b0      	adds	r2, #176	; 0xb0
 8009d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e018      	b.n	8009d70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	7c1b      	ldrb	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d46:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <USBD_CDC_ReceivePacket+0x68>)
 8009d48:	7819      	ldrb	r1, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 ff9b 	bl	800bc90 <USBD_LL_PrepareReceive>
 8009d5a:	e008      	b.n	8009d6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d5c:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <USBD_CDC_ReceivePacket+0x68>)
 8009d5e:	7819      	ldrb	r1, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d66:	2340      	movs	r3, #64	; 0x40
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 ff91 	bl	800bc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	200001b8 	.word	0x200001b8

08009d7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	4613      	mov	r3, r2
 8009d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e01f      	b.n	8009dd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	79fa      	ldrb	r2, [r7, #7]
 8009dc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f001 fe0b 	bl	800b9e4 <USBD_LL_Init>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e025      	b.n	8009e40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	32ae      	adds	r2, #174	; 0xae
 8009e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00f      	beq.n	8009e30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	32ae      	adds	r2, #174	; 0xae
 8009e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	f107 020e 	add.w	r2, r7, #14
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	4602      	mov	r2, r0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 fe13 	bl	800ba7c <USBD_LL_Start>
 8009e56:	4603      	mov	r3, r0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d009      	beq.n	8009ea4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	78fa      	ldrb	r2, [r7, #3]
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 f908 	bl	800b10a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f16:	f003 031f 	and.w	r3, r3, #31
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d01a      	beq.n	8009f54 <USBD_LL_SetupStage+0x72>
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d822      	bhi.n	8009f68 <USBD_LL_SetupStage+0x86>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <USBD_LL_SetupStage+0x4a>
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d00a      	beq.n	8009f40 <USBD_LL_SetupStage+0x5e>
 8009f2a:	e01d      	b.n	8009f68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fb5f 	bl	800a5f8 <USBD_StdDevReq>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f3e:	e020      	b.n	8009f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fbc7 	bl	800a6dc <USBD_StdItfReq>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73fb      	strb	r3, [r7, #15]
      break;
 8009f52:	e016      	b.n	8009f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fc29 	bl	800a7b4 <USBD_StdEPReq>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
      break;
 8009f66:	e00c      	b.n	8009f82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f001 fde0 	bl	800bb3c <USBD_LL_StallEP>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f80:	bf00      	nop
  }

  return ret;
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	460b      	mov	r3, r1
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d16e      	bne.n	800a082 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009faa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	f040 8098 	bne.w	800a0e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d913      	bls.n	8009fec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	1ad2      	subs	r2, r2, r3
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	bf28      	it	cs
 8009fde:	4613      	movcs	r3, r2
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f001 f984 	bl	800b2f2 <USBD_CtlContinueRx>
 8009fea:	e07d      	b.n	800a0e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ff2:	f003 031f 	and.w	r3, r3, #31
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d014      	beq.n	800a024 <USBD_LL_DataOutStage+0x98>
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d81d      	bhi.n	800a03a <USBD_LL_DataOutStage+0xae>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <USBD_LL_DataOutStage+0x7c>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d003      	beq.n	800a00e <USBD_LL_DataOutStage+0x82>
 800a006:	e018      	b.n	800a03a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	75bb      	strb	r3, [r7, #22]
            break;
 800a00c:	e018      	b.n	800a040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a014:	b2db      	uxtb	r3, r3
 800a016:	4619      	mov	r1, r3
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fa5e 	bl	800a4da <USBD_CoreFindIF>
 800a01e:	4603      	mov	r3, r0
 800a020:	75bb      	strb	r3, [r7, #22]
            break;
 800a022:	e00d      	b.n	800a040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	4619      	mov	r1, r3
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fa60 	bl	800a4f4 <USBD_CoreFindEP>
 800a034:	4603      	mov	r3, r0
 800a036:	75bb      	strb	r3, [r7, #22]
            break;
 800a038:	e002      	b.n	800a040 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75bb      	strb	r3, [r7, #22]
            break;
 800a03e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a040:	7dbb      	ldrb	r3, [r7, #22]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d119      	bne.n	800a07a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d113      	bne.n	800a07a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a052:	7dba      	ldrb	r2, [r7, #22]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	32ae      	adds	r2, #174	; 0xae
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a062:	7dba      	ldrb	r2, [r7, #22]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a06a:	7dba      	ldrb	r2, [r7, #22]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	32ae      	adds	r2, #174	; 0xae
 800a070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f001 f94a 	bl	800b314 <USBD_CtlSendStatus>
 800a080:	e032      	b.n	800a0e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a082:	7afb      	ldrb	r3, [r7, #11]
 800a084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	4619      	mov	r1, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fa31 	bl	800a4f4 <USBD_CoreFindEP>
 800a092:	4603      	mov	r3, r0
 800a094:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a096:	7dbb      	ldrb	r3, [r7, #22]
 800a098:	2bff      	cmp	r3, #255	; 0xff
 800a09a:	d025      	beq.n	800a0e8 <USBD_LL_DataOutStage+0x15c>
 800a09c:	7dbb      	ldrb	r3, [r7, #22]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d122      	bne.n	800a0e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d117      	bne.n	800a0de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0ae:	7dba      	ldrb	r2, [r7, #22]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	32ae      	adds	r2, #174	; 0xae
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00f      	beq.n	800a0de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0be:	7dba      	ldrb	r2, [r7, #22]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0c6:	7dba      	ldrb	r2, [r7, #22]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	32ae      	adds	r2, #174	; 0xae
 800a0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	7afa      	ldrb	r2, [r7, #11]
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	4798      	blx	r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	e000      	b.n	800a0ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3718      	adds	r7, #24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b086      	sub	sp, #24
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	607a      	str	r2, [r7, #4]
 800a0fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d16f      	bne.n	800a1e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3314      	adds	r3, #20
 800a10a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a112:	2b02      	cmp	r3, #2
 800a114:	d15a      	bne.n	800a1cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d914      	bls.n	800a14c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	1ad2      	subs	r2, r2, r3
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	461a      	mov	r2, r3
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f001 f8ac 	bl	800b296 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a13e:	2300      	movs	r3, #0
 800a140:	2200      	movs	r2, #0
 800a142:	2100      	movs	r1, #0
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f001 fda3 	bl	800bc90 <USBD_LL_PrepareReceive>
 800a14a:	e03f      	b.n	800a1cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	429a      	cmp	r2, r3
 800a156:	d11c      	bne.n	800a192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a160:	429a      	cmp	r2, r3
 800a162:	d316      	bcc.n	800a192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a16e:	429a      	cmp	r2, r3
 800a170:	d20f      	bcs.n	800a192 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f001 f88d 	bl	800b296 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a184:	2300      	movs	r3, #0
 800a186:	2200      	movs	r2, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f001 fd80 	bl	800bc90 <USBD_LL_PrepareReceive>
 800a190:	e01c      	b.n	800a1cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d10f      	bne.n	800a1be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d009      	beq.n	800a1be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1be:	2180      	movs	r1, #128	; 0x80
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f001 fcbb 	bl	800bb3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f001 f8b7 	bl	800b33a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d03a      	beq.n	800a24c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f7ff fe42 	bl	8009e60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1e4:	e032      	b.n	800a24c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1e6:	7afb      	ldrb	r3, [r7, #11]
 800a1e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f97f 	bl	800a4f4 <USBD_CoreFindEP>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	2bff      	cmp	r3, #255	; 0xff
 800a1fe:	d025      	beq.n	800a24c <USBD_LL_DataInStage+0x15a>
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d122      	bne.n	800a24c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d11c      	bne.n	800a24c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a212:	7dfa      	ldrb	r2, [r7, #23]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	32ae      	adds	r2, #174	; 0xae
 800a218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d014      	beq.n	800a24c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a222:	7dfa      	ldrb	r2, [r7, #23]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a22a:	7dfa      	ldrb	r2, [r7, #23]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	32ae      	adds	r2, #174	; 0xae
 800a230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	7afa      	ldrb	r2, [r7, #11]
 800a238:	4611      	mov	r1, r2
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	4798      	blx	r3
 800a23e:	4603      	mov	r3, r0
 800a240:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a242:	7dbb      	ldrb	r3, [r7, #22]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a248:	7dbb      	ldrb	r3, [r7, #22]
 800a24a:	e000      	b.n	800a24e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d014      	beq.n	800a2bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6852      	ldr	r2, [r2, #4]
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 fbf5 	bl	800bab2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2240      	movs	r2, #64	; 0x40
 800a2d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2d8:	2340      	movs	r3, #64	; 0x40
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2180      	movs	r1, #128	; 0x80
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 fbe7 	bl	800bab2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2240      	movs	r2, #64	; 0x40
 800a2ee:	621a      	str	r2, [r3, #32]

  return ret;
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	78fa      	ldrb	r2, [r7, #3]
 800a30a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2204      	movs	r2, #4
 800a334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b04      	cmp	r3, #4
 800a358:	d106      	bne.n	800a368 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b03      	cmp	r3, #3
 800a388:	d110      	bne.n	800a3ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00b      	beq.n	800a3ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	32ae      	adds	r2, #174	; 0xae
 800a3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e01c      	b.n	800a412 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d115      	bne.n	800a410 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	32ae      	adds	r2, #174	; 0xae
 800a3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32ae      	adds	r2, #174	; 0xae
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	78fa      	ldrb	r2, [r7, #3]
 800a40a:	4611      	mov	r1, r2
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	32ae      	adds	r2, #174	; 0xae
 800a430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a438:	2303      	movs	r3, #3
 800a43a:	e01c      	b.n	800a476 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b03      	cmp	r3, #3
 800a446:	d115      	bne.n	800a474 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	32ae      	adds	r2, #174	; 0xae
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	32ae      	adds	r2, #174	; 0xae
 800a466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	4611      	mov	r1, r2
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00e      	beq.n	800a4d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6852      	ldr	r2, [r2, #4]
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a500:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	885b      	ldrh	r3, [r3, #2]
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	b29b      	uxth	r3, r3
 800a532:	429a      	cmp	r2, r3
 800a534:	d920      	bls.n	800a578 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a53e:	e013      	b.n	800a568 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a540:	f107 030a 	add.w	r3, r7, #10
 800a544:	4619      	mov	r1, r3
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f000 f81b 	bl	800a582 <USBD_GetNextDesc>
 800a54c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	785b      	ldrb	r3, [r3, #1]
 800a552:	2b05      	cmp	r3, #5
 800a554:	d108      	bne.n	800a568 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	789b      	ldrb	r3, [r3, #2]
 800a55e:	78fa      	ldrb	r2, [r7, #3]
 800a560:	429a      	cmp	r2, r3
 800a562:	d008      	beq.n	800a576 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a564:	2300      	movs	r3, #0
 800a566:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	885b      	ldrh	r3, [r3, #2]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	897b      	ldrh	r3, [r7, #10]
 800a570:	429a      	cmp	r2, r3
 800a572:	d8e5      	bhi.n	800a540 <USBD_GetEpDesc+0x32>
 800a574:	e000      	b.n	800a578 <USBD_GetEpDesc+0x6a>
          break;
 800a576:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a578:	693b      	ldr	r3, [r7, #16]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a582:	b480      	push	{r7}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4413      	add	r3, r2
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5da:	8a3b      	ldrh	r3, [r7, #16]
 800a5dc:	021b      	lsls	r3, r3, #8
 800a5de:	b21a      	sxth	r2, r3
 800a5e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5ea:	89fb      	ldrh	r3, [r7, #14]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a60e:	2b40      	cmp	r3, #64	; 0x40
 800a610:	d005      	beq.n	800a61e <USBD_StdDevReq+0x26>
 800a612:	2b40      	cmp	r3, #64	; 0x40
 800a614:	d857      	bhi.n	800a6c6 <USBD_StdDevReq+0xce>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00f      	beq.n	800a63a <USBD_StdDevReq+0x42>
 800a61a:	2b20      	cmp	r3, #32
 800a61c:	d153      	bne.n	800a6c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	32ae      	adds	r2, #174	; 0xae
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	4798      	blx	r3
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	e04a      	b.n	800a6d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	785b      	ldrb	r3, [r3, #1]
 800a63e:	2b09      	cmp	r3, #9
 800a640:	d83b      	bhi.n	800a6ba <USBD_StdDevReq+0xc2>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <USBD_StdDevReq+0x50>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a6b1 	.word	0x0800a6b1
 800a650:	0800a6bb 	.word	0x0800a6bb
 800a654:	0800a6a7 	.word	0x0800a6a7
 800a658:	0800a6bb 	.word	0x0800a6bb
 800a65c:	0800a67b 	.word	0x0800a67b
 800a660:	0800a671 	.word	0x0800a671
 800a664:	0800a6bb 	.word	0x0800a6bb
 800a668:	0800a693 	.word	0x0800a693
 800a66c:	0800a685 	.word	0x0800a685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fa3c 	bl	800aaf0 <USBD_GetDescriptor>
          break;
 800a678:	e024      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fba1 	bl	800adc4 <USBD_SetAddress>
          break;
 800a682:	e01f      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fbe0 	bl	800ae4c <USBD_SetConfig>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
          break;
 800a690:	e018      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc83 	bl	800afa0 <USBD_GetConfig>
          break;
 800a69a:	e013      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fcb4 	bl	800b00c <USBD_GetStatus>
          break;
 800a6a4:	e00e      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fce3 	bl	800b074 <USBD_SetFeature>
          break;
 800a6ae:	e009      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fd07 	bl	800b0c6 <USBD_ClrFeature>
          break;
 800a6b8:	e004      	b.n	800a6c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fd5e 	bl	800b17e <USBD_CtlError>
          break;
 800a6c2:	bf00      	nop
      }
      break;
 800a6c4:	e004      	b.n	800a6d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fd58 	bl	800b17e <USBD_CtlError>
      break;
 800a6ce:	bf00      	nop
  }

  return ret;
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop

0800a6dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6f2:	2b40      	cmp	r3, #64	; 0x40
 800a6f4:	d005      	beq.n	800a702 <USBD_StdItfReq+0x26>
 800a6f6:	2b40      	cmp	r3, #64	; 0x40
 800a6f8:	d852      	bhi.n	800a7a0 <USBD_StdItfReq+0xc4>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <USBD_StdItfReq+0x26>
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	d14e      	bne.n	800a7a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d840      	bhi.n	800a792 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	889b      	ldrh	r3, [r3, #4]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b01      	cmp	r3, #1
 800a718:	d836      	bhi.n	800a788 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	889b      	ldrh	r3, [r3, #4]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fed9 	bl	800a4da <USBD_CoreFindIF>
 800a728:	4603      	mov	r3, r0
 800a72a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	2bff      	cmp	r3, #255	; 0xff
 800a730:	d01d      	beq.n	800a76e <USBD_StdItfReq+0x92>
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d11a      	bne.n	800a76e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a738:	7bba      	ldrb	r2, [r7, #14]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	32ae      	adds	r2, #174	; 0xae
 800a73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00f      	beq.n	800a768 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a748:	7bba      	ldrb	r2, [r7, #14]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a750:	7bba      	ldrb	r2, [r7, #14]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	32ae      	adds	r2, #174	; 0xae
 800a756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4798      	blx	r3
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a766:	e004      	b.n	800a772 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a768:	2303      	movs	r3, #3
 800a76a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a76c:	e001      	b.n	800a772 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a76e:	2303      	movs	r3, #3
 800a770:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	88db      	ldrh	r3, [r3, #6]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d110      	bne.n	800a79c <USBD_StdItfReq+0xc0>
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10d      	bne.n	800a79c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fdc7 	bl	800b314 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a786:	e009      	b.n	800a79c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fcf7 	bl	800b17e <USBD_CtlError>
          break;
 800a790:	e004      	b.n	800a79c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fcf2 	bl	800b17e <USBD_CtlError>
          break;
 800a79a:	e000      	b.n	800a79e <USBD_StdItfReq+0xc2>
          break;
 800a79c:	bf00      	nop
      }
      break;
 800a79e:	e004      	b.n	800a7aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fceb 	bl	800b17e <USBD_CtlError>
      break;
 800a7a8:	bf00      	nop
  }

  return ret;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	889b      	ldrh	r3, [r3, #4]
 800a7c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7d0:	2b40      	cmp	r3, #64	; 0x40
 800a7d2:	d007      	beq.n	800a7e4 <USBD_StdEPReq+0x30>
 800a7d4:	2b40      	cmp	r3, #64	; 0x40
 800a7d6:	f200 817f 	bhi.w	800aad8 <USBD_StdEPReq+0x324>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d02a      	beq.n	800a834 <USBD_StdEPReq+0x80>
 800a7de:	2b20      	cmp	r3, #32
 800a7e0:	f040 817a 	bne.w	800aad8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fe83 	bl	800a4f4 <USBD_CoreFindEP>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7f2:	7b7b      	ldrb	r3, [r7, #13]
 800a7f4:	2bff      	cmp	r3, #255	; 0xff
 800a7f6:	f000 8174 	beq.w	800aae2 <USBD_StdEPReq+0x32e>
 800a7fa:	7b7b      	ldrb	r3, [r7, #13]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8170 	bne.w	800aae2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a802:	7b7a      	ldrb	r2, [r7, #13]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a80a:	7b7a      	ldrb	r2, [r7, #13]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	32ae      	adds	r2, #174	; 0xae
 800a810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 8163 	beq.w	800aae2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a81c:	7b7a      	ldrb	r2, [r7, #13]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	32ae      	adds	r2, #174	; 0xae
 800a822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	4798      	blx	r3
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a832:	e156      	b.n	800aae2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d008      	beq.n	800a84e <USBD_StdEPReq+0x9a>
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	f300 8145 	bgt.w	800aacc <USBD_StdEPReq+0x318>
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 809b 	beq.w	800a97e <USBD_StdEPReq+0x1ca>
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d03c      	beq.n	800a8c6 <USBD_StdEPReq+0x112>
 800a84c:	e13e      	b.n	800aacc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b02      	cmp	r3, #2
 800a858:	d002      	beq.n	800a860 <USBD_StdEPReq+0xac>
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d016      	beq.n	800a88c <USBD_StdEPReq+0xd8>
 800a85e:	e02c      	b.n	800a8ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00d      	beq.n	800a882 <USBD_StdEPReq+0xce>
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b80      	cmp	r3, #128	; 0x80
 800a86a:	d00a      	beq.n	800a882 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f001 f963 	bl	800bb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a876:	2180      	movs	r1, #128	; 0x80
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 f95f 	bl	800bb3c <USBD_LL_StallEP>
 800a87e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a880:	e020      	b.n	800a8c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fc7a 	bl	800b17e <USBD_CtlError>
              break;
 800a88a:	e01b      	b.n	800a8c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	885b      	ldrh	r3, [r3, #2]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10e      	bne.n	800a8b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00b      	beq.n	800a8b2 <USBD_StdEPReq+0xfe>
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
 800a89c:	2b80      	cmp	r3, #128	; 0x80
 800a89e:	d008      	beq.n	800a8b2 <USBD_StdEPReq+0xfe>
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	88db      	ldrh	r3, [r3, #6]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d104      	bne.n	800a8b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f001 f945 	bl	800bb3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fd2e 	bl	800b314 <USBD_CtlSendStatus>

              break;
 800a8b8:	e004      	b.n	800a8c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fc5e 	bl	800b17e <USBD_CtlError>
              break;
 800a8c2:	bf00      	nop
          }
          break;
 800a8c4:	e107      	b.n	800aad6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d002      	beq.n	800a8d8 <USBD_StdEPReq+0x124>
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d016      	beq.n	800a904 <USBD_StdEPReq+0x150>
 800a8d6:	e04b      	b.n	800a970 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00d      	beq.n	800a8fa <USBD_StdEPReq+0x146>
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	2b80      	cmp	r3, #128	; 0x80
 800a8e2:	d00a      	beq.n	800a8fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f001 f927 	bl	800bb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ee:	2180      	movs	r1, #128	; 0x80
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f001 f923 	bl	800bb3c <USBD_LL_StallEP>
 800a8f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8f8:	e040      	b.n	800a97c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fc3e 	bl	800b17e <USBD_CtlError>
              break;
 800a902:	e03b      	b.n	800a97c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	885b      	ldrh	r3, [r3, #2]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d136      	bne.n	800a97a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a912:	2b00      	cmp	r3, #0
 800a914:	d004      	beq.n	800a920 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f001 f92d 	bl	800bb7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fcf7 	bl	800b314 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff fde2 	bl	800a4f4 <USBD_CoreFindEP>
 800a930:	4603      	mov	r3, r0
 800a932:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a934:	7b7b      	ldrb	r3, [r7, #13]
 800a936:	2bff      	cmp	r3, #255	; 0xff
 800a938:	d01f      	beq.n	800a97a <USBD_StdEPReq+0x1c6>
 800a93a:	7b7b      	ldrb	r3, [r7, #13]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11c      	bne.n	800a97a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a940:	7b7a      	ldrb	r2, [r7, #13]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a948:	7b7a      	ldrb	r2, [r7, #13]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	32ae      	adds	r2, #174	; 0xae
 800a94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d010      	beq.n	800a97a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a958:	7b7a      	ldrb	r2, [r7, #13]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	32ae      	adds	r2, #174	; 0xae
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a96e:	e004      	b.n	800a97a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fc03 	bl	800b17e <USBD_CtlError>
              break;
 800a978:	e000      	b.n	800a97c <USBD_StdEPReq+0x1c8>
              break;
 800a97a:	bf00      	nop
          }
          break;
 800a97c:	e0ab      	b.n	800aad6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d002      	beq.n	800a990 <USBD_StdEPReq+0x1dc>
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d032      	beq.n	800a9f4 <USBD_StdEPReq+0x240>
 800a98e:	e097      	b.n	800aac0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <USBD_StdEPReq+0x1f2>
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	2b80      	cmp	r3, #128	; 0x80
 800a99a:	d004      	beq.n	800a9a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fbed 	bl	800b17e <USBD_CtlError>
                break;
 800a9a4:	e091      	b.n	800aaca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	da0b      	bge.n	800a9c6 <USBD_StdEPReq+0x212>
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	3310      	adds	r3, #16
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	e00b      	b.n	800a9de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	4413      	add	r3, r2
 800a9dc:	3304      	adds	r3, #4
 800a9de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fc37 	bl	800b260 <USBD_CtlSendData>
              break;
 800a9f2:	e06a      	b.n	800aaca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da11      	bge.n	800aa20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	f003 020f 	and.w	r2, r3, #15
 800aa02:	6879      	ldr	r1, [r7, #4]
 800aa04:	4613      	mov	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	440b      	add	r3, r1
 800aa0e:	3324      	adds	r3, #36	; 0x24
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d117      	bne.n	800aa46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fbb0 	bl	800b17e <USBD_CtlError>
                  break;
 800aa1e:	e054      	b.n	800aaca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
 800aa22:	f003 020f 	and.w	r2, r3, #15
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	440b      	add	r3, r1
 800aa32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fb9d 	bl	800b17e <USBD_CtlError>
                  break;
 800aa44:	e041      	b.n	800aaca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	da0b      	bge.n	800aa66 <USBD_StdEPReq+0x2b2>
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	3310      	adds	r3, #16
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	4413      	add	r3, r2
 800aa62:	3304      	adds	r3, #4
 800aa64:	e00b      	b.n	800aa7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <USBD_StdEPReq+0x2d8>
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	2b80      	cmp	r3, #128	; 0x80
 800aa8a:	d103      	bne.n	800aa94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e00e      	b.n	800aab2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f88d 	bl	800bbb8 <USBD_LL_IsStallEP>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	e002      	b.n	800aab2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2202      	movs	r2, #2
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fbd1 	bl	800b260 <USBD_CtlSendData>
              break;
 800aabe:	e004      	b.n	800aaca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fb5b 	bl	800b17e <USBD_CtlError>
              break;
 800aac8:	bf00      	nop
          }
          break;
 800aaca:	e004      	b.n	800aad6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fb55 	bl	800b17e <USBD_CtlError>
          break;
 800aad4:	bf00      	nop
      }
      break;
 800aad6:	e005      	b.n	800aae4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fb4f 	bl	800b17e <USBD_CtlError>
      break;
 800aae0:	e000      	b.n	800aae4 <USBD_StdEPReq+0x330>
      break;
 800aae2:	bf00      	nop
  }

  return ret;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	885b      	ldrh	r3, [r3, #2]
 800ab0a:	0a1b      	lsrs	r3, r3, #8
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	2b06      	cmp	r3, #6
 800ab12:	f200 8128 	bhi.w	800ad66 <USBD_GetDescriptor+0x276>
 800ab16:	a201      	add	r2, pc, #4	; (adr r2, 800ab1c <USBD_GetDescriptor+0x2c>)
 800ab18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1c:	0800ab39 	.word	0x0800ab39
 800ab20:	0800ab51 	.word	0x0800ab51
 800ab24:	0800ab91 	.word	0x0800ab91
 800ab28:	0800ad67 	.word	0x0800ad67
 800ab2c:	0800ad67 	.word	0x0800ad67
 800ab30:	0800ad07 	.word	0x0800ad07
 800ab34:	0800ad33 	.word	0x0800ad33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	7c12      	ldrb	r2, [r2, #16]
 800ab44:	f107 0108 	add.w	r1, r7, #8
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4798      	blx	r3
 800ab4c:	60f8      	str	r0, [r7, #12]
      break;
 800ab4e:	e112      	b.n	800ad76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7c1b      	ldrb	r3, [r3, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10d      	bne.n	800ab74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	f107 0208 	add.w	r2, r7, #8
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	2202      	movs	r2, #2
 800ab70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab72:	e100      	b.n	800ad76 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	f107 0208 	add.w	r2, r7, #8
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
 800ab84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	701a      	strb	r2, [r3, #0]
      break;
 800ab8e:	e0f2      	b.n	800ad76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	885b      	ldrh	r3, [r3, #2]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	f200 80ac 	bhi.w	800acf4 <USBD_GetDescriptor+0x204>
 800ab9c:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <USBD_GetDescriptor+0xb4>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abbd 	.word	0x0800abbd
 800aba8:	0800abf1 	.word	0x0800abf1
 800abac:	0800ac25 	.word	0x0800ac25
 800abb0:	0800ac59 	.word	0x0800ac59
 800abb4:	0800ac8d 	.word	0x0800ac8d
 800abb8:	0800acc1 	.word	0x0800acc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abde:	e091      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 facb 	bl	800b17e <USBD_CtlError>
            err++;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	3301      	adds	r3, #1
 800abec:	72fb      	strb	r3, [r7, #11]
          break;
 800abee:	e089      	b.n	800ad04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac12:	e077      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fab1 	bl	800b17e <USBD_CtlError>
            err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
          break;
 800ac22:	e06f      	b.n	800ad04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7c12      	ldrb	r2, [r2, #16]
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac46:	e05d      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa97 	bl	800b17e <USBD_CtlError>
            err++;
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	3301      	adds	r3, #1
 800ac54:	72fb      	strb	r3, [r7, #11]
          break;
 800ac56:	e055      	b.n	800ad04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00b      	beq.n	800ac7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	7c12      	ldrb	r2, [r2, #16]
 800ac70:	f107 0108 	add.w	r1, r7, #8
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
 800ac78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac7a:	e043      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa7d 	bl	800b17e <USBD_CtlError>
            err++;
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	3301      	adds	r3, #1
 800ac88:	72fb      	strb	r3, [r7, #11]
          break;
 800ac8a:	e03b      	b.n	800ad04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7c12      	ldrb	r2, [r2, #16]
 800aca4:	f107 0108 	add.w	r1, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acae:	e029      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa63 	bl	800b17e <USBD_CtlError>
            err++;
 800acb8:	7afb      	ldrb	r3, [r7, #11]
 800acba:	3301      	adds	r3, #1
 800acbc:	72fb      	strb	r3, [r7, #11]
          break;
 800acbe:	e021      	b.n	800ad04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00b      	beq.n	800ace4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	7c12      	ldrb	r2, [r2, #16]
 800acd8:	f107 0108 	add.w	r1, r7, #8
 800acdc:	4610      	mov	r0, r2
 800acde:	4798      	blx	r3
 800ace0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ace2:	e00f      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa49 	bl	800b17e <USBD_CtlError>
            err++;
 800acec:	7afb      	ldrb	r3, [r7, #11]
 800acee:	3301      	adds	r3, #1
 800acf0:	72fb      	strb	r3, [r7, #11]
          break;
 800acf2:	e007      	b.n	800ad04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa41 	bl	800b17e <USBD_CtlError>
          err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad02:	bf00      	nop
      }
      break;
 800ad04:	e037      	b.n	800ad76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7c1b      	ldrb	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad16:	f107 0208 	add.w	r2, r7, #8
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	4798      	blx	r3
 800ad1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad20:	e029      	b.n	800ad76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa2a 	bl	800b17e <USBD_CtlError>
        err++;
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad30:	e021      	b.n	800ad76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7c1b      	ldrb	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10d      	bne.n	800ad56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f107 0208 	add.w	r2, r7, #8
 800ad46:	4610      	mov	r0, r2
 800ad48:	4798      	blx	r3
 800ad4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	2207      	movs	r2, #7
 800ad52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad54:	e00f      	b.n	800ad76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fa10 	bl	800b17e <USBD_CtlError>
        err++;
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	3301      	adds	r3, #1
 800ad62:	72fb      	strb	r3, [r7, #11]
      break;
 800ad64:	e007      	b.n	800ad76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa08 	bl	800b17e <USBD_CtlError>
      err++;
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	3301      	adds	r3, #1
 800ad72:	72fb      	strb	r3, [r7, #11]
      break;
 800ad74:	bf00      	nop
  }

  if (err != 0U)
 800ad76:	7afb      	ldrb	r3, [r7, #11]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11e      	bne.n	800adba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	88db      	ldrh	r3, [r3, #6]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d016      	beq.n	800adb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ad84:	893b      	ldrh	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00e      	beq.n	800ada8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	88da      	ldrh	r2, [r3, #6]
 800ad8e:	893b      	ldrh	r3, [r7, #8]
 800ad90:	4293      	cmp	r3, r2
 800ad92:	bf28      	it	cs
 800ad94:	4613      	movcs	r3, r2
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad9a:	893b      	ldrh	r3, [r7, #8]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fa5d 	bl	800b260 <USBD_CtlSendData>
 800ada6:	e009      	b.n	800adbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f9e7 	bl	800b17e <USBD_CtlError>
 800adb0:	e004      	b.n	800adbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 faae 	bl	800b314 <USBD_CtlSendStatus>
 800adb8:	e000      	b.n	800adbc <USBD_GetDescriptor+0x2cc>
    return;
 800adba:	bf00      	nop
  }
}
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop

0800adc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	889b      	ldrh	r3, [r3, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d131      	bne.n	800ae3a <USBD_SetAddress+0x76>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	88db      	ldrh	r3, [r3, #6]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d12d      	bne.n	800ae3a <USBD_SetAddress+0x76>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	885b      	ldrh	r3, [r3, #2]
 800ade2:	2b7f      	cmp	r3, #127	; 0x7f
 800ade4:	d829      	bhi.n	800ae3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	885b      	ldrh	r3, [r3, #2]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d104      	bne.n	800ae08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f9bc 	bl	800b17e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae06:	e01d      	b.n	800ae44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	7bfa      	ldrb	r2, [r7, #15]
 800ae0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fefb 	bl	800bc10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fa7a 	bl	800b314 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d004      	beq.n	800ae30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2202      	movs	r2, #2
 800ae2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2e:	e009      	b.n	800ae44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae38:	e004      	b.n	800ae44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f99e 	bl	800b17e <USBD_CtlError>
  }
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	885b      	ldrh	r3, [r3, #2]
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	4b4e      	ldr	r3, [pc, #312]	; (800af9c <USBD_SetConfig+0x150>)
 800ae62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae64:	4b4d      	ldr	r3, [pc, #308]	; (800af9c <USBD_SetConfig+0x150>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d905      	bls.n	800ae78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f985 	bl	800b17e <USBD_CtlError>
    return USBD_FAIL;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e08c      	b.n	800af92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d002      	beq.n	800ae8a <USBD_SetConfig+0x3e>
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d029      	beq.n	800aedc <USBD_SetConfig+0x90>
 800ae88:	e075      	b.n	800af76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae8a:	4b44      	ldr	r3, [pc, #272]	; (800af9c <USBD_SetConfig+0x150>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d020      	beq.n	800aed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae92:	4b42      	ldr	r3, [pc, #264]	; (800af9c <USBD_SetConfig+0x150>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae9c:	4b3f      	ldr	r3, [pc, #252]	; (800af9c <USBD_SetConfig+0x150>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fe ffe7 	bl	8009e76 <USBD_SetClassConfig>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d008      	beq.n	800aec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f962 	bl	800b17e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2202      	movs	r2, #2
 800aebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aec2:	e065      	b.n	800af90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fa25 	bl	800b314 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2203      	movs	r2, #3
 800aece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aed2:	e05d      	b.n	800af90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fa1d 	bl	800b314 <USBD_CtlSendStatus>
      break;
 800aeda:	e059      	b.n	800af90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aedc:	4b2f      	ldr	r3, [pc, #188]	; (800af9c <USBD_SetConfig+0x150>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d112      	bne.n	800af0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aeec:	4b2b      	ldr	r3, [pc, #172]	; (800af9c <USBD_SetConfig+0x150>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	461a      	mov	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aef6:	4b29      	ldr	r3, [pc, #164]	; (800af9c <USBD_SetConfig+0x150>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7fe ffd6 	bl	8009eae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fa06 	bl	800b314 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af08:	e042      	b.n	800af90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af0a:	4b24      	ldr	r3, [pc, #144]	; (800af9c <USBD_SetConfig+0x150>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	429a      	cmp	r2, r3
 800af16:	d02a      	beq.n	800af6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7fe ffc4 	bl	8009eae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af26:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <USBD_SetConfig+0x150>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <USBD_SetConfig+0x150>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7fe ff9d 	bl	8009e76 <USBD_SetClassConfig>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00f      	beq.n	800af66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f918 	bl	800b17e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fe ffa9 	bl	8009eae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af64:	e014      	b.n	800af90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f9d4 	bl	800b314 <USBD_CtlSendStatus>
      break;
 800af6c:	e010      	b.n	800af90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9d0 	bl	800b314 <USBD_CtlSendStatus>
      break;
 800af74:	e00c      	b.n	800af90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f900 	bl	800b17e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af7e:	4b07      	ldr	r3, [pc, #28]	; (800af9c <USBD_SetConfig+0x150>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7fe ff92 	bl	8009eae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af8a:	2303      	movs	r3, #3
 800af8c:	73fb      	strb	r3, [r7, #15]
      break;
 800af8e:	bf00      	nop
  }

  return ret;
 800af90:	7bfb      	ldrb	r3, [r7, #15]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	200023b8 	.word	0x200023b8

0800afa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	88db      	ldrh	r3, [r3, #6]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d004      	beq.n	800afbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f8e2 	bl	800b17e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afba:	e023      	b.n	800b004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	dc02      	bgt.n	800afce <USBD_GetConfig+0x2e>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dc03      	bgt.n	800afd4 <USBD_GetConfig+0x34>
 800afcc:	e015      	b.n	800affa <USBD_GetConfig+0x5a>
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d00b      	beq.n	800afea <USBD_GetConfig+0x4a>
 800afd2:	e012      	b.n	800affa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	3308      	adds	r3, #8
 800afde:	2201      	movs	r2, #1
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f93c 	bl	800b260 <USBD_CtlSendData>
        break;
 800afe8:	e00c      	b.n	800b004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3304      	adds	r3, #4
 800afee:	2201      	movs	r2, #1
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f934 	bl	800b260 <USBD_CtlSendData>
        break;
 800aff8:	e004      	b.n	800b004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f8be 	bl	800b17e <USBD_CtlError>
        break;
 800b002:	bf00      	nop
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	3b01      	subs	r3, #1
 800b020:	2b02      	cmp	r3, #2
 800b022:	d81e      	bhi.n	800b062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	88db      	ldrh	r3, [r3, #6]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d004      	beq.n	800b036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f8a5 	bl	800b17e <USBD_CtlError>
        break;
 800b034:	e01a      	b.n	800b06c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b042:	2b00      	cmp	r3, #0
 800b044:	d005      	beq.n	800b052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f043 0202 	orr.w	r2, r3, #2
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	330c      	adds	r3, #12
 800b056:	2202      	movs	r2, #2
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f900 	bl	800b260 <USBD_CtlSendData>
      break;
 800b060:	e004      	b.n	800b06c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f88a 	bl	800b17e <USBD_CtlError>
      break;
 800b06a:	bf00      	nop
  }
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	885b      	ldrh	r3, [r3, #2]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d107      	bne.n	800b096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f940 	bl	800b314 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b094:	e013      	b.n	800b0be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	885b      	ldrh	r3, [r3, #2]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d10b      	bne.n	800b0b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	889b      	ldrh	r3, [r3, #4]
 800b0a2:	0a1b      	lsrs	r3, r3, #8
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f930 	bl	800b314 <USBD_CtlSendStatus>
}
 800b0b4:	e003      	b.n	800b0be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0b6:	6839      	ldr	r1, [r7, #0]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f860 	bl	800b17e <USBD_CtlError>
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d80b      	bhi.n	800b0f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	885b      	ldrh	r3, [r3, #2]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d10c      	bne.n	800b100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f910 	bl	800b314 <USBD_CtlSendStatus>
      }
      break;
 800b0f4:	e004      	b.n	800b100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f840 	bl	800b17e <USBD_CtlError>
      break;
 800b0fe:	e000      	b.n	800b102 <USBD_ClrFeature+0x3c>
      break;
 800b100:	bf00      	nop
  }
}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	781a      	ldrb	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff fa41 	bl	800a5bc <SWAPBYTE>
 800b13a:	4603      	mov	r3, r0
 800b13c:	461a      	mov	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3301      	adds	r3, #1
 800b14c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f7ff fa34 	bl	800a5bc <SWAPBYTE>
 800b154:	4603      	mov	r3, r0
 800b156:	461a      	mov	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3301      	adds	r3, #1
 800b160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3301      	adds	r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f7ff fa27 	bl	800a5bc <SWAPBYTE>
 800b16e:	4603      	mov	r3, r0
 800b170:	461a      	mov	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	80da      	strh	r2, [r3, #6]
}
 800b176:	bf00      	nop
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b188:	2180      	movs	r1, #128	; 0x80
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fcd6 	bl	800bb3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b190:	2100      	movs	r1, #0
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fcd2 	bl	800bb3c <USBD_LL_StallEP>
}
 800b198:	bf00      	nop
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d036      	beq.n	800b224 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1ba:	6938      	ldr	r0, [r7, #16]
 800b1bc:	f000 f836 	bl	800b22c <USBD_GetLen>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	7812      	ldrb	r2, [r2, #0]
 800b1d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	2203      	movs	r2, #3
 800b1e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b1f0:	e013      	b.n	800b21a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	7812      	ldrb	r2, [r2, #0]
 800b1fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	3301      	adds	r3, #1
 800b202:	613b      	str	r3, [r7, #16]
    idx++;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	3301      	adds	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	4413      	add	r3, r2
 800b210:	2200      	movs	r2, #0
 800b212:	701a      	strb	r2, [r3, #0]
    idx++;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	3301      	adds	r3, #1
 800b218:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1e7      	bne.n	800b1f2 <USBD_GetString+0x52>
 800b222:	e000      	b.n	800b226 <USBD_GetString+0x86>
    return;
 800b224:	bf00      	nop
  }
}
 800b226:	3718      	adds	r7, #24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b23c:	e005      	b.n	800b24a <USBD_GetLen+0x1e>
  {
    len++;
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	3301      	adds	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3301      	adds	r3, #1
 800b248:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1f5      	bne.n	800b23e <USBD_GetLen+0x12>
  }

  return len;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2202      	movs	r2, #2
 800b270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	2100      	movs	r1, #0
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f000 fce1 	bl	800bc4e <USBD_LL_Transmit>

  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 fcd0 	bl	800bc4e <USBD_LL_Transmit>

  return USBD_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2203      	movs	r2, #3
 800b2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fcd4 	bl	800bc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	2100      	movs	r1, #0
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 fcc3 	bl	800bc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2204      	movs	r2, #4
 800b320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b324:	2300      	movs	r3, #0
 800b326:	2200      	movs	r2, #0
 800b328:	2100      	movs	r1, #0
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fc8f 	bl	800bc4e <USBD_LL_Transmit>

  return USBD_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2205      	movs	r2, #5
 800b346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b34a:	2300      	movs	r3, #0
 800b34c:	2200      	movs	r2, #0
 800b34e:	2100      	movs	r1, #0
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fc9d 	bl	800bc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b364:	2200      	movs	r2, #0
 800b366:	4912      	ldr	r1, [pc, #72]	; (800b3b0 <MX_USB_DEVICE_Init+0x50>)
 800b368:	4812      	ldr	r0, [pc, #72]	; (800b3b4 <MX_USB_DEVICE_Init+0x54>)
 800b36a:	f7fe fd07 	bl	8009d7c <USBD_Init>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b374:	f7f6 fb60 	bl	8001a38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b378:	490f      	ldr	r1, [pc, #60]	; (800b3b8 <MX_USB_DEVICE_Init+0x58>)
 800b37a:	480e      	ldr	r0, [pc, #56]	; (800b3b4 <MX_USB_DEVICE_Init+0x54>)
 800b37c:	f7fe fd2e 	bl	8009ddc <USBD_RegisterClass>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b386:	f7f6 fb57 	bl	8001a38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b38a:	490c      	ldr	r1, [pc, #48]	; (800b3bc <MX_USB_DEVICE_Init+0x5c>)
 800b38c:	4809      	ldr	r0, [pc, #36]	; (800b3b4 <MX_USB_DEVICE_Init+0x54>)
 800b38e:	f7fe fc1f 	bl	8009bd0 <USBD_CDC_RegisterInterface>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b398:	f7f6 fb4e 	bl	8001a38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <MX_USB_DEVICE_Init+0x54>)
 800b39e:	f7fe fd53 	bl	8009e48 <USBD_Start>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3a8:	f7f6 fb46 	bl	8001a38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3ac:	bf00      	nop
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	200001d0 	.word	0x200001d0
 800b3b4:	200023bc 	.word	0x200023bc
 800b3b8:	2000013c 	.word	0x2000013c
 800b3bc:	200001bc 	.word	0x200001bc

0800b3c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4905      	ldr	r1, [pc, #20]	; (800b3dc <CDC_Init_FS+0x1c>)
 800b3c8:	4805      	ldr	r0, [pc, #20]	; (800b3e0 <CDC_Init_FS+0x20>)
 800b3ca:	f7fe fc1b 	bl	8009c04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b3ce:	4905      	ldr	r1, [pc, #20]	; (800b3e4 <CDC_Init_FS+0x24>)
 800b3d0:	4803      	ldr	r0, [pc, #12]	; (800b3e0 <CDC_Init_FS+0x20>)
 800b3d2:	f7fe fc39 	bl	8009c48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b3d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20002a98 	.word	0x20002a98
 800b3e0:	200023bc 	.word	0x200023bc
 800b3e4:	20002698 	.word	0x20002698

0800b3e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	6039      	str	r1, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
 800b404:	4613      	mov	r3, r2
 800b406:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	2b23      	cmp	r3, #35	; 0x23
 800b40c:	d84a      	bhi.n	800b4a4 <CDC_Control_FS+0xac>
 800b40e:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <CDC_Control_FS+0x1c>)
 800b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b414:	0800b4a5 	.word	0x0800b4a5
 800b418:	0800b4a5 	.word	0x0800b4a5
 800b41c:	0800b4a5 	.word	0x0800b4a5
 800b420:	0800b4a5 	.word	0x0800b4a5
 800b424:	0800b4a5 	.word	0x0800b4a5
 800b428:	0800b4a5 	.word	0x0800b4a5
 800b42c:	0800b4a5 	.word	0x0800b4a5
 800b430:	0800b4a5 	.word	0x0800b4a5
 800b434:	0800b4a5 	.word	0x0800b4a5
 800b438:	0800b4a5 	.word	0x0800b4a5
 800b43c:	0800b4a5 	.word	0x0800b4a5
 800b440:	0800b4a5 	.word	0x0800b4a5
 800b444:	0800b4a5 	.word	0x0800b4a5
 800b448:	0800b4a5 	.word	0x0800b4a5
 800b44c:	0800b4a5 	.word	0x0800b4a5
 800b450:	0800b4a5 	.word	0x0800b4a5
 800b454:	0800b4a5 	.word	0x0800b4a5
 800b458:	0800b4a5 	.word	0x0800b4a5
 800b45c:	0800b4a5 	.word	0x0800b4a5
 800b460:	0800b4a5 	.word	0x0800b4a5
 800b464:	0800b4a5 	.word	0x0800b4a5
 800b468:	0800b4a5 	.word	0x0800b4a5
 800b46c:	0800b4a5 	.word	0x0800b4a5
 800b470:	0800b4a5 	.word	0x0800b4a5
 800b474:	0800b4a5 	.word	0x0800b4a5
 800b478:	0800b4a5 	.word	0x0800b4a5
 800b47c:	0800b4a5 	.word	0x0800b4a5
 800b480:	0800b4a5 	.word	0x0800b4a5
 800b484:	0800b4a5 	.word	0x0800b4a5
 800b488:	0800b4a5 	.word	0x0800b4a5
 800b48c:	0800b4a5 	.word	0x0800b4a5
 800b490:	0800b4a5 	.word	0x0800b4a5
 800b494:	0800b4a5 	.word	0x0800b4a5
 800b498:	0800b4a5 	.word	0x0800b4a5
 800b49c:	0800b4a5 	.word	0x0800b4a5
 800b4a0:	0800b4a5 	.word	0x0800b4a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4a4:	bf00      	nop
  }

  return (USBD_OK);
 800b4a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <CDC_Receive_FS+0x24>)
 800b4c2:	f7fe fbc1 	bl	8009c48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4c6:	4804      	ldr	r0, [pc, #16]	; (800b4d8 <CDC_Receive_FS+0x24>)
 800b4c8:	f7fe fc22 	bl	8009d10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	200023bc 	.word	0x200023bc

0800b4dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <CDC_Transmit_FS+0x48>)
 800b4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e00b      	b.n	800b51a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b502:	887b      	ldrh	r3, [r7, #2]
 800b504:	461a      	mov	r2, r3
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	4806      	ldr	r0, [pc, #24]	; (800b524 <CDC_Transmit_FS+0x48>)
 800b50a:	f7fe fb7b 	bl	8009c04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b50e:	4805      	ldr	r0, [pc, #20]	; (800b524 <CDC_Transmit_FS+0x48>)
 800b510:	f7fe fbb8 	bl	8009c84 <USBD_CDC_TransmitPacket>
 800b514:	4603      	mov	r3, r0
 800b516:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	200023bc 	.word	0x200023bc

0800b528 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b53a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2212      	movs	r2, #18
 800b55c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	200001ec 	.word	0x200001ec

0800b570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2204      	movs	r2, #4
 800b580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b582:	4b03      	ldr	r3, [pc, #12]	; (800b590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	20000200 	.word	0x20000200

0800b594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d105      	bne.n	800b5b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	4907      	ldr	r1, [pc, #28]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5aa:	4808      	ldr	r0, [pc, #32]	; (800b5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b5ac:	f7ff fdf8 	bl	800b1a0 <USBD_GetString>
 800b5b0:	e004      	b.n	800b5bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	4904      	ldr	r1, [pc, #16]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5b6:	4805      	ldr	r0, [pc, #20]	; (800b5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b5b8:	f7ff fdf2 	bl	800b1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5bc:	4b02      	ldr	r3, [pc, #8]	; (800b5c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20002e98 	.word	0x20002e98
 800b5cc:	0800c874 	.word	0x0800c874

0800b5d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	6039      	str	r1, [r7, #0]
 800b5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	4904      	ldr	r1, [pc, #16]	; (800b5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5e0:	4804      	ldr	r0, [pc, #16]	; (800b5f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5e2:	f7ff fddd 	bl	800b1a0 <USBD_GetString>
  return USBD_StrDesc;
 800b5e6:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20002e98 	.word	0x20002e98
 800b5f4:	0800c88c 	.word	0x0800c88c

0800b5f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	6039      	str	r1, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	221a      	movs	r2, #26
 800b608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b60a:	f000 f843 	bl	800b694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b60e:	4b02      	ldr	r3, [pc, #8]	; (800b618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000204 	.word	0x20000204

0800b61c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	6039      	str	r1, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d105      	bne.n	800b63a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	4907      	ldr	r1, [pc, #28]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b632:	4808      	ldr	r0, [pc, #32]	; (800b654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b634:	f7ff fdb4 	bl	800b1a0 <USBD_GetString>
 800b638:	e004      	b.n	800b644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	4904      	ldr	r1, [pc, #16]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b63e:	4805      	ldr	r0, [pc, #20]	; (800b654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b640:	f7ff fdae 	bl	800b1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b644:	4b02      	ldr	r3, [pc, #8]	; (800b650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20002e98 	.word	0x20002e98
 800b654:	0800c8a0 	.word	0x0800c8a0

0800b658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d105      	bne.n	800b676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	4907      	ldr	r1, [pc, #28]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b66e:	4808      	ldr	r0, [pc, #32]	; (800b690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b670:	f7ff fd96 	bl	800b1a0 <USBD_GetString>
 800b674:	e004      	b.n	800b680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4904      	ldr	r1, [pc, #16]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b67a:	4805      	ldr	r0, [pc, #20]	; (800b690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b67c:	f7ff fd90 	bl	800b1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20002e98 	.word	0x20002e98
 800b690:	0800c8ac 	.word	0x0800c8ac

0800b694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b69a:	4b0f      	ldr	r3, [pc, #60]	; (800b6d8 <Get_SerialNum+0x44>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6a0:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <Get_SerialNum+0x48>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6a6:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <Get_SerialNum+0x4c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d009      	beq.n	800b6ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6ba:	2208      	movs	r2, #8
 800b6bc:	4909      	ldr	r1, [pc, #36]	; (800b6e4 <Get_SerialNum+0x50>)
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f814 	bl	800b6ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	4908      	ldr	r1, [pc, #32]	; (800b6e8 <Get_SerialNum+0x54>)
 800b6c8:	68b8      	ldr	r0, [r7, #8]
 800b6ca:	f000 f80f 	bl	800b6ec <IntToUnicode>
  }
}
 800b6ce:	bf00      	nop
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	1fff7a10 	.word	0x1fff7a10
 800b6dc:	1fff7a14 	.word	0x1fff7a14
 800b6e0:	1fff7a18 	.word	0x1fff7a18
 800b6e4:	20000206 	.word	0x20000206
 800b6e8:	20000216 	.word	0x20000216

0800b6ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6fe:	2300      	movs	r3, #0
 800b700:	75fb      	strb	r3, [r7, #23]
 800b702:	e027      	b.n	800b754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	0f1b      	lsrs	r3, r3, #28
 800b708:	2b09      	cmp	r3, #9
 800b70a:	d80b      	bhi.n	800b724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	0f1b      	lsrs	r3, r3, #28
 800b710:	b2da      	uxtb	r2, r3
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	4619      	mov	r1, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	440b      	add	r3, r1
 800b71c:	3230      	adds	r2, #48	; 0x30
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	e00a      	b.n	800b73a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	0f1b      	lsrs	r3, r3, #28
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	4619      	mov	r1, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	440b      	add	r3, r1
 800b734:	3237      	adds	r2, #55	; 0x37
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	3301      	adds	r3, #1
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4413      	add	r3, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
 800b754:	7dfa      	ldrb	r2, [r7, #23]
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d3d3      	bcc.n	800b704 <IntToUnicode+0x18>
  }
}
 800b75c:	bf00      	nop
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
	...

0800b76c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	; 0x28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	605a      	str	r2, [r3, #4]
 800b77e:	609a      	str	r2, [r3, #8]
 800b780:	60da      	str	r2, [r3, #12]
 800b782:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b78c:	d13a      	bne.n	800b804 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b78e:	2300      	movs	r3, #0
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	4b1e      	ldr	r3, [pc, #120]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b796:	4a1d      	ldr	r2, [pc, #116]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b798:	f043 0301 	orr.w	r3, r3, #1
 800b79c:	6313      	str	r3, [r2, #48]	; 0x30
 800b79e:	4b1b      	ldr	r3, [pc, #108]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	613b      	str	r3, [r7, #16]
 800b7a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b7aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b7ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7bc:	230a      	movs	r3, #10
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7c0:	f107 0314 	add.w	r3, r7, #20
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4812      	ldr	r0, [pc, #72]	; (800b810 <HAL_PCD_MspInit+0xa4>)
 800b7c8:	f7f8 f990 	bl	8003aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d0:	4a0e      	ldr	r2, [pc, #56]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d6:	6353      	str	r3, [r2, #52]	; 0x34
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e0:	4a0a      	ldr	r2, [pc, #40]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7e6:	6453      	str	r3, [r2, #68]	; 0x44
 800b7e8:	4b08      	ldr	r3, [pc, #32]	; (800b80c <HAL_PCD_MspInit+0xa0>)
 800b7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7f0:	60fb      	str	r3, [r7, #12]
 800b7f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	2043      	movs	r0, #67	; 0x43
 800b7fa:	f7f8 f92b 	bl	8003a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7fe:	2043      	movs	r0, #67	; 0x43
 800b800:	f7f8 f944 	bl	8003a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b804:	bf00      	nop
 800b806:	3728      	adds	r7, #40	; 0x28
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	40023800 	.word	0x40023800
 800b810:	40020000 	.word	0x40020000

0800b814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fe fb59 	bl	8009ee2 <USBD_LL_SetupStage>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	4613      	mov	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	4413      	add	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	440b      	add	r3, r1
 800b858:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	4619      	mov	r1, r3
 800b862:	f7fe fb93 	bl	8009f8c <USBD_LL_DataOutStage>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	460b      	mov	r3, r1
 800b878:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b880:	78fa      	ldrb	r2, [r7, #3]
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	4613      	mov	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	440b      	add	r3, r1
 800b88e:	334c      	adds	r3, #76	; 0x4c
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	78fb      	ldrb	r3, [r7, #3]
 800b894:	4619      	mov	r1, r3
 800b896:	f7fe fc2c 	bl	800a0f2 <USBD_LL_DataInStage>
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fe fd60 	bl	800a376 <USBD_LL_SOF>
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d001      	beq.n	800b8d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8d2:	f7f6 f8b1 	bl	8001a38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8dc:	7bfa      	ldrb	r2, [r7, #15]
 800b8de:	4611      	mov	r1, r2
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fd0a 	bl	800a2fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe fcb2 	bl	800a256 <USBD_LL_Reset>
}
 800b8f2:	bf00      	nop
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fd05 	bl	800a31a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b922:	f043 0301 	orr.w	r3, r3, #1
 800b926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <HAL_PCD_SuspendCallback+0x48>)
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	4a03      	ldr	r2, [pc, #12]	; (800b944 <HAL_PCD_SuspendCallback+0x48>)
 800b936:	f043 0306 	orr.w	r3, r3, #6
 800b93a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	e000ed00 	.word	0xe000ed00

0800b948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe fcf5 	bl	800a346 <USBD_LL_Resume>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	460b      	mov	r3, r1
 800b96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b976:	78fa      	ldrb	r2, [r7, #3]
 800b978:	4611      	mov	r1, r2
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe fd4d 	bl	800a41a <USBD_LL_IsoOUTIncomplete>
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fd09 	bl	800a3b6 <USBD_LL_IsoINIncomplete>
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fd5f 	bl	800a47e <USBD_LL_DevConnected>
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fd5c 	bl	800a494 <USBD_LL_DevDisconnected>
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d13c      	bne.n	800ba6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b9f4:	4a20      	ldr	r2, [pc, #128]	; (800ba78 <USBD_LL_Init+0x94>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a1e      	ldr	r2, [pc, #120]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba04:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba0c:	4b1a      	ldr	r3, [pc, #104]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba0e:	2204      	movs	r2, #4
 800ba10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba12:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba14:	2202      	movs	r2, #2
 800ba16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba18:	4b17      	ldr	r3, [pc, #92]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba1e:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba20:	2202      	movs	r2, #2
 800ba22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba24:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba30:	4b11      	ldr	r3, [pc, #68]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba36:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba3c:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba42:	480d      	ldr	r0, [pc, #52]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba44:	f7f8 f9ef 	bl	8003e26 <HAL_PCD_Init>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ba4e:	f7f5 fff3 	bl	8001a38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ba52:	2180      	movs	r1, #128	; 0x80
 800ba54:	4808      	ldr	r0, [pc, #32]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba56:	f7f9 fc46 	bl	80052e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba5a:	2240      	movs	r2, #64	; 0x40
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	4806      	ldr	r0, [pc, #24]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba60:	f7f9 fbfa 	bl	8005258 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba64:	2280      	movs	r2, #128	; 0x80
 800ba66:	2101      	movs	r1, #1
 800ba68:	4803      	ldr	r0, [pc, #12]	; (800ba78 <USBD_LL_Init+0x94>)
 800ba6a:	f7f9 fbf5 	bl	8005258 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20003098 	.word	0x20003098

0800ba7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f8 fae4 	bl	8004060 <HAL_PCD_Start>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 f942 	bl	800bd28 <USBD_Get_USB_Status>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	461a      	mov	r2, r3
 800bac0:	4603      	mov	r3, r0
 800bac2:	70fb      	strb	r3, [r7, #3]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70bb      	strb	r3, [r7, #2]
 800bac8:	4613      	mov	r3, r2
 800baca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bada:	78bb      	ldrb	r3, [r7, #2]
 800badc:	883a      	ldrh	r2, [r7, #0]
 800bade:	78f9      	ldrb	r1, [r7, #3]
 800bae0:	f7f8 ffb5 	bl	8004a4e <HAL_PCD_EP_Open>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 f91c 	bl	800bd28 <USBD_Get_USB_Status>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	460b      	mov	r3, r1
 800bb08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb18:	78fa      	ldrb	r2, [r7, #3]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f8 fffe 	bl	8004b1e <HAL_PCD_EP_Close>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 f8fd 	bl	800bd28 <USBD_Get_USB_Status>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb56:	78fa      	ldrb	r2, [r7, #3]
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7f9 f8d6 	bl	8004d0c <HAL_PCD_EP_SetStall>
 800bb60:	4603      	mov	r3, r0
 800bb62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 f8de 	bl	800bd28 <USBD_Get_USB_Status>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7f9 f91b 	bl	8004dd4 <HAL_PCD_EP_ClrStall>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 f8bf 	bl	800bd28 <USBD_Get_USB_Status>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bbcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	da0b      	bge.n	800bbec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbd4:	78fb      	ldrb	r3, [r7, #3]
 800bbd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	440b      	add	r3, r1
 800bbe6:	333e      	adds	r3, #62	; 0x3e
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	e00b      	b.n	800bc04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbf2:	68f9      	ldr	r1, [r7, #12]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	440b      	add	r3, r1
 800bbfe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc2a:	78fa      	ldrb	r2, [r7, #3]
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f8 fee8 	bl	8004a04 <HAL_PCD_SetAddress>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f874 	bl	800bd28 <USBD_Get_USB_Status>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b086      	sub	sp, #24
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bc6c:	7af9      	ldrb	r1, [r7, #11]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	f7f9 f801 	bl	8004c78 <HAL_PCD_EP_Transmit>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f853 	bl	800bd28 <USBD_Get_USB_Status>
 800bc82:	4603      	mov	r3, r0
 800bc84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc86:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	607a      	str	r2, [r7, #4]
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcae:	7af9      	ldrb	r1, [r7, #11]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	f7f8 ff7d 	bl	8004bb2 <HAL_PCD_EP_Receive>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f832 	bl	800bd28 <USBD_Get_USB_Status>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bce4:	78fa      	ldrb	r2, [r7, #3]
 800bce6:	4611      	mov	r1, r2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f8 ffad 	bl	8004c48 <HAL_PCD_EP_GetRxCount>
 800bcee:	4603      	mov	r3, r0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd00:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <USBD_static_malloc+0x18>)
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	200035a4 	.word	0x200035a4

0800bd14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	4603      	mov	r3, r0
 800bd30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d817      	bhi.n	800bd6c <USBD_Get_USB_Status+0x44>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <USBD_Get_USB_Status+0x1c>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd5b 	.word	0x0800bd5b
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd67 	.word	0x0800bd67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]
    break;
 800bd58:	e00b      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5e:	e008      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
    break;
 800bd64:	e005      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6a:	e002      	b.n	800bd72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd70:	bf00      	nop
  }
  return usb_status;
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <siprintf>:
 800bd80:	b40e      	push	{r1, r2, r3}
 800bd82:	b500      	push	{lr}
 800bd84:	b09c      	sub	sp, #112	; 0x70
 800bd86:	ab1d      	add	r3, sp, #116	; 0x74
 800bd88:	9002      	str	r0, [sp, #8]
 800bd8a:	9006      	str	r0, [sp, #24]
 800bd8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd90:	4809      	ldr	r0, [pc, #36]	; (800bdb8 <siprintf+0x38>)
 800bd92:	9107      	str	r1, [sp, #28]
 800bd94:	9104      	str	r1, [sp, #16]
 800bd96:	4909      	ldr	r1, [pc, #36]	; (800bdbc <siprintf+0x3c>)
 800bd98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9c:	9105      	str	r1, [sp, #20]
 800bd9e:	6800      	ldr	r0, [r0, #0]
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	a902      	add	r1, sp, #8
 800bda4:	f000 fa14 	bl	800c1d0 <_svfiprintf_r>
 800bda8:	9b02      	ldr	r3, [sp, #8]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	b01c      	add	sp, #112	; 0x70
 800bdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb4:	b003      	add	sp, #12
 800bdb6:	4770      	bx	lr
 800bdb8:	2000026c 	.word	0x2000026c
 800bdbc:	ffff0208 	.word	0xffff0208

0800bdc0 <_vsniprintf_r>:
 800bdc0:	b530      	push	{r4, r5, lr}
 800bdc2:	4614      	mov	r4, r2
 800bdc4:	2c00      	cmp	r4, #0
 800bdc6:	b09b      	sub	sp, #108	; 0x6c
 800bdc8:	4605      	mov	r5, r0
 800bdca:	461a      	mov	r2, r3
 800bdcc:	da05      	bge.n	800bdda <_vsniprintf_r+0x1a>
 800bdce:	238b      	movs	r3, #139	; 0x8b
 800bdd0:	6003      	str	r3, [r0, #0]
 800bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd6:	b01b      	add	sp, #108	; 0x6c
 800bdd8:	bd30      	pop	{r4, r5, pc}
 800bdda:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bdde:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bde2:	bf14      	ite	ne
 800bde4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bde8:	4623      	moveq	r3, r4
 800bdea:	9302      	str	r3, [sp, #8]
 800bdec:	9305      	str	r3, [sp, #20]
 800bdee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdf2:	9100      	str	r1, [sp, #0]
 800bdf4:	9104      	str	r1, [sp, #16]
 800bdf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bdfa:	4669      	mov	r1, sp
 800bdfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdfe:	f000 f9e7 	bl	800c1d0 <_svfiprintf_r>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	bfbc      	itt	lt
 800be06:	238b      	movlt	r3, #139	; 0x8b
 800be08:	602b      	strlt	r3, [r5, #0]
 800be0a:	2c00      	cmp	r4, #0
 800be0c:	d0e3      	beq.n	800bdd6 <_vsniprintf_r+0x16>
 800be0e:	9b00      	ldr	r3, [sp, #0]
 800be10:	2200      	movs	r2, #0
 800be12:	701a      	strb	r2, [r3, #0]
 800be14:	e7df      	b.n	800bdd6 <_vsniprintf_r+0x16>
	...

0800be18 <vsniprintf>:
 800be18:	b507      	push	{r0, r1, r2, lr}
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	4613      	mov	r3, r2
 800be1e:	460a      	mov	r2, r1
 800be20:	4601      	mov	r1, r0
 800be22:	4803      	ldr	r0, [pc, #12]	; (800be30 <vsniprintf+0x18>)
 800be24:	6800      	ldr	r0, [r0, #0]
 800be26:	f7ff ffcb 	bl	800bdc0 <_vsniprintf_r>
 800be2a:	b003      	add	sp, #12
 800be2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800be30:	2000026c 	.word	0x2000026c

0800be34 <memcmp>:
 800be34:	b510      	push	{r4, lr}
 800be36:	3901      	subs	r1, #1
 800be38:	4402      	add	r2, r0
 800be3a:	4290      	cmp	r0, r2
 800be3c:	d101      	bne.n	800be42 <memcmp+0xe>
 800be3e:	2000      	movs	r0, #0
 800be40:	e005      	b.n	800be4e <memcmp+0x1a>
 800be42:	7803      	ldrb	r3, [r0, #0]
 800be44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d001      	beq.n	800be50 <memcmp+0x1c>
 800be4c:	1b18      	subs	r0, r3, r4
 800be4e:	bd10      	pop	{r4, pc}
 800be50:	3001      	adds	r0, #1
 800be52:	e7f2      	b.n	800be3a <memcmp+0x6>

0800be54 <memset>:
 800be54:	4402      	add	r2, r0
 800be56:	4603      	mov	r3, r0
 800be58:	4293      	cmp	r3, r2
 800be5a:	d100      	bne.n	800be5e <memset+0xa>
 800be5c:	4770      	bx	lr
 800be5e:	f803 1b01 	strb.w	r1, [r3], #1
 800be62:	e7f9      	b.n	800be58 <memset+0x4>

0800be64 <strcat>:
 800be64:	b510      	push	{r4, lr}
 800be66:	4602      	mov	r2, r0
 800be68:	7814      	ldrb	r4, [r2, #0]
 800be6a:	4613      	mov	r3, r2
 800be6c:	3201      	adds	r2, #1
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d1fa      	bne.n	800be68 <strcat+0x4>
 800be72:	3b01      	subs	r3, #1
 800be74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	d1f9      	bne.n	800be74 <strcat+0x10>
 800be80:	bd10      	pop	{r4, pc}

0800be82 <strncpy>:
 800be82:	b510      	push	{r4, lr}
 800be84:	3901      	subs	r1, #1
 800be86:	4603      	mov	r3, r0
 800be88:	b132      	cbz	r2, 800be98 <strncpy+0x16>
 800be8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be8e:	f803 4b01 	strb.w	r4, [r3], #1
 800be92:	3a01      	subs	r2, #1
 800be94:	2c00      	cmp	r4, #0
 800be96:	d1f7      	bne.n	800be88 <strncpy+0x6>
 800be98:	441a      	add	r2, r3
 800be9a:	2100      	movs	r1, #0
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d100      	bne.n	800bea2 <strncpy+0x20>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	f803 1b01 	strb.w	r1, [r3], #1
 800bea6:	e7f9      	b.n	800be9c <strncpy+0x1a>

0800bea8 <__errno>:
 800bea8:	4b01      	ldr	r3, [pc, #4]	; (800beb0 <__errno+0x8>)
 800beaa:	6818      	ldr	r0, [r3, #0]
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	2000026c 	.word	0x2000026c

0800beb4 <__libc_init_array>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	4d0d      	ldr	r5, [pc, #52]	; (800beec <__libc_init_array+0x38>)
 800beb8:	4c0d      	ldr	r4, [pc, #52]	; (800bef0 <__libc_init_array+0x3c>)
 800beba:	1b64      	subs	r4, r4, r5
 800bebc:	10a4      	asrs	r4, r4, #2
 800bebe:	2600      	movs	r6, #0
 800bec0:	42a6      	cmp	r6, r4
 800bec2:	d109      	bne.n	800bed8 <__libc_init_array+0x24>
 800bec4:	4d0b      	ldr	r5, [pc, #44]	; (800bef4 <__libc_init_array+0x40>)
 800bec6:	4c0c      	ldr	r4, [pc, #48]	; (800bef8 <__libc_init_array+0x44>)
 800bec8:	f000 fc72 	bl	800c7b0 <_init>
 800becc:	1b64      	subs	r4, r4, r5
 800bece:	10a4      	asrs	r4, r4, #2
 800bed0:	2600      	movs	r6, #0
 800bed2:	42a6      	cmp	r6, r4
 800bed4:	d105      	bne.n	800bee2 <__libc_init_array+0x2e>
 800bed6:	bd70      	pop	{r4, r5, r6, pc}
 800bed8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bedc:	4798      	blx	r3
 800bede:	3601      	adds	r6, #1
 800bee0:	e7ee      	b.n	800bec0 <__libc_init_array+0xc>
 800bee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee6:	4798      	blx	r3
 800bee8:	3601      	adds	r6, #1
 800beea:	e7f2      	b.n	800bed2 <__libc_init_array+0x1e>
 800beec:	0800daa8 	.word	0x0800daa8
 800bef0:	0800daa8 	.word	0x0800daa8
 800bef4:	0800daa8 	.word	0x0800daa8
 800bef8:	0800daac 	.word	0x0800daac

0800befc <__retarget_lock_acquire_recursive>:
 800befc:	4770      	bx	lr

0800befe <__retarget_lock_release_recursive>:
 800befe:	4770      	bx	lr

0800bf00 <strcpy>:
 800bf00:	4603      	mov	r3, r0
 800bf02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf06:	f803 2b01 	strb.w	r2, [r3], #1
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	d1f9      	bne.n	800bf02 <strcpy+0x2>
 800bf0e:	4770      	bx	lr

0800bf10 <memcpy>:
 800bf10:	440a      	add	r2, r1
 800bf12:	4291      	cmp	r1, r2
 800bf14:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf18:	d100      	bne.n	800bf1c <memcpy+0xc>
 800bf1a:	4770      	bx	lr
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf26:	4291      	cmp	r1, r2
 800bf28:	d1f9      	bne.n	800bf1e <memcpy+0xe>
 800bf2a:	bd10      	pop	{r4, pc}

0800bf2c <_free_r>:
 800bf2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	d044      	beq.n	800bfbc <_free_r+0x90>
 800bf32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf36:	9001      	str	r0, [sp, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf3e:	bfb8      	it	lt
 800bf40:	18e4      	addlt	r4, r4, r3
 800bf42:	f000 f8df 	bl	800c104 <__malloc_lock>
 800bf46:	4a1e      	ldr	r2, [pc, #120]	; (800bfc0 <_free_r+0x94>)
 800bf48:	9801      	ldr	r0, [sp, #4]
 800bf4a:	6813      	ldr	r3, [r2, #0]
 800bf4c:	b933      	cbnz	r3, 800bf5c <_free_r+0x30>
 800bf4e:	6063      	str	r3, [r4, #4]
 800bf50:	6014      	str	r4, [r2, #0]
 800bf52:	b003      	add	sp, #12
 800bf54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf58:	f000 b8da 	b.w	800c110 <__malloc_unlock>
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	d908      	bls.n	800bf72 <_free_r+0x46>
 800bf60:	6825      	ldr	r5, [r4, #0]
 800bf62:	1961      	adds	r1, r4, r5
 800bf64:	428b      	cmp	r3, r1
 800bf66:	bf01      	itttt	eq
 800bf68:	6819      	ldreq	r1, [r3, #0]
 800bf6a:	685b      	ldreq	r3, [r3, #4]
 800bf6c:	1949      	addeq	r1, r1, r5
 800bf6e:	6021      	streq	r1, [r4, #0]
 800bf70:	e7ed      	b.n	800bf4e <_free_r+0x22>
 800bf72:	461a      	mov	r2, r3
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	b10b      	cbz	r3, 800bf7c <_free_r+0x50>
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	d9fa      	bls.n	800bf72 <_free_r+0x46>
 800bf7c:	6811      	ldr	r1, [r2, #0]
 800bf7e:	1855      	adds	r5, r2, r1
 800bf80:	42a5      	cmp	r5, r4
 800bf82:	d10b      	bne.n	800bf9c <_free_r+0x70>
 800bf84:	6824      	ldr	r4, [r4, #0]
 800bf86:	4421      	add	r1, r4
 800bf88:	1854      	adds	r4, r2, r1
 800bf8a:	42a3      	cmp	r3, r4
 800bf8c:	6011      	str	r1, [r2, #0]
 800bf8e:	d1e0      	bne.n	800bf52 <_free_r+0x26>
 800bf90:	681c      	ldr	r4, [r3, #0]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	6053      	str	r3, [r2, #4]
 800bf96:	440c      	add	r4, r1
 800bf98:	6014      	str	r4, [r2, #0]
 800bf9a:	e7da      	b.n	800bf52 <_free_r+0x26>
 800bf9c:	d902      	bls.n	800bfa4 <_free_r+0x78>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	e7d6      	b.n	800bf52 <_free_r+0x26>
 800bfa4:	6825      	ldr	r5, [r4, #0]
 800bfa6:	1961      	adds	r1, r4, r5
 800bfa8:	428b      	cmp	r3, r1
 800bfaa:	bf04      	itt	eq
 800bfac:	6819      	ldreq	r1, [r3, #0]
 800bfae:	685b      	ldreq	r3, [r3, #4]
 800bfb0:	6063      	str	r3, [r4, #4]
 800bfb2:	bf04      	itt	eq
 800bfb4:	1949      	addeq	r1, r1, r5
 800bfb6:	6021      	streq	r1, [r4, #0]
 800bfb8:	6054      	str	r4, [r2, #4]
 800bfba:	e7ca      	b.n	800bf52 <_free_r+0x26>
 800bfbc:	b003      	add	sp, #12
 800bfbe:	bd30      	pop	{r4, r5, pc}
 800bfc0:	20003904 	.word	0x20003904

0800bfc4 <sbrk_aligned>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	4e0e      	ldr	r6, [pc, #56]	; (800c000 <sbrk_aligned+0x3c>)
 800bfc8:	460c      	mov	r4, r1
 800bfca:	6831      	ldr	r1, [r6, #0]
 800bfcc:	4605      	mov	r5, r0
 800bfce:	b911      	cbnz	r1, 800bfd6 <sbrk_aligned+0x12>
 800bfd0:	f000 fba6 	bl	800c720 <_sbrk_r>
 800bfd4:	6030      	str	r0, [r6, #0]
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f000 fba1 	bl	800c720 <_sbrk_r>
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	d00a      	beq.n	800bff8 <sbrk_aligned+0x34>
 800bfe2:	1cc4      	adds	r4, r0, #3
 800bfe4:	f024 0403 	bic.w	r4, r4, #3
 800bfe8:	42a0      	cmp	r0, r4
 800bfea:	d007      	beq.n	800bffc <sbrk_aligned+0x38>
 800bfec:	1a21      	subs	r1, r4, r0
 800bfee:	4628      	mov	r0, r5
 800bff0:	f000 fb96 	bl	800c720 <_sbrk_r>
 800bff4:	3001      	adds	r0, #1
 800bff6:	d101      	bne.n	800bffc <sbrk_aligned+0x38>
 800bff8:	f04f 34ff 	mov.w	r4, #4294967295
 800bffc:	4620      	mov	r0, r4
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	20003908 	.word	0x20003908

0800c004 <_malloc_r>:
 800c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	1ccd      	adds	r5, r1, #3
 800c00a:	f025 0503 	bic.w	r5, r5, #3
 800c00e:	3508      	adds	r5, #8
 800c010:	2d0c      	cmp	r5, #12
 800c012:	bf38      	it	cc
 800c014:	250c      	movcc	r5, #12
 800c016:	2d00      	cmp	r5, #0
 800c018:	4607      	mov	r7, r0
 800c01a:	db01      	blt.n	800c020 <_malloc_r+0x1c>
 800c01c:	42a9      	cmp	r1, r5
 800c01e:	d905      	bls.n	800c02c <_malloc_r+0x28>
 800c020:	230c      	movs	r3, #12
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	2600      	movs	r6, #0
 800c026:	4630      	mov	r0, r6
 800c028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c02c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c100 <_malloc_r+0xfc>
 800c030:	f000 f868 	bl	800c104 <__malloc_lock>
 800c034:	f8d8 3000 	ldr.w	r3, [r8]
 800c038:	461c      	mov	r4, r3
 800c03a:	bb5c      	cbnz	r4, 800c094 <_malloc_r+0x90>
 800c03c:	4629      	mov	r1, r5
 800c03e:	4638      	mov	r0, r7
 800c040:	f7ff ffc0 	bl	800bfc4 <sbrk_aligned>
 800c044:	1c43      	adds	r3, r0, #1
 800c046:	4604      	mov	r4, r0
 800c048:	d155      	bne.n	800c0f6 <_malloc_r+0xf2>
 800c04a:	f8d8 4000 	ldr.w	r4, [r8]
 800c04e:	4626      	mov	r6, r4
 800c050:	2e00      	cmp	r6, #0
 800c052:	d145      	bne.n	800c0e0 <_malloc_r+0xdc>
 800c054:	2c00      	cmp	r4, #0
 800c056:	d048      	beq.n	800c0ea <_malloc_r+0xe6>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	4631      	mov	r1, r6
 800c05c:	4638      	mov	r0, r7
 800c05e:	eb04 0903 	add.w	r9, r4, r3
 800c062:	f000 fb5d 	bl	800c720 <_sbrk_r>
 800c066:	4581      	cmp	r9, r0
 800c068:	d13f      	bne.n	800c0ea <_malloc_r+0xe6>
 800c06a:	6821      	ldr	r1, [r4, #0]
 800c06c:	1a6d      	subs	r5, r5, r1
 800c06e:	4629      	mov	r1, r5
 800c070:	4638      	mov	r0, r7
 800c072:	f7ff ffa7 	bl	800bfc4 <sbrk_aligned>
 800c076:	3001      	adds	r0, #1
 800c078:	d037      	beq.n	800c0ea <_malloc_r+0xe6>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	442b      	add	r3, r5
 800c07e:	6023      	str	r3, [r4, #0]
 800c080:	f8d8 3000 	ldr.w	r3, [r8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d038      	beq.n	800c0fa <_malloc_r+0xf6>
 800c088:	685a      	ldr	r2, [r3, #4]
 800c08a:	42a2      	cmp	r2, r4
 800c08c:	d12b      	bne.n	800c0e6 <_malloc_r+0xe2>
 800c08e:	2200      	movs	r2, #0
 800c090:	605a      	str	r2, [r3, #4]
 800c092:	e00f      	b.n	800c0b4 <_malloc_r+0xb0>
 800c094:	6822      	ldr	r2, [r4, #0]
 800c096:	1b52      	subs	r2, r2, r5
 800c098:	d41f      	bmi.n	800c0da <_malloc_r+0xd6>
 800c09a:	2a0b      	cmp	r2, #11
 800c09c:	d917      	bls.n	800c0ce <_malloc_r+0xca>
 800c09e:	1961      	adds	r1, r4, r5
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	6025      	str	r5, [r4, #0]
 800c0a4:	bf18      	it	ne
 800c0a6:	6059      	strne	r1, [r3, #4]
 800c0a8:	6863      	ldr	r3, [r4, #4]
 800c0aa:	bf08      	it	eq
 800c0ac:	f8c8 1000 	streq.w	r1, [r8]
 800c0b0:	5162      	str	r2, [r4, r5]
 800c0b2:	604b      	str	r3, [r1, #4]
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f104 060b 	add.w	r6, r4, #11
 800c0ba:	f000 f829 	bl	800c110 <__malloc_unlock>
 800c0be:	f026 0607 	bic.w	r6, r6, #7
 800c0c2:	1d23      	adds	r3, r4, #4
 800c0c4:	1af2      	subs	r2, r6, r3
 800c0c6:	d0ae      	beq.n	800c026 <_malloc_r+0x22>
 800c0c8:	1b9b      	subs	r3, r3, r6
 800c0ca:	50a3      	str	r3, [r4, r2]
 800c0cc:	e7ab      	b.n	800c026 <_malloc_r+0x22>
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	6862      	ldr	r2, [r4, #4]
 800c0d2:	d1dd      	bne.n	800c090 <_malloc_r+0x8c>
 800c0d4:	f8c8 2000 	str.w	r2, [r8]
 800c0d8:	e7ec      	b.n	800c0b4 <_malloc_r+0xb0>
 800c0da:	4623      	mov	r3, r4
 800c0dc:	6864      	ldr	r4, [r4, #4]
 800c0de:	e7ac      	b.n	800c03a <_malloc_r+0x36>
 800c0e0:	4634      	mov	r4, r6
 800c0e2:	6876      	ldr	r6, [r6, #4]
 800c0e4:	e7b4      	b.n	800c050 <_malloc_r+0x4c>
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	e7cc      	b.n	800c084 <_malloc_r+0x80>
 800c0ea:	230c      	movs	r3, #12
 800c0ec:	603b      	str	r3, [r7, #0]
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f000 f80e 	bl	800c110 <__malloc_unlock>
 800c0f4:	e797      	b.n	800c026 <_malloc_r+0x22>
 800c0f6:	6025      	str	r5, [r4, #0]
 800c0f8:	e7dc      	b.n	800c0b4 <_malloc_r+0xb0>
 800c0fa:	605b      	str	r3, [r3, #4]
 800c0fc:	deff      	udf	#255	; 0xff
 800c0fe:	bf00      	nop
 800c100:	20003904 	.word	0x20003904

0800c104 <__malloc_lock>:
 800c104:	4801      	ldr	r0, [pc, #4]	; (800c10c <__malloc_lock+0x8>)
 800c106:	f7ff bef9 	b.w	800befc <__retarget_lock_acquire_recursive>
 800c10a:	bf00      	nop
 800c10c:	20003900 	.word	0x20003900

0800c110 <__malloc_unlock>:
 800c110:	4801      	ldr	r0, [pc, #4]	; (800c118 <__malloc_unlock+0x8>)
 800c112:	f7ff bef4 	b.w	800befe <__retarget_lock_release_recursive>
 800c116:	bf00      	nop
 800c118:	20003900 	.word	0x20003900

0800c11c <__ssputs_r>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	688e      	ldr	r6, [r1, #8]
 800c122:	461f      	mov	r7, r3
 800c124:	42be      	cmp	r6, r7
 800c126:	680b      	ldr	r3, [r1, #0]
 800c128:	4682      	mov	sl, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	4690      	mov	r8, r2
 800c12e:	d82c      	bhi.n	800c18a <__ssputs_r+0x6e>
 800c130:	898a      	ldrh	r2, [r1, #12]
 800c132:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c136:	d026      	beq.n	800c186 <__ssputs_r+0x6a>
 800c138:	6965      	ldr	r5, [r4, #20]
 800c13a:	6909      	ldr	r1, [r1, #16]
 800c13c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c140:	eba3 0901 	sub.w	r9, r3, r1
 800c144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c148:	1c7b      	adds	r3, r7, #1
 800c14a:	444b      	add	r3, r9
 800c14c:	106d      	asrs	r5, r5, #1
 800c14e:	429d      	cmp	r5, r3
 800c150:	bf38      	it	cc
 800c152:	461d      	movcc	r5, r3
 800c154:	0553      	lsls	r3, r2, #21
 800c156:	d527      	bpl.n	800c1a8 <__ssputs_r+0x8c>
 800c158:	4629      	mov	r1, r5
 800c15a:	f7ff ff53 	bl	800c004 <_malloc_r>
 800c15e:	4606      	mov	r6, r0
 800c160:	b360      	cbz	r0, 800c1bc <__ssputs_r+0xa0>
 800c162:	6921      	ldr	r1, [r4, #16]
 800c164:	464a      	mov	r2, r9
 800c166:	f7ff fed3 	bl	800bf10 <memcpy>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	6126      	str	r6, [r4, #16]
 800c178:	6165      	str	r5, [r4, #20]
 800c17a:	444e      	add	r6, r9
 800c17c:	eba5 0509 	sub.w	r5, r5, r9
 800c180:	6026      	str	r6, [r4, #0]
 800c182:	60a5      	str	r5, [r4, #8]
 800c184:	463e      	mov	r6, r7
 800c186:	42be      	cmp	r6, r7
 800c188:	d900      	bls.n	800c18c <__ssputs_r+0x70>
 800c18a:	463e      	mov	r6, r7
 800c18c:	6820      	ldr	r0, [r4, #0]
 800c18e:	4632      	mov	r2, r6
 800c190:	4641      	mov	r1, r8
 800c192:	f000 faab 	bl	800c6ec <memmove>
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	1b9b      	subs	r3, r3, r6
 800c19a:	60a3      	str	r3, [r4, #8]
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	4433      	add	r3, r6
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a8:	462a      	mov	r2, r5
 800c1aa:	f000 fac9 	bl	800c740 <_realloc_r>
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d1e0      	bne.n	800c176 <__ssputs_r+0x5a>
 800c1b4:	6921      	ldr	r1, [r4, #16]
 800c1b6:	4650      	mov	r0, sl
 800c1b8:	f7ff feb8 	bl	800bf2c <_free_r>
 800c1bc:	230c      	movs	r3, #12
 800c1be:	f8ca 3000 	str.w	r3, [sl]
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ce:	e7e9      	b.n	800c1a4 <__ssputs_r+0x88>

0800c1d0 <_svfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4698      	mov	r8, r3
 800c1d6:	898b      	ldrh	r3, [r1, #12]
 800c1d8:	061b      	lsls	r3, r3, #24
 800c1da:	b09d      	sub	sp, #116	; 0x74
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	4614      	mov	r4, r2
 800c1e2:	d50e      	bpl.n	800c202 <_svfiprintf_r+0x32>
 800c1e4:	690b      	ldr	r3, [r1, #16]
 800c1e6:	b963      	cbnz	r3, 800c202 <_svfiprintf_r+0x32>
 800c1e8:	2140      	movs	r1, #64	; 0x40
 800c1ea:	f7ff ff0b 	bl	800c004 <_malloc_r>
 800c1ee:	6028      	str	r0, [r5, #0]
 800c1f0:	6128      	str	r0, [r5, #16]
 800c1f2:	b920      	cbnz	r0, 800c1fe <_svfiprintf_r+0x2e>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e0d0      	b.n	800c3a0 <_svfiprintf_r+0x1d0>
 800c1fe:	2340      	movs	r3, #64	; 0x40
 800c200:	616b      	str	r3, [r5, #20]
 800c202:	2300      	movs	r3, #0
 800c204:	9309      	str	r3, [sp, #36]	; 0x24
 800c206:	2320      	movs	r3, #32
 800c208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c210:	2330      	movs	r3, #48	; 0x30
 800c212:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c3b8 <_svfiprintf_r+0x1e8>
 800c216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c21a:	f04f 0901 	mov.w	r9, #1
 800c21e:	4623      	mov	r3, r4
 800c220:	469a      	mov	sl, r3
 800c222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c226:	b10a      	cbz	r2, 800c22c <_svfiprintf_r+0x5c>
 800c228:	2a25      	cmp	r2, #37	; 0x25
 800c22a:	d1f9      	bne.n	800c220 <_svfiprintf_r+0x50>
 800c22c:	ebba 0b04 	subs.w	fp, sl, r4
 800c230:	d00b      	beq.n	800c24a <_svfiprintf_r+0x7a>
 800c232:	465b      	mov	r3, fp
 800c234:	4622      	mov	r2, r4
 800c236:	4629      	mov	r1, r5
 800c238:	4638      	mov	r0, r7
 800c23a:	f7ff ff6f 	bl	800c11c <__ssputs_r>
 800c23e:	3001      	adds	r0, #1
 800c240:	f000 80a9 	beq.w	800c396 <_svfiprintf_r+0x1c6>
 800c244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c246:	445a      	add	r2, fp
 800c248:	9209      	str	r2, [sp, #36]	; 0x24
 800c24a:	f89a 3000 	ldrb.w	r3, [sl]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80a1 	beq.w	800c396 <_svfiprintf_r+0x1c6>
 800c254:	2300      	movs	r3, #0
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c25e:	f10a 0a01 	add.w	sl, sl, #1
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	9307      	str	r3, [sp, #28]
 800c266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c26a:	931a      	str	r3, [sp, #104]	; 0x68
 800c26c:	4654      	mov	r4, sl
 800c26e:	2205      	movs	r2, #5
 800c270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c274:	4850      	ldr	r0, [pc, #320]	; (800c3b8 <_svfiprintf_r+0x1e8>)
 800c276:	f7f3 ffbb 	bl	80001f0 <memchr>
 800c27a:	9a04      	ldr	r2, [sp, #16]
 800c27c:	b9d8      	cbnz	r0, 800c2b6 <_svfiprintf_r+0xe6>
 800c27e:	06d0      	lsls	r0, r2, #27
 800c280:	bf44      	itt	mi
 800c282:	2320      	movmi	r3, #32
 800c284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c288:	0711      	lsls	r1, r2, #28
 800c28a:	bf44      	itt	mi
 800c28c:	232b      	movmi	r3, #43	; 0x2b
 800c28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c292:	f89a 3000 	ldrb.w	r3, [sl]
 800c296:	2b2a      	cmp	r3, #42	; 0x2a
 800c298:	d015      	beq.n	800c2c6 <_svfiprintf_r+0xf6>
 800c29a:	9a07      	ldr	r2, [sp, #28]
 800c29c:	4654      	mov	r4, sl
 800c29e:	2000      	movs	r0, #0
 800c2a0:	f04f 0c0a 	mov.w	ip, #10
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2aa:	3b30      	subs	r3, #48	; 0x30
 800c2ac:	2b09      	cmp	r3, #9
 800c2ae:	d94d      	bls.n	800c34c <_svfiprintf_r+0x17c>
 800c2b0:	b1b0      	cbz	r0, 800c2e0 <_svfiprintf_r+0x110>
 800c2b2:	9207      	str	r2, [sp, #28]
 800c2b4:	e014      	b.n	800c2e0 <_svfiprintf_r+0x110>
 800c2b6:	eba0 0308 	sub.w	r3, r0, r8
 800c2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	46a2      	mov	sl, r4
 800c2c4:	e7d2      	b.n	800c26c <_svfiprintf_r+0x9c>
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	1d19      	adds	r1, r3, #4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	9103      	str	r1, [sp, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfbb      	ittet	lt
 800c2d2:	425b      	neglt	r3, r3
 800c2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d8:	9307      	strge	r3, [sp, #28]
 800c2da:	9307      	strlt	r3, [sp, #28]
 800c2dc:	bfb8      	it	lt
 800c2de:	9204      	strlt	r2, [sp, #16]
 800c2e0:	7823      	ldrb	r3, [r4, #0]
 800c2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2e4:	d10c      	bne.n	800c300 <_svfiprintf_r+0x130>
 800c2e6:	7863      	ldrb	r3, [r4, #1]
 800c2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ea:	d134      	bne.n	800c356 <_svfiprintf_r+0x186>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	9203      	str	r2, [sp, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bfb8      	it	lt
 800c2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2fc:	3402      	adds	r4, #2
 800c2fe:	9305      	str	r3, [sp, #20]
 800c300:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c3c8 <_svfiprintf_r+0x1f8>
 800c304:	7821      	ldrb	r1, [r4, #0]
 800c306:	2203      	movs	r2, #3
 800c308:	4650      	mov	r0, sl
 800c30a:	f7f3 ff71 	bl	80001f0 <memchr>
 800c30e:	b138      	cbz	r0, 800c320 <_svfiprintf_r+0x150>
 800c310:	9b04      	ldr	r3, [sp, #16]
 800c312:	eba0 000a 	sub.w	r0, r0, sl
 800c316:	2240      	movs	r2, #64	; 0x40
 800c318:	4082      	lsls	r2, r0
 800c31a:	4313      	orrs	r3, r2
 800c31c:	3401      	adds	r4, #1
 800c31e:	9304      	str	r3, [sp, #16]
 800c320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c324:	4825      	ldr	r0, [pc, #148]	; (800c3bc <_svfiprintf_r+0x1ec>)
 800c326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c32a:	2206      	movs	r2, #6
 800c32c:	f7f3 ff60 	bl	80001f0 <memchr>
 800c330:	2800      	cmp	r0, #0
 800c332:	d038      	beq.n	800c3a6 <_svfiprintf_r+0x1d6>
 800c334:	4b22      	ldr	r3, [pc, #136]	; (800c3c0 <_svfiprintf_r+0x1f0>)
 800c336:	bb1b      	cbnz	r3, 800c380 <_svfiprintf_r+0x1b0>
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	3307      	adds	r3, #7
 800c33c:	f023 0307 	bic.w	r3, r3, #7
 800c340:	3308      	adds	r3, #8
 800c342:	9303      	str	r3, [sp, #12]
 800c344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c346:	4433      	add	r3, r6
 800c348:	9309      	str	r3, [sp, #36]	; 0x24
 800c34a:	e768      	b.n	800c21e <_svfiprintf_r+0x4e>
 800c34c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c350:	460c      	mov	r4, r1
 800c352:	2001      	movs	r0, #1
 800c354:	e7a6      	b.n	800c2a4 <_svfiprintf_r+0xd4>
 800c356:	2300      	movs	r3, #0
 800c358:	3401      	adds	r4, #1
 800c35a:	9305      	str	r3, [sp, #20]
 800c35c:	4619      	mov	r1, r3
 800c35e:	f04f 0c0a 	mov.w	ip, #10
 800c362:	4620      	mov	r0, r4
 800c364:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c368:	3a30      	subs	r2, #48	; 0x30
 800c36a:	2a09      	cmp	r2, #9
 800c36c:	d903      	bls.n	800c376 <_svfiprintf_r+0x1a6>
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0c6      	beq.n	800c300 <_svfiprintf_r+0x130>
 800c372:	9105      	str	r1, [sp, #20]
 800c374:	e7c4      	b.n	800c300 <_svfiprintf_r+0x130>
 800c376:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37a:	4604      	mov	r4, r0
 800c37c:	2301      	movs	r3, #1
 800c37e:	e7f0      	b.n	800c362 <_svfiprintf_r+0x192>
 800c380:	ab03      	add	r3, sp, #12
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	462a      	mov	r2, r5
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <_svfiprintf_r+0x1f4>)
 800c388:	a904      	add	r1, sp, #16
 800c38a:	4638      	mov	r0, r7
 800c38c:	f3af 8000 	nop.w
 800c390:	1c42      	adds	r2, r0, #1
 800c392:	4606      	mov	r6, r0
 800c394:	d1d6      	bne.n	800c344 <_svfiprintf_r+0x174>
 800c396:	89ab      	ldrh	r3, [r5, #12]
 800c398:	065b      	lsls	r3, r3, #25
 800c39a:	f53f af2d 	bmi.w	800c1f8 <_svfiprintf_r+0x28>
 800c39e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3a0:	b01d      	add	sp, #116	; 0x74
 800c3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a6:	ab03      	add	r3, sp, #12
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <_svfiprintf_r+0x1f4>)
 800c3ae:	a904      	add	r1, sp, #16
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f000 f879 	bl	800c4a8 <_printf_i>
 800c3b6:	e7eb      	b.n	800c390 <_svfiprintf_r+0x1c0>
 800c3b8:	0800da6c 	.word	0x0800da6c
 800c3bc:	0800da76 	.word	0x0800da76
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	0800c11d 	.word	0x0800c11d
 800c3c8:	0800da72 	.word	0x0800da72

0800c3cc <_printf_common>:
 800c3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d0:	4616      	mov	r6, r2
 800c3d2:	4699      	mov	r9, r3
 800c3d4:	688a      	ldr	r2, [r1, #8]
 800c3d6:	690b      	ldr	r3, [r1, #16]
 800c3d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	bfb8      	it	lt
 800c3e0:	4613      	movlt	r3, r2
 800c3e2:	6033      	str	r3, [r6, #0]
 800c3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	b10a      	cbz	r2, 800c3f2 <_printf_common+0x26>
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	6033      	str	r3, [r6, #0]
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	0699      	lsls	r1, r3, #26
 800c3f6:	bf42      	ittt	mi
 800c3f8:	6833      	ldrmi	r3, [r6, #0]
 800c3fa:	3302      	addmi	r3, #2
 800c3fc:	6033      	strmi	r3, [r6, #0]
 800c3fe:	6825      	ldr	r5, [r4, #0]
 800c400:	f015 0506 	ands.w	r5, r5, #6
 800c404:	d106      	bne.n	800c414 <_printf_common+0x48>
 800c406:	f104 0a19 	add.w	sl, r4, #25
 800c40a:	68e3      	ldr	r3, [r4, #12]
 800c40c:	6832      	ldr	r2, [r6, #0]
 800c40e:	1a9b      	subs	r3, r3, r2
 800c410:	42ab      	cmp	r3, r5
 800c412:	dc26      	bgt.n	800c462 <_printf_common+0x96>
 800c414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c418:	1e13      	subs	r3, r2, #0
 800c41a:	6822      	ldr	r2, [r4, #0]
 800c41c:	bf18      	it	ne
 800c41e:	2301      	movne	r3, #1
 800c420:	0692      	lsls	r2, r2, #26
 800c422:	d42b      	bmi.n	800c47c <_printf_common+0xb0>
 800c424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c428:	4649      	mov	r1, r9
 800c42a:	4638      	mov	r0, r7
 800c42c:	47c0      	blx	r8
 800c42e:	3001      	adds	r0, #1
 800c430:	d01e      	beq.n	800c470 <_printf_common+0xa4>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	6922      	ldr	r2, [r4, #16]
 800c436:	f003 0306 	and.w	r3, r3, #6
 800c43a:	2b04      	cmp	r3, #4
 800c43c:	bf02      	ittt	eq
 800c43e:	68e5      	ldreq	r5, [r4, #12]
 800c440:	6833      	ldreq	r3, [r6, #0]
 800c442:	1aed      	subeq	r5, r5, r3
 800c444:	68a3      	ldr	r3, [r4, #8]
 800c446:	bf0c      	ite	eq
 800c448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c44c:	2500      	movne	r5, #0
 800c44e:	4293      	cmp	r3, r2
 800c450:	bfc4      	itt	gt
 800c452:	1a9b      	subgt	r3, r3, r2
 800c454:	18ed      	addgt	r5, r5, r3
 800c456:	2600      	movs	r6, #0
 800c458:	341a      	adds	r4, #26
 800c45a:	42b5      	cmp	r5, r6
 800c45c:	d11a      	bne.n	800c494 <_printf_common+0xc8>
 800c45e:	2000      	movs	r0, #0
 800c460:	e008      	b.n	800c474 <_printf_common+0xa8>
 800c462:	2301      	movs	r3, #1
 800c464:	4652      	mov	r2, sl
 800c466:	4649      	mov	r1, r9
 800c468:	4638      	mov	r0, r7
 800c46a:	47c0      	blx	r8
 800c46c:	3001      	adds	r0, #1
 800c46e:	d103      	bne.n	800c478 <_printf_common+0xac>
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c478:	3501      	adds	r5, #1
 800c47a:	e7c6      	b.n	800c40a <_printf_common+0x3e>
 800c47c:	18e1      	adds	r1, r4, r3
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	2030      	movs	r0, #48	; 0x30
 800c482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c486:	4422      	add	r2, r4
 800c488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c48c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c490:	3302      	adds	r3, #2
 800c492:	e7c7      	b.n	800c424 <_printf_common+0x58>
 800c494:	2301      	movs	r3, #1
 800c496:	4622      	mov	r2, r4
 800c498:	4649      	mov	r1, r9
 800c49a:	4638      	mov	r0, r7
 800c49c:	47c0      	blx	r8
 800c49e:	3001      	adds	r0, #1
 800c4a0:	d0e6      	beq.n	800c470 <_printf_common+0xa4>
 800c4a2:	3601      	adds	r6, #1
 800c4a4:	e7d9      	b.n	800c45a <_printf_common+0x8e>
	...

0800c4a8 <_printf_i>:
 800c4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ac:	7e0f      	ldrb	r7, [r1, #24]
 800c4ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4b0:	2f78      	cmp	r7, #120	; 0x78
 800c4b2:	4691      	mov	r9, r2
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	469a      	mov	sl, r3
 800c4ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4be:	d807      	bhi.n	800c4d0 <_printf_i+0x28>
 800c4c0:	2f62      	cmp	r7, #98	; 0x62
 800c4c2:	d80a      	bhi.n	800c4da <_printf_i+0x32>
 800c4c4:	2f00      	cmp	r7, #0
 800c4c6:	f000 80d4 	beq.w	800c672 <_printf_i+0x1ca>
 800c4ca:	2f58      	cmp	r7, #88	; 0x58
 800c4cc:	f000 80c0 	beq.w	800c650 <_printf_i+0x1a8>
 800c4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c4d8:	e03a      	b.n	800c550 <_printf_i+0xa8>
 800c4da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4de:	2b15      	cmp	r3, #21
 800c4e0:	d8f6      	bhi.n	800c4d0 <_printf_i+0x28>
 800c4e2:	a101      	add	r1, pc, #4	; (adr r1, 800c4e8 <_printf_i+0x40>)
 800c4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4e8:	0800c541 	.word	0x0800c541
 800c4ec:	0800c555 	.word	0x0800c555
 800c4f0:	0800c4d1 	.word	0x0800c4d1
 800c4f4:	0800c4d1 	.word	0x0800c4d1
 800c4f8:	0800c4d1 	.word	0x0800c4d1
 800c4fc:	0800c4d1 	.word	0x0800c4d1
 800c500:	0800c555 	.word	0x0800c555
 800c504:	0800c4d1 	.word	0x0800c4d1
 800c508:	0800c4d1 	.word	0x0800c4d1
 800c50c:	0800c4d1 	.word	0x0800c4d1
 800c510:	0800c4d1 	.word	0x0800c4d1
 800c514:	0800c659 	.word	0x0800c659
 800c518:	0800c581 	.word	0x0800c581
 800c51c:	0800c613 	.word	0x0800c613
 800c520:	0800c4d1 	.word	0x0800c4d1
 800c524:	0800c4d1 	.word	0x0800c4d1
 800c528:	0800c67b 	.word	0x0800c67b
 800c52c:	0800c4d1 	.word	0x0800c4d1
 800c530:	0800c581 	.word	0x0800c581
 800c534:	0800c4d1 	.word	0x0800c4d1
 800c538:	0800c4d1 	.word	0x0800c4d1
 800c53c:	0800c61b 	.word	0x0800c61b
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	1d1a      	adds	r2, r3, #4
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	602a      	str	r2, [r5, #0]
 800c548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c550:	2301      	movs	r3, #1
 800c552:	e09f      	b.n	800c694 <_printf_i+0x1ec>
 800c554:	6820      	ldr	r0, [r4, #0]
 800c556:	682b      	ldr	r3, [r5, #0]
 800c558:	0607      	lsls	r7, r0, #24
 800c55a:	f103 0104 	add.w	r1, r3, #4
 800c55e:	6029      	str	r1, [r5, #0]
 800c560:	d501      	bpl.n	800c566 <_printf_i+0xbe>
 800c562:	681e      	ldr	r6, [r3, #0]
 800c564:	e003      	b.n	800c56e <_printf_i+0xc6>
 800c566:	0646      	lsls	r6, r0, #25
 800c568:	d5fb      	bpl.n	800c562 <_printf_i+0xba>
 800c56a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c56e:	2e00      	cmp	r6, #0
 800c570:	da03      	bge.n	800c57a <_printf_i+0xd2>
 800c572:	232d      	movs	r3, #45	; 0x2d
 800c574:	4276      	negs	r6, r6
 800c576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c57a:	485a      	ldr	r0, [pc, #360]	; (800c6e4 <_printf_i+0x23c>)
 800c57c:	230a      	movs	r3, #10
 800c57e:	e012      	b.n	800c5a6 <_printf_i+0xfe>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	6820      	ldr	r0, [r4, #0]
 800c584:	1d19      	adds	r1, r3, #4
 800c586:	6029      	str	r1, [r5, #0]
 800c588:	0605      	lsls	r5, r0, #24
 800c58a:	d501      	bpl.n	800c590 <_printf_i+0xe8>
 800c58c:	681e      	ldr	r6, [r3, #0]
 800c58e:	e002      	b.n	800c596 <_printf_i+0xee>
 800c590:	0641      	lsls	r1, r0, #25
 800c592:	d5fb      	bpl.n	800c58c <_printf_i+0xe4>
 800c594:	881e      	ldrh	r6, [r3, #0]
 800c596:	4853      	ldr	r0, [pc, #332]	; (800c6e4 <_printf_i+0x23c>)
 800c598:	2f6f      	cmp	r7, #111	; 0x6f
 800c59a:	bf0c      	ite	eq
 800c59c:	2308      	moveq	r3, #8
 800c59e:	230a      	movne	r3, #10
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5a6:	6865      	ldr	r5, [r4, #4]
 800c5a8:	60a5      	str	r5, [r4, #8]
 800c5aa:	2d00      	cmp	r5, #0
 800c5ac:	bfa2      	ittt	ge
 800c5ae:	6821      	ldrge	r1, [r4, #0]
 800c5b0:	f021 0104 	bicge.w	r1, r1, #4
 800c5b4:	6021      	strge	r1, [r4, #0]
 800c5b6:	b90e      	cbnz	r6, 800c5bc <_printf_i+0x114>
 800c5b8:	2d00      	cmp	r5, #0
 800c5ba:	d04b      	beq.n	800c654 <_printf_i+0x1ac>
 800c5bc:	4615      	mov	r5, r2
 800c5be:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5c2:	fb03 6711 	mls	r7, r3, r1, r6
 800c5c6:	5dc7      	ldrb	r7, [r0, r7]
 800c5c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5cc:	4637      	mov	r7, r6
 800c5ce:	42bb      	cmp	r3, r7
 800c5d0:	460e      	mov	r6, r1
 800c5d2:	d9f4      	bls.n	800c5be <_printf_i+0x116>
 800c5d4:	2b08      	cmp	r3, #8
 800c5d6:	d10b      	bne.n	800c5f0 <_printf_i+0x148>
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	07de      	lsls	r6, r3, #31
 800c5dc:	d508      	bpl.n	800c5f0 <_printf_i+0x148>
 800c5de:	6923      	ldr	r3, [r4, #16]
 800c5e0:	6861      	ldr	r1, [r4, #4]
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	bfde      	ittt	le
 800c5e6:	2330      	movle	r3, #48	; 0x30
 800c5e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5f0:	1b52      	subs	r2, r2, r5
 800c5f2:	6122      	str	r2, [r4, #16]
 800c5f4:	f8cd a000 	str.w	sl, [sp]
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	aa03      	add	r2, sp, #12
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	4640      	mov	r0, r8
 800c600:	f7ff fee4 	bl	800c3cc <_printf_common>
 800c604:	3001      	adds	r0, #1
 800c606:	d14a      	bne.n	800c69e <_printf_i+0x1f6>
 800c608:	f04f 30ff 	mov.w	r0, #4294967295
 800c60c:	b004      	add	sp, #16
 800c60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	f043 0320 	orr.w	r3, r3, #32
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	4833      	ldr	r0, [pc, #204]	; (800c6e8 <_printf_i+0x240>)
 800c61c:	2778      	movs	r7, #120	; 0x78
 800c61e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	6829      	ldr	r1, [r5, #0]
 800c626:	061f      	lsls	r7, r3, #24
 800c628:	f851 6b04 	ldr.w	r6, [r1], #4
 800c62c:	d402      	bmi.n	800c634 <_printf_i+0x18c>
 800c62e:	065f      	lsls	r7, r3, #25
 800c630:	bf48      	it	mi
 800c632:	b2b6      	uxthmi	r6, r6
 800c634:	07df      	lsls	r7, r3, #31
 800c636:	bf48      	it	mi
 800c638:	f043 0320 	orrmi.w	r3, r3, #32
 800c63c:	6029      	str	r1, [r5, #0]
 800c63e:	bf48      	it	mi
 800c640:	6023      	strmi	r3, [r4, #0]
 800c642:	b91e      	cbnz	r6, 800c64c <_printf_i+0x1a4>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	f023 0320 	bic.w	r3, r3, #32
 800c64a:	6023      	str	r3, [r4, #0]
 800c64c:	2310      	movs	r3, #16
 800c64e:	e7a7      	b.n	800c5a0 <_printf_i+0xf8>
 800c650:	4824      	ldr	r0, [pc, #144]	; (800c6e4 <_printf_i+0x23c>)
 800c652:	e7e4      	b.n	800c61e <_printf_i+0x176>
 800c654:	4615      	mov	r5, r2
 800c656:	e7bd      	b.n	800c5d4 <_printf_i+0x12c>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	6826      	ldr	r6, [r4, #0]
 800c65c:	6961      	ldr	r1, [r4, #20]
 800c65e:	1d18      	adds	r0, r3, #4
 800c660:	6028      	str	r0, [r5, #0]
 800c662:	0635      	lsls	r5, r6, #24
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	d501      	bpl.n	800c66c <_printf_i+0x1c4>
 800c668:	6019      	str	r1, [r3, #0]
 800c66a:	e002      	b.n	800c672 <_printf_i+0x1ca>
 800c66c:	0670      	lsls	r0, r6, #25
 800c66e:	d5fb      	bpl.n	800c668 <_printf_i+0x1c0>
 800c670:	8019      	strh	r1, [r3, #0]
 800c672:	2300      	movs	r3, #0
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	4615      	mov	r5, r2
 800c678:	e7bc      	b.n	800c5f4 <_printf_i+0x14c>
 800c67a:	682b      	ldr	r3, [r5, #0]
 800c67c:	1d1a      	adds	r2, r3, #4
 800c67e:	602a      	str	r2, [r5, #0]
 800c680:	681d      	ldr	r5, [r3, #0]
 800c682:	6862      	ldr	r2, [r4, #4]
 800c684:	2100      	movs	r1, #0
 800c686:	4628      	mov	r0, r5
 800c688:	f7f3 fdb2 	bl	80001f0 <memchr>
 800c68c:	b108      	cbz	r0, 800c692 <_printf_i+0x1ea>
 800c68e:	1b40      	subs	r0, r0, r5
 800c690:	6060      	str	r0, [r4, #4]
 800c692:	6863      	ldr	r3, [r4, #4]
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	2300      	movs	r3, #0
 800c698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c69c:	e7aa      	b.n	800c5f4 <_printf_i+0x14c>
 800c69e:	6923      	ldr	r3, [r4, #16]
 800c6a0:	462a      	mov	r2, r5
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	47d0      	blx	sl
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d0ad      	beq.n	800c608 <_printf_i+0x160>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	079b      	lsls	r3, r3, #30
 800c6b0:	d413      	bmi.n	800c6da <_printf_i+0x232>
 800c6b2:	68e0      	ldr	r0, [r4, #12]
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	4298      	cmp	r0, r3
 800c6b8:	bfb8      	it	lt
 800c6ba:	4618      	movlt	r0, r3
 800c6bc:	e7a6      	b.n	800c60c <_printf_i+0x164>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	47d0      	blx	sl
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d09d      	beq.n	800c608 <_printf_i+0x160>
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	68e3      	ldr	r3, [r4, #12]
 800c6d0:	9903      	ldr	r1, [sp, #12]
 800c6d2:	1a5b      	subs	r3, r3, r1
 800c6d4:	42ab      	cmp	r3, r5
 800c6d6:	dcf2      	bgt.n	800c6be <_printf_i+0x216>
 800c6d8:	e7eb      	b.n	800c6b2 <_printf_i+0x20a>
 800c6da:	2500      	movs	r5, #0
 800c6dc:	f104 0619 	add.w	r6, r4, #25
 800c6e0:	e7f5      	b.n	800c6ce <_printf_i+0x226>
 800c6e2:	bf00      	nop
 800c6e4:	0800da7d 	.word	0x0800da7d
 800c6e8:	0800da8e 	.word	0x0800da8e

0800c6ec <memmove>:
 800c6ec:	4288      	cmp	r0, r1
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	eb01 0402 	add.w	r4, r1, r2
 800c6f4:	d902      	bls.n	800c6fc <memmove+0x10>
 800c6f6:	4284      	cmp	r4, r0
 800c6f8:	4623      	mov	r3, r4
 800c6fa:	d807      	bhi.n	800c70c <memmove+0x20>
 800c6fc:	1e43      	subs	r3, r0, #1
 800c6fe:	42a1      	cmp	r1, r4
 800c700:	d008      	beq.n	800c714 <memmove+0x28>
 800c702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c70a:	e7f8      	b.n	800c6fe <memmove+0x12>
 800c70c:	4402      	add	r2, r0
 800c70e:	4601      	mov	r1, r0
 800c710:	428a      	cmp	r2, r1
 800c712:	d100      	bne.n	800c716 <memmove+0x2a>
 800c714:	bd10      	pop	{r4, pc}
 800c716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c71e:	e7f7      	b.n	800c710 <memmove+0x24>

0800c720 <_sbrk_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d06      	ldr	r5, [pc, #24]	; (800c73c <_sbrk_r+0x1c>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	f7f6 fa74 	bl	8002c18 <_sbrk>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_sbrk_r+0x1a>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_sbrk_r+0x1a>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	200038fc 	.word	0x200038fc

0800c740 <_realloc_r>:
 800c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c744:	4680      	mov	r8, r0
 800c746:	4614      	mov	r4, r2
 800c748:	460e      	mov	r6, r1
 800c74a:	b921      	cbnz	r1, 800c756 <_realloc_r+0x16>
 800c74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c750:	4611      	mov	r1, r2
 800c752:	f7ff bc57 	b.w	800c004 <_malloc_r>
 800c756:	b92a      	cbnz	r2, 800c764 <_realloc_r+0x24>
 800c758:	f7ff fbe8 	bl	800bf2c <_free_r>
 800c75c:	4625      	mov	r5, r4
 800c75e:	4628      	mov	r0, r5
 800c760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c764:	f000 f81b 	bl	800c79e <_malloc_usable_size_r>
 800c768:	4284      	cmp	r4, r0
 800c76a:	4607      	mov	r7, r0
 800c76c:	d802      	bhi.n	800c774 <_realloc_r+0x34>
 800c76e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c772:	d812      	bhi.n	800c79a <_realloc_r+0x5a>
 800c774:	4621      	mov	r1, r4
 800c776:	4640      	mov	r0, r8
 800c778:	f7ff fc44 	bl	800c004 <_malloc_r>
 800c77c:	4605      	mov	r5, r0
 800c77e:	2800      	cmp	r0, #0
 800c780:	d0ed      	beq.n	800c75e <_realloc_r+0x1e>
 800c782:	42bc      	cmp	r4, r7
 800c784:	4622      	mov	r2, r4
 800c786:	4631      	mov	r1, r6
 800c788:	bf28      	it	cs
 800c78a:	463a      	movcs	r2, r7
 800c78c:	f7ff fbc0 	bl	800bf10 <memcpy>
 800c790:	4631      	mov	r1, r6
 800c792:	4640      	mov	r0, r8
 800c794:	f7ff fbca 	bl	800bf2c <_free_r>
 800c798:	e7e1      	b.n	800c75e <_realloc_r+0x1e>
 800c79a:	4635      	mov	r5, r6
 800c79c:	e7df      	b.n	800c75e <_realloc_r+0x1e>

0800c79e <_malloc_usable_size_r>:
 800c79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a2:	1f18      	subs	r0, r3, #4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfbc      	itt	lt
 800c7a8:	580b      	ldrlt	r3, [r1, r0]
 800c7aa:	18c0      	addlt	r0, r0, r3
 800c7ac:	4770      	bx	lr
	...

0800c7b0 <_init>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	bf00      	nop
 800c7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b6:	bc08      	pop	{r3}
 800c7b8:	469e      	mov	lr, r3
 800c7ba:	4770      	bx	lr

0800c7bc <_fini>:
 800c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7be:	bf00      	nop
 800c7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c2:	bc08      	pop	{r3}
 800c7c4:	469e      	mov	lr, r3
 800c7c6:	4770      	bx	lr
