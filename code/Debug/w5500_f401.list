
w5500_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a39c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac74  0800ac74  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac7c  0800ac7c  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  0800ac84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001504  20000140  0800adc4  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  0800adc4  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a672  00000000  00000000  000201b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047fd  00000000  00000000  0003a825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  0003f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001312  00000000  00000000  00040930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0b3  00000000  00000000  00041c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d51f  00000000  00000000  0005ccf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3267  00000000  00000000  0007a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006934  00000000  00000000  0011d47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00123db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000140 	.word	0x20000140
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a518 	.word	0x0800a518

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000144 	.word	0x20000144
 80001d0:	0800a518 	.word	0x0800a518

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <__NVIC_GetPriorityGrouping+0x18>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	f003 0307 	and.w	r3, r3, #7
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	db0a      	blt.n	8000552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	490c      	ldr	r1, [pc, #48]	; (8000574 <__NVIC_SetPriority+0x4c>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	0112      	lsls	r2, r2, #4
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	440b      	add	r3, r1
 800054c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000550:	e00a      	b.n	8000568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4908      	ldr	r1, [pc, #32]	; (8000578 <__NVIC_SetPriority+0x50>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3b04      	subs	r3, #4
 8000560:	0112      	lsls	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	440b      	add	r3, r1
 8000566:	761a      	strb	r2, [r3, #24]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800057c:	b480      	push	{r7}
 800057e:	b089      	sub	sp, #36	; 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	f1c3 0307 	rsb	r3, r3, #7
 8000596:	2b04      	cmp	r3, #4
 8000598:	bf28      	it	cs
 800059a:	2304      	movcs	r3, #4
 800059c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3304      	adds	r3, #4
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d902      	bls.n	80005ac <NVIC_EncodePriority+0x30>
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3b03      	subs	r3, #3
 80005aa:	e000      	b.n	80005ae <NVIC_EncodePriority+0x32>
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43da      	mvns	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43d9      	mvns	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	4313      	orrs	r3, r2
         );
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3724      	adds	r7, #36	; 0x24
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f043 0201 	orr.w	r2, r3, #1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f043 0201 	orr.w	r2, r3, #1
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60da      	str	r2, [r3, #12]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60da      	str	r2, [r3, #12]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	615a      	str	r2, [r3, #20]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800068e:	b480      	push	{r7}
 8000690:	b089      	sub	sp, #36	; 0x24
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	330c      	adds	r3, #12
 800069a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	e853 3f00 	ldrex	r3, [r3]
 80006a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	330c      	adds	r3, #12
 80006b0:	69fa      	ldr	r2, [r7, #28]
 80006b2:	61ba      	str	r2, [r7, #24]
 80006b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006b6:	6979      	ldr	r1, [r7, #20]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	e841 2300 	strex	r3, r2, [r1]
 80006be:	613b      	str	r3, [r7, #16]
   return(result);
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1e7      	bne.n	8000696 <LL_USART_EnableIT_RXNE+0x8>
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3724      	adds	r7, #36	; 0x24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	619a      	str	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	041a      	lsls	r2, r3, #16
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	619a      	str	r2, [r3, #24]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4013      	ands	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800

08000740 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <LL_APB2_GRP1_EnableClock+0x2c>)
 800074a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <LL_APB2_GRP1_EnableClock+0x2c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4013      	ands	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800

08000770 <USB_change_out>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */


void USB_change_out ()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '1')) out1[0] = 1;
 8000774:	4b86      	ldr	r3, [pc, #536]	; (8000990 <USB_change_out+0x220>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b41      	cmp	r3, #65	; 0x41
 800077a:	d10e      	bne.n	800079a <USB_change_out+0x2a>
 800077c:	4b84      	ldr	r3, [pc, #528]	; (8000990 <USB_change_out+0x220>)
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	2b4d      	cmp	r3, #77	; 0x4d
 8000782:	d10a      	bne.n	800079a <USB_change_out+0x2a>
 8000784:	4b82      	ldr	r3, [pc, #520]	; (8000990 <USB_change_out+0x220>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	2b31      	cmp	r3, #49	; 0x31
 800078a:	d106      	bne.n	800079a <USB_change_out+0x2a>
 800078c:	4b80      	ldr	r3, [pc, #512]	; (8000990 <USB_change_out+0x220>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b31      	cmp	r3, #49	; 0x31
 8000792:	d102      	bne.n	800079a <USB_change_out+0x2a>
 8000794:	4b7f      	ldr	r3, [pc, #508]	; (8000994 <USB_change_out+0x224>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '0')) out1[0] = 0;
 800079a:	4b7d      	ldr	r3, [pc, #500]	; (8000990 <USB_change_out+0x220>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b41      	cmp	r3, #65	; 0x41
 80007a0:	d10e      	bne.n	80007c0 <USB_change_out+0x50>
 80007a2:	4b7b      	ldr	r3, [pc, #492]	; (8000990 <USB_change_out+0x220>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	2b4d      	cmp	r3, #77	; 0x4d
 80007a8:	d10a      	bne.n	80007c0 <USB_change_out+0x50>
 80007aa:	4b79      	ldr	r3, [pc, #484]	; (8000990 <USB_change_out+0x220>)
 80007ac:	789b      	ldrb	r3, [r3, #2]
 80007ae:	2b31      	cmp	r3, #49	; 0x31
 80007b0:	d106      	bne.n	80007c0 <USB_change_out+0x50>
 80007b2:	4b77      	ldr	r3, [pc, #476]	; (8000990 <USB_change_out+0x220>)
 80007b4:	78db      	ldrb	r3, [r3, #3]
 80007b6:	2b30      	cmp	r3, #48	; 0x30
 80007b8:	d102      	bne.n	80007c0 <USB_change_out+0x50>
 80007ba:	4b76      	ldr	r3, [pc, #472]	; (8000994 <USB_change_out+0x224>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '1')) out1[1] = 1;
 80007c0:	4b73      	ldr	r3, [pc, #460]	; (8000990 <USB_change_out+0x220>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b41      	cmp	r3, #65	; 0x41
 80007c6:	d10e      	bne.n	80007e6 <USB_change_out+0x76>
 80007c8:	4b71      	ldr	r3, [pc, #452]	; (8000990 <USB_change_out+0x220>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	2b4d      	cmp	r3, #77	; 0x4d
 80007ce:	d10a      	bne.n	80007e6 <USB_change_out+0x76>
 80007d0:	4b6f      	ldr	r3, [pc, #444]	; (8000990 <USB_change_out+0x220>)
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	2b31      	cmp	r3, #49	; 0x31
 80007d6:	d106      	bne.n	80007e6 <USB_change_out+0x76>
 80007d8:	4b6d      	ldr	r3, [pc, #436]	; (8000990 <USB_change_out+0x220>)
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	2b31      	cmp	r3, #49	; 0x31
 80007de:	d102      	bne.n	80007e6 <USB_change_out+0x76>
 80007e0:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <USB_change_out+0x224>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '0')) out1[1] = 0;
 80007e6:	4b6a      	ldr	r3, [pc, #424]	; (8000990 <USB_change_out+0x220>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b41      	cmp	r3, #65	; 0x41
 80007ec:	d10e      	bne.n	800080c <USB_change_out+0x9c>
 80007ee:	4b68      	ldr	r3, [pc, #416]	; (8000990 <USB_change_out+0x220>)
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	2b4d      	cmp	r3, #77	; 0x4d
 80007f4:	d10a      	bne.n	800080c <USB_change_out+0x9c>
 80007f6:	4b66      	ldr	r3, [pc, #408]	; (8000990 <USB_change_out+0x220>)
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	2b31      	cmp	r3, #49	; 0x31
 80007fc:	d106      	bne.n	800080c <USB_change_out+0x9c>
 80007fe:	4b64      	ldr	r3, [pc, #400]	; (8000990 <USB_change_out+0x220>)
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	2b30      	cmp	r3, #48	; 0x30
 8000804:	d102      	bne.n	800080c <USB_change_out+0x9c>
 8000806:	4b63      	ldr	r3, [pc, #396]	; (8000994 <USB_change_out+0x224>)
 8000808:	2200      	movs	r2, #0
 800080a:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '1')) out1[2] = 1;
 800080c:	4b60      	ldr	r3, [pc, #384]	; (8000990 <USB_change_out+0x220>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b41      	cmp	r3, #65	; 0x41
 8000812:	d10e      	bne.n	8000832 <USB_change_out+0xc2>
 8000814:	4b5e      	ldr	r3, [pc, #376]	; (8000990 <USB_change_out+0x220>)
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	2b4d      	cmp	r3, #77	; 0x4d
 800081a:	d10a      	bne.n	8000832 <USB_change_out+0xc2>
 800081c:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <USB_change_out+0x220>)
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	2b31      	cmp	r3, #49	; 0x31
 8000822:	d106      	bne.n	8000832 <USB_change_out+0xc2>
 8000824:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <USB_change_out+0x220>)
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	2b31      	cmp	r3, #49	; 0x31
 800082a:	d102      	bne.n	8000832 <USB_change_out+0xc2>
 800082c:	4b59      	ldr	r3, [pc, #356]	; (8000994 <USB_change_out+0x224>)
 800082e:	2201      	movs	r2, #1
 8000830:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '0')) out1[2] = 0;
 8000832:	4b57      	ldr	r3, [pc, #348]	; (8000990 <USB_change_out+0x220>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b41      	cmp	r3, #65	; 0x41
 8000838:	d10e      	bne.n	8000858 <USB_change_out+0xe8>
 800083a:	4b55      	ldr	r3, [pc, #340]	; (8000990 <USB_change_out+0x220>)
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	2b4d      	cmp	r3, #77	; 0x4d
 8000840:	d10a      	bne.n	8000858 <USB_change_out+0xe8>
 8000842:	4b53      	ldr	r3, [pc, #332]	; (8000990 <USB_change_out+0x220>)
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	2b31      	cmp	r3, #49	; 0x31
 8000848:	d106      	bne.n	8000858 <USB_change_out+0xe8>
 800084a:	4b51      	ldr	r3, [pc, #324]	; (8000990 <USB_change_out+0x220>)
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	2b30      	cmp	r3, #48	; 0x30
 8000850:	d102      	bne.n	8000858 <USB_change_out+0xe8>
 8000852:	4b50      	ldr	r3, [pc, #320]	; (8000994 <USB_change_out+0x224>)
 8000854:	2200      	movs	r2, #0
 8000856:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '1')) out1[3] = 1;
 8000858:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <USB_change_out+0x220>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b41      	cmp	r3, #65	; 0x41
 800085e:	d10e      	bne.n	800087e <USB_change_out+0x10e>
 8000860:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <USB_change_out+0x220>)
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	2b4d      	cmp	r3, #77	; 0x4d
 8000866:	d10a      	bne.n	800087e <USB_change_out+0x10e>
 8000868:	4b49      	ldr	r3, [pc, #292]	; (8000990 <USB_change_out+0x220>)
 800086a:	789b      	ldrb	r3, [r3, #2]
 800086c:	2b31      	cmp	r3, #49	; 0x31
 800086e:	d106      	bne.n	800087e <USB_change_out+0x10e>
 8000870:	4b47      	ldr	r3, [pc, #284]	; (8000990 <USB_change_out+0x220>)
 8000872:	799b      	ldrb	r3, [r3, #6]
 8000874:	2b31      	cmp	r3, #49	; 0x31
 8000876:	d102      	bne.n	800087e <USB_change_out+0x10e>
 8000878:	4b46      	ldr	r3, [pc, #280]	; (8000994 <USB_change_out+0x224>)
 800087a:	2201      	movs	r2, #1
 800087c:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '0')) out1[3] = 0;
 800087e:	4b44      	ldr	r3, [pc, #272]	; (8000990 <USB_change_out+0x220>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b41      	cmp	r3, #65	; 0x41
 8000884:	d10e      	bne.n	80008a4 <USB_change_out+0x134>
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <USB_change_out+0x220>)
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	2b4d      	cmp	r3, #77	; 0x4d
 800088c:	d10a      	bne.n	80008a4 <USB_change_out+0x134>
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <USB_change_out+0x220>)
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	2b31      	cmp	r3, #49	; 0x31
 8000894:	d106      	bne.n	80008a4 <USB_change_out+0x134>
 8000896:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <USB_change_out+0x220>)
 8000898:	799b      	ldrb	r3, [r3, #6]
 800089a:	2b30      	cmp	r3, #48	; 0x30
 800089c:	d102      	bne.n	80008a4 <USB_change_out+0x134>
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <USB_change_out+0x224>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '1')) out1[4] = 1;
 80008a4:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <USB_change_out+0x220>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b41      	cmp	r3, #65	; 0x41
 80008aa:	d10e      	bne.n	80008ca <USB_change_out+0x15a>
 80008ac:	4b38      	ldr	r3, [pc, #224]	; (8000990 <USB_change_out+0x220>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b4d      	cmp	r3, #77	; 0x4d
 80008b2:	d10a      	bne.n	80008ca <USB_change_out+0x15a>
 80008b4:	4b36      	ldr	r3, [pc, #216]	; (8000990 <USB_change_out+0x220>)
 80008b6:	789b      	ldrb	r3, [r3, #2]
 80008b8:	2b31      	cmp	r3, #49	; 0x31
 80008ba:	d106      	bne.n	80008ca <USB_change_out+0x15a>
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <USB_change_out+0x220>)
 80008be:	79db      	ldrb	r3, [r3, #7]
 80008c0:	2b31      	cmp	r3, #49	; 0x31
 80008c2:	d102      	bne.n	80008ca <USB_change_out+0x15a>
 80008c4:	4b33      	ldr	r3, [pc, #204]	; (8000994 <USB_change_out+0x224>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '0')) out1[4] = 0;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <USB_change_out+0x220>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b41      	cmp	r3, #65	; 0x41
 80008d0:	d10e      	bne.n	80008f0 <USB_change_out+0x180>
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <USB_change_out+0x220>)
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	2b4d      	cmp	r3, #77	; 0x4d
 80008d8:	d10a      	bne.n	80008f0 <USB_change_out+0x180>
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <USB_change_out+0x220>)
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	2b31      	cmp	r3, #49	; 0x31
 80008e0:	d106      	bne.n	80008f0 <USB_change_out+0x180>
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <USB_change_out+0x220>)
 80008e4:	79db      	ldrb	r3, [r3, #7]
 80008e6:	2b30      	cmp	r3, #48	; 0x30
 80008e8:	d102      	bne.n	80008f0 <USB_change_out+0x180>
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <USB_change_out+0x224>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	711a      	strb	r2, [r3, #4]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '1')) out1[5] = 1;
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <USB_change_out+0x220>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b41      	cmp	r3, #65	; 0x41
 80008f6:	d10e      	bne.n	8000916 <USB_change_out+0x1a6>
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <USB_change_out+0x220>)
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	2b4d      	cmp	r3, #77	; 0x4d
 80008fe:	d10a      	bne.n	8000916 <USB_change_out+0x1a6>
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <USB_change_out+0x220>)
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	2b31      	cmp	r3, #49	; 0x31
 8000906:	d106      	bne.n	8000916 <USB_change_out+0x1a6>
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <USB_change_out+0x220>)
 800090a:	7a1b      	ldrb	r3, [r3, #8]
 800090c:	2b31      	cmp	r3, #49	; 0x31
 800090e:	d102      	bne.n	8000916 <USB_change_out+0x1a6>
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <USB_change_out+0x224>)
 8000912:	2201      	movs	r2, #1
 8000914:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '0')) out1[5] = 0;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <USB_change_out+0x220>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b41      	cmp	r3, #65	; 0x41
 800091c:	d10e      	bne.n	800093c <USB_change_out+0x1cc>
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <USB_change_out+0x220>)
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	2b4d      	cmp	r3, #77	; 0x4d
 8000924:	d10a      	bne.n	800093c <USB_change_out+0x1cc>
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <USB_change_out+0x220>)
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	2b31      	cmp	r3, #49	; 0x31
 800092c:	d106      	bne.n	800093c <USB_change_out+0x1cc>
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <USB_change_out+0x220>)
 8000930:	7a1b      	ldrb	r3, [r3, #8]
 8000932:	2b30      	cmp	r3, #48	; 0x30
 8000934:	d102      	bne.n	800093c <USB_change_out+0x1cc>
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <USB_change_out+0x224>)
 8000938:	2200      	movs	r2, #0
 800093a:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '1')) out1[6] = 1;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <USB_change_out+0x220>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b41      	cmp	r3, #65	; 0x41
 8000942:	d10e      	bne.n	8000962 <USB_change_out+0x1f2>
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <USB_change_out+0x220>)
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	2b4d      	cmp	r3, #77	; 0x4d
 800094a:	d10a      	bne.n	8000962 <USB_change_out+0x1f2>
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <USB_change_out+0x220>)
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	2b31      	cmp	r3, #49	; 0x31
 8000952:	d106      	bne.n	8000962 <USB_change_out+0x1f2>
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <USB_change_out+0x220>)
 8000956:	7a5b      	ldrb	r3, [r3, #9]
 8000958:	2b31      	cmp	r3, #49	; 0x31
 800095a:	d102      	bne.n	8000962 <USB_change_out+0x1f2>
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <USB_change_out+0x224>)
 800095e:	2201      	movs	r2, #1
 8000960:	719a      	strb	r2, [r3, #6]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '0')) out1[6] = 0;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <USB_change_out+0x220>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b41      	cmp	r3, #65	; 0x41
 8000968:	d10e      	bne.n	8000988 <USB_change_out+0x218>
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <USB_change_out+0x220>)
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	2b4d      	cmp	r3, #77	; 0x4d
 8000970:	d10a      	bne.n	8000988 <USB_change_out+0x218>
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <USB_change_out+0x220>)
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b31      	cmp	r3, #49	; 0x31
 8000978:	d106      	bne.n	8000988 <USB_change_out+0x218>
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <USB_change_out+0x220>)
 800097c:	7a5b      	ldrb	r3, [r3, #9]
 800097e:	2b30      	cmp	r3, #48	; 0x30
 8000980:	d102      	bne.n	8000988 <USB_change_out+0x218>
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <USB_change_out+0x224>)
 8000984:	2200      	movs	r2, #0
 8000986:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '1')) out1[7] = 1;
 8000988:	4b01      	ldr	r3, [pc, #4]	; (8000990 <USB_change_out+0x220>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	e004      	b.n	8000998 <USB_change_out+0x228>
 800098e:	bf00      	nop
 8000990:	2000015c 	.word	0x2000015c
 8000994:	20000178 	.word	0x20000178
 8000998:	2b41      	cmp	r3, #65	; 0x41
 800099a:	d10e      	bne.n	80009ba <USB_change_out+0x24a>
 800099c:	4b86      	ldr	r3, [pc, #536]	; (8000bb8 <USB_change_out+0x448>)
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	2b4d      	cmp	r3, #77	; 0x4d
 80009a2:	d10a      	bne.n	80009ba <USB_change_out+0x24a>
 80009a4:	4b84      	ldr	r3, [pc, #528]	; (8000bb8 <USB_change_out+0x448>)
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	2b31      	cmp	r3, #49	; 0x31
 80009aa:	d106      	bne.n	80009ba <USB_change_out+0x24a>
 80009ac:	4b82      	ldr	r3, [pc, #520]	; (8000bb8 <USB_change_out+0x448>)
 80009ae:	7a9b      	ldrb	r3, [r3, #10]
 80009b0:	2b31      	cmp	r3, #49	; 0x31
 80009b2:	d102      	bne.n	80009ba <USB_change_out+0x24a>
 80009b4:	4b81      	ldr	r3, [pc, #516]	; (8000bbc <USB_change_out+0x44c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '0')) out1[7] = 0;
 80009ba:	4b7f      	ldr	r3, [pc, #508]	; (8000bb8 <USB_change_out+0x448>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b41      	cmp	r3, #65	; 0x41
 80009c0:	d10e      	bne.n	80009e0 <USB_change_out+0x270>
 80009c2:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <USB_change_out+0x448>)
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	2b4d      	cmp	r3, #77	; 0x4d
 80009c8:	d10a      	bne.n	80009e0 <USB_change_out+0x270>
 80009ca:	4b7b      	ldr	r3, [pc, #492]	; (8000bb8 <USB_change_out+0x448>)
 80009cc:	789b      	ldrb	r3, [r3, #2]
 80009ce:	2b31      	cmp	r3, #49	; 0x31
 80009d0:	d106      	bne.n	80009e0 <USB_change_out+0x270>
 80009d2:	4b79      	ldr	r3, [pc, #484]	; (8000bb8 <USB_change_out+0x448>)
 80009d4:	7a9b      	ldrb	r3, [r3, #10]
 80009d6:	2b30      	cmp	r3, #48	; 0x30
 80009d8:	d102      	bne.n	80009e0 <USB_change_out+0x270>
 80009da:	4b78      	ldr	r3, [pc, #480]	; (8000bbc <USB_change_out+0x44c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '1')) out2[0] = 1;
 80009e0:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <USB_change_out+0x448>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b41      	cmp	r3, #65	; 0x41
 80009e6:	d10e      	bne.n	8000a06 <USB_change_out+0x296>
 80009e8:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <USB_change_out+0x448>)
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	2b4d      	cmp	r3, #77	; 0x4d
 80009ee:	d10a      	bne.n	8000a06 <USB_change_out+0x296>
 80009f0:	4b71      	ldr	r3, [pc, #452]	; (8000bb8 <USB_change_out+0x448>)
 80009f2:	789b      	ldrb	r3, [r3, #2]
 80009f4:	2b31      	cmp	r3, #49	; 0x31
 80009f6:	d106      	bne.n	8000a06 <USB_change_out+0x296>
 80009f8:	4b6f      	ldr	r3, [pc, #444]	; (8000bb8 <USB_change_out+0x448>)
 80009fa:	7adb      	ldrb	r3, [r3, #11]
 80009fc:	2b31      	cmp	r3, #49	; 0x31
 80009fe:	d102      	bne.n	8000a06 <USB_change_out+0x296>
 8000a00:	4b6f      	ldr	r3, [pc, #444]	; (8000bc0 <USB_change_out+0x450>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '0')) out2[0] = 0;
 8000a06:	4b6c      	ldr	r3, [pc, #432]	; (8000bb8 <USB_change_out+0x448>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b41      	cmp	r3, #65	; 0x41
 8000a0c:	d10e      	bne.n	8000a2c <USB_change_out+0x2bc>
 8000a0e:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <USB_change_out+0x448>)
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	2b4d      	cmp	r3, #77	; 0x4d
 8000a14:	d10a      	bne.n	8000a2c <USB_change_out+0x2bc>
 8000a16:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <USB_change_out+0x448>)
 8000a18:	789b      	ldrb	r3, [r3, #2]
 8000a1a:	2b31      	cmp	r3, #49	; 0x31
 8000a1c:	d106      	bne.n	8000a2c <USB_change_out+0x2bc>
 8000a1e:	4b66      	ldr	r3, [pc, #408]	; (8000bb8 <USB_change_out+0x448>)
 8000a20:	7adb      	ldrb	r3, [r3, #11]
 8000a22:	2b30      	cmp	r3, #48	; 0x30
 8000a24:	d102      	bne.n	8000a2c <USB_change_out+0x2bc>
 8000a26:	4b66      	ldr	r3, [pc, #408]	; (8000bc0 <USB_change_out+0x450>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '1')) out2[1] = 1;
 8000a2c:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <USB_change_out+0x448>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b41      	cmp	r3, #65	; 0x41
 8000a32:	d10e      	bne.n	8000a52 <USB_change_out+0x2e2>
 8000a34:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <USB_change_out+0x448>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	2b4d      	cmp	r3, #77	; 0x4d
 8000a3a:	d10a      	bne.n	8000a52 <USB_change_out+0x2e2>
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <USB_change_out+0x448>)
 8000a3e:	789b      	ldrb	r3, [r3, #2]
 8000a40:	2b31      	cmp	r3, #49	; 0x31
 8000a42:	d106      	bne.n	8000a52 <USB_change_out+0x2e2>
 8000a44:	4b5c      	ldr	r3, [pc, #368]	; (8000bb8 <USB_change_out+0x448>)
 8000a46:	7b1b      	ldrb	r3, [r3, #12]
 8000a48:	2b31      	cmp	r3, #49	; 0x31
 8000a4a:	d102      	bne.n	8000a52 <USB_change_out+0x2e2>
 8000a4c:	4b5c      	ldr	r3, [pc, #368]	; (8000bc0 <USB_change_out+0x450>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '0')) out2[1] = 0;
 8000a52:	4b59      	ldr	r3, [pc, #356]	; (8000bb8 <USB_change_out+0x448>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b41      	cmp	r3, #65	; 0x41
 8000a58:	d10e      	bne.n	8000a78 <USB_change_out+0x308>
 8000a5a:	4b57      	ldr	r3, [pc, #348]	; (8000bb8 <USB_change_out+0x448>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	2b4d      	cmp	r3, #77	; 0x4d
 8000a60:	d10a      	bne.n	8000a78 <USB_change_out+0x308>
 8000a62:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <USB_change_out+0x448>)
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	2b31      	cmp	r3, #49	; 0x31
 8000a68:	d106      	bne.n	8000a78 <USB_change_out+0x308>
 8000a6a:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <USB_change_out+0x448>)
 8000a6c:	7b1b      	ldrb	r3, [r3, #12]
 8000a6e:	2b30      	cmp	r3, #48	; 0x30
 8000a70:	d102      	bne.n	8000a78 <USB_change_out+0x308>
 8000a72:	4b53      	ldr	r3, [pc, #332]	; (8000bc0 <USB_change_out+0x450>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '1')) out2[2] = 1;
 8000a78:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <USB_change_out+0x448>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b41      	cmp	r3, #65	; 0x41
 8000a7e:	d10e      	bne.n	8000a9e <USB_change_out+0x32e>
 8000a80:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <USB_change_out+0x448>)
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	2b4d      	cmp	r3, #77	; 0x4d
 8000a86:	d10a      	bne.n	8000a9e <USB_change_out+0x32e>
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <USB_change_out+0x448>)
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	2b31      	cmp	r3, #49	; 0x31
 8000a8e:	d106      	bne.n	8000a9e <USB_change_out+0x32e>
 8000a90:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <USB_change_out+0x448>)
 8000a92:	7b5b      	ldrb	r3, [r3, #13]
 8000a94:	2b31      	cmp	r3, #49	; 0x31
 8000a96:	d102      	bne.n	8000a9e <USB_change_out+0x32e>
 8000a98:	4b49      	ldr	r3, [pc, #292]	; (8000bc0 <USB_change_out+0x450>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '0')) out2[2] = 0;
 8000a9e:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <USB_change_out+0x448>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b41      	cmp	r3, #65	; 0x41
 8000aa4:	d10e      	bne.n	8000ac4 <USB_change_out+0x354>
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <USB_change_out+0x448>)
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	2b4d      	cmp	r3, #77	; 0x4d
 8000aac:	d10a      	bne.n	8000ac4 <USB_change_out+0x354>
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <USB_change_out+0x448>)
 8000ab0:	789b      	ldrb	r3, [r3, #2]
 8000ab2:	2b31      	cmp	r3, #49	; 0x31
 8000ab4:	d106      	bne.n	8000ac4 <USB_change_out+0x354>
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <USB_change_out+0x448>)
 8000ab8:	7b5b      	ldrb	r3, [r3, #13]
 8000aba:	2b30      	cmp	r3, #48	; 0x30
 8000abc:	d102      	bne.n	8000ac4 <USB_change_out+0x354>
 8000abe:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <USB_change_out+0x450>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '1')) out2[3] = 1;
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <USB_change_out+0x448>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b41      	cmp	r3, #65	; 0x41
 8000aca:	d10e      	bne.n	8000aea <USB_change_out+0x37a>
 8000acc:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <USB_change_out+0x448>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	2b4d      	cmp	r3, #77	; 0x4d
 8000ad2:	d10a      	bne.n	8000aea <USB_change_out+0x37a>
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <USB_change_out+0x448>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2b31      	cmp	r3, #49	; 0x31
 8000ada:	d106      	bne.n	8000aea <USB_change_out+0x37a>
 8000adc:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <USB_change_out+0x448>)
 8000ade:	7b9b      	ldrb	r3, [r3, #14]
 8000ae0:	2b31      	cmp	r3, #49	; 0x31
 8000ae2:	d102      	bne.n	8000aea <USB_change_out+0x37a>
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <USB_change_out+0x450>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '0')) out2[3] = 0;
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <USB_change_out+0x448>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b41      	cmp	r3, #65	; 0x41
 8000af0:	d10e      	bne.n	8000b10 <USB_change_out+0x3a0>
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <USB_change_out+0x448>)
 8000af4:	785b      	ldrb	r3, [r3, #1]
 8000af6:	2b4d      	cmp	r3, #77	; 0x4d
 8000af8:	d10a      	bne.n	8000b10 <USB_change_out+0x3a0>
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <USB_change_out+0x448>)
 8000afc:	789b      	ldrb	r3, [r3, #2]
 8000afe:	2b31      	cmp	r3, #49	; 0x31
 8000b00:	d106      	bne.n	8000b10 <USB_change_out+0x3a0>
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <USB_change_out+0x448>)
 8000b04:	7b9b      	ldrb	r3, [r3, #14]
 8000b06:	2b30      	cmp	r3, #48	; 0x30
 8000b08:	d102      	bne.n	8000b10 <USB_change_out+0x3a0>
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <USB_change_out+0x450>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '1')) out2[4] = 1;
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <USB_change_out+0x448>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b41      	cmp	r3, #65	; 0x41
 8000b16:	d10e      	bne.n	8000b36 <USB_change_out+0x3c6>
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <USB_change_out+0x448>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	2b4d      	cmp	r3, #77	; 0x4d
 8000b1e:	d10a      	bne.n	8000b36 <USB_change_out+0x3c6>
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <USB_change_out+0x448>)
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	2b31      	cmp	r3, #49	; 0x31
 8000b26:	d106      	bne.n	8000b36 <USB_change_out+0x3c6>
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <USB_change_out+0x448>)
 8000b2a:	7bdb      	ldrb	r3, [r3, #15]
 8000b2c:	2b31      	cmp	r3, #49	; 0x31
 8000b2e:	d102      	bne.n	8000b36 <USB_change_out+0x3c6>
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <USB_change_out+0x450>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '0')) out2[4] = 0;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <USB_change_out+0x448>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b41      	cmp	r3, #65	; 0x41
 8000b3c:	d10e      	bne.n	8000b5c <USB_change_out+0x3ec>
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <USB_change_out+0x448>)
 8000b40:	785b      	ldrb	r3, [r3, #1]
 8000b42:	2b4d      	cmp	r3, #77	; 0x4d
 8000b44:	d10a      	bne.n	8000b5c <USB_change_out+0x3ec>
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <USB_change_out+0x448>)
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	2b31      	cmp	r3, #49	; 0x31
 8000b4c:	d106      	bne.n	8000b5c <USB_change_out+0x3ec>
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <USB_change_out+0x448>)
 8000b50:	7bdb      	ldrb	r3, [r3, #15]
 8000b52:	2b30      	cmp	r3, #48	; 0x30
 8000b54:	d102      	bne.n	8000b5c <USB_change_out+0x3ec>
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <USB_change_out+0x450>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	711a      	strb	r2, [r3, #4]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '1')) out2[5] = 1;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <USB_change_out+0x448>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b41      	cmp	r3, #65	; 0x41
 8000b62:	d10e      	bne.n	8000b82 <USB_change_out+0x412>
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <USB_change_out+0x448>)
 8000b66:	785b      	ldrb	r3, [r3, #1]
 8000b68:	2b4d      	cmp	r3, #77	; 0x4d
 8000b6a:	d10a      	bne.n	8000b82 <USB_change_out+0x412>
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <USB_change_out+0x448>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d106      	bne.n	8000b82 <USB_change_out+0x412>
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <USB_change_out+0x448>)
 8000b76:	7c1b      	ldrb	r3, [r3, #16]
 8000b78:	2b31      	cmp	r3, #49	; 0x31
 8000b7a:	d102      	bne.n	8000b82 <USB_change_out+0x412>
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <USB_change_out+0x450>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '0')) out2[5] = 0;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <USB_change_out+0x448>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b41      	cmp	r3, #65	; 0x41
 8000b88:	d10e      	bne.n	8000ba8 <USB_change_out+0x438>
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <USB_change_out+0x448>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	2b4d      	cmp	r3, #77	; 0x4d
 8000b90:	d10a      	bne.n	8000ba8 <USB_change_out+0x438>
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <USB_change_out+0x448>)
 8000b94:	789b      	ldrb	r3, [r3, #2]
 8000b96:	2b31      	cmp	r3, #49	; 0x31
 8000b98:	d106      	bne.n	8000ba8 <USB_change_out+0x438>
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <USB_change_out+0x448>)
 8000b9c:	7c1b      	ldrb	r3, [r3, #16]
 8000b9e:	2b30      	cmp	r3, #48	; 0x30
 8000ba0:	d102      	bne.n	8000ba8 <USB_change_out+0x438>
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <USB_change_out+0x450>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '1')) out2[6] = 1;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <USB_change_out+0x448>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b41      	cmp	r3, #65	; 0x41
 8000bae:	d116      	bne.n	8000bde <USB_change_out+0x46e>
 8000bb0:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <USB_change_out+0x448>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	e006      	b.n	8000bc4 <USB_change_out+0x454>
 8000bb6:	bf00      	nop
 8000bb8:	2000015c 	.word	0x2000015c
 8000bbc:	20000178 	.word	0x20000178
 8000bc0:	20000180 	.word	0x20000180
 8000bc4:	2b4d      	cmp	r3, #77	; 0x4d
 8000bc6:	d10a      	bne.n	8000bde <USB_change_out+0x46e>
 8000bc8:	4b9b      	ldr	r3, [pc, #620]	; (8000e38 <USB_change_out+0x6c8>)
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	2b31      	cmp	r3, #49	; 0x31
 8000bce:	d106      	bne.n	8000bde <USB_change_out+0x46e>
 8000bd0:	4b99      	ldr	r3, [pc, #612]	; (8000e38 <USB_change_out+0x6c8>)
 8000bd2:	7c5b      	ldrb	r3, [r3, #17]
 8000bd4:	2b31      	cmp	r3, #49	; 0x31
 8000bd6:	d102      	bne.n	8000bde <USB_change_out+0x46e>
 8000bd8:	4b98      	ldr	r3, [pc, #608]	; (8000e3c <USB_change_out+0x6cc>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	719a      	strb	r2, [r3, #6]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '0')) out2[6] = 0;
 8000bde:	4b96      	ldr	r3, [pc, #600]	; (8000e38 <USB_change_out+0x6c8>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b41      	cmp	r3, #65	; 0x41
 8000be4:	d10e      	bne.n	8000c04 <USB_change_out+0x494>
 8000be6:	4b94      	ldr	r3, [pc, #592]	; (8000e38 <USB_change_out+0x6c8>)
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	2b4d      	cmp	r3, #77	; 0x4d
 8000bec:	d10a      	bne.n	8000c04 <USB_change_out+0x494>
 8000bee:	4b92      	ldr	r3, [pc, #584]	; (8000e38 <USB_change_out+0x6c8>)
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	2b31      	cmp	r3, #49	; 0x31
 8000bf4:	d106      	bne.n	8000c04 <USB_change_out+0x494>
 8000bf6:	4b90      	ldr	r3, [pc, #576]	; (8000e38 <USB_change_out+0x6c8>)
 8000bf8:	7c5b      	ldrb	r3, [r3, #17]
 8000bfa:	2b30      	cmp	r3, #48	; 0x30
 8000bfc:	d102      	bne.n	8000c04 <USB_change_out+0x494>
 8000bfe:	4b8f      	ldr	r3, [pc, #572]	; (8000e3c <USB_change_out+0x6cc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '1')) out2[7] = 1;
 8000c04:	4b8c      	ldr	r3, [pc, #560]	; (8000e38 <USB_change_out+0x6c8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b41      	cmp	r3, #65	; 0x41
 8000c0a:	d10e      	bne.n	8000c2a <USB_change_out+0x4ba>
 8000c0c:	4b8a      	ldr	r3, [pc, #552]	; (8000e38 <USB_change_out+0x6c8>)
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	2b4d      	cmp	r3, #77	; 0x4d
 8000c12:	d10a      	bne.n	8000c2a <USB_change_out+0x4ba>
 8000c14:	4b88      	ldr	r3, [pc, #544]	; (8000e38 <USB_change_out+0x6c8>)
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	2b31      	cmp	r3, #49	; 0x31
 8000c1a:	d106      	bne.n	8000c2a <USB_change_out+0x4ba>
 8000c1c:	4b86      	ldr	r3, [pc, #536]	; (8000e38 <USB_change_out+0x6c8>)
 8000c1e:	7c9b      	ldrb	r3, [r3, #18]
 8000c20:	2b31      	cmp	r3, #49	; 0x31
 8000c22:	d102      	bne.n	8000c2a <USB_change_out+0x4ba>
 8000c24:	4b85      	ldr	r3, [pc, #532]	; (8000e3c <USB_change_out+0x6cc>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '0')) out2[7] = 0;
 8000c2a:	4b83      	ldr	r3, [pc, #524]	; (8000e38 <USB_change_out+0x6c8>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b41      	cmp	r3, #65	; 0x41
 8000c30:	d10e      	bne.n	8000c50 <USB_change_out+0x4e0>
 8000c32:	4b81      	ldr	r3, [pc, #516]	; (8000e38 <USB_change_out+0x6c8>)
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	2b4d      	cmp	r3, #77	; 0x4d
 8000c38:	d10a      	bne.n	8000c50 <USB_change_out+0x4e0>
 8000c3a:	4b7f      	ldr	r3, [pc, #508]	; (8000e38 <USB_change_out+0x6c8>)
 8000c3c:	789b      	ldrb	r3, [r3, #2]
 8000c3e:	2b31      	cmp	r3, #49	; 0x31
 8000c40:	d106      	bne.n	8000c50 <USB_change_out+0x4e0>
 8000c42:	4b7d      	ldr	r3, [pc, #500]	; (8000e38 <USB_change_out+0x6c8>)
 8000c44:	7c9b      	ldrb	r3, [r3, #18]
 8000c46:	2b30      	cmp	r3, #48	; 0x30
 8000c48:	d102      	bne.n	8000c50 <USB_change_out+0x4e0>
 8000c4a:	4b7c      	ldr	r3, [pc, #496]	; (8000e3c <USB_change_out+0x6cc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(flag_ok ==1)){ USART1_Send_String ("OK"); flag_ok=0;}
 8000c50:	4b79      	ldr	r3, [pc, #484]	; (8000e38 <USB_change_out+0x6c8>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b41      	cmp	r3, #65	; 0x41
 8000c56:	d10d      	bne.n	8000c74 <USB_change_out+0x504>
 8000c58:	4b77      	ldr	r3, [pc, #476]	; (8000e38 <USB_change_out+0x6c8>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	2b4d      	cmp	r3, #77	; 0x4d
 8000c5e:	d109      	bne.n	8000c74 <USB_change_out+0x504>
 8000c60:	4b77      	ldr	r3, [pc, #476]	; (8000e40 <USB_change_out+0x6d0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d105      	bne.n	8000c74 <USB_change_out+0x504>
 8000c68:	4876      	ldr	r0, [pc, #472]	; (8000e44 <USB_change_out+0x6d4>)
 8000c6a:	f000 f967 	bl	8000f3c <USART1_Send_String>
 8000c6e:	4b74      	ldr	r3, [pc, #464]	; (8000e40 <USB_change_out+0x6d0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]

		if (out1[0] ==1) LL_GPIO_SetOutputPin(OUT1_GPIO_Port, OUT1_Pin); else LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000c74:	4b74      	ldr	r3, [pc, #464]	; (8000e48 <USB_change_out+0x6d8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d104      	bne.n	8000c86 <USB_change_out+0x516>
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4873      	ldr	r0, [pc, #460]	; (8000e4c <USB_change_out+0x6dc>)
 8000c80:	f7ff fd28 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000c84:	e003      	b.n	8000c8e <USB_change_out+0x51e>
 8000c86:	2101      	movs	r1, #1
 8000c88:	4870      	ldr	r0, [pc, #448]	; (8000e4c <USB_change_out+0x6dc>)
 8000c8a:	f7ff fd31 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[1] ==1) LL_GPIO_SetOutputPin(OUT2_GPIO_Port, OUT2_Pin); else LL_GPIO_ResetOutputPin(OUT2_GPIO_Port, OUT2_Pin);
 8000c8e:	4b6e      	ldr	r3, [pc, #440]	; (8000e48 <USB_change_out+0x6d8>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <USB_change_out+0x530>
 8000c96:	2102      	movs	r1, #2
 8000c98:	486c      	ldr	r0, [pc, #432]	; (8000e4c <USB_change_out+0x6dc>)
 8000c9a:	f7ff fd1b 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000c9e:	e003      	b.n	8000ca8 <USB_change_out+0x538>
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	486a      	ldr	r0, [pc, #424]	; (8000e4c <USB_change_out+0x6dc>)
 8000ca4:	f7ff fd24 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[2] ==1) LL_GPIO_SetOutputPin(OUT3_GPIO_Port, OUT3_Pin); else LL_GPIO_ResetOutputPin(OUT3_GPIO_Port, OUT3_Pin);
 8000ca8:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <USB_change_out+0x6d8>)
 8000caa:	789b      	ldrb	r3, [r3, #2]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d104      	bne.n	8000cba <USB_change_out+0x54a>
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4866      	ldr	r0, [pc, #408]	; (8000e4c <USB_change_out+0x6dc>)
 8000cb4:	f7ff fd0e 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000cb8:	e003      	b.n	8000cc2 <USB_change_out+0x552>
 8000cba:	2104      	movs	r1, #4
 8000cbc:	4863      	ldr	r0, [pc, #396]	; (8000e4c <USB_change_out+0x6dc>)
 8000cbe:	f7ff fd17 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[3] ==1) LL_GPIO_SetOutputPin(OUT4_GPIO_Port, OUT4_Pin); else LL_GPIO_ResetOutputPin(OUT4_GPIO_Port, OUT4_Pin);
 8000cc2:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <USB_change_out+0x6d8>)
 8000cc4:	78db      	ldrb	r3, [r3, #3]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <USB_change_out+0x564>
 8000cca:	2108      	movs	r1, #8
 8000ccc:	485f      	ldr	r0, [pc, #380]	; (8000e4c <USB_change_out+0x6dc>)
 8000cce:	f7ff fd01 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000cd2:	e003      	b.n	8000cdc <USB_change_out+0x56c>
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	485d      	ldr	r0, [pc, #372]	; (8000e4c <USB_change_out+0x6dc>)
 8000cd8:	f7ff fd0a 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[4] ==1) LL_GPIO_SetOutputPin(OUT5_GPIO_Port, OUT5_Pin); else LL_GPIO_ResetOutputPin(OUT5_GPIO_Port, OUT5_Pin);
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <USB_change_out+0x6d8>)
 8000cde:	791b      	ldrb	r3, [r3, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d104      	bne.n	8000cee <USB_change_out+0x57e>
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4859      	ldr	r0, [pc, #356]	; (8000e4c <USB_change_out+0x6dc>)
 8000ce8:	f7ff fcf4 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000cec:	e003      	b.n	8000cf6 <USB_change_out+0x586>
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4856      	ldr	r0, [pc, #344]	; (8000e4c <USB_change_out+0x6dc>)
 8000cf2:	f7ff fcfd 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[5] ==1) LL_GPIO_SetOutputPin(OUT6_GPIO_Port, OUT6_Pin); else LL_GPIO_ResetOutputPin(OUT6_GPIO_Port, OUT6_Pin);
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <USB_change_out+0x6d8>)
 8000cf8:	795b      	ldrb	r3, [r3, #5]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d104      	bne.n	8000d08 <USB_change_out+0x598>
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4852      	ldr	r0, [pc, #328]	; (8000e4c <USB_change_out+0x6dc>)
 8000d02:	f7ff fce7 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000d06:	e003      	b.n	8000d10 <USB_change_out+0x5a0>
 8000d08:	2120      	movs	r1, #32
 8000d0a:	4850      	ldr	r0, [pc, #320]	; (8000e4c <USB_change_out+0x6dc>)
 8000d0c:	f7ff fcf0 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[6] ==1) LL_GPIO_SetOutputPin(OUT7_GPIO_Port, OUT7_Pin); else LL_GPIO_ResetOutputPin(OUT7_GPIO_Port, OUT7_Pin);
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <USB_change_out+0x6d8>)
 8000d12:	799b      	ldrb	r3, [r3, #6]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d104      	bne.n	8000d22 <USB_change_out+0x5b2>
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	484c      	ldr	r0, [pc, #304]	; (8000e4c <USB_change_out+0x6dc>)
 8000d1c:	f7ff fcda 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000d20:	e003      	b.n	8000d2a <USB_change_out+0x5ba>
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4849      	ldr	r0, [pc, #292]	; (8000e4c <USB_change_out+0x6dc>)
 8000d26:	f7ff fce3 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out1[7] ==1) LL_GPIO_SetOutputPin(OUT8_GPIO_Port, OUT8_Pin); else LL_GPIO_ResetOutputPin(OUT8_GPIO_Port, OUT8_Pin);
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <USB_change_out+0x6d8>)
 8000d2c:	79db      	ldrb	r3, [r3, #7]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d104      	bne.n	8000d3c <USB_change_out+0x5cc>
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	4845      	ldr	r0, [pc, #276]	; (8000e4c <USB_change_out+0x6dc>)
 8000d36:	f7ff fccd 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000d3a:	e003      	b.n	8000d44 <USB_change_out+0x5d4>
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4843      	ldr	r0, [pc, #268]	; (8000e4c <USB_change_out+0x6dc>)
 8000d40:	f7ff fcd6 	bl	80006f0 <LL_GPIO_ResetOutputPin>

		if (out2[0] ==1) LL_GPIO_SetOutputPin(OUT9_GPIO_Port, OUT9_Pin); else LL_GPIO_ResetOutputPin(OUT9_GPIO_Port, OUT9_Pin);
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <USB_change_out+0x6cc>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d105      	bne.n	8000d58 <USB_change_out+0x5e8>
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	483e      	ldr	r0, [pc, #248]	; (8000e4c <USB_change_out+0x6dc>)
 8000d52:	f7ff fcbf 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000d56:	e004      	b.n	8000d62 <USB_change_out+0x5f2>
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	483b      	ldr	r0, [pc, #236]	; (8000e4c <USB_change_out+0x6dc>)
 8000d5e:	f7ff fcc7 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[1] ==1) LL_GPIO_SetOutputPin(OUT10_GPIO_Port, OUT10_Pin); else LL_GPIO_ResetOutputPin(OUT10_GPIO_Port, OUT10_Pin);
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <USB_change_out+0x6cc>)
 8000d64:	785b      	ldrb	r3, [r3, #1]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d105      	bne.n	8000d76 <USB_change_out+0x606>
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	4837      	ldr	r0, [pc, #220]	; (8000e4c <USB_change_out+0x6dc>)
 8000d70:	f7ff fcb0 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000d74:	e004      	b.n	8000d80 <USB_change_out+0x610>
 8000d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7a:	4834      	ldr	r0, [pc, #208]	; (8000e4c <USB_change_out+0x6dc>)
 8000d7c:	f7ff fcb8 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[2] ==1) LL_GPIO_SetOutputPin(OUT11_GPIO_Port, OUT11_Pin); else LL_GPIO_ResetOutputPin(OUT11_GPIO_Port, OUT11_Pin);
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <USB_change_out+0x6cc>)
 8000d82:	789b      	ldrb	r3, [r3, #2]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d105      	bne.n	8000d94 <USB_change_out+0x624>
 8000d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8c:	482f      	ldr	r0, [pc, #188]	; (8000e4c <USB_change_out+0x6dc>)
 8000d8e:	f7ff fca1 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000d92:	e004      	b.n	8000d9e <USB_change_out+0x62e>
 8000d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d98:	482c      	ldr	r0, [pc, #176]	; (8000e4c <USB_change_out+0x6dc>)
 8000d9a:	f7ff fca9 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[3] ==1) LL_GPIO_SetOutputPin(OUT12_GPIO_Port, OUT12_Pin); else LL_GPIO_ResetOutputPin(OUT12_GPIO_Port, OUT12_Pin);
 8000d9e:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <USB_change_out+0x6cc>)
 8000da0:	78db      	ldrb	r3, [r3, #3]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d105      	bne.n	8000db2 <USB_change_out+0x642>
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	4828      	ldr	r0, [pc, #160]	; (8000e4c <USB_change_out+0x6dc>)
 8000dac:	f7ff fc92 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000db0:	e004      	b.n	8000dbc <USB_change_out+0x64c>
 8000db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <USB_change_out+0x6dc>)
 8000db8:	f7ff fc9a 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[4] ==1) LL_GPIO_SetOutputPin(OUT13_GPIO_Port, OUT13_Pin); else LL_GPIO_ResetOutputPin(OUT13_GPIO_Port, OUT13_Pin);
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <USB_change_out+0x6cc>)
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <USB_change_out+0x660>
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	4820      	ldr	r0, [pc, #128]	; (8000e4c <USB_change_out+0x6dc>)
 8000dca:	f7ff fc83 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000dce:	e004      	b.n	8000dda <USB_change_out+0x66a>
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	481d      	ldr	r0, [pc, #116]	; (8000e4c <USB_change_out+0x6dc>)
 8000dd6:	f7ff fc8b 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[5] ==1) LL_GPIO_SetOutputPin(OUT14_GPIO_Port, OUT14_Pin); else LL_GPIO_ResetOutputPin(OUT14_GPIO_Port, OUT14_Pin);
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <USB_change_out+0x6cc>)
 8000ddc:	795b      	ldrb	r3, [r3, #5]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d105      	bne.n	8000dee <USB_change_out+0x67e>
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <USB_change_out+0x6dc>)
 8000de8:	f7ff fc74 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000dec:	e004      	b.n	8000df8 <USB_change_out+0x688>
 8000dee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <USB_change_out+0x6dc>)
 8000df4:	f7ff fc7c 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[6] ==1) LL_GPIO_SetOutputPin(OUT15_GPIO_Port, OUT15_Pin); else LL_GPIO_ResetOutputPin(OUT15_GPIO_Port, OUT15_Pin);
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <USB_change_out+0x6cc>)
 8000dfa:	799b      	ldrb	r3, [r3, #6]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <USB_change_out+0x69c>
 8000e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <USB_change_out+0x6dc>)
 8000e06:	f7ff fc65 	bl	80006d4 <LL_GPIO_SetOutputPin>
 8000e0a:	e004      	b.n	8000e16 <USB_change_out+0x6a6>
 8000e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <USB_change_out+0x6dc>)
 8000e12:	f7ff fc6d 	bl	80006f0 <LL_GPIO_ResetOutputPin>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <USB_change_out+0x6cc>)
 8000e18:	79db      	ldrb	r3, [r3, #7]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d105      	bne.n	8000e2a <USB_change_out+0x6ba>
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	480b      	ldr	r0, [pc, #44]	; (8000e50 <USB_change_out+0x6e0>)
 8000e24:	f7ff fc56 	bl	80006d4 <LL_GPIO_SetOutputPin>

}
 8000e28:	e004      	b.n	8000e34 <USB_change_out+0x6c4>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 8000e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2e:	4808      	ldr	r0, [pc, #32]	; (8000e50 <USB_change_out+0x6e0>)
 8000e30:	f7ff fc5e 	bl	80006f0 <LL_GPIO_ResetOutputPin>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000015c 	.word	0x2000015c
 8000e3c:	20000180 	.word	0x20000180
 8000e40:	20000175 	.word	0x20000175
 8000e44:	0800a530 	.word	0x0800a530
 8000e48:	20000178 	.word	0x20000178
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020000 	.word	0x40020000

08000e54 <W5500_Select>:
/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
void W5500_Select(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <W5500_Select+0x14>)
 8000e5e:	f001 fbd5 	bl	800260c <HAL_GPIO_WritePin>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40020000 	.word	0x40020000

08000e6c <W5500_Unselect>:

void W5500_Unselect(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <W5500_Unselect+0x14>)
 8000e76:	f001 fbc9 	bl	800260c <HAL_GPIO_WritePin>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020000 	.word	0x40020000

08000e84 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8000e90:	887a      	ldrh	r2, [r7, #2]
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <W5500_ReadBuff+0x24>)
 8000e9a:	f003 fcaf 	bl	80047fc <HAL_SPI_Receive>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000188 	.word	0x20000188

08000eac <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000eb8:	887a      	ldrh	r2, [r7, #2]
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <W5500_WriteBuff+0x24>)
 8000ec2:	f003 fb5f 	bl	8004584 <HAL_SPI_Transmit>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000188 	.word	0x20000188

08000ed4 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffd0 	bl	8000e84 <W5500_ReadBuff>
    return byte;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	2101      	movs	r1, #1
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffd5 	bl	8000eac <W5500_WriteBuff>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <USART1_Send>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */


void USART1_Send (char chr){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & USART_SR_TC));
 8000f16:	bf00      	nop
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <USART1_Send+0x2c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f9      	beq.n	8000f18 <USART1_Send+0xc>
	USART1->DR = chr;
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <USART1_Send+0x2c>)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	6053      	str	r3, [r2, #4]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40011000 	.word	0x40011000

08000f3c <USART1_Send_String>:

void USART1_Send_String (char* str){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
	while(str[i])
 8000f48:	e009      	b.n	8000f5e <USART1_Send_String+0x22>
	USART1_Send (str[i++]);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	73fa      	strb	r2, [r7, #15]
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffd7 	bl	8000f0c <USART1_Send>
	while(str[i])
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1ef      	bne.n	8000f4a <USART1_Send_String+0xe>
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f001 f859 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f863 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 f99b 	bl	80012bc <MX_GPIO_Init>
  MX_TIM10_Init();
 8000f86:	f000 f903 	bl	8001190 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8000f8a:	f008 fdaf 	bl	8009aec <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000f8e:	f000 f8c9 	bl	8001124 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f92:	f000 f933 	bl	80011fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableIT_UPDATE(TIM10);
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <main+0xa8>)
 8000f98:	f7ff fb43 	bl	8000622 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM10);
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <main+0xa8>)
 8000f9e:	f7ff fb20 	bl	80005e2 <LL_TIM_EnableCounter>
	LL_USART_Enable(USART1);
 8000fa2:	481f      	ldr	r0, [pc, #124]	; (8001020 <main+0xac>)
 8000fa4:	f7ff fb4d 	bl	8000642 <LL_USART_Enable>
	LL_USART_EnableIT_RXNE(USART1);
 8000fa8:	481d      	ldr	r0, [pc, #116]	; (8001020 <main+0xac>)
 8000faa:	f7ff fb70 	bl	800068e <LL_USART_EnableIT_RXNE>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	481c      	ldr	r0, [pc, #112]	; (8001024 <main+0xb0>)
 8000fb4:	f001 fb2a 	bl	800260c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f001 f87b 	bl	80020b4 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <main+0xb0>)
 8000fc4:	f001 fb22 	bl	800260c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f001 f872 	bl	80020b4 <HAL_Delay>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000fd0:	4915      	ldr	r1, [pc, #84]	; (8001028 <main+0xb4>)
 8000fd2:	4816      	ldr	r0, [pc, #88]	; (800102c <main+0xb8>)
 8000fd4:	f000 fd80 	bl	8001ad8 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8000fd8:	4915      	ldr	r1, [pc, #84]	; (8001030 <main+0xbc>)
 8000fda:	4816      	ldr	r0, [pc, #88]	; (8001034 <main+0xc0>)
 8000fdc:	f000 fda2 	bl	8001b24 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000fe0:	4915      	ldr	r1, [pc, #84]	; (8001038 <main+0xc4>)
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <main+0xc8>)
 8000fe4:	f000 fdca 	bl	8001b7c <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <main+0xcc>)
 8000fea:	463b      	mov	r3, r7
 8000fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff0:	e883 0003 	stmia.w	r3, {r0, r1}

	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8000ff4:	463a      	mov	r2, r7
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fe74 	bl	8001ce8 <wizchip_init>

	wizchip_setnetinfo(&gWIZNETINFO);
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <main+0xd0>)
 8001002:	f000 fefd 	bl	8001e00 <wizchip_setnetinfo>

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <main+0xd0>)
 8001008:	2000      	movs	r0, #0
 800100a:	f000 fde3 	bl	8001bd4 <ctlnetwork>
	HAL_Delay(1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001012:	f001 f84f 	bl	80020b4 <HAL_Delay>
		UART_Printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);

		loopback_tcps(HTTP_SOCKET, gDATABUF, 80);

		close(HTTP_SOCKET);*/
		USB_change_out();
 8001016:	f7ff fbab 	bl	8000770 <USB_change_out>
 800101a:	e7fc      	b.n	8001016 <main+0xa2>
 800101c:	40014400 	.word	0x40014400
 8001020:	40011000 	.word	0x40011000
 8001024:	40020000 	.word	0x40020000
 8001028:	08000e6d 	.word	0x08000e6d
 800102c:	08000e55 	.word	0x08000e55
 8001030:	08000eef 	.word	0x08000eef
 8001034:	08000ed5 	.word	0x08000ed5
 8001038:	08000ead 	.word	0x08000ead
 800103c:	08000e85 	.word	0x08000e85
 8001040:	0800ac0c 	.word	0x0800ac0c
 8001044:	20000000 	.word	0x20000000

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	; 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2230      	movs	r2, #48	; 0x30
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f009 fa32 	bl	800a4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <SystemClock_Config+0xd4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a29      	ldr	r2, [pc, #164]	; (800111c <SystemClock_Config+0xd4>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <SystemClock_Config+0xd4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <SystemClock_Config+0xd8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <SystemClock_Config+0xd8>)
 8001096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <SystemClock_Config+0xd8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010bc:	2319      	movs	r3, #25
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ca:	2307      	movs	r3, #7
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fd30 	bl	8003b38 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010de:	f000 f96b 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 ff92 	bl	8004028 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800110a:	f000 f955 	bl	80013b8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800110e:	f003 f871 	bl	80041f4 <HAL_RCC_EnableCSS>
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	; 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_SPI1_Init+0x64>)
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <MX_SPI1_Init+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_SPI1_Init+0x64>)
 8001130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001134:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_SPI1_Init+0x64>)
 8001150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001154:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_SPI1_Init+0x64>)
 8001158:	2208      	movs	r2, #8
 800115a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_SPI1_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_SPI1_Init+0x64>)
 8001170:	220a      	movs	r2, #10
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_SPI1_Init+0x64>)
 8001176:	f003 f97c 	bl	8004472 <HAL_SPI_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 f91a 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000188 	.word	0x20000188
 800118c:	40013000 	.word	0x40013000

08001190 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 80011a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011a8:	f7ff faca 	bl	8000740 <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80011ac:	f7ff f990 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2200      	movs	r2, #0
 80011b4:	210f      	movs	r1, #15
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9e0 	bl	800057c <NVIC_EncodePriority>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	2019      	movs	r0, #25
 80011c2:	f7ff f9b1 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011c6:	2019      	movs	r0, #25
 80011c8:	f7ff f990 	bl	80004ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 80011cc:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80011d0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 80011d6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80011da:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_TIM10_Init+0x68>)
 80011e6:	f004 fd6b 	bl	8005cc0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <MX_TIM10_Init+0x68>)
 80011ec:	f7ff fa09 	bl	8000602 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40014400 	.word	0x40014400

080011fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001226:	2010      	movs	r0, #16
 8001228:	f7ff fa8a 	bl	8000740 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fa6f 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001238:	2302      	movs	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001248:	2307      	movs	r3, #7
 800124a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_USART1_UART_Init+0xb8>)
 8001252:	f004 fb4e 	bl	80058f2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001256:	f7ff f93b 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 800125a:	4603      	mov	r3, r0
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f98b 	bl	800057c <NVIC_EncodePriority>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	2025      	movs	r0, #37	; 0x25
 800126c:	f7ff f95c 	bl	8000528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001270:	2025      	movs	r0, #37	; 0x25
 8001272:	f7ff f93b 	bl	80004ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001276:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800127a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001288:	230c      	movs	r3, #12
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <MX_USART1_UART_Init+0xbc>)
 800129c:	f004 fff2 	bl	8006284 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART1_UART_Init+0xbc>)
 80012a2:	f7ff f9de 	bl	8000662 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_USART1_UART_Init+0xbc>)
 80012a8:	f7ff f9cb 	bl	8000642 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	; 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40011000 	.word	0x40011000

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80012d2:	2004      	movs	r0, #4
 80012d4:	f7ff fa1c 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80012d8:	2080      	movs	r0, #128	; 0x80
 80012da:	f7ff fa19 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012de:	2001      	movs	r0, #1
 80012e0:	f7ff fa16 	bl	8000710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff fa13 	bl	8000710 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	4826      	ldr	r0, [pc, #152]	; (8001388 <MX_GPIO_Init+0xcc>)
 80012f0:	f7ff f9fe 	bl	80006f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin);
 80012f4:	f248 0118 	movw	r1, #32792	; 0x8018
 80012f8:	4824      	ldr	r0, [pc, #144]	; (800138c <MX_GPIO_Init+0xd0>)
 80012fa:	f7ff f9f9 	bl	80006f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 80012fe:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001302:	4823      	ldr	r0, [pc, #140]	; (8001390 <MX_GPIO_Init+0xd4>)
 8001304:	f7ff f9f4 	bl	80006f0 <LL_GPIO_ResetOutputPin>
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8001308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800130e:	2301      	movs	r3, #1
 8001310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4819      	ldr	r0, [pc, #100]	; (8001388 <MX_GPIO_Init+0xcc>)
 8001324:	f004 fae5 	bl	80058f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_Pin;
 8001328:	2301      	movs	r3, #1
 800132a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_GPIO_Init+0xd0>)
 800133a:	f004 fada 	bl	80058f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin;
 800133e:	f248 0318 	movw	r3, #32792	; 0x8018
 8001342:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001344:	2301      	movs	r3, #1
 8001346:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_GPIO_Init+0xd0>)
 800135a:	f004 faca 	bl	80058f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 800135e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001362:	603b      	str	r3, [r7, #0]
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001364:	2301      	movs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_GPIO_Init+0xd4>)
 800137a:	f004 faba 	bl	80058f2 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020800 	.word	0x40020800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400

08001394 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013a6:	f000 fe65 	bl	8002074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40010000 	.word	0x40010000

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_MspInit+0x4c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_SPI_MspInit+0x94>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d133      	bne.n	800149e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_SPI_MspInit+0x98>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <HAL_SPI_MspInit+0x98>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_SPI_MspInit+0x98>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_SPI_MspInit+0x98>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_SPI_MspInit+0x98>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_SPI_MspInit+0x98>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800146e:	23e0      	movs	r3, #224	; 0xe0
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147e:	2305      	movs	r3, #5
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_SPI_MspInit+0x9c>)
 800148a:	f000 ff3b 	bl	8002304 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2023      	movs	r0, #35	; 0x23
 8001494:	f000 feea 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001498:	2023      	movs	r0, #35	; 0x23
 800149a:	f000 ff03 	bl	80022a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40013000 	.word	0x40013000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000

080014b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_InitTick+0xd0>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <HAL_InitTick+0xd0>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6453      	str	r3, [r2, #68]	; 0x44
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_InitTick+0xd0>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e0:	f107 020c 	add.w	r2, r7, #12
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 ff74 	bl	80043d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014f0:	f002 ff5e 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 80014f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	4a23      	ldr	r2, [pc, #140]	; (8001588 <HAL_InitTick+0xd4>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	3b01      	subs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_InitTick+0xd8>)
 8001506:	4a22      	ldr	r2, [pc, #136]	; (8001590 <HAL_InitTick+0xdc>)
 8001508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_InitTick+0xd8>)
 800150c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_InitTick+0xd8>)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_InitTick+0xd8>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_InitTick+0xd8>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_InitTick+0xd8>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <HAL_InitTick+0xd8>)
 800152c:	f003 fe5c 	bl	80051e8 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11b      	bne.n	8001576 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <HAL_InitTick+0xd8>)
 8001540:	f003 feac 	bl	800529c <HAL_TIM_Base_Start_IT>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800154a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800154e:	2b00      	cmp	r3, #0
 8001550:	d111      	bne.n	8001576 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001552:	2019      	movs	r0, #25
 8001554:	f000 fea6 	bl	80022a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d808      	bhi.n	8001570 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800155e:	2200      	movs	r2, #0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	2019      	movs	r0, #25
 8001564:	f000 fe82 	bl	800226c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_InitTick+0xe0>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e002      	b.n	8001576 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800157a:	4618      	mov	r0, r3
 800157c:	3730      	adds	r7, #48	; 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	431bde83 	.word	0x431bde83
 800158c:	200001e0 	.word	0x200001e0
 8001590:	40010000 	.word	0x40010000
 8001594:	20000048 	.word	0x20000048

08001598 <LL_TIM_ClearFlag_UPDATE>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f06f 0201 	mvn.w	r2, #1
 80015a6:	611a      	str	r2, [r3, #16]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4013      	ands	r3, r2
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43d9      	mvns	r1, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	400b      	ands	r3, r1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001610:	f002 ff14 	bl	800443c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x8>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800166e:	f7ff ffa1 	bl	80015b4 <LL_TIM_IsActiveFlag_UPDATE>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <TIM1_UP_TIM10_IRQHandler+0x20>
			LL_TIM_ClearFlag_UPDATE(TIM10);
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800167a:	f7ff ff8d 	bl	8001598 <LL_TIM_ClearFlag_UPDATE>
			LL_GPIO_TogglePin(GPIOC, LED_Pin);
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8001684:	f7ff ffa9 	bl	80015da <LL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800168a:	f003 fe69 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40014400 	.word	0x40014400
 8001698:	40020800 	.word	0x40020800
 800169c:	200001e0 	.word	0x200001e0

080016a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <SPI1_IRQHandler+0x10>)
 80016a6:	f003 fb5d 	bl	8004d64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000188 	.word	0x20000188

080016b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	char letter;
		static uint8_t i = 0;
		letter = USART1->DR;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <USART1_IRQHandler+0x60>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	71fb      	strb	r3, [r7, #7]
		if (letter != '\r')
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d013      	beq.n	80016ee <USART1_IRQHandler+0x3a>
		{
			str_rx1[i] = letter;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <USART1_IRQHandler+0x64>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <USART1_IRQHandler+0x68>)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	5453      	strb	r3, [r2, r1]
			i++;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <USART1_IRQHandler+0x64>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <USART1_IRQHandler+0x64>)
 80016dc:	701a      	strb	r2, [r3, #0]
			if (i == 24) i = 0;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <USART1_IRQHandler+0x64>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d10f      	bne.n	8001706 <USART1_IRQHandler+0x52>
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <USART1_IRQHandler+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
		}else {str_rx1[i] = '\r'; i = 0; flag_ok=1;}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ec:	e00b      	b.n	8001706 <USART1_IRQHandler+0x52>
		}else {str_rx1[i] = '\r'; i = 0; flag_ok=1;}
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <USART1_IRQHandler+0x64>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <USART1_IRQHandler+0x68>)
 80016f6:	210d      	movs	r1, #13
 80016f8:	5499      	strb	r1, [r3, r2]
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <USART1_IRQHandler+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <USART1_IRQHandler+0x6c>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40011000 	.word	0x40011000
 8001718:	20000228 	.word	0x20000228
 800171c:	2000015c 	.word	0x2000015c
 8001720:	20000175 	.word	0x20000175

08001724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OTG_FS_IRQHandler+0x10>)
 800172a:	f001 f8d8 	bl	80028de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000f18 	.word	0x20000f18

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <WIZCHIP_READ+0x94>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4798      	blx	r3
   WIZCHIP.CS._select();
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <WIZCHIP_READ+0x94>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <WIZCHIP_READ+0x94>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <WIZCHIP_READ+0x24>
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <WIZCHIP_READ+0x94>)
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d114      	bne.n	80017aa <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <WIZCHIP_READ+0x94>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	0c12      	lsrs	r2, r2, #16
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	4610      	mov	r0, r2
 800178c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <WIZCHIP_READ+0x94>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	0a12      	lsrs	r2, r2, #8
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	4610      	mov	r0, r2
 800179a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <WIZCHIP_READ+0x94>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	4610      	mov	r0, r2
 80017a6:	4798      	blx	r3
 80017a8:	e011      	b.n	80017ce <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <WIZCHIP_READ+0x94>)
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f107 020c 	add.w	r2, r7, #12
 80017c8:	2103      	movs	r1, #3
 80017ca:	4610      	mov	r0, r2
 80017cc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <WIZCHIP_READ+0x94>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4798      	blx	r3
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <WIZCHIP_READ+0x94>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <WIZCHIP_READ+0x94>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4798      	blx	r3
   return ret;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000001c 	.word	0x2000001c

080017f4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <WIZCHIP_WRITE+0x98>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <WIZCHIP_WRITE+0x98>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <WIZCHIP_WRITE+0x98>)
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d119      	bne.n	8001850 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <WIZCHIP_WRITE+0x98>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	0c12      	lsrs	r2, r2, #16
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	4610      	mov	r0, r2
 8001828:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <WIZCHIP_WRITE+0x98>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	0a12      	lsrs	r2, r2, #8
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	4610      	mov	r0, r2
 8001836:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <WIZCHIP_WRITE+0x98>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	4610      	mov	r0, r2
 8001842:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <WIZCHIP_WRITE+0x98>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	4610      	mov	r0, r2
 800184c:	4798      	blx	r3
 800184e:	e013      	b.n	8001878 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	b2db      	uxtb	r3, r3
 8001856:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	b2db      	uxtb	r3, r3
 800185e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <WIZCHIP_WRITE+0x98>)
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	f107 020c 	add.w	r2, r7, #12
 8001872:	2104      	movs	r1, #4
 8001874:	4610      	mov	r0, r2
 8001876:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <WIZCHIP_WRITE+0x98>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <WIZCHIP_WRITE+0x98>)
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	4798      	blx	r3
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000001c 	.word	0x2000001c

08001890 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <WIZCHIP_READ_BUF+0x2a>
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d126      	bne.n	8001908 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	0c12      	lsrs	r2, r2, #16
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	4610      	mov	r0, r2
 80018c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	0a12      	lsrs	r2, r2, #8
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	4610      	mov	r0, r2
 80018d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	4610      	mov	r0, r2
 80018e0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	82fb      	strh	r3, [r7, #22]
 80018e6:	e00a      	b.n	80018fe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	8afa      	ldrh	r2, [r7, #22]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	188c      	adds	r4, r1, r2
 80018f2:	4798      	blx	r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80018f8:	8afb      	ldrh	r3, [r7, #22]
 80018fa:	3301      	adds	r3, #1
 80018fc:	82fb      	strh	r3, [r7, #22]
 80018fe:	8afa      	ldrh	r2, [r7, #22]
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	429a      	cmp	r2, r3
 8001904:	d3f0      	bcc.n	80018e8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001906:	e017      	b.n	8001938 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	b2db      	uxtb	r3, r3
 800190e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b2db      	uxtb	r3, r3
 8001916:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f107 0210 	add.w	r2, r7, #16
 8001926:	2103      	movs	r1, #3
 8001928:	4610      	mov	r0, r2
 800192a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	4611      	mov	r1, r2
 8001934:	68b8      	ldr	r0, [r7, #8]
 8001936:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800193e:	4b03      	ldr	r3, [pc, #12]	; (800194c <WIZCHIP_READ_BUF+0xbc>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	4798      	blx	r3
}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	2000001c 	.word	0x2000001c

08001950 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	2b00      	cmp	r3, #0
 8001978:	d126      	bne.n	80019c8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	0c12      	lsrs	r2, r2, #16
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	4610      	mov	r0, r2
 8001986:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	0a12      	lsrs	r2, r2, #8
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	4610      	mov	r0, r2
 8001994:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	4610      	mov	r0, r2
 80019a0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	82fb      	strh	r3, [r7, #22]
 80019a6:	e00a      	b.n	80019be <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	8afa      	ldrh	r2, [r7, #22]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	440a      	add	r2, r1
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	4610      	mov	r0, r2
 80019b6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80019b8:	8afb      	ldrh	r3, [r7, #22]
 80019ba:	3301      	adds	r3, #1
 80019bc:	82fb      	strh	r3, [r7, #22]
 80019be:	8afa      	ldrh	r2, [r7, #22]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3f0      	bcc.n	80019a8 <WIZCHIP_WRITE_BUF+0x58>
 80019c6:	e017      	b.n	80019f8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	f107 0210 	add.w	r2, r7, #16
 80019e6:	2103      	movs	r1, #3
 80019e8:	4610      	mov	r0, r2
 80019ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	4611      	mov	r1, r2
 80019f4:	68b8      	ldr	r0, [r7, #8]
 80019f6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <WIZCHIP_WRITE_BUF+0xbc>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	4798      	blx	r3
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000001c 	.word	0x2000001c

08001a10 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	2300      	movs	r3, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	807b      	strh	r3, [r7, #2]
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <reg_wizchip_cs_cbfunc+0x16>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <reg_wizchip_cs_cbfunc+0x40>)
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <reg_wizchip_cs_cbfunc+0x44>)
 8001af2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <reg_wizchip_cs_cbfunc+0x40>)
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <reg_wizchip_cs_cbfunc+0x48>)
 8001af8:	619a      	str	r2, [r3, #24]
 8001afa:	e006      	b.n	8001b0a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <reg_wizchip_cs_cbfunc+0x40>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <reg_wizchip_cs_cbfunc+0x40>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6193      	str	r3, [r2, #24]
   }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2000001c 	.word	0x2000001c
 8001b1c:	08001a2d 	.word	0x08001a2d
 8001b20:	08001a3b 	.word	0x08001a3b

08001b24 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001b2e:	bf00      	nop
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f9      	beq.n	8001b30 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <reg_wizchip_spi_cbfunc+0x24>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <reg_wizchip_spi_cbfunc+0x50>)
 8001b4c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b50:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <reg_wizchip_spi_cbfunc+0x54>)
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	e006      	b.n	8001b64 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6213      	str	r3, [r2, #32]
   }
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	2000001c 	.word	0x2000001c
 8001b74:	08001a81 	.word	0x08001a81
 8001b78:	08001a91 	.word	0x08001a91

08001b7c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001b86:	bf00      	nop
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f9      	beq.n	8001b88 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <reg_wizchip_spiburst_cbfunc+0x24>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d106      	bne.n	8001bae <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <reg_wizchip_spiburst_cbfunc+0x50>)
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
 8001bac:	e006      	b.n	8001bbc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	2000001c 	.word	0x2000001c
 8001bcc:	08001aa7 	.word	0x08001aa7
 8001bd0:	08001abf 	.word	0x08001abf

08001bd4 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d82c      	bhi.n	8001c40 <ctlnetwork+0x6c>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <ctlnetwork+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c0d 	.word	0x08001c0d
 8001bf4:	08001c15 	.word	0x08001c15
 8001bf8:	08001c23 	.word	0x08001c23
 8001bfc:	08001c31 	.word	0x08001c31
 8001c00:	08001c39 	.word	0x08001c39
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f000 f8fb 	bl	8001e00 <wizchip_setnetinfo>
         break;
 8001c0a:	e01c      	b.n	8001c46 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f000 f937 	bl	8001e80 <wizchip_getnetinfo>
         break;
 8001c12:	e018      	b.n	8001c46 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f971 	bl	8001f00 <wizchip_setnetmode>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	e012      	b.n	8001c48 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001c22:	f000 f98f 	bl	8001f44 <wizchip_getnetmode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	701a      	strb	r2, [r3, #0]
         break;
 8001c2e:	e00a      	b.n	8001c46 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001c30:	6838      	ldr	r0, [r7, #0]
 8001c32:	f000 f98f 	bl	8001f54 <wizchip_settimeout>
         break;
 8001c36:	e006      	b.n	8001c46 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001c38:	6838      	ldr	r0, [r7, #0]
 8001c3a:	f000 f9ac 	bl	8001f96 <wizchip_gettimeout>
         break;
 8001c3e:	e002      	b.n	8001c46 <ctlnetwork+0x72>
      default:
         return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	e000      	b.n	8001c48 <ctlnetwork+0x74>
   }
   return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2206      	movs	r2, #6
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c60:	f7ff fe16 	bl	8001890 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c70:	f7ff fe0e 	bl	8001890 <WIZCHIP_READ_BUF>
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001c80:	f7ff fe06 	bl	8001890 <WIZCHIP_READ_BUF>
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2204      	movs	r2, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001c90:	f7ff fdfe 	bl	8001890 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fdac 	bl	80017f4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fd5d 	bl	800175c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2206      	movs	r2, #6
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001cac:	f7ff fe50 	bl	8001950 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cbc:	f7ff fe48 	bl	8001950 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001ccc:	f7ff fe40 	bl	8001950 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001cdc:	f7ff fe38 	bl	8001950 <WIZCHIP_WRITE_BUF>
}
 8001ce0:	bf00      	nop
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001cf6:	f7ff ffab 	bl	8001c50 <wizchip_sw_reset>
   if(txsize)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d03b      	beq.n	8001d78 <wizchip_init+0x90>
   {
      tmp = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e015      	b.n	8001d36 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	4413      	add	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	dd02      	ble.n	8001d2a <wizchip_init+0x42>
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e066      	b.n	8001df8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	dde5      	ble.n	8001d0a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e015      	b.n	8001d70 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001d52:	4618      	mov	r0, r3
 8001d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7ff fd48 	bl	80017f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d74:	2b07      	cmp	r3, #7
 8001d76:	dde5      	ble.n	8001d44 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03b      	beq.n	8001df6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e015      	b.n	8001db4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	4413      	add	r3, r2
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	dd02      	ble.n	8001da8 <wizchip_init+0xc0>
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e027      	b.n	8001df8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	dde5      	ble.n	8001d88 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e015      	b.n	8001dee <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3301      	adds	r3, #1
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7ff fd09 	bl	80017f4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	2b07      	cmp	r3, #7
 8001df4:	dde5      	ble.n	8001dc2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2206      	movs	r2, #6
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e12:	f7ff fd9d 	bl	8001950 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	330e      	adds	r3, #14
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e22:	f7ff fd95 	bl	8001950 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	330a      	adds	r3, #10
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e32:	f7ff fd8d 	bl	8001950 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3306      	adds	r3, #6
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e42:	f7ff fd85 	bl	8001950 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7c9a      	ldrb	r2, [r3, #18]
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <wizchip_setnetinfo+0x78>)
 8001e4c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7cda      	ldrb	r2, [r3, #19]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <wizchip_setnetinfo+0x78>)
 8001e54:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7d1a      	ldrb	r2, [r3, #20]
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <wizchip_setnetinfo+0x78>)
 8001e5c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7d5a      	ldrb	r2, [r3, #21]
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <wizchip_setnetinfo+0x78>)
 8001e64:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7d9a      	ldrb	r2, [r3, #22]
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <wizchip_setnetinfo+0x7c>)
 8001e6c:	701a      	strb	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000022c 	.word	0x2000022c
 8001e7c:	20000230 	.word	0x20000230

08001e80 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2206      	movs	r2, #6
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e92:	f7ff fcfd 	bl	8001890 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	330e      	adds	r3, #14
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ea2:	f7ff fcf5 	bl	8001890 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	330a      	adds	r3, #10
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001eb2:	f7ff fced 	bl	8001890 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3306      	adds	r3, #6
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ec2:	f7ff fce5 	bl	8001890 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <wizchip_getnetinfo+0x78>)
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <wizchip_getnetinfo+0x78>)
 8001ed0:	785a      	ldrb	r2, [r3, #1]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <wizchip_getnetinfo+0x78>)
 8001ed8:	789a      	ldrb	r2, [r3, #2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <wizchip_getnetinfo+0x78>)
 8001ee0:	78da      	ldrb	r2, [r3, #3]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <wizchip_getnetinfo+0x7c>)
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	759a      	strb	r2, [r3, #22]
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000022c 	.word	0x2000022c
 8001efc:	20000230 	.word	0x20000230

08001f00 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <wizchip_setnetmode+0x1e>
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	e00e      	b.n	8001f3c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fc1c 	bl	800175c <WIZCHIP_READ>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4619      	mov	r1, r3
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fc5d 	bl	80017f4 <WIZCHIP_WRITE>
   return 0;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fc07 	bl	800175c <WIZCHIP_READ>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001f66:	f7ff fc45 	bl	80017f4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	885b      	ldrh	r3, [r3, #2]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001f7a:	f7ff fc3b 	bl	80017f4 <WIZCHIP_WRITE>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001f8a:	f7ff fc33 	bl	80017f4 <WIZCHIP_WRITE>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001f96:	b590      	push	{r4, r7, lr}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001f9e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001fa2:	f7ff fbdb 	bl	800175c <WIZCHIP_READ>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001fae:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001fb2:	f7ff fbd3 	bl	800175c <WIZCHIP_READ>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b29c      	uxth	r4, r3
 8001fbe:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001fc2:	f7ff fbcb 	bl	800175c <WIZCHIP_READ>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4423      	add	r3, r4
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	805a      	strh	r2, [r3, #2]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
	...

08001fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff8:	4c0b      	ldr	r4, [pc, #44]	; (8002028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002006:	f7ff fb97 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f008 fa61 	bl	800a4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7fe ffb1 	bl	8000f74 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8002020:	0800ac84 	.word	0x0800ac84
  ldr r2, =_sbss
 8002024:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8002028:	20001644 	.word	0x20001644

0800202c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_Init+0x40>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_Init+0x40>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x40>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 f8fc 	bl	8002256 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	200f      	movs	r0, #15
 8002060:	f7ff fa28 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff f9ae 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x20>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x24>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_IncTick+0x24>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	2000004c 	.word	0x2000004c
 8002098:	20000234 	.word	0x20000234

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000234 	.word	0x20000234

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffee 	bl	800209c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffde 	bl	800209c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000004c 	.word	0x2000004c

080020fc <__NVIC_SetPriorityGrouping>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <__NVIC_EnableIRQ+0x38>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff4c 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227e:	f7ff ff61 	bl	8002144 <__NVIC_GetPriorityGrouping>
 8002282:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7ff ffb1 	bl	80021f0 <NVIC_EncodePriority>
 800228e:	4602      	mov	r2, r0
 8002290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff80 	bl	800219c <__NVIC_SetPriority>
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff54 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d004      	beq.n	80022de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00c      	b.n	80022f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2205      	movs	r2, #5
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e159      	b.n	80025d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8148 	bne.w	80025ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d005      	beq.n	8002356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	2b02      	cmp	r3, #2
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d017      	beq.n	80023f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d123      	bne.n	8002448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a2 	beq.w	80025ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a6:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x2f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x202>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x1fe>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_GPIO_Init+0x2f8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x1fa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a46      	ldr	r2, [pc, #280]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x1f6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_GPIO_Init+0x300>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x1f2>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_GPIO_Init+0x304>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_GPIO_Init+0x304>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f aea2 	bls.w	8002320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002628:	e003      	b.n	8002632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	041a      	lsls	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800263e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002640:	b08f      	sub	sp, #60	; 0x3c
 8002642:	af0a      	add	r7, sp, #40	; 0x28
 8002644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e10f      	b.n	8002870 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f007 fc1e 	bl	8009eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2203      	movs	r2, #3
 8002674:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 ff71 	bl	8006576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	687e      	ldr	r6, [r7, #4]
 800269c:	466d      	mov	r5, sp
 800269e:	f106 0410 	add.w	r4, r6, #16
 80026a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b2:	1d33      	adds	r3, r6, #4
 80026b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f003 fe48 	bl	800634c <USB_CoreInit>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0d0      	b.n	8002870 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 ff5f 	bl	8006598 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e04a      	b.n	8002776 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	333d      	adds	r3, #61	; 0x3d
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	333c      	adds	r3, #60	; 0x3c
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	b298      	uxth	r0, r3
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3344      	adds	r3, #68	; 0x44
 800271c:	4602      	mov	r2, r0
 800271e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3340      	adds	r3, #64	; 0x40
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3348      	adds	r3, #72	; 0x48
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334c      	adds	r3, #76	; 0x4c
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3354      	adds	r3, #84	; 0x54
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	3301      	adds	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	d3af      	bcc.n	80026e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e044      	b.n	8002810 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	3301      	adds	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3b5      	bcc.n	8002786 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	687e      	ldr	r6, [r7, #4]
 8002822:	466d      	mov	r5, sp
 8002824:	f106 0410 	add.w	r4, r6, #16
 8002828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002834:	e885 0003 	stmia.w	r5, {r0, r1}
 8002838:	1d33      	adds	r3, r6, #4
 800283a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283c:	6838      	ldr	r0, [r7, #0]
 800283e:	f003 fef7 	bl	8006630 <USB_DevInit>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e00d      	b.n	8002870 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f005 f846 	bl	80078fa <USB_DevDisconnect>

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002878 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_PCD_Start+0x1c>
 8002890:	2302      	movs	r3, #2
 8002892:	e020      	b.n	80028d6 <HAL_PCD_Start+0x5e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d109      	bne.n	80028b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d005      	beq.n	80028b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fe49 	bl	8006554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fff6 	bl	80078b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b08d      	sub	sp, #52	; 0x34
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f005 f8b4 	bl	8007a62 <USB_GetMode>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 848a 	bne.w	8003216 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f005 f818 	bl	800793c <USB_ReadInterrupts>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8480 	beq.w	8003214 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 f805 	bl	800793c <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d107      	bne.n	800294c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f002 0202 	and.w	r2, r2, #2
 800294a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fff3 	bl	800793c <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	d161      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0210 	bic.w	r2, r2, #16
 800296e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	0c5b      	lsrs	r3, r3, #17
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	2b02      	cmp	r3, #2
 800299a:	d124      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d035      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	6a38      	ldr	r0, [r7, #32]
 80029bc:	f004 fe2a 	bl	8007614 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029cc:	441a      	add	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029de:	441a      	add	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]
 80029e4:	e016      	b.n	8002a14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	0c5b      	lsrs	r3, r3, #17
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d110      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029f8:	2208      	movs	r2, #8
 80029fa:	4619      	mov	r1, r3
 80029fc:	6a38      	ldr	r0, [r7, #32]
 80029fe:	f004 fe09 	bl	8007614 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0e:	441a      	add	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0210 	orr.w	r2, r2, #16
 8002a22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 ff87 	bl	800793c <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a38:	f040 80a7 	bne.w	8002b8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 ff8c 	bl	8007962 <USB_ReadDevAllOutEpInterrupt>
 8002a4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a4c:	e099      	b.n	8002b82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 808e 	beq.w	8002b76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 ffb0 	bl	80079ca <USB_ReadDevOutEPInterrupt>
 8002a6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	461a      	mov	r2, r3
 8002a84:	2301      	movs	r3, #1
 8002a86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fec2 	bl	8003814 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 ff98 	bl	80039e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	461a      	mov	r2, r3
 8002acc:	2310      	movs	r3, #16
 8002ace:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d030      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d109      	bne.n	8002afa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	78db      	ldrb	r3, [r3, #3]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f007 fabd 	bl	800a0a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	2302      	movs	r3, #2
 8002b3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	461a      	mov	r2, r3
 8002b54:	2320      	movs	r3, #32
 8002b56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47f af62 	bne.w	8002a4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fed4 	bl	800793c <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b9e:	f040 80db 	bne.w	8002d58 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 fef5 	bl	8007996 <USB_ReadDevAllInEpInterrupt>
 8002bac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bb2:	e0cd      	b.n	8002d50 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80c2 	beq.w	8002d44 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 ff1b 	bl	8007a06 <USB_ReadDevInEPInterrupt>
 8002bd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d057      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	2201      	movs	r2, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69f9      	ldr	r1, [r7, #28]
 8002bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2301      	movs	r3, #1
 8002c10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d132      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	334c      	adds	r3, #76	; 0x4c
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4403      	add	r3, r0
 8002c3a:	3348      	adds	r3, #72	; 0x48
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4419      	add	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4403      	add	r3, r0
 8002c4e:	334c      	adds	r3, #76	; 0x4c
 8002c50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d113      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x3a2>
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3354      	adds	r3, #84	; 0x54
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d108      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	f004 ff22 	bl	8007ac4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f007 f991 	bl	8009fae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d023      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cec:	6a38      	ldr	r0, [r7, #32]
 8002cee:	f003 fe03 	bl	80068f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f007 f9d4 	bl	800a0c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2302      	movs	r3, #2
 8002d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fcdb 	bl	80036fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f47f af2e 	bne.w	8002bb4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fded 	bl	800793c <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d6c:	d122      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d94:	2100      	movs	r1, #0
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fec2 	bl	8003b20 <HAL_PCDEx_LPM_Callback>
 8002d9c:	e002      	b.n	8002da4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f007 f972 	bl	800a088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f004 fdbf 	bl	800793c <USB_ReadInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc8:	d112      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f007 f92e 	bl	800a03c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fda1 	bl	800793c <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e04:	f040 80b7 	bne.w	8002f76 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2110      	movs	r1, #16
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fd68 	bl	80068f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	e046      	b.n	8002ebc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e52:	0151      	lsls	r1, r2, #5
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	440a      	add	r2, r1
 8002e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea6:	0151      	lsls	r1, r2, #5
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	440a      	add	r2, r1
 8002eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	3301      	adds	r3, #1
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3b3      	bcc.n	8002e2e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ed8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef2:	f043 030b 	orr.w	r3, r3, #11
 8002ef6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f08:	f043 030b 	orr.w	r3, r3, #11
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	e015      	b.n	8002f3c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f22:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f26:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f36:	f043 030b 	orr.w	r3, r3, #11
 8002f3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f60:	461a      	mov	r2, r3
 8002f62:	f004 fdaf 	bl	8007ac4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fcde 	bl	800793c <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8a:	d124      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 fd74 	bl	8007a7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fd29 	bl	80069f2 <USB_GetDevSpeed>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681c      	ldr	r4, [r3, #0]
 8002fac:	f001 f9f4 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f003 fa28 	bl	8006410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f007 f81c 	bl	8009ffe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fcae 	bl	800793c <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d10a      	bne.n	8003000 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f006 fff9 	bl	8009fe2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f002 0208 	and.w	r2, r2, #8
 8002ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fc99 	bl	800793c <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d122      	bne.n	800305a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
 8003024:	e014      	b.n	8003050 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fb27 	bl	8003698 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	3301      	adds	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	429a      	cmp	r2, r3
 8003058:	d3e5      	bcc.n	8003026 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f004 fc6c 	bl	800793c <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306e:	d13b      	bne.n	80030e8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
 8003074:	e02b      	b.n	80030ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3340      	adds	r3, #64	; 0x40
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d115      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800309c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da12      	bge.n	80030c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	333f      	adds	r3, #63	; 0x3f
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fae8 	bl	8003698 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	3301      	adds	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3ce      	bcc.n	8003076 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fc25 	bl	800793c <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030fc:	d155      	bne.n	80031aa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030fe:	2301      	movs	r3, #1
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	e045      	b.n	8003190 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d12e      	bne.n	800318a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800312c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800312e:	2b00      	cmp	r3, #0
 8003130:	da2b      	bge.n	800318a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800313e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003142:	429a      	cmp	r2, r3
 8003144:	d121      	bne.n	800318a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003186:	6053      	str	r3, [r2, #4]
            break;
 8003188:	e007      	b.n	800319a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	3301      	adds	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	429a      	cmp	r2, r3
 8003198:	d3b4      	bcc.n	8003104 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fbc4 	bl	800793c <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d10a      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f006 ff93 	bl	800a0ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 fbae 	bl	800793c <USB_ReadInterrupts>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d115      	bne.n	8003216 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f006 ff83 	bl	800a108 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e000      	b.n	8003216 <HAL_PCD_IRQHandler+0x938>
      return;
 8003214:	bf00      	nop
    }
  }
}
 8003216:	3734      	adds	r7, #52	; 0x34
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_PCD_SetAddress+0x1a>
 8003232:	2302      	movs	r3, #2
 8003234:	e013      	b.n	800325e <HAL_PCD_SetAddress+0x42>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f004 fb0c 	bl	800786c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	4608      	mov	r0, r1
 8003270:	4611      	mov	r1, r2
 8003272:	461a      	mov	r2, r3
 8003274:	4603      	mov	r3, r0
 8003276:	70fb      	strb	r3, [r7, #3]
 8003278:	460b      	mov	r3, r1
 800327a:	803b      	strh	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da0f      	bge.n	80032ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3338      	adds	r3, #56	; 0x38
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	705a      	strb	r2, [r3, #1]
 80032aa:	e00f      	b.n	80032cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	3304      	adds	r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032d8:	883a      	ldrh	r2, [r7, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	78ba      	ldrb	r2, [r7, #2]
 80032e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d004      	beq.n	80032f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032f6:	78bb      	ldrb	r3, [r7, #2]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d102      	bne.n	8003302 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_PCD_EP_Open+0xaa>
 800330c:	2302      	movs	r3, #2
 800330e:	e00e      	b.n	800332e <HAL_PCD_EP_Open+0xc8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fb8c 	bl	8006a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800332c:	7afb      	ldrb	r3, [r7, #11]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da0f      	bge.n	800336a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3338      	adds	r3, #56	; 0x38
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	705a      	strb	r2, [r3, #1]
 8003368:	e00f      	b.n	800338a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_PCD_EP_Close+0x6e>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e00e      	b.n	80033c2 <HAL_PCD_EP_Close+0x8c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 fbca 	bl	8006b4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	460b      	mov	r3, r1
 80033d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	7afb      	ldrb	r3, [r7, #11]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	b2da      	uxtb	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	6979      	ldr	r1, [r7, #20]
 800343e:	f003 fea9 	bl	8007194 <USB_EP0StartXfer>
 8003442:	e008      	b.n	8003456 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	6979      	ldr	r1, [r7, #20]
 8003452:	f003 fc57 	bl	8006d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	460b      	mov	r3, r1
 800349e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	7afb      	ldrb	r3, [r7, #11]
 80034a2:	f003 020f 	and.w	r2, r3, #15
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	3338      	adds	r3, #56	; 0x38
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2200      	movs	r2, #0
 80034c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2201      	movs	r2, #1
 80034ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	f003 fe47 	bl	8007194 <USB_EP0StartXfer>
 8003506:	e008      	b.n	800351a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	f003 fbf5 	bl	8006d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d901      	bls.n	8003542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e050      	b.n	80035e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da0f      	bge.n	800356a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3338      	adds	r3, #56	; 0x38
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	e00d      	b.n	8003586 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_PCD_EP_SetStall+0x82>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e01e      	b.n	80035e4 <HAL_PCD_EP_SetStall+0xc0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 f885 	bl	80076c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	b2d9      	uxtb	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035d4:	461a      	mov	r2, r3
 80035d6:	f004 fa75 	bl	8007ac4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d901      	bls.n	800360a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e042      	b.n	8003690 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800360a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da0f      	bge.n	8003632 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 020f 	and.w	r2, r3, #15
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3338      	adds	r3, #56	; 0x38
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	705a      	strb	r2, [r3, #1]
 8003630:	e00f      	b.n	8003652 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_PCD_EP_ClrStall+0x86>
 800366e:	2302      	movs	r3, #2
 8003670:	e00e      	b.n	8003690 <HAL_PCD_EP_ClrStall+0xa4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	4618      	mov	r0, r3
 8003682:	f004 f88d 	bl	80077a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da0c      	bge.n	80036c6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	f003 020f 	and.w	r2, r3, #15
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	3338      	adds	r3, #56	; 0x38
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e00c      	b.n	80036e0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 feac 	bl	8007444 <USB_EPStopXfer>
 80036ec:	4603      	mov	r3, r0
 80036ee:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036f0:	7afb      	ldrb	r3, [r7, #11]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af02      	add	r7, sp, #8
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3338      	adds	r3, #56	; 0x38
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	429a      	cmp	r2, r3
 800372c:	d901      	bls.n	8003732 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06c      	b.n	800380c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	429a      	cmp	r2, r3
 8003746:	d902      	bls.n	800374e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3303      	adds	r3, #3
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003756:	e02b      	b.n	80037b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	429a      	cmp	r2, r3
 800376c:	d902      	bls.n	8003774 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3303      	adds	r3, #3
 8003778:	089b      	lsrs	r3, r3, #2
 800377a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6919      	ldr	r1, [r3, #16]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800378c:	b2db      	uxtb	r3, r3
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	4603      	mov	r3, r0
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f003 ff00 	bl	8007598 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d809      	bhi.n	80037da <PCD_WriteEmptyTxFifo+0xe0>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1a      	ldr	r2, [r3, #32]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d203      	bcs.n	80037da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1be      	bne.n	8003758 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d811      	bhi.n	800380a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	2201      	movs	r2, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	43db      	mvns	r3, r3
 8003800:	6939      	ldr	r1, [r7, #16]
 8003802:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003806:	4013      	ands	r3, r2
 8003808:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	333c      	adds	r3, #60	; 0x3c
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d17b      	bne.n	8003942 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4a61      	ldr	r2, [pc, #388]	; (80039dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	f240 80b9 	bls.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80b3 	beq.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	e0a7      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2320      	movs	r3, #32
 800389a:	6093      	str	r3, [r2, #8]
 800389c:	e098      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f040 8093 	bne.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d90f      	bls.n	80038d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	e07e      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d114      	bne.n	8003934 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800391c:	461a      	mov	r2, r3
 800391e:	2101      	movs	r1, #1
 8003920:	f004 f8d0 	bl	8007ac4 <USB_EP0_OutStart>
 8003924:	e006      	b.n	8003934 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f006 fb1c 	bl	8009f78 <HAL_PCD_DataOutStageCallback>
 8003940:	e046      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d124      	bne.n	8003994 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	6093      	str	r3, [r2, #8]
 8003968:	e032      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2320      	movs	r3, #32
 8003984:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f006 faf3 	bl	8009f78 <HAL_PCD_DataOutStageCallback>
 8003992:	e01d      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d114      	bne.n	80039c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039bc:	461a      	mov	r2, r3
 80039be:	2100      	movs	r1, #0
 80039c0:	f004 f880 	bl	8007ac4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f006 fad4 	bl	8009f78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	4f54300a 	.word	0x4f54300a
 80039e0:	4f54310a 	.word	0x4f54310a

080039e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	333c      	adds	r3, #60	; 0x3c
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d90e      	bls.n	8003a38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f006 fa8b 	bl	8009f54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d90c      	bls.n	8003a60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d108      	bne.n	8003a60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f004 f832 	bl	8007ac4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	4f54300a 	.word	0x4f54300a

08003a70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a8e:	883b      	ldrh	r3, [r7, #0]
 8003a90:	0419      	lsls	r1, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9c:	e028      	b.n	8003af0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e00d      	b.n	8003ace <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3340      	adds	r3, #64	; 0x40
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3ec      	bcc.n	8003ab2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ad8:	883b      	ldrh	r3, [r7, #0]
 8003ada:	0418      	lsls	r0, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	4302      	orrs	r2, r0
 8003ae8:	3340      	adds	r3, #64	; 0x40
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e267      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d075      	beq.n	8003c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b56:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d00c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d112      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6e:	4b82      	ldr	r3, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05b      	beq.n	8003c40 <HAL_RCC_OscConfig+0x108>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d157      	bne.n	8003c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e242      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0x74>
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a75      	ldr	r2, [pc, #468]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e01d      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x98>
 8003bb6:	4b70      	ldr	r3, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6f      	ldr	r2, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6c      	ldr	r2, [pc, #432]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bd0:	4b69      	ldr	r3, [pc, #420]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fa54 	bl	800209c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fa50 	bl	800209c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e207      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xc0>
 8003c16:	e014      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fe fa40 	bl	800209c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fa3c 	bl	800209c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1f3      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0xe8>
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d063      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d11c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b44      	ldr	r3, [pc, #272]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1c7      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4937      	ldr	r1, [pc, #220]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	e03a      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca8:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe f9f5 	bl	800209c <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fe f9f1 	bl	800209c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1a8      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4925      	ldr	r1, [pc, #148]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f9d4 	bl	800209c <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f9d0 	bl	800209c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e187      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe f9b4 	bl	800209c <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fe f9b0 	bl	800209c <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e167      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x200>
 8003d56:	e01b      	b.n	8003d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fe f99d 	bl	800209c <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	e00e      	b.n	8003d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fe f999 	bl	800209c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d907      	bls.n	8003d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e150      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	42470000 	.word	0x42470000
 8003d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ea      	bne.n	8003d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8097 	beq.w	8003ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b7d      	ldr	r3, [pc, #500]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a7c      	ldr	r2, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dce:	4b77      	ldr	r3, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dda:	4b74      	ldr	r3, [pc, #464]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a73      	ldr	r2, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de6:	f7fe f959 	bl	800209c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fe f955 	bl	800209c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e10c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2ea>
 8003e14:	4b64      	ldr	r3, [pc, #400]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a63      	ldr	r2, [pc, #396]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	e01c      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x30c>
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	4b5c      	ldr	r3, [pc, #368]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a5b      	ldr	r2, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e44:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a57      	ldr	r2, [pc, #348]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a54      	ldr	r2, [pc, #336]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe f91a 	bl	800209c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe f916 	bl	800209c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0cb      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCC_OscConfig+0x334>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fe f904 	bl	800209c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fe f900 	bl	800209c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0b5      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a1 	beq.w	8004018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d05c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d141      	bne.n	8003f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fe f8d4 	bl	800209c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe f8d0 	bl	800209c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e087      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	491b      	ldr	r1, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fe f8a9 	bl	800209c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fe f8a5 	bl	800209c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e05c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x416>
 8003f6c:	e054      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fe f892 	bl	800209c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe f88e 	bl	800209c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e045      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x444>
 8003f9a:	e03d      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e038      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x4ec>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d028      	beq.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d121      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d11a      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d111      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0cc      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b68      	ldr	r3, [pc, #416]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d90c      	bls.n	8004064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b63      	ldr	r3, [pc, #396]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0b8      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800407c:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a58      	ldr	r2, [pc, #352]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a52      	ldr	r2, [pc, #328]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800409e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	494d      	ldr	r1, [pc, #308]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e067      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4934      	ldr	r1, [pc, #208]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fd ffc0 	bl	800209c <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fd ffbc 	bl	800209c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d20c      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e032      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4916      	ldr	r1, [pc, #88]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	490e      	ldr	r1, [pc, #56]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ae:	f000 f82d 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	490a      	ldr	r1, [pc, #40]	; (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	5ccb      	ldrb	r3, [r1, r3]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd f970 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800ac5c 	.word	0x0800ac5c
 80041ec:	20000018 	.word	0x20000018
 80041f0:	20000048 	.word	0x20000048

080041f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_EnableCSS+0x14>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	4247004c 	.word	0x4247004c

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b090      	sub	sp, #64	; 0x40
 8004212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
 8004218:	2300      	movs	r3, #0
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421c:	2300      	movs	r3, #0
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004224:	4b59      	ldr	r3, [pc, #356]	; (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d00d      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x40>
 8004230:	2b08      	cmp	r3, #8
 8004232:	f200 80a1 	bhi.w	8004378 <HAL_RCC_GetSysClockFreq+0x16c>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x34>
 800423a:	2b04      	cmp	r3, #4
 800423c:	d003      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x3a>
 800423e:	e09b      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_RCC_GetSysClockFreq+0x184>)
 8004242:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004244:	e09b      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004246:	4b53      	ldr	r3, [pc, #332]	; (8004394 <HAL_RCC_GetSysClockFreq+0x188>)
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800424a:	e098      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004256:	4b4d      	ldr	r3, [pc, #308]	; (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d028      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004262:	4b4a      	ldr	r3, [pc, #296]	; (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	2200      	movs	r2, #0
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	627a      	str	r2, [r7, #36]	; 0x24
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004274:	2100      	movs	r1, #0
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCC_GetSysClockFreq+0x188>)
 8004278:	fb03 f201 	mul.w	r2, r3, r1
 800427c:	2300      	movs	r3, #0
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	4413      	add	r3, r2
 8004284:	4a43      	ldr	r2, [pc, #268]	; (8004394 <HAL_RCC_GetSysClockFreq+0x188>)
 8004286:	fba0 1202 	umull	r1, r2, r0, r2
 800428a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428c:	460a      	mov	r2, r1
 800428e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004292:	4413      	add	r3, r2
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	2200      	movs	r2, #0
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	61fa      	str	r2, [r7, #28]
 800429e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042a6:	f7fb ff95 	bl	80001d4 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4613      	mov	r3, r2
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b2:	e053      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	2200      	movs	r2, #0
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	617a      	str	r2, [r7, #20]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042c6:	f04f 0b00 	mov.w	fp, #0
 80042ca:	4652      	mov	r2, sl
 80042cc:	465b      	mov	r3, fp
 80042ce:	f04f 0000 	mov.w	r0, #0
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	0159      	lsls	r1, r3, #5
 80042d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042dc:	0150      	lsls	r0, r2, #5
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	ebb2 080a 	subs.w	r8, r2, sl
 80042e6:	eb63 090b 	sbc.w	r9, r3, fp
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004302:	eb63 0509 	sbc.w	r5, r3, r9
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	00eb      	lsls	r3, r5, #3
 8004310:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004314:	00e2      	lsls	r2, r4, #3
 8004316:	4614      	mov	r4, r2
 8004318:	461d      	mov	r5, r3
 800431a:	eb14 030a 	adds.w	r3, r4, sl
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	eb45 030b 	adc.w	r3, r5, fp
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004332:	4629      	mov	r1, r5
 8004334:	028b      	lsls	r3, r1, #10
 8004336:	4621      	mov	r1, r4
 8004338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800433c:	4621      	mov	r1, r4
 800433e:	028a      	lsls	r2, r1, #10
 8004340:	4610      	mov	r0, r2
 8004342:	4619      	mov	r1, r3
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	2200      	movs	r2, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	60fa      	str	r2, [r7, #12]
 800434c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004350:	f7fb ff40 	bl	80001d4 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_GetSysClockFreq+0x180>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800436c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004376:	e002      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetSysClockFreq+0x184>)
 800437a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800437c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004380:	4618      	mov	r0, r3
 8004382:	3740      	adds	r7, #64	; 0x40
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400
 8004394:	017d7840 	.word	0x017d7840

08004398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCC_GetHCLKFreq+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000018 	.word	0x20000018

080043b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b4:	f7ff fff0 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0b5b      	lsrs	r3, r3, #13
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800ac6c 	.word	0x0800ac6c

080043d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	220f      	movs	r2, #15
 80043e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_GetClockConfig+0x5c>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0203 	and.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCC_GetClockConfig+0x5c>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_GetClockConfig+0x5c>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_GetClockConfig+0x5c>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <HAL_RCC_GetClockConfig+0x60>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0207 	and.w	r2, r3, #7
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	40023c00 	.word	0x40023c00

0800443c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d104      	bne.n	8004456 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800444c:	f000 f80a 	bl	8004464 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	701a      	strb	r2, [r3, #0]
  }
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	4002380e 	.word	0x4002380e

08004464 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e07b      	b.n	800457c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004494:	d009      	beq.n	80044aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	61da      	str	r2, [r3, #28]
 800449c:	e005      	b.n	80044aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc ffa5 	bl	8001414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	ea42 0103 	orr.w	r1, r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	0c1b      	lsrs	r3, r3, #16
 8004548:	f003 0104 	and.w	r1, r3, #4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f003 0210 	and.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_SPI_Transmit+0x22>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e126      	b.n	80047f4 <HAL_SPI_Transmit+0x270>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ae:	f7fd fd75 	bl	800209c <HAL_GetTick>
 80045b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
 80045c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045c8:	e10b      	b.n	80047e2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_SPI_Transmit+0x52>
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045da:	e102      	b.n	80047e2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2203      	movs	r2, #3
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d10f      	bne.n	8004644 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004642:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d007      	beq.n	8004662 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d14b      	bne.n	8004704 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_Transmit+0xf6>
 8004674:	8afb      	ldrh	r3, [r7, #22]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d13e      	bne.n	80046f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800469e:	e02b      	b.n	80046f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d112      	bne.n	80046d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	881a      	ldrh	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	1c9a      	adds	r2, r3, #2
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80046d2:	e011      	b.n	80046f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d4:	f7fd fce2 	bl	800209c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d803      	bhi.n	80046ec <HAL_SPI_Transmit+0x168>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d102      	bne.n	80046f2 <HAL_SPI_Transmit+0x16e>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046f6:	e074      	b.n	80047e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ce      	bne.n	80046a0 <HAL_SPI_Transmit+0x11c>
 8004702:	e04c      	b.n	800479e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit+0x18e>
 800470c:	8afb      	ldrh	r3, [r7, #22]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d140      	bne.n	8004794 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004738:	e02c      	b.n	8004794 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	d113      	bne.n	8004770 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	7812      	ldrb	r2, [r2, #0]
 8004754:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	86da      	strh	r2, [r3, #54]	; 0x36
 800476e:	e011      	b.n	8004794 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004770:	f7fd fc94 	bl	800209c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d803      	bhi.n	8004788 <HAL_SPI_Transmit+0x204>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004786:	d102      	bne.n	800478e <HAL_SPI_Transmit+0x20a>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004792:	e026      	b.n	80047e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1cd      	bne.n	800473a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fcde 	bl	8005164 <SPI_EndRxTxTransaction>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e000      	b.n	80047e2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004818:	d112      	bne.n	8004840 <HAL_SPI_Receive+0x44>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10e      	bne.n	8004840 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2204      	movs	r2, #4
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8f1 	bl	8004a1e <HAL_SPI_TransmitReceive>
 800483c:	4603      	mov	r3, r0
 800483e:	e0ea      	b.n	8004a16 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_SPI_Receive+0x52>
 800484a:	2302      	movs	r3, #2
 800484c:	e0e3      	b.n	8004a16 <HAL_SPI_Receive+0x21a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004856:	f7fd fc21 	bl	800209c <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d002      	beq.n	800486e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004868:	2302      	movs	r3, #2
 800486a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800486c:	e0ca      	b.n	8004a04 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_Receive+0x7e>
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800487e:	e0c1      	b.n	8004a04 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2204      	movs	r2, #4
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c6:	d10f      	bne.n	80048e8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d007      	beq.n	8004906 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d162      	bne.n	80049d4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800490e:	e02e      	b.n	800496e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d115      	bne.n	800494a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f103 020c 	add.w	r2, r3, #12
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004948:	e011      	b.n	800496e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494a:	f7fd fba7 	bl	800209c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d803      	bhi.n	8004962 <HAL_SPI_Receive+0x166>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d102      	bne.n	8004968 <HAL_SPI_Receive+0x16c>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800496c:	e04a      	b.n	8004a04 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1cb      	bne.n	8004910 <HAL_SPI_Receive+0x114>
 8004978:	e031      	b.n	80049de <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d113      	bne.n	80049b0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	b292      	uxth	r2, r2
 8004994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ae:	e011      	b.n	80049d4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b0:	f7fd fb74 	bl	800209c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d803      	bhi.n	80049c8 <HAL_SPI_Receive+0x1cc>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Receive+0x1d2>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049d2:	e017      	b.n	8004a04 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1cd      	bne.n	800497a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fb58 	bl	8005098 <SPI_EndRxTransaction>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75fb      	strb	r3, [r7, #23]
 8004a00:	e000      	b.n	8004a04 <HAL_SPI_Receive+0x208>
  }

error :
 8004a02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08c      	sub	sp, #48	; 0x30
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x26>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e18a      	b.n	8004d5a <HAL_SPI_TransmitReceive+0x33c>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4c:	f7fd fb26 	bl	800209c <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d00f      	beq.n	8004a8e <HAL_SPI_TransmitReceive+0x70>
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a74:	d107      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x68>
 8004a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d003      	beq.n	8004a8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a8c:	e15b      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_TransmitReceive+0x82>
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aa6:	e14e      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d003      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2205      	movs	r2, #5
 8004ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	887a      	ldrh	r2, [r7, #2]
 8004ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	887a      	ldrh	r2, [r7, #2]
 8004ade:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d007      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b18:	d178      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x10a>
 8004b22:	8b7b      	ldrh	r3, [r7, #26]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d166      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4c:	e053      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d11b      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x176>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x176>
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d113      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d119      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x1b8>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d014      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bd6:	f7fd fa61 	bl	800209c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d807      	bhi.n	8004bf6 <HAL_SPI_TransmitReceive+0x1d8>
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d003      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bf4:	e0a7      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1a6      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x130>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1a1      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x130>
 8004c0a:	e07c      	b.n	8004d06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x1fc>
 8004c14:	8b7b      	ldrh	r3, [r7, #26]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d16b      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c40:	e057      	b.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d11c      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x26c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x26c>
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d114      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d119      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x2ae>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d014      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ccc:	f7fd f9e6 	bl	800209c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d803      	bhi.n	8004ce4 <HAL_SPI_TransmitReceive+0x2c6>
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x2cc>
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cf0:	e029      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1a2      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x224>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d19d      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fa2a 	bl	8005164 <SPI_EndRxTxTransaction>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d22:	e010      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	e000      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3730      	adds	r7, #48	; 0x30
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10e      	bne.n	8004da4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
    return;
 8004da2:	e0ce      	b.n	8004f42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_SPI_IRQHandler+0x5e>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
    return;
 8004dc0:	e0bf      	b.n	8004f42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <HAL_SPI_IRQHandler+0x7e>
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80b0 	beq.w	8004f42 <HAL_SPI_IRQHandler+0x1de>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80aa 	beq.w	8004f42 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d011      	beq.n	8004e28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0204 	orr.w	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	e00b      	b.n	8004e40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	693b      	ldr	r3, [r7, #16]
        return;
 8004e3e:	e080      	b.n	8004f42 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d014      	beq.n	8004e74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	f043 0208 	orr.w	r2, r3, #8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d04f      	beq.n	8004f40 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004eae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <HAL_SPI_IRQHandler+0x168>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d034      	beq.n	8004f36 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0203 	bic.w	r2, r2, #3
 8004eda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d011      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_SPI_IRQHandler+0x1e4>)
 8004eea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fd f9e5 	bl	80022c0 <HAL_DMA_Abort_IT>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d016      	beq.n	8004f3e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <HAL_SPI_IRQHandler+0x1e4>)
 8004f16:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd f9cf 	bl	80022c0 <HAL_DMA_Abort_IT>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f34:	e003      	b.n	8004f3e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f808 	bl	8004f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f3c:	e000      	b.n	8004f40 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004f3e:	bf00      	nop
    return;
 8004f40:	bf00      	nop
  }
}
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08004f61 	.word	0x08004f61

08004f4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ffe6 	bl	8004f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f98:	f7fd f880 	bl	800209c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fa8:	f7fd f878 	bl	800209c <HAL_GetTick>
 8004fac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fae:	4b39      	ldr	r3, [pc, #228]	; (8005094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	015b      	lsls	r3, r3, #5
 8004fb4:	0d1b      	lsrs	r3, r3, #20
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fbe:	e054      	b.n	800506a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d050      	beq.n	800506a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc8:	f7fd f868 	bl	800209c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d902      	bls.n	8004fde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d13d      	bne.n	800505a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff6:	d111      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005000:	d004      	beq.n	800500c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d107      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005024:	d10f      	bne.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e017      	b.n	800508a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3b01      	subs	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	429a      	cmp	r2, r3
 8005086:	d19b      	bne.n	8004fc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000018 	.word	0x20000018

08005098 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ac:	d111      	bne.n	80050d2 <SPI_EndRxTransaction+0x3a>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b6:	d004      	beq.n	80050c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d107      	bne.n	80050d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050da:	d12a      	bne.n	8005132 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d012      	beq.n	800510c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff49 	bl	8004f88 <SPI_WaitFlagStateUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d02d      	beq.n	8005158 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f043 0220 	orr.w	r2, r3, #32
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e026      	b.n	800515a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	2101      	movs	r1, #1
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff36 	bl	8004f88 <SPI_WaitFlagStateUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01a      	beq.n	8005158 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e013      	b.n	800515a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2200      	movs	r2, #0
 800513a:	2101      	movs	r1, #1
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff ff23 	bl	8004f88 <SPI_WaitFlagStateUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e000      	b.n	800515a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005170:	4b1b      	ldr	r3, [pc, #108]	; (80051e0 <SPI_EndRxTxTransaction+0x7c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1b      	ldr	r2, [pc, #108]	; (80051e4 <SPI_EndRxTxTransaction+0x80>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	0d5b      	lsrs	r3, r3, #21
 800517c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800518e:	d112      	bne.n	80051b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2200      	movs	r2, #0
 8005198:	2180      	movs	r1, #128	; 0x80
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fef4 	bl	8004f88 <SPI_WaitFlagStateUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	f043 0220 	orr.w	r2, r3, #32
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e00f      	b.n	80051d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3b01      	subs	r3, #1
 80051c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d0f2      	beq.n	80051b6 <SPI_EndRxTxTransaction+0x52>
 80051d0:	e000      	b.n	80051d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80051d2:	bf00      	nop
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000018 	.word	0x20000018
 80051e4:	165e9f81 	.word	0x165e9f81

080051e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e041      	b.n	800527e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f839 	bl	8005286 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 f9ca 	bl	80055c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e044      	b.n	800533e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1e      	ldr	r2, [pc, #120]	; (800534c <HAL_TIM_Base_Start_IT+0xb0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052de:	d013      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_TIM_Base_Start_IT+0xb4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a19      	ldr	r2, [pc, #100]	; (8005354 <HAL_TIM_Base_Start_IT+0xb8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_TIM_Base_Start_IT+0xbc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x6c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_TIM_Base_Start_IT+0xc0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d111      	bne.n	800532c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b06      	cmp	r3, #6
 8005318:	d010      	beq.n	800533c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	e007      	b.n	800533c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40010000 	.word	0x40010000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40014000 	.word	0x40014000

08005360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0202 	mvn.w	r2, #2
 800538c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8ee 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8e0 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8f1 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0204 	mvn.w	r2, #4
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8c4 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f8b6 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8c7 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b08      	cmp	r3, #8
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0208 	mvn.w	r2, #8
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2204      	movs	r2, #4
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f89a 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f88c 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f89d 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b10      	cmp	r3, #16
 8005470:	d122      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b10      	cmp	r3, #16
 800547e:	d11b      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0210 	mvn.w	r2, #16
 8005488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2208      	movs	r2, #8
 800548e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f870 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 80054a4:	e005      	b.n	80054b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f862 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f873 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0201 	mvn.w	r2, #1
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb ff58 	bl	8001394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b80      	cmp	r3, #128	; 0x80
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8e2 	bl	80056d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f838 	bl	80055ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b20      	cmp	r3, #32
 8005548:	d10e      	bne.n	8005568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d107      	bne.n	8005568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0220 	mvn.w	r2, #32
 8005560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8ac 	bl	80056c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a34      	ldr	r2, [pc, #208]	; (80056a4 <TIM_Base_SetConfig+0xe4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x38>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x38>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a31      	ldr	r2, [pc, #196]	; (80056a8 <TIM_Base_SetConfig+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x38>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a30      	ldr	r2, [pc, #192]	; (80056ac <TIM_Base_SetConfig+0xec>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x38>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2f      	ldr	r2, [pc, #188]	; (80056b0 <TIM_Base_SetConfig+0xf0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <TIM_Base_SetConfig+0xe4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01b      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d017      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <TIM_Base_SetConfig+0xe8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a21      	ldr	r2, [pc, #132]	; (80056ac <TIM_Base_SetConfig+0xec>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00f      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <TIM_Base_SetConfig+0xf0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00b      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <TIM_Base_SetConfig+0xf4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <TIM_Base_SetConfig+0xf8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_Base_SetConfig+0x8a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <TIM_Base_SetConfig+0xfc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <TIM_Base_SetConfig+0xe4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d103      	bne.n	8005690 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	615a      	str	r2, [r3, #20]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800

080056c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_GPIO_SetPinMode>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	613b      	str	r3, [r7, #16]
  return result;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	fab3 f383 	clz	r3, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	2103      	movs	r1, #3
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	401a      	ands	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	fa93 f3a3 	rbit	r3, r3
 8005722:	61bb      	str	r3, [r7, #24]
  return result;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	3724      	adds	r7, #36	; 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_GPIO_SetPinOutputType>:
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	431a      	orrs	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <LL_GPIO_SetPinSpeed>:
{
 8005776:	b480      	push	{r7}
 8005778:	b089      	sub	sp, #36	; 0x24
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	613b      	str	r3, [r7, #16]
  return result;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	2103      	movs	r1, #3
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	401a      	ands	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	fa93 f3a3 	rbit	r3, r3
 80057b0:	61bb      	str	r3, [r7, #24]
  return result;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	fab3 f383 	clz	r3, r3
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	fa01 f303 	lsl.w	r3, r1, r3
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	3724      	adds	r7, #36	; 0x24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <LL_GPIO_SetPinPull>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	613b      	str	r3, [r7, #16]
  return result;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	2103      	movs	r1, #3
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	401a      	ands	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	61bb      	str	r3, [r7, #24]
  return result;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	431a      	orrs	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	60da      	str	r2, [r3, #12]
}
 8005826:	bf00      	nop
 8005828:	3724      	adds	r7, #36	; 0x24
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <LL_GPIO_SetAFPin_0_7>:
{
 8005832:	b480      	push	{r7}
 8005834:	b089      	sub	sp, #36	; 0x24
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	613b      	str	r3, [r7, #16]
  return result;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	210f      	movs	r1, #15
 800585a:	fa01 f303 	lsl.w	r3, r1, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	401a      	ands	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	61bb      	str	r3, [r7, #24]
  return result;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	431a      	orrs	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	3724      	adds	r7, #36	; 0x24
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_GPIO_SetAFPin_8_15>:
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	fa93 f3a3 	rbit	r3, r3
 80058ac:	613b      	str	r3, [r7, #16]
  return result;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	fab3 f383 	clz	r3, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	210f      	movs	r1, #15
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	401a      	ands	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	fa93 f3a3 	rbit	r3, r3
 80058ce:	61bb      	str	r3, [r7, #24]
  return result;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	fab3 f383 	clz	r3, r3
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	fa01 f303 	lsl.w	r3, r1, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80058e6:	bf00      	nop
 80058e8:	3724      	adds	r7, #36	; 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b088      	sub	sp, #32
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	fa93 f3a3 	rbit	r3, r3
 8005910:	613b      	str	r3, [r7, #16]
  return result;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800591c:	e050      	b.n	80059c0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	2101      	movs	r1, #1
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d042      	beq.n	80059ba <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d003      	beq.n	8005944 <LL_GPIO_Init+0x52>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d10d      	bne.n	8005960 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	461a      	mov	r2, r3
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff12 	bl	8005776 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	461a      	mov	r2, r3
 8005958:	69b9      	ldr	r1, [r7, #24]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fef3 	bl	8005746 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	461a      	mov	r2, r3
 8005966:	69b9      	ldr	r1, [r7, #24]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff33 	bl	80057d4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d11a      	bne.n	80059ac <LL_GPIO_Init+0xba>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	fa93 f3a3 	rbit	r3, r3
 8005980:	60bb      	str	r3, [r7, #8]
  return result;
 8005982:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005984:	fab3 f383 	clz	r3, r3
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b07      	cmp	r3, #7
 800598c:	d807      	bhi.n	800599e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	461a      	mov	r2, r3
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff4b 	bl	8005832 <LL_GPIO_SetAFPin_0_7>
 800599c:	e006      	b.n	80059ac <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	461a      	mov	r2, r3
 80059a4:	69b9      	ldr	r1, [r7, #24]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff72 	bl	8005890 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	461a      	mov	r2, r3
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fe97 	bl	80056e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1a7      	bne.n	800591e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <LL_RCC_GetSysClkSource+0x18>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 030c 	and.w	r3, r3, #12
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800

080059f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <LL_RCC_GetAHBPrescaler+0x18>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800

08005a10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a14:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40023800 	.word	0x40023800

08005a2c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800

08005a48 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <LL_RCC_PLL_GetMainSource+0x18>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800

08005a64 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <LL_RCC_PLL_GetN+0x18>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	099b      	lsrs	r3, r3, #6
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40023800 	.word	0x40023800

08005a80 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <LL_RCC_PLL_GetP+0x18>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800

08005a9c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <LL_RCC_PLL_GetDivider+0x18>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800

08005ab8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005ac0:	f000 f820 	bl	8005b04 <RCC_GetSystemClockFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 f840 	bl	8005b54 <RCC_GetHCLKClockFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f84e 	bl	8005b80 <RCC_GetPCLK1ClockFreq>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f85a 	bl	8005ba8 <RCC_GetPCLK2ClockFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60da      	str	r2, [r3, #12]
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005b0e:	f7ff ff63 	bl	80059d8 <LL_RCC_GetSysClkSource>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d00c      	beq.n	8005b32 <RCC_GetSystemClockFreq+0x2e>
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d80f      	bhi.n	8005b3c <RCC_GetSystemClockFreq+0x38>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <RCC_GetSystemClockFreq+0x22>
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d003      	beq.n	8005b2c <RCC_GetSystemClockFreq+0x28>
 8005b24:	e00a      	b.n	8005b3c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <RCC_GetSystemClockFreq+0x48>)
 8005b28:	607b      	str	r3, [r7, #4]
      break;
 8005b2a:	e00a      	b.n	8005b42 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <RCC_GetSystemClockFreq+0x4c>)
 8005b2e:	607b      	str	r3, [r7, #4]
      break;
 8005b30:	e007      	b.n	8005b42 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005b32:	2008      	movs	r0, #8
 8005b34:	f000 f84c 	bl	8005bd0 <RCC_PLL_GetFreqDomain_SYS>
 8005b38:	6078      	str	r0, [r7, #4]
      break;
 8005b3a:	e002      	b.n	8005b42 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <RCC_GetSystemClockFreq+0x48>)
 8005b3e:	607b      	str	r3, [r7, #4]
      break;
 8005b40:	bf00      	nop
  }

  return frequency;
 8005b42:	687b      	ldr	r3, [r7, #4]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	00f42400 	.word	0x00f42400
 8005b50:	017d7840 	.word	0x017d7840

08005b54 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005b5c:	f7ff ff4a 	bl	80059f4 <LL_RCC_GetAHBPrescaler>
 8005b60:	4603      	mov	r3, r0
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <RCC_GetHCLKClockFreq+0x28>)
 8005b6a:	5cd3      	ldrb	r3, [r2, r3]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	40d3      	lsrs	r3, r2
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	0800ac5c 	.word	0x0800ac5c

08005b80 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005b88:	f7ff ff42 	bl	8005a10 <LL_RCC_GetAPB1Prescaler>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	0a9b      	lsrs	r3, r3, #10
 8005b90:	4a04      	ldr	r2, [pc, #16]	; (8005ba4 <RCC_GetPCLK1ClockFreq+0x24>)
 8005b92:	5cd3      	ldrb	r3, [r2, r3]
 8005b94:	461a      	mov	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	40d3      	lsrs	r3, r2
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	0800ac6c 	.word	0x0800ac6c

08005ba8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005bb0:	f7ff ff3c 	bl	8005a2c <LL_RCC_GetAPB2Prescaler>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	0b5b      	lsrs	r3, r3, #13
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <RCC_GetPCLK2ClockFreq+0x24>)
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	40d3      	lsrs	r3, r2
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	0800ac6c 	.word	0x0800ac6c

08005bd0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005be4:	f7ff ff30 	bl	8005a48 <LL_RCC_PLL_GetMainSource>
 8005be8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf6:	d003      	beq.n	8005c00 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005bf8:	e005      	b.n	8005c06 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005bfc:	617b      	str	r3, [r7, #20]
      break;
 8005bfe:	e005      	b.n	8005c0c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005c02:	617b      	str	r3, [r7, #20]
      break;
 8005c04:	e002      	b.n	8005c0c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005c08:	617b      	str	r3, [r7, #20]
      break;
 8005c0a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d113      	bne.n	8005c3a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c12:	f7ff ff43 	bl	8005a9c <LL_RCC_PLL_GetDivider>
 8005c16:	4602      	mov	r2, r0
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	fbb3 f4f2 	udiv	r4, r3, r2
 8005c1e:	f7ff ff21 	bl	8005a64 <LL_RCC_PLL_GetN>
 8005c22:	4603      	mov	r3, r0
 8005c24:	fb03 f404 	mul.w	r4, r3, r4
 8005c28:	f7ff ff2a 	bl	8005a80 <LL_RCC_PLL_GetP>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	0c1b      	lsrs	r3, r3, #16
 8005c30:	3301      	adds	r3, #1
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c38:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005c3a:	693b      	ldr	r3, [r7, #16]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd90      	pop	{r4, r7, pc}
 8005c44:	00f42400 	.word	0x00f42400
 8005c48:	017d7840 	.word	0x017d7840

08005c4c <LL_TIM_SetPrescaler>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <LL_TIM_SetAutoReload>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_TIM_SetRepetitionCounter>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	f043 0201 	orr.w	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	615a      	str	r2, [r3, #20]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a31      	ldr	r2, [pc, #196]	; (8005d98 <LL_TIM_Init+0xd8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00f      	beq.n	8005cf8 <LL_TIM_Init+0x38>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cde:	d00b      	beq.n	8005cf8 <LL_TIM_Init+0x38>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a2e      	ldr	r2, [pc, #184]	; (8005d9c <LL_TIM_Init+0xdc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <LL_TIM_Init+0x38>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <LL_TIM_Init+0xe0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <LL_TIM_Init+0x38>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <LL_TIM_Init+0xe4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d106      	bne.n	8005d06 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <LL_TIM_Init+0xd8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01b      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d017      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <LL_TIM_Init+0xdc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <LL_TIM_Init+0xe0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <LL_TIM_Init+0xe4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <LL_TIM_Init+0xe8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <LL_TIM_Init+0xec>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <LL_TIM_Init+0x86>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	; (8005db0 <LL_TIM_Init+0xf0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d106      	bne.n	8005d54 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ff81 	bl	8005c68 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff6d 	bl	8005c4c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <LL_TIM_Init+0xd8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d105      	bne.n	8005d86 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff7f 	bl	8005c84 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff8a 	bl	8005ca0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <LL_USART_IsEnabled>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LL_USART_SetStopBitsLength>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	611a      	str	r2, [r3, #16]
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <LL_USART_SetHWFlowCtrl>:
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	615a      	str	r2, [r3, #20]
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <LL_USART_SetBaudRate>:
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b0c0      	sub	sp, #256	; 0x100
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e34:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005e38:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e48:	f040 810c 	bne.w	8006064 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005e4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	6639      	str	r1, [r7, #96]	; 0x60
 8005e66:	415b      	adcs	r3, r3
 8005e68:	667b      	str	r3, [r7, #100]	; 0x64
 8005e6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005e6e:	4621      	mov	r1, r4
 8005e70:	eb12 0801 	adds.w	r8, r2, r1
 8005e74:	4629      	mov	r1, r5
 8005e76:	eb43 0901 	adc.w	r9, r3, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	eb18 0303 	adds.w	r3, r8, r3
 8005e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eaa:	2200      	movs	r2, #0
 8005eac:	469a      	mov	sl, r3
 8005eae:	4693      	mov	fp, r2
 8005eb0:	eb1a 030a 	adds.w	r3, sl, sl
 8005eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005eb6:	eb4b 030b 	adc.w	r3, fp, fp
 8005eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ec4:	f7fa f986 	bl	80001d4 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b64      	ldr	r3, [pc, #400]	; (8006060 <LL_USART_SetBaudRate+0x238>)
 8005ece:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	b29c      	uxth	r4, r3
 8005eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ee4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ee8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	6539      	str	r1, [r7, #80]	; 0x50
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f30:	464b      	mov	r3, r9
 8005f32:	460a      	mov	r2, r1
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f46:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005f4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f4e:	460b      	mov	r3, r1
 8005f50:	18db      	adds	r3, r3, r3
 8005f52:	643b      	str	r3, [r7, #64]	; 0x40
 8005f54:	4613      	mov	r3, r2
 8005f56:	eb42 0303 	adc.w	r3, r2, r3
 8005f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f60:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005f64:	f7fa f936 	bl	80001d4 <__aeabi_uldivmod>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4b3c      	ldr	r3, [pc, #240]	; (8006060 <LL_USART_SetBaudRate+0x238>)
 8005f70:	fba3 2301 	umull	r2, r3, r3, r1
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2264      	movs	r2, #100	; 0x64
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	1acb      	subs	r3, r1, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f84:	4b36      	ldr	r3, [pc, #216]	; (8006060 <LL_USART_SetBaudRate+0x238>)
 8005f86:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4423      	add	r3, r4
 8005f9a:	b29c      	uxth	r4, r3
 8005f9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005faa:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005fae:	4642      	mov	r2, r8
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	1891      	adds	r1, r2, r2
 8005fb4:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fb6:	415b      	adcs	r3, r3
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	1851      	adds	r1, r2, r1
 8005fc2:	6339      	str	r1, [r7, #48]	; 0x30
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	414b      	adcs	r3, r1
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	00cb      	lsls	r3, r1, #3
 8005fda:	4651      	mov	r1, sl
 8005fdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fe0:	4651      	mov	r1, sl
 8005fe2:	00ca      	lsls	r2, r1, #3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4642      	mov	r2, r8
 8005fec:	189b      	adds	r3, r3, r2
 8005fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	eb42 0303 	adc.w	r3, r2, r3
 8005ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ffe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006008:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800600c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006010:	460b      	mov	r3, r1
 8006012:	18db      	adds	r3, r3, r3
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
 8006016:	4613      	mov	r3, r2
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006022:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006026:	f7fa f8d5 	bl	80001d4 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <LL_USART_SetBaudRate+0x238>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	; 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3332      	adds	r3, #50	; 0x32
 8006042:	4a07      	ldr	r2, [pc, #28]	; (8006060 <LL_USART_SetBaudRate+0x238>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	b29b      	uxth	r3, r3
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	b29b      	uxth	r3, r3
 8006052:	4423      	add	r3, r4
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	609a      	str	r2, [r3, #8]
}
 800605e:	e108      	b.n	8006272 <LL_USART_SetBaudRate+0x44a>
 8006060:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006068:	2200      	movs	r2, #0
 800606a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800606e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006072:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8006076:	4642      	mov	r2, r8
 8006078:	464b      	mov	r3, r9
 800607a:	1891      	adds	r1, r2, r2
 800607c:	6239      	str	r1, [r7, #32]
 800607e:	415b      	adcs	r3, r3
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006086:	4641      	mov	r1, r8
 8006088:	1854      	adds	r4, r2, r1
 800608a:	4649      	mov	r1, r9
 800608c:	eb43 0501 	adc.w	r5, r3, r1
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	00eb      	lsls	r3, r5, #3
 800609a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609e:	00e2      	lsls	r2, r4, #3
 80060a0:	4614      	mov	r4, r2
 80060a2:	461d      	mov	r5, r3
 80060a4:	4643      	mov	r3, r8
 80060a6:	18e3      	adds	r3, r4, r3
 80060a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ac:	464b      	mov	r3, r9
 80060ae:	eb45 0303 	adc.w	r3, r5, r3
 80060b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80060d0:	4629      	mov	r1, r5
 80060d2:	008b      	lsls	r3, r1, #2
 80060d4:	4621      	mov	r1, r4
 80060d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060da:	4621      	mov	r1, r4
 80060dc:	008a      	lsls	r2, r1, #2
 80060de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80060e2:	f7fa f877 	bl	80001d4 <__aeabi_uldivmod>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4b65      	ldr	r3, [pc, #404]	; (8006280 <LL_USART_SetBaudRate+0x458>)
 80060ec:	fba3 2302 	umull	r2, r3, r3, r2
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	b29c      	uxth	r4, r3
 80060f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006106:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800610a:	4642      	mov	r2, r8
 800610c:	464b      	mov	r3, r9
 800610e:	1891      	adds	r1, r2, r2
 8006110:	61b9      	str	r1, [r7, #24]
 8006112:	415b      	adcs	r3, r3
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800611a:	4641      	mov	r1, r8
 800611c:	1851      	adds	r1, r2, r1
 800611e:	6139      	str	r1, [r7, #16]
 8006120:	4649      	mov	r1, r9
 8006122:	414b      	adcs	r3, r1
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006132:	4659      	mov	r1, fp
 8006134:	00cb      	lsls	r3, r1, #3
 8006136:	4651      	mov	r1, sl
 8006138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613c:	4651      	mov	r1, sl
 800613e:	00ca      	lsls	r2, r1, #3
 8006140:	4610      	mov	r0, r2
 8006142:	4619      	mov	r1, r3
 8006144:	4603      	mov	r3, r0
 8006146:	4642      	mov	r2, r8
 8006148:	189b      	adds	r3, r3, r2
 800614a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800614e:	464b      	mov	r3, r9
 8006150:	460a      	mov	r2, r1
 8006152:	eb42 0303 	adc.w	r3, r2, r3
 8006156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800615a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006164:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006174:	4649      	mov	r1, r9
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	4641      	mov	r1, r8
 800617a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617e:	4641      	mov	r1, r8
 8006180:	008a      	lsls	r2, r1, #2
 8006182:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006186:	f7fa f825 	bl	80001d4 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4611      	mov	r1, r2
 8006190:	4b3b      	ldr	r3, [pc, #236]	; (8006280 <LL_USART_SetBaudRate+0x458>)
 8006192:	fba3 2301 	umull	r2, r3, r3, r1
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2264      	movs	r2, #100	; 0x64
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	1acb      	subs	r3, r1, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	; 0x32
 80061a4:	4a36      	ldr	r2, [pc, #216]	; (8006280 <LL_USART_SetBaudRate+0x458>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4423      	add	r3, r4
 80061b6:	b29c      	uxth	r4, r3
 80061b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061bc:	2200      	movs	r2, #0
 80061be:	67bb      	str	r3, [r7, #120]	; 0x78
 80061c0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061c2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061c6:	4642      	mov	r2, r8
 80061c8:	464b      	mov	r3, r9
 80061ca:	1891      	adds	r1, r2, r2
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	415b      	adcs	r3, r3
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d6:	4641      	mov	r1, r8
 80061d8:	1851      	adds	r1, r2, r1
 80061da:	6039      	str	r1, [r7, #0]
 80061dc:	4649      	mov	r1, r9
 80061de:	414b      	adcs	r3, r1
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061ee:	4659      	mov	r1, fp
 80061f0:	00cb      	lsls	r3, r1, #3
 80061f2:	4651      	mov	r1, sl
 80061f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f8:	4651      	mov	r1, sl
 80061fa:	00ca      	lsls	r2, r1, #3
 80061fc:	4610      	mov	r0, r2
 80061fe:	4619      	mov	r1, r3
 8006200:	4603      	mov	r3, r0
 8006202:	4642      	mov	r2, r8
 8006204:	189b      	adds	r3, r3, r2
 8006206:	673b      	str	r3, [r7, #112]	; 0x70
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	677b      	str	r3, [r7, #116]	; 0x74
 8006212:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006216:	2200      	movs	r2, #0
 8006218:	66bb      	str	r3, [r7, #104]	; 0x68
 800621a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8006228:	4649      	mov	r1, r9
 800622a:	008b      	lsls	r3, r1, #2
 800622c:	4641      	mov	r1, r8
 800622e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006232:	4641      	mov	r1, r8
 8006234:	008a      	lsls	r2, r1, #2
 8006236:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800623a:	f7f9 ffcb 	bl	80001d4 <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <LL_USART_SetBaudRate+0x458>)
 8006244:	fba3 1302 	umull	r1, r3, r3, r2
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	2164      	movs	r1, #100	; 0x64
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	3332      	adds	r3, #50	; 0x32
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <LL_USART_SetBaudRate+0x458>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	b29b      	uxth	r3, r3
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	b29b      	uxth	r3, r3
 8006266:	4423      	add	r3, r4
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006270:	609a      	str	r2, [r3, #8]
}
 8006272:	bf00      	nop
 8006274:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fd8c 	bl	8005db4 <LL_USART_IsEnabled>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d149      	bne.n	8006336 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062aa:	f023 030c 	bic.w	r3, r3, #12
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6851      	ldr	r1, [r2, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	68d2      	ldr	r2, [r2, #12]
 80062b6:	4311      	orrs	r1, r2
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	6912      	ldr	r2, [r2, #16]
 80062bc:	4311      	orrs	r1, r2
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	6992      	ldr	r2, [r2, #24]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fd83 	bl	8005ddc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fd90 	bl	8005e02 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fbe6 	bl	8005ab8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a14      	ldr	r2, [pc, #80]	; (8006340 <LL_USART_Init+0xbc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d102      	bne.n	80062fa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e00c      	b.n	8006314 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a11      	ldr	r2, [pc, #68]	; (8006344 <LL_USART_Init+0xc0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d102      	bne.n	8006308 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e005      	b.n	8006314 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0f      	ldr	r2, [pc, #60]	; (8006348 <LL_USART_Init+0xc4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8006322:	2300      	movs	r3, #0
 8006324:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff fd79 	bl	8005e28 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006336:	7ffb      	ldrb	r3, [r7, #31]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3720      	adds	r7, #32
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40011000 	.word	0x40011000
 8006344:	40004400 	.word	0x40004400
 8006348:	40011400 	.word	0x40011400

0800634c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800634c:	b084      	sub	sp, #16
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	f107 001c 	add.w	r0, r7, #28
 800635a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	d122      	bne.n	80063aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800638c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fbee 	bl	8007b80 <USB_CoreReset>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
 80063a8:	e01a      	b.n	80063e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fbe2 	bl	8007b80 <USB_CoreReset>
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
 80063d2:	e005      	b.n	80063e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10b      	bne.n	80063fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f043 0206 	orr.w	r2, r3, #6
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800640a:	b004      	add	sp, #16
 800640c:	4770      	bx	lr
	...

08006410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d165      	bne.n	80064f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a41      	ldr	r2, [pc, #260]	; (800652c <USB_SetTurnaroundTime+0x11c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d906      	bls.n	800643a <USB_SetTurnaroundTime+0x2a>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a40      	ldr	r2, [pc, #256]	; (8006530 <USB_SetTurnaroundTime+0x120>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d202      	bcs.n	800643a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006434:	230f      	movs	r3, #15
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e062      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <USB_SetTurnaroundTime+0x120>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d306      	bcc.n	8006450 <USB_SetTurnaroundTime+0x40>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <USB_SetTurnaroundTime+0x124>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d202      	bcs.n	8006450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800644a:	230e      	movs	r3, #14
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e057      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4a38      	ldr	r2, [pc, #224]	; (8006534 <USB_SetTurnaroundTime+0x124>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d306      	bcc.n	8006466 <USB_SetTurnaroundTime+0x56>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a37      	ldr	r2, [pc, #220]	; (8006538 <USB_SetTurnaroundTime+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d202      	bcs.n	8006466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006460:	230d      	movs	r3, #13
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e04c      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a33      	ldr	r2, [pc, #204]	; (8006538 <USB_SetTurnaroundTime+0x128>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d306      	bcc.n	800647c <USB_SetTurnaroundTime+0x6c>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4a32      	ldr	r2, [pc, #200]	; (800653c <USB_SetTurnaroundTime+0x12c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d802      	bhi.n	800647c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006476:	230c      	movs	r3, #12
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	e041      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <USB_SetTurnaroundTime+0x12c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d906      	bls.n	8006492 <USB_SetTurnaroundTime+0x82>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <USB_SetTurnaroundTime+0x130>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d802      	bhi.n	8006492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800648c:	230b      	movs	r3, #11
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e036      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <USB_SetTurnaroundTime+0x130>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d906      	bls.n	80064a8 <USB_SetTurnaroundTime+0x98>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a29      	ldr	r2, [pc, #164]	; (8006544 <USB_SetTurnaroundTime+0x134>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d802      	bhi.n	80064a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064a2:	230a      	movs	r3, #10
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e02b      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a26      	ldr	r2, [pc, #152]	; (8006544 <USB_SetTurnaroundTime+0x134>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d906      	bls.n	80064be <USB_SetTurnaroundTime+0xae>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a25      	ldr	r2, [pc, #148]	; (8006548 <USB_SetTurnaroundTime+0x138>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d202      	bcs.n	80064be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064b8:	2309      	movs	r3, #9
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e020      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a21      	ldr	r2, [pc, #132]	; (8006548 <USB_SetTurnaroundTime+0x138>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d306      	bcc.n	80064d4 <USB_SetTurnaroundTime+0xc4>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4a20      	ldr	r2, [pc, #128]	; (800654c <USB_SetTurnaroundTime+0x13c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d802      	bhi.n	80064d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064ce:	2308      	movs	r3, #8
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e015      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <USB_SetTurnaroundTime+0x13c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d906      	bls.n	80064ea <USB_SetTurnaroundTime+0xda>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <USB_SetTurnaroundTime+0x140>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d202      	bcs.n	80064ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064e4:	2307      	movs	r3, #7
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e00a      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064ea:	2306      	movs	r3, #6
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e007      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064f6:	2309      	movs	r3, #9
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e001      	b.n	8006500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064fc:	2309      	movs	r3, #9
 80064fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	00d8acbf 	.word	0x00d8acbf
 8006530:	00e4e1c0 	.word	0x00e4e1c0
 8006534:	00f42400 	.word	0x00f42400
 8006538:	01067380 	.word	0x01067380
 800653c:	011a499f 	.word	0x011a499f
 8006540:	01312cff 	.word	0x01312cff
 8006544:	014ca43f 	.word	0x014ca43f
 8006548:	016e3600 	.word	0x016e3600
 800654c:	01a6ab1f 	.word	0x01a6ab1f
 8006550:	01e84800 	.word	0x01e84800

08006554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f043 0201 	orr.w	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d115      	bne.n	80065e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065c6:	2001      	movs	r0, #1
 80065c8:	f7fb fd74 	bl	80020b4 <HAL_Delay>
      ms++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fa45 	bl	8007a62 <USB_GetMode>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d01e      	beq.n	800661c <USB_SetCurrentMode+0x84>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b31      	cmp	r3, #49	; 0x31
 80065e2:	d9f0      	bls.n	80065c6 <USB_SetCurrentMode+0x2e>
 80065e4:	e01a      	b.n	800661c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065f8:	2001      	movs	r0, #1
 80065fa:	f7fb fd5b 	bl	80020b4 <HAL_Delay>
      ms++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fa2c 	bl	8007a62 <USB_GetMode>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USB_SetCurrentMode+0x84>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b31      	cmp	r3, #49	; 0x31
 8006614:	d9f0      	bls.n	80065f8 <USB_SetCurrentMode+0x60>
 8006616:	e001      	b.n	800661c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e005      	b.n	8006628 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b32      	cmp	r3, #50	; 0x32
 8006620:	d101      	bne.n	8006626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006630:	b084      	sub	sp, #16
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800663e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e009      	b.n	8006664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3340      	adds	r3, #64	; 0x40
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0e      	cmp	r3, #14
 8006668:	d9f2      	bls.n	8006650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11c      	bne.n	80066aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
 80066a8:	e00b      	b.n	80066c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	4619      	mov	r1, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	461a      	mov	r2, r3
 80066de:	680b      	ldr	r3, [r1, #0]
 80066e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10c      	bne.n	8006702 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f965 	bl	80069c0 <USB_SetDevSpeed>
 80066f6:	e008      	b.n	800670a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066f8:	2101      	movs	r1, #1
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f960 	bl	80069c0 <USB_SetDevSpeed>
 8006700:	e003      	b.n	800670a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006702:	2103      	movs	r1, #3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f95b 	bl	80069c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800670a:	2110      	movs	r1, #16
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8f3 	bl	80068f8 <USB_FlushTxFifo>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f91f 	bl	8006960 <USB_FlushRxFifo>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	e043      	b.n	80067de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800676c:	d118      	bne.n	80067a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	461a      	mov	r2, r3
 8006782:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e013      	b.n	80067b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	461a      	mov	r2, r3
 8006798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e008      	b.n	80067b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	2300      	movs	r3, #0
 80067b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	461a      	mov	r2, r3
 80067d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	3301      	adds	r3, #1
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d3b7      	bcc.n	8006756 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	e043      	b.n	8006874 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006802:	d118      	bne.n	8006836 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e013      	b.n	8006848 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	461a      	mov	r2, r3
 800682e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e008      	b.n	8006848 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	461a      	mov	r2, r3
 8006844:	2300      	movs	r3, #0
 8006846:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800686c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3b7      	bcc.n	80067ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800688e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800689c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f043 0210 	orr.w	r2, r3, #16
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <USB_DevInit+0x2c4>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f043 0208 	orr.w	r2, r3, #8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068f0:	b004      	add	sp, #16
 80068f2:	4770      	bx	lr
 80068f4:	803c3800 	.word	0x803c3800

080068f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <USB_FlushTxFifo+0x64>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e01b      	b.n	8006950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	daf2      	bge.n	8006906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	019b      	lsls	r3, r3, #6
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a08      	ldr	r2, [pc, #32]	; (800695c <USB_FlushTxFifo+0x64>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e006      	b.n	8006950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d0f0      	beq.n	8006930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	00030d40 	.word	0x00030d40

08006960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a11      	ldr	r2, [pc, #68]	; (80069bc <USB_FlushRxFifo+0x5c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e018      	b.n	80069b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	daf2      	bge.n	800696c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2210      	movs	r2, #16
 800698e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <USB_FlushRxFifo+0x5c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e006      	b.n	80069b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d0f0      	beq.n	8006990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	00030d40 	.word	0x00030d40

080069c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4313      	orrs	r3, r2
 80069e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 0306 	and.w	r3, r3, #6
 8006a0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]
 8006a16:	e00a      	b.n	8006a2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d002      	beq.n	8006a24 <USB_GetDevSpeed+0x32>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d102      	bne.n	8006a2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a24:	2302      	movs	r3, #2
 8006a26:	75fb      	strb	r3, [r7, #23]
 8006a28:	e001      	b.n	8006a2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a2a:	230f      	movs	r3, #15
 8006a2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d13a      	bne.n	8006ace <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	68f9      	ldr	r1, [r7, #12]
 8006a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d155      	bne.n	8006b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	791b      	ldrb	r3, [r3, #4]
 8006aaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	059b      	lsls	r3, r3, #22
 8006ab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e036      	b.n	8006b3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	2101      	movs	r1, #1
 8006ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aec:	4313      	orrs	r3, r2
 8006aee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11a      	bne.n	8006b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	791b      	ldrb	r3, [r3, #4]
 8006b20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b22:	430b      	orrs	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d161      	bne.n	8006c2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7e:	d11f      	bne.n	8006bc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be0:	4013      	ands	r3, r2
 8006be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4013      	ands	r3, r2
 8006c06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	4619      	mov	r1, r3
 8006c24:	4b35      	ldr	r3, [pc, #212]	; (8006cfc <USB_DeactivateEndpoint+0x1b0>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
 8006c2a:	e060      	b.n	8006cee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c42:	d11f      	bne.n	8006c84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	2101      	movs	r1, #1
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	2101      	movs	r1, #1
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	0159      	lsls	r1, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	440b      	add	r3, r1
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <USB_DeactivateEndpoint+0x1b4>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	ec337800 	.word	0xec337800
 8006d00:	eff37800 	.word	0xeff37800

08006d04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 815c 	bne.w	8006fde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d132      	bne.n	8006d94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8c:	0cdb      	lsrs	r3, r3, #19
 8006d8e:	04db      	lsls	r3, r3, #19
 8006d90:	6113      	str	r3, [r2, #16]
 8006d92:	e074      	b.n	8006e7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dae:	0cdb      	lsrs	r3, r3, #19
 8006db0:	04db      	lsls	r3, r3, #19
 8006db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6999      	ldr	r1, [r3, #24]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	440b      	add	r3, r1
 8006df0:	1e59      	subs	r1, r3, #1
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006dfc:	4b9d      	ldr	r3, [pc, #628]	; (8007074 <USB_EPStartXfer+0x370>)
 8006dfe:	400b      	ands	r3, r1
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	0148      	lsls	r0, r1, #5
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	4401      	add	r1, r0
 8006e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	0148      	lsls	r0, r1, #5
 8006e2a:	69f9      	ldr	r1, [r7, #28]
 8006e2c:	4401      	add	r1, r0
 8006e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e32:	4313      	orrs	r3, r2
 8006e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d11f      	bne.n	8006e7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d14b      	bne.n	8006f1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d128      	bne.n	8006efa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e00f      	b.n	8006efa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e133      	b.n	8007184 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	791b      	ldrb	r3, [r3, #4]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d015      	beq.n	8006f70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 811b 	beq.w	8007184 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	2101      	movs	r1, #1
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8006f6e:	e109      	b.n	8007184 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d110      	bne.n	8006fa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e00f      	b.n	8006fc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6919      	ldr	r1, [r3, #16]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	b298      	uxth	r0, r3
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fade 	bl	8007598 <USB_WritePacket>
 8006fdc:	e0d2      	b.n	8007184 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	0cdb      	lsrs	r3, r3, #19
 8006ffa:	04db      	lsls	r3, r3, #19
 8006ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800701c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d126      	bne.n	8007078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	0148      	lsls	r0, r1, #5
 8007044:	69f9      	ldr	r1, [r7, #28]
 8007046:	4401      	add	r1, r0
 8007048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800704c:	4313      	orrs	r3, r2
 800704e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800706a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800706e:	6113      	str	r3, [r2, #16]
 8007070:	e03a      	b.n	80070e8 <USB_EPStartXfer+0x3e4>
 8007072:	bf00      	nop
 8007074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	4413      	add	r3, r2
 8007082:	1e5a      	subs	r2, r3, #1
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	8afa      	ldrh	r2, [r7, #22]
 8007094:	fb03 f202 	mul.w	r2, r3, r2
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	8afb      	ldrh	r3, [r7, #22]
 80070ac:	04d9      	lsls	r1, r3, #19
 80070ae:	4b38      	ldr	r3, [pc, #224]	; (8007190 <USB_EPStartXfer+0x48c>)
 80070b0:	400b      	ands	r3, r1
 80070b2:	69b9      	ldr	r1, [r7, #24]
 80070b4:	0148      	lsls	r0, r1, #5
 80070b6:	69f9      	ldr	r1, [r7, #28]
 80070b8:	4401      	add	r1, r0
 80070ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070be:	4313      	orrs	r3, r2
 80070c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	0148      	lsls	r0, r1, #5
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	4401      	add	r1, r0
 80070e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070e4:	4313      	orrs	r3, r2
 80070e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10d      	bne.n	800710a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6919      	ldr	r1, [r3, #16]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	460a      	mov	r2, r1
 8007108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	791b      	ldrb	r3, [r3, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d128      	bne.n	8007164 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d110      	bne.n	8007144 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00f      	b.n	8007164 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	1ff80000 	.word	0x1ff80000

08007194 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f040 80ce 	bne.w	8007352 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d132      	bne.n	8007224 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	0cdb      	lsrs	r3, r3, #19
 800721e:	04db      	lsls	r3, r3, #19
 8007220:	6113      	str	r3, [r2, #16]
 8007222:	e04e      	b.n	80072c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723e:	0cdb      	lsrs	r3, r3, #19
 8007240:	04db      	lsls	r3, r3, #19
 8007242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007266:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b2:	6939      	ldr	r1, [r7, #16]
 80072b4:	0148      	lsls	r0, r1, #5
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	4401      	add	r1, r0
 80072ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072be:	4313      	orrs	r3, r2
 80072c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d11e      	bne.n	8007306 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	e097      	b.n	8007436 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007324:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8083 	beq.w	8007436 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734c:	4313      	orrs	r3, r2
 800734e:	634b      	str	r3, [r1, #52]	; 0x34
 8007350:	e071      	b.n	8007436 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	0cdb      	lsrs	r3, r3, #19
 800736e:	04db      	lsls	r3, r3, #19
 8007370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007394:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073e4:	6939      	ldr	r1, [r7, #16]
 80073e6:	0148      	lsls	r0, r1, #5
 80073e8:	6979      	ldr	r1, [r7, #20]
 80073ea:	4401      	add	r1, r0
 80073ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073f0:	4313      	orrs	r3, r2
 80073f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10d      	bne.n	8007416 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6919      	ldr	r1, [r3, #16]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007412:	460a      	mov	r2, r1
 8007414:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d14a      	bne.n	80074f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800747a:	f040 8086 	bne.w	800758a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d902      	bls.n	80074dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
          break;
 80074da:	e056      	b.n	800758a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074f4:	d0e7      	beq.n	80074c6 <USB_EPStopXfer+0x82>
 80074f6:	e048      	b.n	800758a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800750c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007510:	d13b      	bne.n	800758a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007534:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f242 7210 	movw	r2, #10000	; 0x2710
 8007566:	4293      	cmp	r3, r2
 8007568:	d902      	bls.n	8007570 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
          break;
 800756e:	e00c      	b.n	800758a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007588:	d0e7      	beq.n	800755a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007598:	b480      	push	{r7}
 800759a:	b089      	sub	sp, #36	; 0x24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4611      	mov	r1, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	460b      	mov	r3, r1
 80075a8:	71fb      	strb	r3, [r7, #7]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d123      	bne.n	8007606 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075be:	88bb      	ldrh	r3, [r7, #4]
 80075c0:	3303      	adds	r3, #3
 80075c2:	089b      	lsrs	r3, r3, #2
 80075c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	e018      	b.n	80075fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	031a      	lsls	r2, r3, #12
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d8:	461a      	mov	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	3301      	adds	r3, #1
 80075e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	3301      	adds	r3, #1
 80075ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d3e2      	bcc.n	80075cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3724      	adds	r7, #36	; 0x24
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007614:	b480      	push	{r7}
 8007616:	b08b      	sub	sp, #44	; 0x2c
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	089b      	lsrs	r3, r3, #2
 800762e:	b29b      	uxth	r3, r3
 8007630:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800763a:	2300      	movs	r3, #0
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	e014      	b.n	800766a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	601a      	str	r2, [r3, #0]
    pDest++;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	3301      	adds	r3, #1
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	3301      	adds	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	3301      	adds	r3, #1
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	3301      	adds	r3, #1
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	3301      	adds	r3, #1
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	429a      	cmp	r2, r3
 8007670:	d3e6      	bcc.n	8007640 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007672:	8bfb      	ldrh	r3, [r7, #30]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01e      	beq.n	80076b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007682:	461a      	mov	r2, r3
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	b2da      	uxtb	r2, r3
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	701a      	strb	r2, [r3, #0]
      i++;
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	3301      	adds	r3, #1
 80076a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	3301      	adds	r3, #1
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80076aa:	8bfb      	ldrh	r3, [r7, #30]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076b0:	8bfb      	ldrh	r3, [r7, #30]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1ea      	bne.n	800768c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	372c      	adds	r7, #44	; 0x2c
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d12c      	bne.n	800773a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	db12      	blt.n	8007718 <USB_EPSetStall+0x54>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00f      	beq.n	8007718 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007716:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	e02b      	b.n	8007792 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	db12      	blt.n	8007772 <USB_EPSetStall+0xae>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007770:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007790:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d128      	bne.n	800780e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d003      	beq.n	80077ec <USB_EPClearStall+0x4c>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	791b      	ldrb	r3, [r3, #4]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d138      	bne.n	800785e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e027      	b.n	800785e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800782c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	791b      	ldrb	r3, [r3, #4]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d003      	beq.n	800783e <USB_EPClearStall+0x9e>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d10f      	bne.n	800785e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800788e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80078a0:	68f9      	ldr	r1, [r7, #12]
 80078a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e6:	f023 0302 	bic.w	r3, r3, #2
 80078ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007928:	f043 0302 	orr.w	r3, r3, #2
 800792c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4013      	ands	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	0c1b      	lsrs	r3, r3, #16
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	4013      	ands	r3, r2
 80079b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	b29b      	uxth	r3, r3
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4013      	ands	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079f8:	68bb      	ldr	r3, [r7, #8]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b087      	sub	sp, #28
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	01db      	lsls	r3, r3, #7
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4013      	ands	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a54:	68bb      	ldr	r3, [r7, #8]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a9c:	f023 0307 	bic.w	r3, r3, #7
 8007aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	460b      	mov	r3, r1
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	333c      	adds	r3, #60	; 0x3c
 8007ada:	3304      	adds	r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <USB_EP0_OutStart+0xb8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d90a      	bls.n	8007afe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af8:	d101      	bne.n	8007afe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e037      	b.n	8007b6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	461a      	mov	r2, r3
 8007b06:	2300      	movs	r3, #0
 8007b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b2c:	f043 0318 	orr.w	r3, r3, #24
 8007b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d10f      	bne.n	8007b6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	4f54300a 	.word	0x4f54300a

08007b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <USB_CoreReset+0x64>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d901      	bls.n	8007b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e01b      	b.n	8007bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	daf2      	bge.n	8007b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f043 0201 	orr.w	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <USB_CoreReset+0x64>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e006      	b.n	8007bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d0f0      	beq.n	8007bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	00030d40 	.word	0x00030d40

08007be8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bf8:	f002 fc1e 	bl	800a438 <USBD_static_malloc>
 8007bfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d109      	bne.n	8007c18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	32b0      	adds	r2, #176	; 0xb0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c14:	2302      	movs	r3, #2
 8007c16:	e0d4      	b.n	8007dc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f002 fc4e 	bl	800a4c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32b0      	adds	r2, #176	; 0xb0
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	32b0      	adds	r2, #176	; 0xb0
 8007c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7c1b      	ldrb	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d138      	bne.n	8007cc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c50:	4b5e      	ldr	r3, [pc, #376]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007c52:	7819      	ldrb	r1, [r3, #0]
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	2202      	movs	r2, #2
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f002 fac9 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c60:	4b5a      	ldr	r3, [pc, #360]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 020f 	and.w	r2, r3, #15
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	3324      	adds	r3, #36	; 0x24
 8007c76:	2201      	movs	r2, #1
 8007c78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c7a:	4b55      	ldr	r3, [pc, #340]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007c7c:	7819      	ldrb	r1, [r3, #0]
 8007c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c82:	2202      	movs	r2, #2
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f002 fab4 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c8a:	4b51      	ldr	r3, [pc, #324]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 020f 	and.w	r2, r3, #15
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ca6:	4b4b      	ldr	r3, [pc, #300]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 020f 	and.w	r2, r3, #15
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	3326      	adds	r3, #38	; 0x26
 8007cbc:	2210      	movs	r2, #16
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e035      	b.n	8007d2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cc2:	4b42      	ldr	r3, [pc, #264]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	2202      	movs	r2, #2
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f002 fa91 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cd0:	4b3e      	ldr	r3, [pc, #248]	; (8007dcc <USBD_CDC_Init+0x1e4>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	f003 020f 	and.w	r2, r3, #15
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3324      	adds	r3, #36	; 0x24
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cea:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007cec:	7819      	ldrb	r1, [r3, #0]
 8007cee:	2340      	movs	r3, #64	; 0x40
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f002 fa7d 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cf8:	4b35      	ldr	r3, [pc, #212]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d10:	2201      	movs	r2, #1
 8007d12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d14:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	3326      	adds	r3, #38	; 0x26
 8007d2a:	2210      	movs	r2, #16
 8007d2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007d30:	7819      	ldrb	r1, [r3, #0]
 8007d32:	2308      	movs	r3, #8
 8007d34:	2203      	movs	r2, #3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f002 fa5b 	bl	800a1f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <USBD_CDC_Init+0x1ec>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	3324      	adds	r3, #36	; 0x24
 8007d52:	2201      	movs	r2, #1
 8007d54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	33b0      	adds	r3, #176	; 0xb0
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e018      	b.n	8007dc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7c1b      	ldrb	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007d9a:	7819      	ldrb	r1, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f002 fb12 	bl	800a3d0 <USBD_LL_PrepareReceive>
 8007dac:	e008      	b.n	8007dc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dae:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <USBD_CDC_Init+0x1e8>)
 8007db0:	7819      	ldrb	r1, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007db8:	2340      	movs	r3, #64	; 0x40
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f002 fb08 	bl	800a3d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200000d7 	.word	0x200000d7
 8007dd0:	200000d8 	.word	0x200000d8
 8007dd4:	200000d9 	.word	0x200000d9

08007dd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007de4:	4b3a      	ldr	r3, [pc, #232]	; (8007ed0 <USBD_CDC_DeInit+0xf8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f002 fa27 	bl	800a23e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007df0:	4b37      	ldr	r3, [pc, #220]	; (8007ed0 <USBD_CDC_DeInit+0xf8>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	2200      	movs	r2, #0
 8007e08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e0a:	4b32      	ldr	r3, [pc, #200]	; (8007ed4 <USBD_CDC_DeInit+0xfc>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f002 fa14 	bl	800a23e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e16:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <USBD_CDC_DeInit+0xfc>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 020f 	and.w	r2, r3, #15
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e2e:	2200      	movs	r2, #0
 8007e30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <USBD_CDC_DeInit+0x100>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f002 fa00 	bl	800a23e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e3e:	4b26      	ldr	r3, [pc, #152]	; (8007ed8 <USBD_CDC_DeInit+0x100>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 020f 	and.w	r2, r3, #15
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	2200      	movs	r2, #0
 8007e56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e58:	4b1f      	ldr	r3, [pc, #124]	; (8007ed8 <USBD_CDC_DeInit+0x100>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 020f 	and.w	r2, r3, #15
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	3326      	adds	r3, #38	; 0x26
 8007e6e:	2200      	movs	r2, #0
 8007e70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32b0      	adds	r2, #176	; 0xb0
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01f      	beq.n	8007ec4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	33b0      	adds	r3, #176	; 0xb0
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	32b0      	adds	r2, #176	; 0xb0
 8007ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f002 fad4 	bl	800a454 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32b0      	adds	r2, #176	; 0xb0
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	200000d7 	.word	0x200000d7
 8007ed4:	200000d8 	.word	0x200000d8
 8007ed8:	200000d9 	.word	0x200000d9

08007edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32b0      	adds	r2, #176	; 0xb0
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e0bf      	b.n	800808c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d050      	beq.n	8007fba <USBD_CDC_Setup+0xde>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	f040 80af 	bne.w	800807c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	88db      	ldrh	r3, [r3, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d03a      	beq.n	8007f9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da1b      	bge.n	8007f68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	33b0      	adds	r3, #176	; 0xb0
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	88d2      	ldrh	r2, [r2, #6]
 8007f4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b07      	cmp	r3, #7
 8007f54:	bf28      	it	cs
 8007f56:	2307      	movcs	r3, #7
 8007f58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	89fa      	ldrh	r2, [r7, #14]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 fd43 	bl	80099ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007f66:	e090      	b.n	800808a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785a      	ldrb	r2, [r3, #1]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	2b3f      	cmp	r3, #63	; 0x3f
 8007f78:	d803      	bhi.n	8007f82 <USBD_CDC_Setup+0xa6>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	88db      	ldrh	r3, [r3, #6]
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	e000      	b.n	8007f84 <USBD_CDC_Setup+0xa8>
 8007f82:	2240      	movs	r2, #64	; 0x40
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f8a:	6939      	ldr	r1, [r7, #16]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f92:	461a      	mov	r2, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 fd55 	bl	8009a44 <USBD_CtlPrepareRx>
      break;
 8007f9a:	e076      	b.n	800808a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	33b0      	adds	r3, #176	; 0xb0
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	7850      	ldrb	r0, [r2, #1]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	4798      	blx	r3
      break;
 8007fb8:	e067      	b.n	800808a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b0b      	cmp	r3, #11
 8007fc0:	d851      	bhi.n	8008066 <USBD_CDC_Setup+0x18a>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <USBD_CDC_Setup+0xec>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007ff9 	.word	0x08007ff9
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	08008067 	.word	0x08008067
 8007fd4:	08008067 	.word	0x08008067
 8007fd8:	08008067 	.word	0x08008067
 8007fdc:	08008067 	.word	0x08008067
 8007fe0:	08008067 	.word	0x08008067
 8007fe4:	08008067 	.word	0x08008067
 8007fe8:	08008067 	.word	0x08008067
 8007fec:	08008067 	.word	0x08008067
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b03      	cmp	r3, #3
 8008002:	d107      	bne.n	8008014 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008004:	f107 030a 	add.w	r3, r7, #10
 8008008:	2202      	movs	r2, #2
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fced 	bl	80099ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008012:	e032      	b.n	800807a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fc77 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	75fb      	strb	r3, [r7, #23]
          break;
 8008020:	e02b      	b.n	800807a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d107      	bne.n	800803e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800802e:	f107 030d 	add.w	r3, r7, #13
 8008032:	2201      	movs	r2, #1
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fcd8 	bl	80099ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800803c:	e01d      	b.n	800807a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 fc62 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e016      	b.n	800807a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d00f      	beq.n	8008078 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 fc55 	bl	800990a <USBD_CtlError>
            ret = USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008064:	e008      	b.n	8008078 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fc4e 	bl	800990a <USBD_CtlError>
          ret = USBD_FAIL;
 800806e:	2303      	movs	r3, #3
 8008070:	75fb      	strb	r3, [r7, #23]
          break;
 8008072:	e002      	b.n	800807a <USBD_CDC_Setup+0x19e>
          break;
 8008074:	bf00      	nop
 8008076:	e008      	b.n	800808a <USBD_CDC_Setup+0x1ae>
          break;
 8008078:	bf00      	nop
      }
      break;
 800807a:	e006      	b.n	800808a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fc43 	bl	800990a <USBD_CtlError>
      ret = USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	75fb      	strb	r3, [r7, #23]
      break;
 8008088:	bf00      	nop
  }

  return (uint8_t)ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	32b0      	adds	r2, #176	; 0xb0
 80080b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e065      	b.n	800818a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	32b0      	adds	r2, #176	; 0xb0
 80080c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	3318      	adds	r3, #24
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02f      	beq.n	8008148 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	f003 020f 	and.w	r2, r3, #15
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	3318      	adds	r3, #24
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	f003 010f 	and.w	r1, r3, #15
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	460b      	mov	r3, r1
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	440b      	add	r3, r1
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4403      	add	r3, r0
 8008110:	3348      	adds	r3, #72	; 0x48
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	fbb2 f1f3 	udiv	r1, r2, r3
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800811e:	2b00      	cmp	r3, #0
 8008120:	d112      	bne.n	8008148 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	f003 020f 	and.w	r2, r3, #15
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	3318      	adds	r3, #24
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f002 f924 	bl	800a38e <USBD_LL_Transmit>
 8008146:	e01f      	b.n	8008188 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	33b0      	adds	r3, #176	; 0xb0
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d010      	beq.n	8008188 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	33b0      	adds	r3, #176	; 0xb0
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	32b0      	adds	r2, #176	; 0xb0
 80081a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	32b0      	adds	r2, #176	; 0xb0
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e01a      	b.n	80081fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f002 f922 	bl	800a412 <USBD_LL_GetRxDataSize>
 80081ce:	4602      	mov	r2, r0
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	33b0      	adds	r3, #176	; 0xb0
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081f4:	4611      	mov	r1, r2
 80081f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	32b0      	adds	r2, #176	; 0xb0
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e025      	b.n	8008270 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	; 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01a      	beq.n	800826e <USBD_CDC_EP0_RxReady+0x6c>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800823e:	2bff      	cmp	r3, #255	; 0xff
 8008240:	d015      	beq.n	800826e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	33b0      	adds	r3, #176	; 0xb0
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800825a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008262:	b292      	uxth	r2, r2
 8008264:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	22ff      	movs	r2, #255	; 0xff
 800826a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008280:	2182      	movs	r1, #130	; 0x82
 8008282:	4818      	ldr	r0, [pc, #96]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008284:	f000 fd09 	bl	8008c9a <USBD_GetEpDesc>
 8008288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800828a:	2101      	movs	r1, #1
 800828c:	4815      	ldr	r0, [pc, #84]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800828e:	f000 fd04 	bl	8008c9a <USBD_GetEpDesc>
 8008292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008294:	2181      	movs	r1, #129	; 0x81
 8008296:	4813      	ldr	r0, [pc, #76]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008298:	f000 fcff 	bl	8008c9a <USBD_GetEpDesc>
 800829c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2210      	movs	r2, #16
 80082a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b8:	711a      	strb	r2, [r3, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d006      	beq.n	80082d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082cc:	711a      	strb	r2, [r3, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2243      	movs	r2, #67	; 0x43
 80082d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000094 	.word	0x20000094

080082e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082f0:	2182      	movs	r1, #130	; 0x82
 80082f2:	4818      	ldr	r0, [pc, #96]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082f4:	f000 fcd1 	bl	8008c9a <USBD_GetEpDesc>
 80082f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082fa:	2101      	movs	r1, #1
 80082fc:	4815      	ldr	r0, [pc, #84]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082fe:	f000 fccc 	bl	8008c9a <USBD_GetEpDesc>
 8008302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008304:	2181      	movs	r1, #129	; 0x81
 8008306:	4813      	ldr	r0, [pc, #76]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008308:	f000 fcc7 	bl	8008c9a <USBD_GetEpDesc>
 800830c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2210      	movs	r2, #16
 8008318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d006      	beq.n	800832e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2200      	movs	r2, #0
 8008324:	711a      	strb	r2, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f042 0202 	orr.w	r2, r2, #2
 800832c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d006      	beq.n	8008342 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	711a      	strb	r2, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f042 0202 	orr.w	r2, r2, #2
 8008340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2243      	movs	r2, #67	; 0x43
 8008346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000094 	.word	0x20000094

08008358 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008360:	2182      	movs	r1, #130	; 0x82
 8008362:	4818      	ldr	r0, [pc, #96]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008364:	f000 fc99 	bl	8008c9a <USBD_GetEpDesc>
 8008368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800836a:	2101      	movs	r1, #1
 800836c:	4815      	ldr	r0, [pc, #84]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800836e:	f000 fc94 	bl	8008c9a <USBD_GetEpDesc>
 8008372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008374:	2181      	movs	r1, #129	; 0x81
 8008376:	4813      	ldr	r0, [pc, #76]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008378:	f000 fc8f 	bl	8008c9a <USBD_GetEpDesc>
 800837c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2210      	movs	r2, #16
 8008388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d006      	beq.n	800839e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2200      	movs	r2, #0
 8008394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008398:	711a      	strb	r2, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d006      	beq.n	80083b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ac:	711a      	strb	r2, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2243      	movs	r2, #67	; 0x43
 80083b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000094 	.word	0x20000094

080083c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220a      	movs	r2, #10
 80083d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000050 	.word	0x20000050

080083e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e009      	b.n	8008410 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	33b0      	adds	r3, #176	; 0xb0
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	32b0      	adds	r2, #176	; 0xb0
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	e008      	b.n	8008454 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32b0      	adds	r2, #176	; 0xb0
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	e004      	b.n	800848e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32b0      	adds	r2, #176	; 0xb0
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32b0      	adds	r2, #176	; 0xb0
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e018      	b.n	80084fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7c1b      	ldrb	r3, [r3, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084d2:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <USBD_CDC_ReceivePacket+0x68>)
 80084d4:	7819      	ldrb	r1, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 ff75 	bl	800a3d0 <USBD_LL_PrepareReceive>
 80084e6:	e008      	b.n	80084fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <USBD_CDC_ReceivePacket+0x68>)
 80084ea:	7819      	ldrb	r1, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 ff6b 	bl	800a3d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200000d8 	.word	0x200000d8

08008508 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	e01f      	b.n	8008560 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f001 fde5 	bl	800a124 <USBD_LL_Init>
 800855a:	4603      	mov	r3, r0
 800855c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	e025      	b.n	80085cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32ae      	adds	r2, #174	; 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00f      	beq.n	80085bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32ae      	adds	r2, #174	; 0xae
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	f107 020e 	add.w	r2, r7, #14
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	4602      	mov	r2, r0
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 fded 	bl	800a1bc <USBD_LL_Start>
 80085e2:	4603      	mov	r3, r0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	4611      	mov	r1, r2
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	4611      	mov	r1, r2
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f908 	bl	8009896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008694:	461a      	mov	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d01a      	beq.n	80086e0 <USBD_LL_SetupStage+0x72>
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d822      	bhi.n	80086f4 <USBD_LL_SetupStage+0x86>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <USBD_LL_SetupStage+0x4a>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d00a      	beq.n	80086cc <USBD_LL_SetupStage+0x5e>
 80086b6:	e01d      	b.n	80086f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fb5f 	bl	8008d84 <USBD_StdDevReq>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ca:	e020      	b.n	800870e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fbc7 	bl	8008e68 <USBD_StdItfReq>
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
      break;
 80086de:	e016      	b.n	800870e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fc29 	bl	8008f40 <USBD_StdEPReq>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
      break;
 80086f2:	e00c      	b.n	800870e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fdba 	bl	800a27c <USBD_LL_StallEP>
 8008708:	4603      	mov	r3, r0
 800870a:	73fb      	strb	r3, [r7, #15]
      break;
 800870c:	bf00      	nop
  }

  return ret;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	460b      	mov	r3, r1
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d16e      	bne.n	800880e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873e:	2b03      	cmp	r3, #3
 8008740:	f040 8098 	bne.w	8008874 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d913      	bls.n	8008778 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	1ad2      	subs	r2, r2, r3
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	4293      	cmp	r3, r2
 8008768:	bf28      	it	cs
 800876a:	4613      	movcs	r3, r2
 800876c:	461a      	mov	r2, r3
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 f984 	bl	8009a7e <USBD_CtlContinueRx>
 8008776:	e07d      	b.n	8008874 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2b02      	cmp	r3, #2
 8008784:	d014      	beq.n	80087b0 <USBD_LL_DataOutStage+0x98>
 8008786:	2b02      	cmp	r3, #2
 8008788:	d81d      	bhi.n	80087c6 <USBD_LL_DataOutStage+0xae>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <USBD_LL_DataOutStage+0x7c>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d003      	beq.n	800879a <USBD_LL_DataOutStage+0x82>
 8008792:	e018      	b.n	80087c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	75bb      	strb	r3, [r7, #22]
            break;
 8008798:	e018      	b.n	80087cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	4619      	mov	r1, r3
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fa5e 	bl	8008c66 <USBD_CoreFindIF>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75bb      	strb	r3, [r7, #22]
            break;
 80087ae:	e00d      	b.n	80087cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	4619      	mov	r1, r3
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 fa60 	bl	8008c80 <USBD_CoreFindEP>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75bb      	strb	r3, [r7, #22]
            break;
 80087c4:	e002      	b.n	80087cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75bb      	strb	r3, [r7, #22]
            break;
 80087ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087cc:	7dbb      	ldrb	r3, [r7, #22]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d119      	bne.n	8008806 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d113      	bne.n	8008806 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087de:	7dba      	ldrb	r2, [r7, #22]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	32ae      	adds	r2, #174	; 0xae
 80087e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087ee:	7dba      	ldrb	r2, [r7, #22]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80087f6:	7dba      	ldrb	r2, [r7, #22]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	32ae      	adds	r2, #174	; 0xae
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f001 f94a 	bl	8009aa0 <USBD_CtlSendStatus>
 800880c:	e032      	b.n	8008874 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800880e:	7afb      	ldrb	r3, [r7, #11]
 8008810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008814:	b2db      	uxtb	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fa31 	bl	8008c80 <USBD_CoreFindEP>
 800881e:	4603      	mov	r3, r0
 8008820:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008822:	7dbb      	ldrb	r3, [r7, #22]
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	d025      	beq.n	8008874 <USBD_LL_DataOutStage+0x15c>
 8008828:	7dbb      	ldrb	r3, [r7, #22]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d122      	bne.n	8008874 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b03      	cmp	r3, #3
 8008838:	d117      	bne.n	800886a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800883a:	7dba      	ldrb	r2, [r7, #22]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	32ae      	adds	r2, #174	; 0xae
 8008840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00f      	beq.n	800886a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800884a:	7dba      	ldrb	r2, [r7, #22]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008852:	7dba      	ldrb	r2, [r7, #22]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	32ae      	adds	r2, #174	; 0xae
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	7afa      	ldrb	r2, [r7, #11]
 8008860:	4611      	mov	r1, r2
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	4798      	blx	r3
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	e000      	b.n	8008876 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	460b      	mov	r3, r1
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d16f      	bne.n	8008972 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3314      	adds	r3, #20
 8008896:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d15a      	bne.n	8008958 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d914      	bls.n	80088d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	461a      	mov	r2, r3
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f001 f8ac 	bl	8009a22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ca:	2300      	movs	r3, #0
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 fd7d 	bl	800a3d0 <USBD_LL_PrepareReceive>
 80088d6:	e03f      	b.n	8008958 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d11c      	bne.n	800891e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d316      	bcc.n	800891e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d20f      	bcs.n	800891e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f001 f88d 	bl	8009a22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008910:	2300      	movs	r3, #0
 8008912:	2200      	movs	r2, #0
 8008914:	2100      	movs	r1, #0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f001 fd5a 	bl	800a3d0 <USBD_LL_PrepareReceive>
 800891c:	e01c      	b.n	8008958 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b03      	cmp	r3, #3
 8008928:	d10f      	bne.n	800894a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800894a:	2180      	movs	r1, #128	; 0x80
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f001 fc95 	bl	800a27c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f001 f8b7 	bl	8009ac6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d03a      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7ff fe42 	bl	80085ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008970:	e032      	b.n	80089d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f97f 	bl	8008c80 <USBD_CoreFindEP>
 8008982:	4603      	mov	r3, r0
 8008984:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008986:	7dfb      	ldrb	r3, [r7, #23]
 8008988:	2bff      	cmp	r3, #255	; 0xff
 800898a:	d025      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d122      	bne.n	80089d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d11c      	bne.n	80089d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800899e:	7dfa      	ldrb	r2, [r7, #23]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	32ae      	adds	r2, #174	; 0xae
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d014      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089ae:	7dfa      	ldrb	r2, [r7, #23]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089b6:	7dfa      	ldrb	r2, [r7, #23]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	32ae      	adds	r2, #174	; 0xae
 80089bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	7afa      	ldrb	r2, [r7, #11]
 80089c4:	4611      	mov	r1, r2
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089ce:	7dbb      	ldrb	r3, [r7, #22]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089d4:	7dbb      	ldrb	r3, [r7, #22]
 80089d6:	e000      	b.n	80089da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d014      	beq.n	8008a48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00e      	beq.n	8008a48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6852      	ldr	r2, [r2, #4]
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	4611      	mov	r1, r2
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a48:	2340      	movs	r3, #64	; 0x40
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fbcf 	bl	800a1f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	2200      	movs	r2, #0
 8008a68:	2180      	movs	r1, #128	; 0x80
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fbc1 	bl	800a1f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2240      	movs	r2, #64	; 0x40
 8008a7a:	621a      	str	r2, [r3, #32]

  return ret;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2204      	movs	r2, #4
 8008ac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d106      	bne.n	8008af4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d110      	bne.n	8008b38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	32ae      	adds	r2, #174	; 0xae
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e01c      	b.n	8008b9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d115      	bne.n	8008b9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32ae      	adds	r2, #174	; 0xae
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32ae      	adds	r2, #174	; 0xae
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	4611      	mov	r1, r2
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	32ae      	adds	r2, #174	; 0xae
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e01c      	b.n	8008c02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d115      	bne.n	8008c00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	32ae      	adds	r2, #174	; 0xae
 8008bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32ae      	adds	r2, #174	; 0xae
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00e      	beq.n	8008c5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6852      	ldr	r2, [r2, #4]
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d920      	bls.n	8008d04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cca:	e013      	b.n	8008cf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ccc:	f107 030a 	add.w	r3, r7, #10
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	f000 f81b 	bl	8008d0e <USBD_GetNextDesc>
 8008cd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	d108      	bne.n	8008cf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	789b      	ldrb	r3, [r3, #2]
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d008      	beq.n	8008d02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	897b      	ldrh	r3, [r7, #10]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d8e5      	bhi.n	8008ccc <USBD_GetEpDesc+0x32>
 8008d00:	e000      	b.n	8008d04 <USBD_GetEpDesc+0x6a>
          break;
 8008d02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d04:	693b      	ldr	r3, [r7, #16]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	881a      	ldrh	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4413      	add	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d66:	8a3b      	ldrh	r3, [r7, #16]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d76:	89fb      	ldrh	r3, [r7, #14]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d005      	beq.n	8008daa <USBD_StdDevReq+0x26>
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d857      	bhi.n	8008e52 <USBD_StdDevReq+0xce>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00f      	beq.n	8008dc6 <USBD_StdDevReq+0x42>
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d153      	bne.n	8008e52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	32ae      	adds	r2, #174	; 0xae
 8008db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc4:	e04a      	b.n	8008e5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b09      	cmp	r3, #9
 8008dcc:	d83b      	bhi.n	8008e46 <USBD_StdDevReq+0xc2>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <USBD_StdDevReq+0x50>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008e3d 	.word	0x08008e3d
 8008ddc:	08008e47 	.word	0x08008e47
 8008de0:	08008e33 	.word	0x08008e33
 8008de4:	08008e47 	.word	0x08008e47
 8008de8:	08008e07 	.word	0x08008e07
 8008dec:	08008dfd 	.word	0x08008dfd
 8008df0:	08008e47 	.word	0x08008e47
 8008df4:	08008e1f 	.word	0x08008e1f
 8008df8:	08008e11 	.word	0x08008e11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fa3c 	bl	800927c <USBD_GetDescriptor>
          break;
 8008e04:	e024      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fba1 	bl	8009550 <USBD_SetAddress>
          break;
 8008e0e:	e01f      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fbe0 	bl	80095d8 <USBD_SetConfig>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e1c:	e018      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fc83 	bl	800972c <USBD_GetConfig>
          break;
 8008e26:	e013      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fcb4 	bl	8009798 <USBD_GetStatus>
          break;
 8008e30:	e00e      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fce3 	bl	8009800 <USBD_SetFeature>
          break;
 8008e3a:	e009      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fd07 	bl	8009852 <USBD_ClrFeature>
          break;
 8008e44:	e004      	b.n	8008e50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fd5e 	bl	800990a <USBD_CtlError>
          break;
 8008e4e:	bf00      	nop
      }
      break;
 8008e50:	e004      	b.n	8008e5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fd58 	bl	800990a <USBD_CtlError>
      break;
 8008e5a:	bf00      	nop
  }

  return ret;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop

08008e68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e7e:	2b40      	cmp	r3, #64	; 0x40
 8008e80:	d005      	beq.n	8008e8e <USBD_StdItfReq+0x26>
 8008e82:	2b40      	cmp	r3, #64	; 0x40
 8008e84:	d852      	bhi.n	8008f2c <USBD_StdItfReq+0xc4>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <USBD_StdItfReq+0x26>
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	d14e      	bne.n	8008f2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d840      	bhi.n	8008f1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	889b      	ldrh	r3, [r3, #4]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d836      	bhi.n	8008f14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	889b      	ldrh	r3, [r3, #4]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fed9 	bl	8008c66 <USBD_CoreFindIF>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2bff      	cmp	r3, #255	; 0xff
 8008ebc:	d01d      	beq.n	8008efa <USBD_StdItfReq+0x92>
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d11a      	bne.n	8008efa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ec4:	7bba      	ldrb	r2, [r7, #14]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	32ae      	adds	r2, #174	; 0xae
 8008eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00f      	beq.n	8008ef4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ed4:	7bba      	ldrb	r2, [r7, #14]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008edc:	7bba      	ldrb	r2, [r7, #14]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32ae      	adds	r2, #174	; 0xae
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ef2:	e004      	b.n	8008efe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ef8:	e001      	b.n	8008efe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008efa:	2303      	movs	r3, #3
 8008efc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	88db      	ldrh	r3, [r3, #6]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d110      	bne.n	8008f28 <USBD_StdItfReq+0xc0>
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10d      	bne.n	8008f28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fdc7 	bl	8009aa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f12:	e009      	b.n	8008f28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fcf7 	bl	800990a <USBD_CtlError>
          break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fcf2 	bl	800990a <USBD_CtlError>
          break;
 8008f26:	e000      	b.n	8008f2a <USBD_StdItfReq+0xc2>
          break;
 8008f28:	bf00      	nop
      }
      break;
 8008f2a:	e004      	b.n	8008f36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fceb 	bl	800990a <USBD_CtlError>
      break;
 8008f34:	bf00      	nop
  }

  return ret;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	889b      	ldrh	r3, [r3, #4]
 8008f52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f5c:	2b40      	cmp	r3, #64	; 0x40
 8008f5e:	d007      	beq.n	8008f70 <USBD_StdEPReq+0x30>
 8008f60:	2b40      	cmp	r3, #64	; 0x40
 8008f62:	f200 817f 	bhi.w	8009264 <USBD_StdEPReq+0x324>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d02a      	beq.n	8008fc0 <USBD_StdEPReq+0x80>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	f040 817a 	bne.w	8009264 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fe83 	bl	8008c80 <USBD_CoreFindEP>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f7e:	7b7b      	ldrb	r3, [r7, #13]
 8008f80:	2bff      	cmp	r3, #255	; 0xff
 8008f82:	f000 8174 	beq.w	800926e <USBD_StdEPReq+0x32e>
 8008f86:	7b7b      	ldrb	r3, [r7, #13]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 8170 	bne.w	800926e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f8e:	7b7a      	ldrb	r2, [r7, #13]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f96:	7b7a      	ldrb	r2, [r7, #13]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	32ae      	adds	r2, #174	; 0xae
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8163 	beq.w	800926e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fa8:	7b7a      	ldrb	r2, [r7, #13]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32ae      	adds	r2, #174	; 0xae
 8008fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fbe:	e156      	b.n	800926e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d008      	beq.n	8008fda <USBD_StdEPReq+0x9a>
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	f300 8145 	bgt.w	8009258 <USBD_StdEPReq+0x318>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 809b 	beq.w	800910a <USBD_StdEPReq+0x1ca>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d03c      	beq.n	8009052 <USBD_StdEPReq+0x112>
 8008fd8:	e13e      	b.n	8009258 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d002      	beq.n	8008fec <USBD_StdEPReq+0xac>
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d016      	beq.n	8009018 <USBD_StdEPReq+0xd8>
 8008fea:	e02c      	b.n	8009046 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00d      	beq.n	800900e <USBD_StdEPReq+0xce>
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b80      	cmp	r3, #128	; 0x80
 8008ff6:	d00a      	beq.n	800900e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 f93d 	bl	800a27c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009002:	2180      	movs	r1, #128	; 0x80
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 f939 	bl	800a27c <USBD_LL_StallEP>
 800900a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800900c:	e020      	b.n	8009050 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc7a 	bl	800990a <USBD_CtlError>
              break;
 8009016:	e01b      	b.n	8009050 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	885b      	ldrh	r3, [r3, #2]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10e      	bne.n	800903e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <USBD_StdEPReq+0xfe>
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b80      	cmp	r3, #128	; 0x80
 800902a:	d008      	beq.n	800903e <USBD_StdEPReq+0xfe>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	88db      	ldrh	r3, [r3, #6]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 f91f 	bl	800a27c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fd2e 	bl	8009aa0 <USBD_CtlSendStatus>

              break;
 8009044:	e004      	b.n	8009050 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc5e 	bl	800990a <USBD_CtlError>
              break;
 800904e:	bf00      	nop
          }
          break;
 8009050:	e107      	b.n	8009262 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d002      	beq.n	8009064 <USBD_StdEPReq+0x124>
 800905e:	2b03      	cmp	r3, #3
 8009060:	d016      	beq.n	8009090 <USBD_StdEPReq+0x150>
 8009062:	e04b      	b.n	80090fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00d      	beq.n	8009086 <USBD_StdEPReq+0x146>
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b80      	cmp	r3, #128	; 0x80
 800906e:	d00a      	beq.n	8009086 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f901 	bl	800a27c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800907a:	2180      	movs	r1, #128	; 0x80
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 f8fd 	bl	800a27c <USBD_LL_StallEP>
 8009082:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009084:	e040      	b.n	8009108 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc3e 	bl	800990a <USBD_CtlError>
              break;
 800908e:	e03b      	b.n	8009108 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	885b      	ldrh	r3, [r3, #2]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d136      	bne.n	8009106 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 f907 	bl	800a2ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fcf7 	bl	8009aa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff fde2 	bl	8008c80 <USBD_CoreFindEP>
 80090bc:	4603      	mov	r3, r0
 80090be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090c0:	7b7b      	ldrb	r3, [r7, #13]
 80090c2:	2bff      	cmp	r3, #255	; 0xff
 80090c4:	d01f      	beq.n	8009106 <USBD_StdEPReq+0x1c6>
 80090c6:	7b7b      	ldrb	r3, [r7, #13]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d11c      	bne.n	8009106 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090cc:	7b7a      	ldrb	r2, [r7, #13]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090d4:	7b7a      	ldrb	r2, [r7, #13]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32ae      	adds	r2, #174	; 0xae
 80090da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090e4:	7b7a      	ldrb	r2, [r7, #13]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32ae      	adds	r2, #174	; 0xae
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80090fa:	e004      	b.n	8009106 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fc03 	bl	800990a <USBD_CtlError>
              break;
 8009104:	e000      	b.n	8009108 <USBD_StdEPReq+0x1c8>
              break;
 8009106:	bf00      	nop
          }
          break;
 8009108:	e0ab      	b.n	8009262 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b02      	cmp	r3, #2
 8009114:	d002      	beq.n	800911c <USBD_StdEPReq+0x1dc>
 8009116:	2b03      	cmp	r3, #3
 8009118:	d032      	beq.n	8009180 <USBD_StdEPReq+0x240>
 800911a:	e097      	b.n	800924c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <USBD_StdEPReq+0x1f2>
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b80      	cmp	r3, #128	; 0x80
 8009126:	d004      	beq.n	8009132 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fbed 	bl	800990a <USBD_CtlError>
                break;
 8009130:	e091      	b.n	8009256 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009136:	2b00      	cmp	r3, #0
 8009138:	da0b      	bge.n	8009152 <USBD_StdEPReq+0x212>
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	3310      	adds	r3, #16
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	4413      	add	r3, r2
 800914e:	3304      	adds	r3, #4
 8009150:	e00b      	b.n	800916a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4413      	add	r3, r2
 8009168:	3304      	adds	r3, #4
 800916a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2202      	movs	r2, #2
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc37 	bl	80099ec <USBD_CtlSendData>
              break;
 800917e:	e06a      	b.n	8009256 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da11      	bge.n	80091ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	f003 020f 	and.w	r2, r3, #15
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	440b      	add	r3, r1
 800919a:	3324      	adds	r3, #36	; 0x24
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d117      	bne.n	80091d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fbb0 	bl	800990a <USBD_CtlError>
                  break;
 80091aa:	e054      	b.n	8009256 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	f003 020f 	and.w	r2, r3, #15
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb9d 	bl	800990a <USBD_CtlError>
                  break;
 80091d0:	e041      	b.n	8009256 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	da0b      	bge.n	80091f2 <USBD_StdEPReq+0x2b2>
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3310      	adds	r3, #16
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	3304      	adds	r3, #4
 80091f0:	e00b      	b.n	800920a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	4413      	add	r3, r2
 8009208:	3304      	adds	r3, #4
 800920a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800920c:	7bbb      	ldrb	r3, [r7, #14]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <USBD_StdEPReq+0x2d8>
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	2b80      	cmp	r3, #128	; 0x80
 8009216:	d103      	bne.n	8009220 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	e00e      	b.n	800923e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f867 	bl	800a2f8 <USBD_LL_IsStallEP>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e002      	b.n	800923e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2202      	movs	r2, #2
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fbd1 	bl	80099ec <USBD_CtlSendData>
              break;
 800924a:	e004      	b.n	8009256 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fb5b 	bl	800990a <USBD_CtlError>
              break;
 8009254:	bf00      	nop
          }
          break;
 8009256:	e004      	b.n	8009262 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb55 	bl	800990a <USBD_CtlError>
          break;
 8009260:	bf00      	nop
      }
      break;
 8009262:	e005      	b.n	8009270 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fb4f 	bl	800990a <USBD_CtlError>
      break;
 800926c:	e000      	b.n	8009270 <USBD_StdEPReq+0x330>
      break;
 800926e:	bf00      	nop
  }

  return ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	2b06      	cmp	r3, #6
 800929e:	f200 8128 	bhi.w	80094f2 <USBD_GetDescriptor+0x276>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBD_GetDescriptor+0x2c>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092c5 	.word	0x080092c5
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	0800931d 	.word	0x0800931d
 80092b4:	080094f3 	.word	0x080094f3
 80092b8:	080094f3 	.word	0x080094f3
 80092bc:	08009493 	.word	0x08009493
 80092c0:	080094bf 	.word	0x080094bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
      break;
 80092da:	e112      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1b      	ldrb	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	2202      	movs	r2, #2
 80092fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092fe:	e100      	b.n	8009502 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f107 0208 	add.w	r2, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	2202      	movs	r2, #2
 8009318:	701a      	strb	r2, [r3, #0]
      break;
 800931a:	e0f2      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b05      	cmp	r3, #5
 8009324:	f200 80ac 	bhi.w	8009480 <USBD_GetDescriptor+0x204>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USBD_GetDescriptor+0xb4>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009349 	.word	0x08009349
 8009334:	0800937d 	.word	0x0800937d
 8009338:	080093b1 	.word	0x080093b1
 800933c:	080093e5 	.word	0x080093e5
 8009340:	08009419 	.word	0x08009419
 8009344:	0800944d 	.word	0x0800944d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936a:	e091      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 facb 	bl	800990a <USBD_CtlError>
            err++;
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	3301      	adds	r3, #1
 8009378:	72fb      	strb	r3, [r7, #11]
          break;
 800937a:	e089      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	7c12      	ldrb	r2, [r2, #16]
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939e:	e077      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fab1 	bl	800990a <USBD_CtlError>
            err++;
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	3301      	adds	r3, #1
 80093ac:	72fb      	strb	r3, [r7, #11]
          break;
 80093ae:	e06f      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 0108 	add.w	r1, r7, #8
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d2:	e05d      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa97 	bl	800990a <USBD_CtlError>
            err++;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	3301      	adds	r3, #1
 80093e0:	72fb      	strb	r3, [r7, #11]
          break;
 80093e2:	e055      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009406:	e043      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa7d 	bl	800990a <USBD_CtlError>
            err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
          break;
 8009416:	e03b      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	7c12      	ldrb	r2, [r2, #16]
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943a:	e029      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa63 	bl	800990a <USBD_CtlError>
            err++;
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	3301      	adds	r3, #1
 8009448:	72fb      	strb	r3, [r7, #11]
          break;
 800944a:	e021      	b.n	8009490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7c12      	ldrb	r2, [r2, #16]
 8009464:	f107 0108 	add.w	r1, r7, #8
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800946e:	e00f      	b.n	8009490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa49 	bl	800990a <USBD_CtlError>
            err++;
 8009478:	7afb      	ldrb	r3, [r7, #11]
 800947a:	3301      	adds	r3, #1
 800947c:	72fb      	strb	r3, [r7, #11]
          break;
 800947e:	e007      	b.n	8009490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa41 	bl	800990a <USBD_CtlError>
          err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800948e:	bf00      	nop
      }
      break;
 8009490:	e037      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7c1b      	ldrb	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f107 0208 	add.w	r2, r7, #8
 80094a6:	4610      	mov	r0, r2
 80094a8:	4798      	blx	r3
 80094aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ac:	e029      	b.n	8009502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa2a 	bl	800990a <USBD_CtlError>
        err++;
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	3301      	adds	r3, #1
 80094ba:	72fb      	strb	r3, [r7, #11]
      break;
 80094bc:	e021      	b.n	8009502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7c1b      	ldrb	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	f107 0208 	add.w	r2, r7, #8
 80094d2:	4610      	mov	r0, r2
 80094d4:	4798      	blx	r3
 80094d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	2207      	movs	r2, #7
 80094de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094e0:	e00f      	b.n	8009502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fa10 	bl	800990a <USBD_CtlError>
        err++;
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	3301      	adds	r3, #1
 80094ee:	72fb      	strb	r3, [r7, #11]
      break;
 80094f0:	e007      	b.n	8009502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa08 	bl	800990a <USBD_CtlError>
      err++;
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	3301      	adds	r3, #1
 80094fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009500:	bf00      	nop
  }

  if (err != 0U)
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11e      	bne.n	8009546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	88db      	ldrh	r3, [r3, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d016      	beq.n	800953e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009510:	893b      	ldrh	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00e      	beq.n	8009534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88da      	ldrh	r2, [r3, #6]
 800951a:	893b      	ldrh	r3, [r7, #8]
 800951c:	4293      	cmp	r3, r2
 800951e:	bf28      	it	cs
 8009520:	4613      	movcs	r3, r2
 8009522:	b29b      	uxth	r3, r3
 8009524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009526:	893b      	ldrh	r3, [r7, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fa5d 	bl	80099ec <USBD_CtlSendData>
 8009532:	e009      	b.n	8009548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f9e7 	bl	800990a <USBD_CtlError>
 800953c:	e004      	b.n	8009548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 faae 	bl	8009aa0 <USBD_CtlSendStatus>
 8009544:	e000      	b.n	8009548 <USBD_GetDescriptor+0x2cc>
    return;
 8009546:	bf00      	nop
  }
}
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop

08009550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	889b      	ldrh	r3, [r3, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d131      	bne.n	80095c6 <USBD_SetAddress+0x76>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	88db      	ldrh	r3, [r3, #6]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d12d      	bne.n	80095c6 <USBD_SetAddress+0x76>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	2b7f      	cmp	r3, #127	; 0x7f
 8009570:	d829      	bhi.n	80095c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d104      	bne.n	8009594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f9bc 	bl	800990a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	e01d      	b.n	80095d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7bfa      	ldrb	r2, [r7, #15]
 8009598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fed5 	bl	800a350 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa7a 	bl	8009aa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ba:	e009      	b.n	80095d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c4:	e004      	b.n	80095d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f99e 	bl	800990a <USBD_CtlError>
  }
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	885b      	ldrh	r3, [r3, #2]
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	4b4e      	ldr	r3, [pc, #312]	; (8009728 <USBD_SetConfig+0x150>)
 80095ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095f0:	4b4d      	ldr	r3, [pc, #308]	; (8009728 <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d905      	bls.n	8009604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f985 	bl	800990a <USBD_CtlError>
    return USBD_FAIL;
 8009600:	2303      	movs	r3, #3
 8009602:	e08c      	b.n	800971e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d002      	beq.n	8009616 <USBD_SetConfig+0x3e>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d029      	beq.n	8009668 <USBD_SetConfig+0x90>
 8009614:	e075      	b.n	8009702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009616:	4b44      	ldr	r3, [pc, #272]	; (8009728 <USBD_SetConfig+0x150>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d020      	beq.n	8009660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800961e:	4b42      	ldr	r3, [pc, #264]	; (8009728 <USBD_SetConfig+0x150>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009628:	4b3f      	ldr	r3, [pc, #252]	; (8009728 <USBD_SetConfig+0x150>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fe ffe7 	bl	8008602 <USBD_SetClassConfig>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f962 	bl	800990a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2202      	movs	r2, #2
 800964a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800964e:	e065      	b.n	800971c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa25 	bl	8009aa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2203      	movs	r2, #3
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800965e:	e05d      	b.n	800971c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fa1d 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 8009666:	e059      	b.n	800971c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009668:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <USBD_SetConfig+0x150>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d112      	bne.n	8009696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009678:	4b2b      	ldr	r3, [pc, #172]	; (8009728 <USBD_SetConfig+0x150>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009682:	4b29      	ldr	r3, [pc, #164]	; (8009728 <USBD_SetConfig+0x150>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe ffd6 	bl	800863a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fa06 	bl	8009aa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009694:	e042      	b.n	800971c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d02a      	beq.n	80096fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fe ffc4 	bl	800863a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096b2:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <USBD_SetConfig+0x150>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096bc:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <USBD_SetConfig+0x150>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fe ff9d 	bl	8008602 <USBD_SetClassConfig>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f918 	bl	800990a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fe ffa9 	bl	800863a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096f0:	e014      	b.n	800971c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9d4 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 80096f8:	e010      	b.n	800971c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f9d0 	bl	8009aa0 <USBD_CtlSendStatus>
      break;
 8009700:	e00c      	b.n	800971c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f900 	bl	800990a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <USBD_SetConfig+0x150>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fe ff92 	bl	800863a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	73fb      	strb	r3, [r7, #15]
      break;
 800971a:	bf00      	nop
  }

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000238 	.word	0x20000238

0800972c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d004      	beq.n	8009748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f8e2 	bl	800990a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009746:	e023      	b.n	8009790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	dc02      	bgt.n	800975a <USBD_GetConfig+0x2e>
 8009754:	2b00      	cmp	r3, #0
 8009756:	dc03      	bgt.n	8009760 <USBD_GetConfig+0x34>
 8009758:	e015      	b.n	8009786 <USBD_GetConfig+0x5a>
 800975a:	2b03      	cmp	r3, #3
 800975c:	d00b      	beq.n	8009776 <USBD_GetConfig+0x4a>
 800975e:	e012      	b.n	8009786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3308      	adds	r3, #8
 800976a:	2201      	movs	r2, #1
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f93c 	bl	80099ec <USBD_CtlSendData>
        break;
 8009774:	e00c      	b.n	8009790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3304      	adds	r3, #4
 800977a:	2201      	movs	r2, #1
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f934 	bl	80099ec <USBD_CtlSendData>
        break;
 8009784:	e004      	b.n	8009790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8be 	bl	800990a <USBD_CtlError>
        break;
 800978e:	bf00      	nop
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d81e      	bhi.n	80097ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	88db      	ldrh	r3, [r3, #6]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d004      	beq.n	80097c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f8a5 	bl	800990a <USBD_CtlError>
        break;
 80097c0:	e01a      	b.n	80097f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	330c      	adds	r3, #12
 80097e2:	2202      	movs	r2, #2
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f900 	bl	80099ec <USBD_CtlSendData>
      break;
 80097ec:	e004      	b.n	80097f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f88a 	bl	800990a <USBD_CtlError>
      break;
 80097f6:	bf00      	nop
  }
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d107      	bne.n	8009822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f940 	bl	8009aa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009820:	e013      	b.n	800984a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	2b02      	cmp	r3, #2
 8009828:	d10b      	bne.n	8009842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	889b      	ldrh	r3, [r3, #4]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	b2da      	uxtb	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f930 	bl	8009aa0 <USBD_CtlSendStatus>
}
 8009840:	e003      	b.n	800984a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f860 	bl	800990a <USBD_CtlError>
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	2b02      	cmp	r3, #2
 8009868:	d80b      	bhi.n	8009882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d10c      	bne.n	800988c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f910 	bl	8009aa0 <USBD_CtlSendStatus>
      }
      break;
 8009880:	e004      	b.n	800988c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f840 	bl	800990a <USBD_CtlError>
      break;
 800988a:	e000      	b.n	800988e <USBD_ClrFeature+0x3c>
      break;
 800988c:	bf00      	nop
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff fa41 	bl	8008d48 <SWAPBYTE>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3301      	adds	r3, #1
 80098d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fa34 	bl	8008d48 <SWAPBYTE>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff fa27 	bl	8008d48 <SWAPBYTE>
 80098fa:	4603      	mov	r3, r0
 80098fc:	461a      	mov	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	80da      	strh	r2, [r3, #6]
}
 8009902:	bf00      	nop
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009914:	2180      	movs	r1, #128	; 0x80
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fcb0 	bl	800a27c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800991c:	2100      	movs	r1, #0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fcac 	bl	800a27c <USBD_LL_StallEP>
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d036      	beq.n	80099b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009946:	6938      	ldr	r0, [r7, #16]
 8009948:	f000 f836 	bl	80099b8 <USBD_GetLen>
 800994c:	4603      	mov	r3, r0
 800994e:	3301      	adds	r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	4413      	add	r3, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7812      	ldrb	r2, [r2, #0]
 8009964:	701a      	strb	r2, [r3, #0]
  idx++;
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	3301      	adds	r3, #1
 800996a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	2203      	movs	r2, #3
 8009974:	701a      	strb	r2, [r3, #0]
  idx++;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	3301      	adds	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800997c:	e013      	b.n	80099a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	4413      	add	r3, r2
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	3301      	adds	r3, #1
 800998e:	613b      	str	r3, [r7, #16]
    idx++;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	3301      	adds	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	4413      	add	r3, r2
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
    idx++;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	3301      	adds	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e7      	bne.n	800997e <USBD_GetString+0x52>
 80099ae:	e000      	b.n	80099b2 <USBD_GetString+0x86>
    return;
 80099b0:	bf00      	nop
  }
}
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099c8:	e005      	b.n	80099d6 <USBD_GetLen+0x1e>
  {
    len++;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	3301      	adds	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1f5      	bne.n	80099ca <USBD_GetLen+0x12>
  }

  return len;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fcbb 	bl	800a38e <USBD_LL_Transmit>

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	2100      	movs	r1, #0
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 fcaa 	bl	800a38e <USBD_LL_Transmit>

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2203      	movs	r2, #3
 8009a54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fcae 	bl	800a3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	2100      	movs	r1, #0
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 fc9d 	bl	800a3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fc69 	bl	800a38e <USBD_LL_Transmit>

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2205      	movs	r2, #5
 8009ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2100      	movs	r1, #0
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fc77 	bl	800a3d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009af0:	2200      	movs	r2, #0
 8009af2:	4912      	ldr	r1, [pc, #72]	; (8009b3c <MX_USB_DEVICE_Init+0x50>)
 8009af4:	4812      	ldr	r0, [pc, #72]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009af6:	f7fe fd07 	bl	8008508 <USBD_Init>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b00:	f7f7 fc5a 	bl	80013b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b04:	490f      	ldr	r1, [pc, #60]	; (8009b44 <MX_USB_DEVICE_Init+0x58>)
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b08:	f7fe fd2e 	bl	8008568 <USBD_RegisterClass>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b12:	f7f7 fc51 	bl	80013b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b16:	490c      	ldr	r1, [pc, #48]	; (8009b48 <MX_USB_DEVICE_Init+0x5c>)
 8009b18:	4809      	ldr	r0, [pc, #36]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b1a:	f7fe fc65 	bl	80083e8 <USBD_CDC_RegisterInterface>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b24:	f7f7 fc48 	bl	80013b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b28:	4805      	ldr	r0, [pc, #20]	; (8009b40 <MX_USB_DEVICE_Init+0x54>)
 8009b2a:	f7fe fd53 	bl	80085d4 <USBD_Start>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b34:	f7f7 fc40 	bl	80013b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b38:	bf00      	nop
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200000f0 	.word	0x200000f0
 8009b40:	2000023c 	.word	0x2000023c
 8009b44:	2000005c 	.word	0x2000005c
 8009b48:	200000dc 	.word	0x200000dc

08009b4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b50:	2200      	movs	r2, #0
 8009b52:	4905      	ldr	r1, [pc, #20]	; (8009b68 <CDC_Init_FS+0x1c>)
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <CDC_Init_FS+0x20>)
 8009b56:	f7fe fc61 	bl	800841c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b5a:	4905      	ldr	r1, [pc, #20]	; (8009b70 <CDC_Init_FS+0x24>)
 8009b5c:	4803      	ldr	r0, [pc, #12]	; (8009b6c <CDC_Init_FS+0x20>)
 8009b5e:	f7fe fc7f 	bl	8008460 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000918 	.word	0x20000918
 8009b6c:	2000023c 	.word	0x2000023c
 8009b70:	20000518 	.word	0x20000518

08009b74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
 8009b90:	4613      	mov	r3, r2
 8009b92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b23      	cmp	r3, #35	; 0x23
 8009b98:	d84a      	bhi.n	8009c30 <CDC_Control_FS+0xac>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <CDC_Control_FS+0x1c>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009c31 	.word	0x08009c31
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c31 	.word	0x08009c31
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c31 	.word	0x08009c31
 8009bb4:	08009c31 	.word	0x08009c31
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c31 	.word	0x08009c31
 8009bc0:	08009c31 	.word	0x08009c31
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009c31 	.word	0x08009c31
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	08009c31 	.word	0x08009c31
 8009bd8:	08009c31 	.word	0x08009c31
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009c31 	.word	0x08009c31
 8009be8:	08009c31 	.word	0x08009c31
 8009bec:	08009c31 	.word	0x08009c31
 8009bf0:	08009c31 	.word	0x08009c31
 8009bf4:	08009c31 	.word	0x08009c31
 8009bf8:	08009c31 	.word	0x08009c31
 8009bfc:	08009c31 	.word	0x08009c31
 8009c00:	08009c31 	.word	0x08009c31
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c31 	.word	0x08009c31
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c31 	.word	0x08009c31
 8009c28:	08009c31 	.word	0x08009c31
 8009c2c:	08009c31 	.word	0x08009c31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c30:	bf00      	nop
  }

  return (USBD_OK);
 8009c32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4805      	ldr	r0, [pc, #20]	; (8009c64 <CDC_Receive_FS+0x24>)
 8009c4e:	f7fe fc07 	bl	8008460 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c52:	4804      	ldr	r0, [pc, #16]	; (8009c64 <CDC_Receive_FS+0x24>)
 8009c54:	f7fe fc22 	bl	800849c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	2000023c 	.word	0x2000023c

08009c68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
	...

08009c8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2212      	movs	r2, #18
 8009c9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c9e:	4b03      	ldr	r3, [pc, #12]	; (8009cac <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	2000010c 	.word	0x2000010c

08009cb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	6039      	str	r1, [r7, #0]
 8009cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2204      	movs	r2, #4
 8009cc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cc2:	4b03      	ldr	r3, [pc, #12]	; (8009cd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	20000120 	.word	0x20000120

08009cd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	6039      	str	r1, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4907      	ldr	r1, [pc, #28]	; (8009d08 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cea:	4808      	ldr	r0, [pc, #32]	; (8009d0c <USBD_FS_ProductStrDescriptor+0x38>)
 8009cec:	f7ff fe1e 	bl	800992c <USBD_GetString>
 8009cf0:	e004      	b.n	8009cfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4904      	ldr	r1, [pc, #16]	; (8009d08 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cf6:	4805      	ldr	r0, [pc, #20]	; (8009d0c <USBD_FS_ProductStrDescriptor+0x38>)
 8009cf8:	f7ff fe18 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000d18 	.word	0x20000d18
 8009d0c:	0800ac14 	.word	0x0800ac14

08009d10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	4904      	ldr	r1, [pc, #16]	; (8009d30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d20:	4804      	ldr	r0, [pc, #16]	; (8009d34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d22:	f7ff fe03 	bl	800992c <USBD_GetString>
  return USBD_StrDesc;
 8009d26:	4b02      	ldr	r3, [pc, #8]	; (8009d30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20000d18 	.word	0x20000d18
 8009d34:	0800ac2c 	.word	0x0800ac2c

08009d38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	221a      	movs	r2, #26
 8009d48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d4a:	f000 f843 	bl	8009dd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d4e:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000124 	.word	0x20000124

08009d5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	6039      	str	r1, [r7, #0]
 8009d66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d105      	bne.n	8009d7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4907      	ldr	r1, [pc, #28]	; (8009d90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d72:	4808      	ldr	r0, [pc, #32]	; (8009d94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d74:	f7ff fdda 	bl	800992c <USBD_GetString>
 8009d78:	e004      	b.n	8009d84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	4904      	ldr	r1, [pc, #16]	; (8009d90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d7e:	4805      	ldr	r0, [pc, #20]	; (8009d94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d80:	f7ff fdd4 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d84:	4b02      	ldr	r3, [pc, #8]	; (8009d90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000d18 	.word	0x20000d18
 8009d94:	0800ac40 	.word	0x0800ac40

08009d98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	4907      	ldr	r1, [pc, #28]	; (8009dcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dae:	4808      	ldr	r0, [pc, #32]	; (8009dd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009db0:	f7ff fdbc 	bl	800992c <USBD_GetString>
 8009db4:	e004      	b.n	8009dc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	4904      	ldr	r1, [pc, #16]	; (8009dcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dba:	4805      	ldr	r0, [pc, #20]	; (8009dd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dbc:	f7ff fdb6 	bl	800992c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000d18 	.word	0x20000d18
 8009dd0:	0800ac4c 	.word	0x0800ac4c

08009dd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dda:	4b0f      	ldr	r3, [pc, #60]	; (8009e18 <Get_SerialNum+0x44>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009de0:	4b0e      	ldr	r3, [pc, #56]	; (8009e1c <Get_SerialNum+0x48>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <Get_SerialNum+0x4c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4413      	add	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dfa:	2208      	movs	r2, #8
 8009dfc:	4909      	ldr	r1, [pc, #36]	; (8009e24 <Get_SerialNum+0x50>)
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 f814 	bl	8009e2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e04:	2204      	movs	r2, #4
 8009e06:	4908      	ldr	r1, [pc, #32]	; (8009e28 <Get_SerialNum+0x54>)
 8009e08:	68b8      	ldr	r0, [r7, #8]
 8009e0a:	f000 f80f 	bl	8009e2c <IntToUnicode>
  }
}
 8009e0e:	bf00      	nop
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	1fff7a10 	.word	0x1fff7a10
 8009e1c:	1fff7a14 	.word	0x1fff7a14
 8009e20:	1fff7a18 	.word	0x1fff7a18
 8009e24:	20000126 	.word	0x20000126
 8009e28:	20000136 	.word	0x20000136

08009e2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]
 8009e42:	e027      	b.n	8009e94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	0f1b      	lsrs	r3, r3, #28
 8009e48:	2b09      	cmp	r3, #9
 8009e4a:	d80b      	bhi.n	8009e64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	0f1b      	lsrs	r3, r3, #28
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4619      	mov	r1, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3230      	adds	r2, #48	; 0x30
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	701a      	strb	r2, [r3, #0]
 8009e62:	e00a      	b.n	8009e7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	0f1b      	lsrs	r3, r3, #28
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	005b      	lsls	r3, r3, #1
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	440b      	add	r3, r1
 8009e74:	3237      	adds	r2, #55	; 0x37
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	3301      	adds	r3, #1
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	4413      	add	r3, r2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	3301      	adds	r3, #1
 8009e92:	75fb      	strb	r3, [r7, #23]
 8009e94:	7dfa      	ldrb	r2, [r7, #23]
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d3d3      	bcc.n	8009e44 <IntToUnicode+0x18>
  }
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	; 0x28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	605a      	str	r2, [r3, #4]
 8009ebe:	609a      	str	r2, [r3, #8]
 8009ec0:	60da      	str	r2, [r3, #12]
 8009ec2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ecc:	d13a      	bne.n	8009f44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ece:	2300      	movs	r3, #0
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	4b1e      	ldr	r3, [pc, #120]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	4a1d      	ldr	r2, [pc, #116]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	6313      	str	r3, [r2, #48]	; 0x30
 8009ede:	4b1b      	ldr	r3, [pc, #108]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	613b      	str	r3, [r7, #16]
 8009ee8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009eea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009efc:	230a      	movs	r3, #10
 8009efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f00:	f107 0314 	add.w	r3, r7, #20
 8009f04:	4619      	mov	r1, r3
 8009f06:	4812      	ldr	r0, [pc, #72]	; (8009f50 <HAL_PCD_MspInit+0xa4>)
 8009f08:	f7f8 f9fc 	bl	8002304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f0c:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f10:	4a0e      	ldr	r2, [pc, #56]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f16:	6353      	str	r3, [r2, #52]	; 0x34
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f20:	4a0a      	ldr	r2, [pc, #40]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f26:	6453      	str	r3, [r2, #68]	; 0x44
 8009f28:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <HAL_PCD_MspInit+0xa0>)
 8009f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	2043      	movs	r0, #67	; 0x43
 8009f3a:	f7f8 f997 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f3e:	2043      	movs	r0, #67	; 0x43
 8009f40:	f7f8 f9b0 	bl	80022a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f44:	bf00      	nop
 8009f46:	3728      	adds	r7, #40	; 0x28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	40023800 	.word	0x40023800
 8009f50:	40020000 	.word	0x40020000

08009f54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	f7fe fb7f 	bl	800866e <USBD_LL_SetupStage>
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f8a:	78fa      	ldrb	r2, [r7, #3]
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f7fe fbb9 	bl	8008718 <USBD_LL_DataOutStage>
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009fc0:	78fa      	ldrb	r2, [r7, #3]
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	334c      	adds	r3, #76	; 0x4c
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	f7fe fc52 	bl	800887e <USBD_LL_DataInStage>
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fd86 	bl	8008b02 <USBD_LL_SOF>
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a006:	2301      	movs	r3, #1
 800a008:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d001      	beq.n	800a016 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a012:	f7f7 f9d1 	bl	80013b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a01c:	7bfa      	ldrb	r2, [r7, #15]
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe fd30 	bl	8008a86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe fcd8 	bl	80089e2 <USBD_LL_Reset>
}
 800a032:	bf00      	nop
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fd2b 	bl	8008aa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a070:	4b04      	ldr	r3, [pc, #16]	; (800a084 <HAL_PCD_SuspendCallback+0x48>)
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	4a03      	ldr	r2, [pc, #12]	; (800a084 <HAL_PCD_SuspendCallback+0x48>)
 800a076:	f043 0306 	orr.w	r3, r3, #6
 800a07a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	e000ed00 	.word	0xe000ed00

0800a088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fd1b 	bl	8008ad2 <USBD_LL_Resume>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0b6:	78fa      	ldrb	r2, [r7, #3]
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fd73 	bl	8008ba6 <USBD_LL_IsoOUTIncomplete>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fd2f 	bl	8008b42 <USBD_LL_IsoINIncomplete>
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fd85 	bl	8008c0a <USBD_LL_DevConnected>
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fd82 	bl	8008c20 <USBD_LL_DevDisconnected>
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d13c      	bne.n	800a1ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a134:	4a20      	ldr	r2, [pc, #128]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a140:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a144:	4b1c      	ldr	r3, [pc, #112]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a14a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a14c:	4b1a      	ldr	r3, [pc, #104]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a14e:	2204      	movs	r2, #4
 800a150:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a152:	4b19      	ldr	r3, [pc, #100]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a154:	2202      	movs	r2, #2
 800a156:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a158:	4b17      	ldr	r3, [pc, #92]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a160:	2202      	movs	r2, #2
 800a162:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a164:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a166:	2200      	movs	r2, #0
 800a168:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a16a:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a172:	2200      	movs	r2, #0
 800a174:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a178:	2200      	movs	r2, #0
 800a17a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a17c:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a17e:	2200      	movs	r2, #0
 800a180:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a182:	480d      	ldr	r0, [pc, #52]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a184:	f7f8 fa5b 	bl	800263e <HAL_PCD_Init>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a18e:	f7f7 f913 	bl	80013b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a192:	2180      	movs	r1, #128	; 0x80
 800a194:	4808      	ldr	r0, [pc, #32]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a196:	f7f9 fcb2 	bl	8003afe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a19a:	2240      	movs	r2, #64	; 0x40
 800a19c:	2100      	movs	r1, #0
 800a19e:	4806      	ldr	r0, [pc, #24]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a1a0:	f7f9 fc66 	bl	8003a70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a1a4:	2280      	movs	r2, #128	; 0x80
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	4803      	ldr	r0, [pc, #12]	; (800a1b8 <USBD_LL_Init+0x94>)
 800a1aa:	f7f9 fc61 	bl	8003a70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	20000f18 	.word	0x20000f18

0800a1bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7f8 fb50 	bl	8002878 <HAL_PCD_Start>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 f942 	bl	800a468 <USBD_Get_USB_Status>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	461a      	mov	r2, r3
 800a200:	4603      	mov	r3, r0
 800a202:	70fb      	strb	r3, [r7, #3]
 800a204:	460b      	mov	r3, r1
 800a206:	70bb      	strb	r3, [r7, #2]
 800a208:	4613      	mov	r3, r2
 800a20a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a21a:	78bb      	ldrb	r3, [r7, #2]
 800a21c:	883a      	ldrh	r2, [r7, #0]
 800a21e:	78f9      	ldrb	r1, [r7, #3]
 800a220:	f7f9 f821 	bl	8003266 <HAL_PCD_EP_Open>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f91c 	bl	800a468 <USBD_Get_USB_Status>
 800a230:	4603      	mov	r3, r0
 800a232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a234:	7bbb      	ldrb	r3, [r7, #14]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	4611      	mov	r1, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f9 f86a 	bl	8003336 <HAL_PCD_EP_Close>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 f8fd 	bl	800a468 <USBD_Get_USB_Status>
 800a26e:	4603      	mov	r3, r0
 800a270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a272:	7bbb      	ldrb	r3, [r7, #14]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f9 f942 	bl	8003524 <HAL_PCD_EP_SetStall>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f8de 	bl	800a468 <USBD_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f9 f987 	bl	80035ec <HAL_PCD_EP_ClrStall>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f8bf 	bl	800a468 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a30a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a30c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a310:	2b00      	cmp	r3, #0
 800a312:	da0b      	bge.n	800a32c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	4613      	mov	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	333e      	adds	r3, #62	; 0x3e
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	e00b      	b.n	800a344 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a332:	68f9      	ldr	r1, [r7, #12]
 800a334:	4613      	mov	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a342:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a36a:	78fa      	ldrb	r2, [r7, #3]
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7f8 ff54 	bl	800321c <HAL_PCD_SetAddress>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f874 	bl	800a468 <USBD_Get_USB_Status>
 800a380:	4603      	mov	r3, r0
 800a382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a384:	7bbb      	ldrb	r3, [r7, #14]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b086      	sub	sp, #24
 800a392:	af00      	add	r7, sp, #0
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
 800a39a:	460b      	mov	r3, r1
 800a39c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3ac:	7af9      	ldrb	r1, [r7, #11]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	f7f9 f86d 	bl	8003490 <HAL_PCD_EP_Transmit>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f853 	bl	800a468 <USBD_Get_USB_Status>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	607a      	str	r2, [r7, #4]
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3ee:	7af9      	ldrb	r1, [r7, #11]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	f7f8 ffe9 	bl	80033ca <HAL_PCD_EP_Receive>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 f832 	bl	800a468 <USBD_Get_USB_Status>
 800a404:	4603      	mov	r3, r0
 800a406:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a408:	7dbb      	ldrb	r3, [r7, #22]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a424:	78fa      	ldrb	r2, [r7, #3]
 800a426:	4611      	mov	r1, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	f7f9 f819 	bl	8003460 <HAL_PCD_EP_GetRxCount>
 800a42e:	4603      	mov	r3, r0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <USBD_static_malloc+0x18>)
}
 800a442:	4618      	mov	r0, r3
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	20001424 	.word	0x20001424

0800a454 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]

}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	4603      	mov	r3, r0
 800a470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d817      	bhi.n	800a4ac <USBD_Get_USB_Status+0x44>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <USBD_Get_USB_Status+0x1c>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a495 	.word	0x0800a495
 800a488:	0800a49b 	.word	0x0800a49b
 800a48c:	0800a4a1 	.word	0x0800a4a1
 800a490:	0800a4a7 	.word	0x0800a4a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
    break;
 800a498:	e00b      	b.n	800a4b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a49a:	2303      	movs	r3, #3
 800a49c:	73fb      	strb	r3, [r7, #15]
    break;
 800a49e:	e008      	b.n	800a4b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a4:	e005      	b.n	800a4b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4aa:	e002      	b.n	800a4b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b0:	bf00      	nop
  }
  return usb_status;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <memset>:
 800a4c0:	4402      	add	r2, r0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d100      	bne.n	800a4ca <memset+0xa>
 800a4c8:	4770      	bx	lr
 800a4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ce:	e7f9      	b.n	800a4c4 <memset+0x4>

0800a4d0 <__libc_init_array>:
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	4d0d      	ldr	r5, [pc, #52]	; (800a508 <__libc_init_array+0x38>)
 800a4d4:	4c0d      	ldr	r4, [pc, #52]	; (800a50c <__libc_init_array+0x3c>)
 800a4d6:	1b64      	subs	r4, r4, r5
 800a4d8:	10a4      	asrs	r4, r4, #2
 800a4da:	2600      	movs	r6, #0
 800a4dc:	42a6      	cmp	r6, r4
 800a4de:	d109      	bne.n	800a4f4 <__libc_init_array+0x24>
 800a4e0:	4d0b      	ldr	r5, [pc, #44]	; (800a510 <__libc_init_array+0x40>)
 800a4e2:	4c0c      	ldr	r4, [pc, #48]	; (800a514 <__libc_init_array+0x44>)
 800a4e4:	f000 f818 	bl	800a518 <_init>
 800a4e8:	1b64      	subs	r4, r4, r5
 800a4ea:	10a4      	asrs	r4, r4, #2
 800a4ec:	2600      	movs	r6, #0
 800a4ee:	42a6      	cmp	r6, r4
 800a4f0:	d105      	bne.n	800a4fe <__libc_init_array+0x2e>
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f8:	4798      	blx	r3
 800a4fa:	3601      	adds	r6, #1
 800a4fc:	e7ee      	b.n	800a4dc <__libc_init_array+0xc>
 800a4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a502:	4798      	blx	r3
 800a504:	3601      	adds	r6, #1
 800a506:	e7f2      	b.n	800a4ee <__libc_init_array+0x1e>
 800a508:	0800ac7c 	.word	0x0800ac7c
 800a50c:	0800ac7c 	.word	0x0800ac7c
 800a510:	0800ac7c 	.word	0x0800ac7c
 800a514:	0800ac80 	.word	0x0800ac80

0800a518 <_init>:
 800a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51a:	bf00      	nop
 800a51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51e:	bc08      	pop	{r3}
 800a520:	469e      	mov	lr, r3
 800a522:	4770      	bx	lr

0800a524 <_fini>:
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	bf00      	nop
 800a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52a:	bc08      	pop	{r3}
 800a52c:	469e      	mov	lr, r3
 800a52e:	4770      	bx	lr
