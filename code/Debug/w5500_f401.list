
w5500_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  08010d78  08010d78  00011d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012414  08012414  000143f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012414  08012414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801241c  0801241c  000143f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801241c  0801241c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012420  08012420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f0  20000000  08012424  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036c0  200003f0  08012814  000143f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ab0  08012814  00014ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000143f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6f4  00000000  00000000  00014420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051a6  00000000  00000000  00030b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000152e  00000000  00000000  00037888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3b4  00000000  00000000  00038db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f55d  00000000  00000000  0005516a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5cba  00000000  00000000  000746c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b0c  00000000  00000000  0011a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00122ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003f0 	.word	0x200003f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010d5c 	.word	0x08010d5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003f4 	.word	0x200003f4
 80001dc:	08010d5c 	.word	0x08010d5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	@ (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	@ (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60da      	str	r2, [r3, #12]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60da      	str	r2, [r3, #12]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	615a      	str	r2, [r3, #20]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001162:	b480      	push	{r7}
 8001164:	b089      	sub	sp, #36	@ 0x24
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	330c      	adds	r3, #12
 800116e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	e853 3f00 	ldrex	r3, [r3]
 8001176:	60bb      	str	r3, [r7, #8]
   return(result);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	330c      	adds	r3, #12
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	61ba      	str	r2, [r7, #24]
 8001188:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	e841 2300 	strex	r3, r2, [r1]
 8001192:	613b      	str	r3, [r7, #16]
   return(result);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e7      	bne.n	800116a <LL_USART_EnableIT_RXNE+0x8>
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	@ 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	619a      	str	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011f0:	4907      	ldr	r1, [pc, #28]	@ (8001210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4013      	ands	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40023800 	.word	0x40023800

08001214 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <LL_APB2_GRP1_EnableClock+0x2c>)
 800121e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <LL_APB2_GRP1_EnableClock+0x2c>)
 800122a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40023800 	.word	0x40023800

08001244 <send_ip_to_uart>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void send_ip_to_uart(){
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af02      	add	r7, sp, #8
	char ip1 = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
	char ip2 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	75bb      	strb	r3, [r7, #22]
	char ip3 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	757b      	strb	r3, [r7, #21]
	char ip4 = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	753b      	strb	r3, [r7, #20]
	char out[18];
	ip1 = ReadFromEEPROM(EEPROM_ADRESS_START);
 800125a:	4814      	ldr	r0, [pc, #80]	@ (80012ac <send_ip_to_uart+0x68>)
 800125c:	f000 ff88 	bl	8002170 <ReadFromEEPROM>
 8001260:	4603      	mov	r3, r0
 8001262:	75fb      	strb	r3, [r7, #23]
	ip2 = ReadFromEEPROM(EEPROM_ADRESS_START+4);
 8001264:	4812      	ldr	r0, [pc, #72]	@ (80012b0 <send_ip_to_uart+0x6c>)
 8001266:	f000 ff83 	bl	8002170 <ReadFromEEPROM>
 800126a:	4603      	mov	r3, r0
 800126c:	75bb      	strb	r3, [r7, #22]
	ip3 = ReadFromEEPROM(EEPROM_ADRESS_START+8);
 800126e:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <send_ip_to_uart+0x70>)
 8001270:	f000 ff7e 	bl	8002170 <ReadFromEEPROM>
 8001274:	4603      	mov	r3, r0
 8001276:	757b      	strb	r3, [r7, #21]
	ip4 = ReadFromEEPROM(EEPROM_ADRESS_START+12);
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <send_ip_to_uart+0x74>)
 800127a:	f000 ff79 	bl	8002170 <ReadFromEEPROM>
 800127e:	4603      	mov	r3, r0
 8001280:	753b      	strb	r3, [r7, #20]
	sprintf(out, "%d.%d.%d.%d\n\r",ip1,ip2,ip3,ip4);
 8001282:	7df9      	ldrb	r1, [r7, #23]
 8001284:	7dbc      	ldrb	r4, [r7, #22]
 8001286:	7d7b      	ldrb	r3, [r7, #21]
 8001288:	7d3a      	ldrb	r2, [r7, #20]
 800128a:	4638      	mov	r0, r7
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	4623      	mov	r3, r4
 8001292:	460a      	mov	r2, r1
 8001294:	4909      	ldr	r1, [pc, #36]	@ (80012bc <send_ip_to_uart+0x78>)
 8001296:	f00c f94b 	bl	800d530 <siprintf>
	USART1_Send_String(out);
 800129a:	463b      	mov	r3, r7
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fe71 	bl	8001f84 <USART1_Send_String>
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	08030000 	.word	0x08030000
 80012b0:	08030004 	.word	0x08030004
 80012b4:	08030008 	.word	0x08030008
 80012b8:	0803000c 	.word	0x0803000c
 80012bc:	08010d78 	.word	0x08010d78

080012c0 <receive_ip_from_uart>:

void receive_ip_from_uart(){
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af04      	add	r7, sp, #16
	int ip1 = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
	int ip2 = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
	int ip3 = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
	int ip4 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
	sscanf(str_rx2,"SET%d.%d.%d.%d\r", &ip1, &ip2, &ip3, &ip4);
 80012d6:	f107 0108 	add.w	r1, r7, #8
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	463b      	mov	r3, r7
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	460b      	mov	r3, r1
 80012e8:	491c      	ldr	r1, [pc, #112]	@ (800135c <receive_ip_from_uart+0x9c>)
 80012ea:	481d      	ldr	r0, [pc, #116]	@ (8001360 <receive_ip_from_uart+0xa0>)
 80012ec:	f00c f940 	bl	800d570 <siscanf>
	gWIZNETINFO.ip[0] = ip1;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <receive_ip_from_uart+0xa4>)
 80012f6:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1] = ip2;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <receive_ip_from_uart+0xa4>)
 80012fe:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[2] = ip3;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <receive_ip_from_uart+0xa4>)
 8001306:	721a      	strb	r2, [r3, #8]
	gWIZNETINFO.ip[3] = ip4;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <receive_ip_from_uart+0xa4>)
 800130e:	725a      	strb	r2, [r3, #9]
	gWIZNETINFO.gw[0] = ip1;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <receive_ip_from_uart+0xa4>)
 8001316:	739a      	strb	r2, [r3, #14]
	gWIZNETINFO.gw[1] = ip2;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <receive_ip_from_uart+0xa4>)
 800131e:	73da      	strb	r2, [r3, #15]
	gWIZNETINFO.gw[2] = ip3;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <receive_ip_from_uart+0xa4>)
 8001326:	741a      	strb	r2, [r3, #16]
	gWIZNETINFO.gw[3] = 1;
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <receive_ip_from_uart+0xa4>)
 800132a:	2201      	movs	r2, #1
 800132c:	745a      	strb	r2, [r3, #17]
	WriteToEEPROM(EEPROM_ADRESS_START, gWIZNETINFO);
 800132e:	4c0d      	ldr	r4, [pc, #52]	@ (8001364 <receive_ip_from_uart+0xa4>)
 8001330:	466b      	mov	r3, sp
 8001332:	f104 020c 	add.w	r2, r4, #12
 8001336:	ca07      	ldmia	r2, {r0, r1, r2}
 8001338:	c303      	stmia	r3!, {r0, r1}
 800133a:	801a      	strh	r2, [r3, #0]
 800133c:	3302      	adds	r3, #2
 800133e:	0c12      	lsrs	r2, r2, #16
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001346:	4808      	ldr	r0, [pc, #32]	@ (8001368 <receive_ip_from_uart+0xa8>)
 8001348:	f000 fe38 	bl	8001fbc <WriteToEEPROM>
	HAL_Delay(200);
 800134c:	20c8      	movs	r0, #200	@ 0xc8
 800134e:	f003 f99b 	bl	8004688 <HAL_Delay>

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	08010d88 	.word	0x08010d88
 8001360:	2000040c 	.word	0x2000040c
 8001364:	20000000 	.word	0x20000000
 8001368:	08030000 	.word	0x08030000

0800136c <Set_outputs>:


void Set_outputs (char* str_rx1)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '1')) out1[0] = 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b41      	cmp	r3, #65	@ 0x41
 800137a:	d111      	bne.n	80013a0 <Set_outputs+0x34>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b4d      	cmp	r3, #77	@ 0x4d
 8001384:	d10c      	bne.n	80013a0 <Set_outputs+0x34>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3302      	adds	r3, #2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b31      	cmp	r3, #49	@ 0x31
 800138e:	d107      	bne.n	80013a0 <Set_outputs+0x34>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3303      	adds	r3, #3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b31      	cmp	r3, #49	@ 0x31
 8001398:	d102      	bne.n	80013a0 <Set_outputs+0x34>
 800139a:	4b86      	ldr	r3, [pc, #536]	@ (80015b4 <Set_outputs+0x248>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '0')) out1[0] = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b41      	cmp	r3, #65	@ 0x41
 80013a6:	d111      	bne.n	80013cc <Set_outputs+0x60>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b4d      	cmp	r3, #77	@ 0x4d
 80013b0:	d10c      	bne.n	80013cc <Set_outputs+0x60>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3302      	adds	r3, #2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b31      	cmp	r3, #49	@ 0x31
 80013ba:	d107      	bne.n	80013cc <Set_outputs+0x60>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3303      	adds	r3, #3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b30      	cmp	r3, #48	@ 0x30
 80013c4:	d102      	bne.n	80013cc <Set_outputs+0x60>
 80013c6:	4b7b      	ldr	r3, [pc, #492]	@ (80015b4 <Set_outputs+0x248>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '1')) out1[1] = 1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b41      	cmp	r3, #65	@ 0x41
 80013d2:	d111      	bne.n	80013f8 <Set_outputs+0x8c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b4d      	cmp	r3, #77	@ 0x4d
 80013dc:	d10c      	bne.n	80013f8 <Set_outputs+0x8c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3302      	adds	r3, #2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b31      	cmp	r3, #49	@ 0x31
 80013e6:	d107      	bne.n	80013f8 <Set_outputs+0x8c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b31      	cmp	r3, #49	@ 0x31
 80013f0:	d102      	bne.n	80013f8 <Set_outputs+0x8c>
 80013f2:	4b70      	ldr	r3, [pc, #448]	@ (80015b4 <Set_outputs+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '0')) out1[1] = 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b41      	cmp	r3, #65	@ 0x41
 80013fe:	d111      	bne.n	8001424 <Set_outputs+0xb8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b4d      	cmp	r3, #77	@ 0x4d
 8001408:	d10c      	bne.n	8001424 <Set_outputs+0xb8>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3302      	adds	r3, #2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b31      	cmp	r3, #49	@ 0x31
 8001412:	d107      	bne.n	8001424 <Set_outputs+0xb8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b30      	cmp	r3, #48	@ 0x30
 800141c:	d102      	bne.n	8001424 <Set_outputs+0xb8>
 800141e:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <Set_outputs+0x248>)
 8001420:	2200      	movs	r2, #0
 8001422:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '1')) out1[2] = 1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b41      	cmp	r3, #65	@ 0x41
 800142a:	d111      	bne.n	8001450 <Set_outputs+0xe4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b4d      	cmp	r3, #77	@ 0x4d
 8001434:	d10c      	bne.n	8001450 <Set_outputs+0xe4>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3302      	adds	r3, #2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b31      	cmp	r3, #49	@ 0x31
 800143e:	d107      	bne.n	8001450 <Set_outputs+0xe4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3305      	adds	r3, #5
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b31      	cmp	r3, #49	@ 0x31
 8001448:	d102      	bne.n	8001450 <Set_outputs+0xe4>
 800144a:	4b5a      	ldr	r3, [pc, #360]	@ (80015b4 <Set_outputs+0x248>)
 800144c:	2201      	movs	r2, #1
 800144e:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '0')) out1[2] = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b41      	cmp	r3, #65	@ 0x41
 8001456:	d111      	bne.n	800147c <Set_outputs+0x110>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3301      	adds	r3, #1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001460:	d10c      	bne.n	800147c <Set_outputs+0x110>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3302      	adds	r3, #2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b31      	cmp	r3, #49	@ 0x31
 800146a:	d107      	bne.n	800147c <Set_outputs+0x110>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3305      	adds	r3, #5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b30      	cmp	r3, #48	@ 0x30
 8001474:	d102      	bne.n	800147c <Set_outputs+0x110>
 8001476:	4b4f      	ldr	r3, [pc, #316]	@ (80015b4 <Set_outputs+0x248>)
 8001478:	2200      	movs	r2, #0
 800147a:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '1')) out1[3] = 1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b41      	cmp	r3, #65	@ 0x41
 8001482:	d111      	bne.n	80014a8 <Set_outputs+0x13c>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b4d      	cmp	r3, #77	@ 0x4d
 800148c:	d10c      	bne.n	80014a8 <Set_outputs+0x13c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3302      	adds	r3, #2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b31      	cmp	r3, #49	@ 0x31
 8001496:	d107      	bne.n	80014a8 <Set_outputs+0x13c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3306      	adds	r3, #6
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b31      	cmp	r3, #49	@ 0x31
 80014a0:	d102      	bne.n	80014a8 <Set_outputs+0x13c>
 80014a2:	4b44      	ldr	r3, [pc, #272]	@ (80015b4 <Set_outputs+0x248>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '0')) out1[3] = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b41      	cmp	r3, #65	@ 0x41
 80014ae:	d111      	bne.n	80014d4 <Set_outputs+0x168>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b4d      	cmp	r3, #77	@ 0x4d
 80014b8:	d10c      	bne.n	80014d4 <Set_outputs+0x168>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3302      	adds	r3, #2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b31      	cmp	r3, #49	@ 0x31
 80014c2:	d107      	bne.n	80014d4 <Set_outputs+0x168>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3306      	adds	r3, #6
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b30      	cmp	r3, #48	@ 0x30
 80014cc:	d102      	bne.n	80014d4 <Set_outputs+0x168>
 80014ce:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <Set_outputs+0x248>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '1')) out1[4] = 1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b41      	cmp	r3, #65	@ 0x41
 80014da:	d111      	bne.n	8001500 <Set_outputs+0x194>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b4d      	cmp	r3, #77	@ 0x4d
 80014e4:	d10c      	bne.n	8001500 <Set_outputs+0x194>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3302      	adds	r3, #2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b31      	cmp	r3, #49	@ 0x31
 80014ee:	d107      	bne.n	8001500 <Set_outputs+0x194>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3307      	adds	r3, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b31      	cmp	r3, #49	@ 0x31
 80014f8:	d102      	bne.n	8001500 <Set_outputs+0x194>
 80014fa:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <Set_outputs+0x248>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '0')) out1[4] = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b41      	cmp	r3, #65	@ 0x41
 8001506:	d111      	bne.n	800152c <Set_outputs+0x1c0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001510:	d10c      	bne.n	800152c <Set_outputs+0x1c0>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3302      	adds	r3, #2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b31      	cmp	r3, #49	@ 0x31
 800151a:	d107      	bne.n	800152c <Set_outputs+0x1c0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3307      	adds	r3, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b30      	cmp	r3, #48	@ 0x30
 8001524:	d102      	bne.n	800152c <Set_outputs+0x1c0>
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <Set_outputs+0x248>)
 8001528:	2200      	movs	r2, #0
 800152a:	711a      	strb	r2, [r3, #4]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '1')) out1[5] = 1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b41      	cmp	r3, #65	@ 0x41
 8001532:	d111      	bne.n	8001558 <Set_outputs+0x1ec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b4d      	cmp	r3, #77	@ 0x4d
 800153c:	d10c      	bne.n	8001558 <Set_outputs+0x1ec>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3302      	adds	r3, #2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b31      	cmp	r3, #49	@ 0x31
 8001546:	d107      	bne.n	8001558 <Set_outputs+0x1ec>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3308      	adds	r3, #8
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b31      	cmp	r3, #49	@ 0x31
 8001550:	d102      	bne.n	8001558 <Set_outputs+0x1ec>
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <Set_outputs+0x248>)
 8001554:	2201      	movs	r2, #1
 8001556:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '0')) out1[5] = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b41      	cmp	r3, #65	@ 0x41
 800155e:	d111      	bne.n	8001584 <Set_outputs+0x218>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b4d      	cmp	r3, #77	@ 0x4d
 8001568:	d10c      	bne.n	8001584 <Set_outputs+0x218>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3302      	adds	r3, #2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b31      	cmp	r3, #49	@ 0x31
 8001572:	d107      	bne.n	8001584 <Set_outputs+0x218>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3308      	adds	r3, #8
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b30      	cmp	r3, #48	@ 0x30
 800157c:	d102      	bne.n	8001584 <Set_outputs+0x218>
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <Set_outputs+0x248>)
 8001580:	2200      	movs	r2, #0
 8001582:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '1')) out1[6] = 1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b41      	cmp	r3, #65	@ 0x41
 800158a:	d115      	bne.n	80015b8 <Set_outputs+0x24c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b4d      	cmp	r3, #77	@ 0x4d
 8001594:	d110      	bne.n	80015b8 <Set_outputs+0x24c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3302      	adds	r3, #2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b31      	cmp	r3, #49	@ 0x31
 800159e:	d10b      	bne.n	80015b8 <Set_outputs+0x24c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3309      	adds	r3, #9
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b31      	cmp	r3, #49	@ 0x31
 80015a8:	d106      	bne.n	80015b8 <Set_outputs+0x24c>
 80015aa:	4b02      	ldr	r3, [pc, #8]	@ (80015b4 <Set_outputs+0x248>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	719a      	strb	r2, [r3, #6]
 80015b0:	e002      	b.n	80015b8 <Set_outputs+0x24c>
 80015b2:	bf00      	nop
 80015b4:	20000428 	.word	0x20000428
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '0')) out1[6] = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b41      	cmp	r3, #65	@ 0x41
 80015be:	d111      	bne.n	80015e4 <Set_outputs+0x278>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3301      	adds	r3, #1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80015c8:	d10c      	bne.n	80015e4 <Set_outputs+0x278>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3302      	adds	r3, #2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b31      	cmp	r3, #49	@ 0x31
 80015d2:	d107      	bne.n	80015e4 <Set_outputs+0x278>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3309      	adds	r3, #9
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b30      	cmp	r3, #48	@ 0x30
 80015dc:	d102      	bne.n	80015e4 <Set_outputs+0x278>
 80015de:	4b86      	ldr	r3, [pc, #536]	@ (80017f8 <Set_outputs+0x48c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '1')) out1[7] = 1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b41      	cmp	r3, #65	@ 0x41
 80015ea:	d111      	bne.n	8001610 <Set_outputs+0x2a4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3301      	adds	r3, #1
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b4d      	cmp	r3, #77	@ 0x4d
 80015f4:	d10c      	bne.n	8001610 <Set_outputs+0x2a4>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3302      	adds	r3, #2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b31      	cmp	r3, #49	@ 0x31
 80015fe:	d107      	bne.n	8001610 <Set_outputs+0x2a4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	330a      	adds	r3, #10
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b31      	cmp	r3, #49	@ 0x31
 8001608:	d102      	bne.n	8001610 <Set_outputs+0x2a4>
 800160a:	4b7b      	ldr	r3, [pc, #492]	@ (80017f8 <Set_outputs+0x48c>)
 800160c:	2201      	movs	r2, #1
 800160e:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '0')) out1[7] = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b41      	cmp	r3, #65	@ 0x41
 8001616:	d111      	bne.n	800163c <Set_outputs+0x2d0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001620:	d10c      	bne.n	800163c <Set_outputs+0x2d0>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3302      	adds	r3, #2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b31      	cmp	r3, #49	@ 0x31
 800162a:	d107      	bne.n	800163c <Set_outputs+0x2d0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	330a      	adds	r3, #10
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b30      	cmp	r3, #48	@ 0x30
 8001634:	d102      	bne.n	800163c <Set_outputs+0x2d0>
 8001636:	4b70      	ldr	r3, [pc, #448]	@ (80017f8 <Set_outputs+0x48c>)
 8001638:	2200      	movs	r2, #0
 800163a:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '1')) out2[0] = 1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b41      	cmp	r3, #65	@ 0x41
 8001642:	d111      	bne.n	8001668 <Set_outputs+0x2fc>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b4d      	cmp	r3, #77	@ 0x4d
 800164c:	d10c      	bne.n	8001668 <Set_outputs+0x2fc>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3302      	adds	r3, #2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b31      	cmp	r3, #49	@ 0x31
 8001656:	d107      	bne.n	8001668 <Set_outputs+0x2fc>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	330b      	adds	r3, #11
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b31      	cmp	r3, #49	@ 0x31
 8001660:	d102      	bne.n	8001668 <Set_outputs+0x2fc>
 8001662:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <Set_outputs+0x490>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '0')) out2[0] = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b41      	cmp	r3, #65	@ 0x41
 800166e:	d111      	bne.n	8001694 <Set_outputs+0x328>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b4d      	cmp	r3, #77	@ 0x4d
 8001678:	d10c      	bne.n	8001694 <Set_outputs+0x328>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3302      	adds	r3, #2
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b31      	cmp	r3, #49	@ 0x31
 8001682:	d107      	bne.n	8001694 <Set_outputs+0x328>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	330b      	adds	r3, #11
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b30      	cmp	r3, #48	@ 0x30
 800168c:	d102      	bne.n	8001694 <Set_outputs+0x328>
 800168e:	4b5b      	ldr	r3, [pc, #364]	@ (80017fc <Set_outputs+0x490>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '1')) out2[1] = 1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b41      	cmp	r3, #65	@ 0x41
 800169a:	d111      	bne.n	80016c0 <Set_outputs+0x354>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3301      	adds	r3, #1
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b4d      	cmp	r3, #77	@ 0x4d
 80016a4:	d10c      	bne.n	80016c0 <Set_outputs+0x354>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b31      	cmp	r3, #49	@ 0x31
 80016ae:	d107      	bne.n	80016c0 <Set_outputs+0x354>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	330c      	adds	r3, #12
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b31      	cmp	r3, #49	@ 0x31
 80016b8:	d102      	bne.n	80016c0 <Set_outputs+0x354>
 80016ba:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <Set_outputs+0x490>)
 80016bc:	2201      	movs	r2, #1
 80016be:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '0')) out2[1] = 0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b41      	cmp	r3, #65	@ 0x41
 80016c6:	d111      	bne.n	80016ec <Set_outputs+0x380>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b4d      	cmp	r3, #77	@ 0x4d
 80016d0:	d10c      	bne.n	80016ec <Set_outputs+0x380>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3302      	adds	r3, #2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b31      	cmp	r3, #49	@ 0x31
 80016da:	d107      	bne.n	80016ec <Set_outputs+0x380>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	330c      	adds	r3, #12
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b30      	cmp	r3, #48	@ 0x30
 80016e4:	d102      	bne.n	80016ec <Set_outputs+0x380>
 80016e6:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <Set_outputs+0x490>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '1')) out2[2] = 1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b41      	cmp	r3, #65	@ 0x41
 80016f2:	d111      	bne.n	8001718 <Set_outputs+0x3ac>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b4d      	cmp	r3, #77	@ 0x4d
 80016fc:	d10c      	bne.n	8001718 <Set_outputs+0x3ac>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3302      	adds	r3, #2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b31      	cmp	r3, #49	@ 0x31
 8001706:	d107      	bne.n	8001718 <Set_outputs+0x3ac>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	330d      	adds	r3, #13
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b31      	cmp	r3, #49	@ 0x31
 8001710:	d102      	bne.n	8001718 <Set_outputs+0x3ac>
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <Set_outputs+0x490>)
 8001714:	2201      	movs	r2, #1
 8001716:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '0')) out2[2] = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b41      	cmp	r3, #65	@ 0x41
 800171e:	d111      	bne.n	8001744 <Set_outputs+0x3d8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b4d      	cmp	r3, #77	@ 0x4d
 8001728:	d10c      	bne.n	8001744 <Set_outputs+0x3d8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3302      	adds	r3, #2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b31      	cmp	r3, #49	@ 0x31
 8001732:	d107      	bne.n	8001744 <Set_outputs+0x3d8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	330d      	adds	r3, #13
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b30      	cmp	r3, #48	@ 0x30
 800173c:	d102      	bne.n	8001744 <Set_outputs+0x3d8>
 800173e:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <Set_outputs+0x490>)
 8001740:	2200      	movs	r2, #0
 8001742:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '1')) out2[3] = 1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b41      	cmp	r3, #65	@ 0x41
 800174a:	d111      	bne.n	8001770 <Set_outputs+0x404>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3301      	adds	r3, #1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b4d      	cmp	r3, #77	@ 0x4d
 8001754:	d10c      	bne.n	8001770 <Set_outputs+0x404>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3302      	adds	r3, #2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b31      	cmp	r3, #49	@ 0x31
 800175e:	d107      	bne.n	8001770 <Set_outputs+0x404>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	330e      	adds	r3, #14
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b31      	cmp	r3, #49	@ 0x31
 8001768:	d102      	bne.n	8001770 <Set_outputs+0x404>
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <Set_outputs+0x490>)
 800176c:	2201      	movs	r2, #1
 800176e:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '0')) out2[3] = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b41      	cmp	r3, #65	@ 0x41
 8001776:	d111      	bne.n	800179c <Set_outputs+0x430>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001780:	d10c      	bne.n	800179c <Set_outputs+0x430>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3302      	adds	r3, #2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b31      	cmp	r3, #49	@ 0x31
 800178a:	d107      	bne.n	800179c <Set_outputs+0x430>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	330e      	adds	r3, #14
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b30      	cmp	r3, #48	@ 0x30
 8001794:	d102      	bne.n	800179c <Set_outputs+0x430>
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <Set_outputs+0x490>)
 8001798:	2200      	movs	r2, #0
 800179a:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '1')) out2[4] = 1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b41      	cmp	r3, #65	@ 0x41
 80017a2:	d111      	bne.n	80017c8 <Set_outputs+0x45c>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b4d      	cmp	r3, #77	@ 0x4d
 80017ac:	d10c      	bne.n	80017c8 <Set_outputs+0x45c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3302      	adds	r3, #2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b31      	cmp	r3, #49	@ 0x31
 80017b6:	d107      	bne.n	80017c8 <Set_outputs+0x45c>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	330f      	adds	r3, #15
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b31      	cmp	r3, #49	@ 0x31
 80017c0:	d102      	bne.n	80017c8 <Set_outputs+0x45c>
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <Set_outputs+0x490>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '0')) out2[4] = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b41      	cmp	r3, #65	@ 0x41
 80017ce:	d117      	bne.n	8001800 <Set_outputs+0x494>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b4d      	cmp	r3, #77	@ 0x4d
 80017d8:	d112      	bne.n	8001800 <Set_outputs+0x494>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3302      	adds	r3, #2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b31      	cmp	r3, #49	@ 0x31
 80017e2:	d10d      	bne.n	8001800 <Set_outputs+0x494>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	330f      	adds	r3, #15
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b30      	cmp	r3, #48	@ 0x30
 80017ec:	d108      	bne.n	8001800 <Set_outputs+0x494>
 80017ee:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <Set_outputs+0x490>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	711a      	strb	r2, [r3, #4]
 80017f4:	e004      	b.n	8001800 <Set_outputs+0x494>
 80017f6:	bf00      	nop
 80017f8:	20000428 	.word	0x20000428
 80017fc:	20000430 	.word	0x20000430

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '1')) out2[5] = 1;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b41      	cmp	r3, #65	@ 0x41
 8001806:	d111      	bne.n	800182c <Set_outputs+0x4c0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001810:	d10c      	bne.n	800182c <Set_outputs+0x4c0>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3302      	adds	r3, #2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b31      	cmp	r3, #49	@ 0x31
 800181a:	d107      	bne.n	800182c <Set_outputs+0x4c0>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3310      	adds	r3, #16
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b31      	cmp	r3, #49	@ 0x31
 8001824:	d102      	bne.n	800182c <Set_outputs+0x4c0>
 8001826:	4b99      	ldr	r3, [pc, #612]	@ (8001a8c <Set_outputs+0x720>)
 8001828:	2201      	movs	r2, #1
 800182a:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '0')) out2[5] = 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b41      	cmp	r3, #65	@ 0x41
 8001832:	d111      	bne.n	8001858 <Set_outputs+0x4ec>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b4d      	cmp	r3, #77	@ 0x4d
 800183c:	d10c      	bne.n	8001858 <Set_outputs+0x4ec>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3302      	adds	r3, #2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b31      	cmp	r3, #49	@ 0x31
 8001846:	d107      	bne.n	8001858 <Set_outputs+0x4ec>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3310      	adds	r3, #16
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b30      	cmp	r3, #48	@ 0x30
 8001850:	d102      	bne.n	8001858 <Set_outputs+0x4ec>
 8001852:	4b8e      	ldr	r3, [pc, #568]	@ (8001a8c <Set_outputs+0x720>)
 8001854:	2200      	movs	r2, #0
 8001856:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '1')) out2[6] = 1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b41      	cmp	r3, #65	@ 0x41
 800185e:	d111      	bne.n	8001884 <Set_outputs+0x518>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b4d      	cmp	r3, #77	@ 0x4d
 8001868:	d10c      	bne.n	8001884 <Set_outputs+0x518>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3302      	adds	r3, #2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b31      	cmp	r3, #49	@ 0x31
 8001872:	d107      	bne.n	8001884 <Set_outputs+0x518>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3311      	adds	r3, #17
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b31      	cmp	r3, #49	@ 0x31
 800187c:	d102      	bne.n	8001884 <Set_outputs+0x518>
 800187e:	4b83      	ldr	r3, [pc, #524]	@ (8001a8c <Set_outputs+0x720>)
 8001880:	2201      	movs	r2, #1
 8001882:	719a      	strb	r2, [r3, #6]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '0')) out2[6] = 0;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b41      	cmp	r3, #65	@ 0x41
 800188a:	d111      	bne.n	80018b0 <Set_outputs+0x544>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3301      	adds	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b4d      	cmp	r3, #77	@ 0x4d
 8001894:	d10c      	bne.n	80018b0 <Set_outputs+0x544>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3302      	adds	r3, #2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b31      	cmp	r3, #49	@ 0x31
 800189e:	d107      	bne.n	80018b0 <Set_outputs+0x544>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3311      	adds	r3, #17
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b30      	cmp	r3, #48	@ 0x30
 80018a8:	d102      	bne.n	80018b0 <Set_outputs+0x544>
 80018aa:	4b78      	ldr	r3, [pc, #480]	@ (8001a8c <Set_outputs+0x720>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '1')) out2[7] = 1;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b41      	cmp	r3, #65	@ 0x41
 80018b6:	d111      	bne.n	80018dc <Set_outputs+0x570>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b4d      	cmp	r3, #77	@ 0x4d
 80018c0:	d10c      	bne.n	80018dc <Set_outputs+0x570>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3302      	adds	r3, #2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b31      	cmp	r3, #49	@ 0x31
 80018ca:	d107      	bne.n	80018dc <Set_outputs+0x570>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3312      	adds	r3, #18
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b31      	cmp	r3, #49	@ 0x31
 80018d4:	d102      	bne.n	80018dc <Set_outputs+0x570>
 80018d6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a8c <Set_outputs+0x720>)
 80018d8:	2201      	movs	r2, #1
 80018da:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '0')) out2[7] = 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b41      	cmp	r3, #65	@ 0x41
 80018e2:	d111      	bne.n	8001908 <Set_outputs+0x59c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b4d      	cmp	r3, #77	@ 0x4d
 80018ec:	d10c      	bne.n	8001908 <Set_outputs+0x59c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b31      	cmp	r3, #49	@ 0x31
 80018f6:	d107      	bne.n	8001908 <Set_outputs+0x59c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3312      	adds	r3, #18
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b30      	cmp	r3, #48	@ 0x30
 8001900:	d102      	bne.n	8001908 <Set_outputs+0x59c>
 8001902:	4b62      	ldr	r3, [pc, #392]	@ (8001a8c <Set_outputs+0x720>)
 8001904:	2200      	movs	r2, #0
 8001906:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(flag_ok ==1)){ USART1_Send_String ("OK"); flag_ok=0;}
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b41      	cmp	r3, #65	@ 0x41
 800190e:	d10e      	bne.n	800192e <Set_outputs+0x5c2>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b4d      	cmp	r3, #77	@ 0x4d
 8001918:	d109      	bne.n	800192e <Set_outputs+0x5c2>
 800191a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <Set_outputs+0x724>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <Set_outputs+0x5c2>
 8001922:	485c      	ldr	r0, [pc, #368]	@ (8001a94 <Set_outputs+0x728>)
 8001924:	f000 fb2e 	bl	8001f84 <USART1_Send_String>
 8001928:	4b59      	ldr	r3, [pc, #356]	@ (8001a90 <Set_outputs+0x724>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]

		if (out1[0] ==1) LL_GPIO_SetOutputPin(OUT1_GPIO_Port, OUT1_Pin); else LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 800192e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a98 <Set_outputs+0x72c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d104      	bne.n	8001940 <Set_outputs+0x5d4>
 8001936:	2101      	movs	r1, #1
 8001938:	4858      	ldr	r0, [pc, #352]	@ (8001a9c <Set_outputs+0x730>)
 800193a:	f7ff fc35 	bl	80011a8 <LL_GPIO_SetOutputPin>
 800193e:	e003      	b.n	8001948 <Set_outputs+0x5dc>
 8001940:	2101      	movs	r1, #1
 8001942:	4856      	ldr	r0, [pc, #344]	@ (8001a9c <Set_outputs+0x730>)
 8001944:	f7ff fc3e 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[1] ==1) LL_GPIO_SetOutputPin(OUT2_GPIO_Port, OUT2_Pin); else LL_GPIO_ResetOutputPin(OUT2_GPIO_Port, OUT2_Pin);
 8001948:	4b53      	ldr	r3, [pc, #332]	@ (8001a98 <Set_outputs+0x72c>)
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d104      	bne.n	800195a <Set_outputs+0x5ee>
 8001950:	2102      	movs	r1, #2
 8001952:	4852      	ldr	r0, [pc, #328]	@ (8001a9c <Set_outputs+0x730>)
 8001954:	f7ff fc28 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001958:	e003      	b.n	8001962 <Set_outputs+0x5f6>
 800195a:	2102      	movs	r1, #2
 800195c:	484f      	ldr	r0, [pc, #316]	@ (8001a9c <Set_outputs+0x730>)
 800195e:	f7ff fc31 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[2] ==1) LL_GPIO_SetOutputPin(OUT3_GPIO_Port, OUT3_Pin); else LL_GPIO_ResetOutputPin(OUT3_GPIO_Port, OUT3_Pin);
 8001962:	4b4d      	ldr	r3, [pc, #308]	@ (8001a98 <Set_outputs+0x72c>)
 8001964:	789b      	ldrb	r3, [r3, #2]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d104      	bne.n	8001974 <Set_outputs+0x608>
 800196a:	2104      	movs	r1, #4
 800196c:	484b      	ldr	r0, [pc, #300]	@ (8001a9c <Set_outputs+0x730>)
 800196e:	f7ff fc1b 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001972:	e003      	b.n	800197c <Set_outputs+0x610>
 8001974:	2104      	movs	r1, #4
 8001976:	4849      	ldr	r0, [pc, #292]	@ (8001a9c <Set_outputs+0x730>)
 8001978:	f7ff fc24 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[3] ==1) LL_GPIO_SetOutputPin(OUT4_GPIO_Port, OUT4_Pin); else LL_GPIO_ResetOutputPin(OUT4_GPIO_Port, OUT4_Pin);
 800197c:	4b46      	ldr	r3, [pc, #280]	@ (8001a98 <Set_outputs+0x72c>)
 800197e:	78db      	ldrb	r3, [r3, #3]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d104      	bne.n	800198e <Set_outputs+0x622>
 8001984:	2108      	movs	r1, #8
 8001986:	4845      	ldr	r0, [pc, #276]	@ (8001a9c <Set_outputs+0x730>)
 8001988:	f7ff fc0e 	bl	80011a8 <LL_GPIO_SetOutputPin>
 800198c:	e003      	b.n	8001996 <Set_outputs+0x62a>
 800198e:	2108      	movs	r1, #8
 8001990:	4842      	ldr	r0, [pc, #264]	@ (8001a9c <Set_outputs+0x730>)
 8001992:	f7ff fc17 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[4] ==1) LL_GPIO_SetOutputPin(OUT5_GPIO_Port, OUT5_Pin); else LL_GPIO_ResetOutputPin(OUT5_GPIO_Port, OUT5_Pin);
 8001996:	4b40      	ldr	r3, [pc, #256]	@ (8001a98 <Set_outputs+0x72c>)
 8001998:	791b      	ldrb	r3, [r3, #4]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d104      	bne.n	80019a8 <Set_outputs+0x63c>
 800199e:	2110      	movs	r1, #16
 80019a0:	483e      	ldr	r0, [pc, #248]	@ (8001a9c <Set_outputs+0x730>)
 80019a2:	f7ff fc01 	bl	80011a8 <LL_GPIO_SetOutputPin>
 80019a6:	e003      	b.n	80019b0 <Set_outputs+0x644>
 80019a8:	2110      	movs	r1, #16
 80019aa:	483c      	ldr	r0, [pc, #240]	@ (8001a9c <Set_outputs+0x730>)
 80019ac:	f7ff fc0a 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[5] ==1) LL_GPIO_SetOutputPin(OUT6_GPIO_Port, OUT6_Pin); else LL_GPIO_ResetOutputPin(OUT6_GPIO_Port, OUT6_Pin);
 80019b0:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <Set_outputs+0x72c>)
 80019b2:	795b      	ldrb	r3, [r3, #5]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d104      	bne.n	80019c2 <Set_outputs+0x656>
 80019b8:	2120      	movs	r1, #32
 80019ba:	4838      	ldr	r0, [pc, #224]	@ (8001a9c <Set_outputs+0x730>)
 80019bc:	f7ff fbf4 	bl	80011a8 <LL_GPIO_SetOutputPin>
 80019c0:	e003      	b.n	80019ca <Set_outputs+0x65e>
 80019c2:	2120      	movs	r1, #32
 80019c4:	4835      	ldr	r0, [pc, #212]	@ (8001a9c <Set_outputs+0x730>)
 80019c6:	f7ff fbfd 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[6] ==1) LL_GPIO_SetOutputPin(OUT7_GPIO_Port, OUT7_Pin); else LL_GPIO_ResetOutputPin(OUT7_GPIO_Port, OUT7_Pin);
 80019ca:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <Set_outputs+0x72c>)
 80019cc:	799b      	ldrb	r3, [r3, #6]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d104      	bne.n	80019dc <Set_outputs+0x670>
 80019d2:	2140      	movs	r1, #64	@ 0x40
 80019d4:	4831      	ldr	r0, [pc, #196]	@ (8001a9c <Set_outputs+0x730>)
 80019d6:	f7ff fbe7 	bl	80011a8 <LL_GPIO_SetOutputPin>
 80019da:	e003      	b.n	80019e4 <Set_outputs+0x678>
 80019dc:	2140      	movs	r1, #64	@ 0x40
 80019de:	482f      	ldr	r0, [pc, #188]	@ (8001a9c <Set_outputs+0x730>)
 80019e0:	f7ff fbf0 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out1[7] ==1) LL_GPIO_SetOutputPin(OUT8_GPIO_Port, OUT8_Pin); else LL_GPIO_ResetOutputPin(OUT8_GPIO_Port, OUT8_Pin);
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <Set_outputs+0x72c>)
 80019e6:	79db      	ldrb	r3, [r3, #7]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d104      	bne.n	80019f6 <Set_outputs+0x68a>
 80019ec:	2180      	movs	r1, #128	@ 0x80
 80019ee:	482b      	ldr	r0, [pc, #172]	@ (8001a9c <Set_outputs+0x730>)
 80019f0:	f7ff fbda 	bl	80011a8 <LL_GPIO_SetOutputPin>
 80019f4:	e003      	b.n	80019fe <Set_outputs+0x692>
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	4828      	ldr	r0, [pc, #160]	@ (8001a9c <Set_outputs+0x730>)
 80019fa:	f7ff fbe3 	bl	80011c4 <LL_GPIO_ResetOutputPin>

		if (out2[0] ==1) LL_GPIO_SetOutputPin(OUT9_GPIO_Port, OUT9_Pin); else LL_GPIO_ResetOutputPin(OUT9_GPIO_Port, OUT9_Pin);
 80019fe:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <Set_outputs+0x720>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <Set_outputs+0x6a6>
 8001a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0a:	4824      	ldr	r0, [pc, #144]	@ (8001a9c <Set_outputs+0x730>)
 8001a0c:	f7ff fbcc 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001a10:	e004      	b.n	8001a1c <Set_outputs+0x6b0>
 8001a12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a16:	4821      	ldr	r0, [pc, #132]	@ (8001a9c <Set_outputs+0x730>)
 8001a18:	f7ff fbd4 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[1] ==1) LL_GPIO_SetOutputPin(OUT10_GPIO_Port, OUT10_Pin); else LL_GPIO_ResetOutputPin(OUT10_GPIO_Port, OUT10_Pin);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <Set_outputs+0x720>)
 8001a1e:	785b      	ldrb	r3, [r3, #1]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <Set_outputs+0x6c4>
 8001a24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a28:	481c      	ldr	r0, [pc, #112]	@ (8001a9c <Set_outputs+0x730>)
 8001a2a:	f7ff fbbd 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001a2e:	e004      	b.n	8001a3a <Set_outputs+0x6ce>
 8001a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a34:	4819      	ldr	r0, [pc, #100]	@ (8001a9c <Set_outputs+0x730>)
 8001a36:	f7ff fbc5 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[2] ==1) LL_GPIO_SetOutputPin(OUT11_GPIO_Port, OUT11_Pin); else LL_GPIO_ResetOutputPin(OUT11_GPIO_Port, OUT11_Pin);
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <Set_outputs+0x720>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d105      	bne.n	8001a4e <Set_outputs+0x6e2>
 8001a42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a46:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <Set_outputs+0x730>)
 8001a48:	f7ff fbae 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001a4c:	e004      	b.n	8001a58 <Set_outputs+0x6ec>
 8001a4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a52:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <Set_outputs+0x730>)
 8001a54:	f7ff fbb6 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[3] ==1) LL_GPIO_SetOutputPin(OUT12_GPIO_Port, OUT12_Pin); else LL_GPIO_ResetOutputPin(OUT12_GPIO_Port, OUT12_Pin);
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <Set_outputs+0x720>)
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <Set_outputs+0x700>
 8001a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a64:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <Set_outputs+0x730>)
 8001a66:	f7ff fb9f 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001a6a:	e004      	b.n	8001a76 <Set_outputs+0x70a>
 8001a6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a70:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <Set_outputs+0x730>)
 8001a72:	f7ff fba7 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[4] ==1) LL_GPIO_SetOutputPin(OUT13_GPIO_Port, OUT13_Pin); else LL_GPIO_ResetOutputPin(OUT13_GPIO_Port, OUT13_Pin);
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <Set_outputs+0x720>)
 8001a78:	791b      	ldrb	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d110      	bne.n	8001aa0 <Set_outputs+0x734>
 8001a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <Set_outputs+0x730>)
 8001a84:	f7ff fb90 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001a88:	e00f      	b.n	8001aaa <Set_outputs+0x73e>
 8001a8a:	bf00      	nop
 8001a8c:	20000430 	.word	0x20000430
 8001a90:	20000425 	.word	0x20000425
 8001a94:	08010d98 	.word	0x08010d98
 8001a98:	20000428 	.word	0x20000428
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aa4:	4819      	ldr	r0, [pc, #100]	@ (8001b0c <Set_outputs+0x7a0>)
 8001aa6:	f7ff fb8d 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[5] ==1) LL_GPIO_SetOutputPin(OUT14_GPIO_Port, OUT14_Pin); else LL_GPIO_ResetOutputPin(OUT14_GPIO_Port, OUT14_Pin);
 8001aaa:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <Set_outputs+0x7a4>)
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <Set_outputs+0x752>
 8001ab2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ab6:	4815      	ldr	r0, [pc, #84]	@ (8001b0c <Set_outputs+0x7a0>)
 8001ab8:	f7ff fb76 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001abc:	e004      	b.n	8001ac8 <Set_outputs+0x75c>
 8001abe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ac2:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <Set_outputs+0x7a0>)
 8001ac4:	f7ff fb7e 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[6] ==1) LL_GPIO_SetOutputPin(OUT15_GPIO_Port, OUT15_Pin); else LL_GPIO_ResetOutputPin(OUT15_GPIO_Port, OUT15_Pin);
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <Set_outputs+0x7a4>)
 8001aca:	799b      	ldrb	r3, [r3, #6]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <Set_outputs+0x770>
 8001ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <Set_outputs+0x7a0>)
 8001ad6:	f7ff fb67 	bl	80011a8 <LL_GPIO_SetOutputPin>
 8001ada:	e004      	b.n	8001ae6 <Set_outputs+0x77a>
 8001adc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae0:	480a      	ldr	r0, [pc, #40]	@ (8001b0c <Set_outputs+0x7a0>)
 8001ae2:	f7ff fb6f 	bl	80011c4 <LL_GPIO_ResetOutputPin>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <Set_outputs+0x7a4>)
 8001ae8:	79db      	ldrb	r3, [r3, #7]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d105      	bne.n	8001afa <Set_outputs+0x78e>
 8001aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af2:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <Set_outputs+0x7a8>)
 8001af4:	f7ff fb58 	bl	80011a8 <LL_GPIO_SetOutputPin>

}
 8001af8:	e004      	b.n	8001b04 <Set_outputs+0x798>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 8001afa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <Set_outputs+0x7a8>)
 8001b00:	f7ff fb60 	bl	80011c4 <LL_GPIO_ResetOutputPin>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	20000430 	.word	0x20000430
 8001b14:	40020000 	.word	0x40020000

08001b18 <UART_Printf>:





void UART_Printf(const char* fmt, ...) {
 8001b18:	b40f      	push	{r0, r1, r2, r3}
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b0c2      	sub	sp, #264	@ 0x108
 8001b1e:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001b20:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b2c:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b36:	f107 0008 	add.w	r0, r7, #8
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001b40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b44:	f00b fdae 	bl	800d6a4 <vsniprintf>
    CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fb47 	bl	80001e0 <strlen>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00a fdbf 	bl	800c6e0 <CDC_Transmit_FS>
    va_end(args);
}
 8001b62:	bf00      	nop
 8001b64:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b6e:	b004      	add	sp, #16
 8001b70:	4770      	bx	lr
	...

08001b74 <BuildStartPage>:
		"<h1>Ethernet remote control console</h1>"
		"<p><a href='https://ra0sms.com/ethernet-remote-control/'>Help information (in Russian)</a></p>"
		"<p><a href='/status'>Output status</a></p>";


void BuildStartPage (char* buf){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	strcpy(buf,http_200_header);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <BuildStartPage+0x48>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	4611      	mov	r1, r2
 8001b84:	2352      	movs	r3, #82	@ 0x52
 8001b86:	461a      	mov	r2, r3
 8001b88:	f00b fe4f 	bl	800d82a <memcpy>
	strcat(buf, (char *)startPage);
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <BuildStartPage+0x4c>)
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f00b fdae 	bl	800d6f0 <strcat>
	strcat(buf, (char *)SVG);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe fb23 	bl	80001e0 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <BuildStartPage+0x50>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	f241 03e5 	movw	r3, #4325	@ 0x10e5
 8001bac:	461a      	mov	r2, r3
 8001bae:	f00b fe3c 	bl	800d82a <memcpy>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08011f70 	.word	0x08011f70
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	08010e88 	.word	0x08010e88

08001bc8 <W5500_Select>:
/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
void W5500_Select(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2110      	movs	r1, #16
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <W5500_Select+0x14>)
 8001bd2:	f003 fa13 	bl	8004ffc <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020000 	.word	0x40020000

08001be0 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2110      	movs	r1, #16
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <W5500_Unselect+0x14>)
 8001bea:	f003 fa07 	bl	8004ffc <HAL_GPIO_WritePin>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <W5500_ReadBuff+0x24>)
 8001c0e:	f005 faed 	bl	80071ec <HAL_SPI_Receive>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20002468 	.word	0x20002468

08001c20 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <W5500_WriteBuff+0x24>)
 8001c36:	f005 f99d 	bl	8006f74 <HAL_SPI_Transmit>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20002468 	.word	0x20002468

08001c48 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	2101      	movs	r1, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ffd0 	bl	8001bf8 <W5500_ReadBuff>
    return byte;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffd5 	bl	8001c20 <W5500_WriteBuff>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <loopback_tcps>:


int32_t loopback_tcps(uint8_t sn, char *buf, uint16_t port) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80bb      	strh	r3, [r7, #4]
	int32_t ret;
	uint32_t size = 0, sentsize = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
	char *url;

	switch (getSn_SR(sn)) {
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 feff 	bl	8003aa8 <WIZCHIP_READ>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b1c      	cmp	r3, #28
 8001cae:	f200 812c 	bhi.w	8001f0a <loopback_tcps+0x28a>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <loopback_tcps+0x38>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001ed9 	.word	0x08001ed9
 8001cbc:	08001f0b 	.word	0x08001f0b
 8001cc0:	08001f0b 	.word	0x08001f0b
 8001cc4:	08001f0b 	.word	0x08001f0b
 8001cc8:	08001f0b 	.word	0x08001f0b
 8001ccc:	08001f0b 	.word	0x08001f0b
 8001cd0:	08001f0b 	.word	0x08001f0b
 8001cd4:	08001f0b 	.word	0x08001f0b
 8001cd8:	08001f0b 	.word	0x08001f0b
 8001cdc:	08001f0b 	.word	0x08001f0b
 8001ce0:	08001f0b 	.word	0x08001f0b
 8001ce4:	08001f0b 	.word	0x08001f0b
 8001ce8:	08001f0b 	.word	0x08001f0b
 8001cec:	08001f0b 	.word	0x08001f0b
 8001cf0:	08001f0b 	.word	0x08001f0b
 8001cf4:	08001f0b 	.word	0x08001f0b
 8001cf8:	08001f0b 	.word	0x08001f0b
 8001cfc:	08001f0b 	.word	0x08001f0b
 8001d00:	08001f0b 	.word	0x08001f0b
 8001d04:	08001eb7 	.word	0x08001eb7
 8001d08:	08001f0b 	.word	0x08001f0b
 8001d0c:	08001f0b 	.word	0x08001f0b
 8001d10:	08001f0b 	.word	0x08001f0b
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001f0b 	.word	0x08001f0b
 8001d1c:	08001f0b 	.word	0x08001f0b
 8001d20:	08001f0b 	.word	0x08001f0b
 8001d24:	08001f0b 	.word	0x08001f0b
 8001d28:	08001e8b 	.word	0x08001e8b
	case SOCK_ESTABLISHED:
		if (getSn_IR(sn) & Sn_IR_CON) {
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	3301      	adds	r3, #1
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 feb5 	bl	8003aa8 <WIZCHIP_READ>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <loopback_tcps+0xe6>
			UART_Printf("%d:Connected\r\n", sn);
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4874      	ldr	r0, [pc, #464]	@ (8001f20 <loopback_tcps+0x2a0>)
 8001d4e:	f7ff fee3 	bl	8001b18 <UART_Printf>
			setSn_IR(sn, Sn_IR_CON);
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	3301      	adds	r3, #1
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 feed 	bl	8003b40 <WIZCHIP_WRITE>
		}
		if ((size = getSn_RX_RSR(sn)) > 0) {
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 f840 	bl	8003dee <getSn_RX_RSR>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80ca 	beq.w	8001f0e <loopback_tcps+0x28e>
			if (size > DATA_BUF_SIZE)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f242 0204 	movw	r2, #8196	@ 0x2004
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d902      	bls.n	8001d8a <loopback_tcps+0x10a>
				size = DATA_BUF_SIZE;
 8001d84:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001d88:	617b      	str	r3, [r7, #20]
			ret = recv(sn, buf, size);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f001 f804 	bl	8002da0 <recv>
 8001d98:	60f8      	str	r0, [r7, #12]
			if (ret <= 0)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dc01      	bgt.n	8001da4 <loopback_tcps+0x124>
				return ret;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	e0b8      	b.n	8001f16 <loopback_tcps+0x296>
			sentsize = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
//=============================================
			if (memcmp(buf, "GET ", 4) == 0) {
 8001da8:	2204      	movs	r2, #4
 8001daa:	495e      	ldr	r1, [pc, #376]	@ (8001f24 <loopback_tcps+0x2a4>)
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f00b fc87 	bl	800d6c0 <memcmp>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d163      	bne.n	8001e80 <loopback_tcps+0x200>
				url = buf + 4;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	60bb      	str	r3, [r7, #8]

				if (memcmp(url, "/status", 7) == 0) {
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4959      	ldr	r1, [pc, #356]	@ (8001f28 <loopback_tcps+0x2a8>)
 8001dc2:	68b8      	ldr	r0, [r7, #8]
 8001dc4:	f00b fc7c 	bl	800d6c0 <memcmp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d104      	bne.n	8001dd8 <loopback_tcps+0x158>
					strcpy(buf, (char *)post_url);
 8001dce:	4957      	ldr	r1, [pc, #348]	@ (8001f2c <loopback_tcps+0x2ac>)
 8001dd0:	6838      	ldr	r0, [r7, #0]
 8001dd2:	f00b fd22 	bl	800d81a <strcpy>
 8001dd6:	e02f      	b.n	8001e38 <loopback_tcps+0x1b8>
				} else if ((memcmp(url, "/ H", 3) == 0)) {
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4955      	ldr	r1, [pc, #340]	@ (8001f30 <loopback_tcps+0x2b0>)
 8001ddc:	68b8      	ldr	r0, [r7, #8]
 8001dde:	f00b fc6f 	bl	800d6c0 <memcmp>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <loopback_tcps+0x170>
					BuildStartPage(buf);
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f7ff fec3 	bl	8001b74 <BuildStartPage>
 8001dee:	e023      	b.n	8001e38 <loopback_tcps+0x1b8>
				} else if (memcmp(url, "/AM1", 4) == 0) {
 8001df0:	2204      	movs	r2, #4
 8001df2:	4950      	ldr	r1, [pc, #320]	@ (8001f34 <loopback_tcps+0x2b4>)
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f00b fc63 	bl	800d6c0 <memcmp>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d113      	bne.n	8001e28 <loopback_tcps+0x1a8>
					get_url = url + 1;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <loopback_tcps+0x2b8>)
 8001e06:	6013      	str	r3, [r2, #0]
					strncpy(post_url, (char *)get_url,19);
 8001e08:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <loopback_tcps+0x2b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2213      	movs	r2, #19
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4846      	ldr	r0, [pc, #280]	@ (8001f2c <loopback_tcps+0x2ac>)
 8001e12:	f00b fc7c 	bl	800d70e <strncpy>
					Set_outputs(get_url);
 8001e16:	4b48      	ldr	r3, [pc, #288]	@ (8001f38 <loopback_tcps+0x2b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff faa6 	bl	800136c <Set_outputs>
					BuildStartPage(buf);
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f7ff fea7 	bl	8001b74 <BuildStartPage>
 8001e26:	e007      	b.n	8001e38 <loopback_tcps+0x1b8>
				}else

				{
					strcpy(buf, http_404_header);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4a44      	ldr	r2, [pc, #272]	@ (8001f3c <loopback_tcps+0x2bc>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4611      	mov	r1, r2
 8001e30:	2359      	movs	r3, #89	@ 0x59
 8001e32:	461a      	mov	r2, r3
 8001e34:	f00b fcf9 	bl	800d82a <memcpy>
				}
				//======================================================
				size = strlen(buf);
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f7fe f9d1 	bl	80001e0 <strlen>
 8001e3e:	6178      	str	r0, [r7, #20]
				while (size != sentsize) {
 8001e40:	e01a      	b.n	8001e78 <loopback_tcps+0x1f8>
					ret = send(sn, buf + sentsize, size - sentsize);
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	18d1      	adds	r1, r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 feaa 	bl	8002bb0 <send>
 8001e5c:	60f8      	str	r0, [r7, #12]
					if (ret < 0) {
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da05      	bge.n	8001e70 <loopback_tcps+0x1f0>
						close(sn);
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fd64 	bl	8002934 <close>
						return ret;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	e052      	b.n	8001f16 <loopback_tcps+0x296>
					}
					sentsize += ret;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
				while (size != sentsize) {
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1e0      	bne.n	8001e42 <loopback_tcps+0x1c2>
				}
			}
			disconnect(sn);
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fe1e 	bl	8002ac4 <disconnect>
		}
		break;
 8001e88:	e041      	b.n	8001f0e <loopback_tcps+0x28e>
	case SOCK_CLOSE_WAIT:
		UART_Printf("%d:CloseWait\r\n", sn);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	482c      	ldr	r0, [pc, #176]	@ (8001f40 <loopback_tcps+0x2c0>)
 8001e90:	f7ff fe42 	bl	8001b18 <UART_Printf>
		if ((ret = disconnect(sn)) != SOCK_OK)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fe14 	bl	8002ac4 <disconnect>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <loopback_tcps+0x22a>
			return ret;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	e035      	b.n	8001f16 <loopback_tcps+0x296>
		UART_Printf("%d:Closed\r\n", sn);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4825      	ldr	r0, [pc, #148]	@ (8001f44 <loopback_tcps+0x2c4>)
 8001eb0:	f7ff fe32 	bl	8001b18 <UART_Printf>
		break;
 8001eb4:	e02e      	b.n	8001f14 <loopback_tcps+0x294>
	case SOCK_INIT:
		UART_Printf("%d:Listen, port [%d]\r\n", sn, port);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	88ba      	ldrh	r2, [r7, #4]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4822      	ldr	r0, [pc, #136]	@ (8001f48 <loopback_tcps+0x2c8>)
 8001ebe:	f7ff fe2b 	bl	8001b18 <UART_Printf>
		if ((ret = listen(sn)) != SOCK_OK)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fda3 	bl	8002a10 <listen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d01e      	beq.n	8001f12 <loopback_tcps+0x292>
			return ret;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	e01e      	b.n	8001f16 <loopback_tcps+0x296>
		break;
	case SOCK_CLOSED:
		UART_Printf("%d:LBTStart\r\n", sn);
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4619      	mov	r1, r3
 8001edc:	481b      	ldr	r0, [pc, #108]	@ (8001f4c <loopback_tcps+0x2cc>)
 8001ede:	f7ff fe1b 	bl	8001b18 <UART_Printf>
		if ((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn)
 8001ee2:	88ba      	ldrh	r2, [r7, #4]
 8001ee4:	79f8      	ldrb	r0, [r7, #7]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2101      	movs	r1, #1
 8001eea:	f000 fc0f 	bl	800270c <socket>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <loopback_tcps+0x27e>
			return ret;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	e00b      	b.n	8001f16 <loopback_tcps+0x296>
		UART_Printf("%d:Opened\r\n", sn);
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4813      	ldr	r0, [pc, #76]	@ (8001f50 <loopback_tcps+0x2d0>)
 8001f04:	f7ff fe08 	bl	8001b18 <UART_Printf>
		break;
 8001f08:	e004      	b.n	8001f14 <loopback_tcps+0x294>
	default:
		break;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <loopback_tcps+0x294>
		break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <loopback_tcps+0x294>
		break;
 8001f12:	bf00      	nop
	}
	return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	08010d9c 	.word	0x08010d9c
 8001f24:	08010dac 	.word	0x08010dac
 8001f28:	08010db4 	.word	0x08010db4
 8001f2c:	2000043c 	.word	0x2000043c
 8001f30:	08010dbc 	.word	0x08010dbc
 8001f34:	08010dc0 	.word	0x08010dc0
 8001f38:	20000438 	.word	0x20000438
 8001f3c:	08011fc4 	.word	0x08011fc4
 8001f40:	08010dc8 	.word	0x08010dc8
 8001f44:	08010dd8 	.word	0x08010dd8
 8001f48:	08010de4 	.word	0x08010de4
 8001f4c:	08010dfc 	.word	0x08010dfc
 8001f50:	08010e0c 	.word	0x08010e0c

08001f54 <USART1_Send>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */


void USART1_Send (char chr){
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & USART_SR_TC));
 8001f5e:	bf00      	nop
 8001f60:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <USART1_Send+0x2c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f9      	beq.n	8001f60 <USART1_Send+0xc>
	USART1->DR = chr;
 8001f6c:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <USART1_Send+0x2c>)
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	6053      	str	r3, [r2, #4]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40011000 	.word	0x40011000

08001f84 <USART1_Send_String>:

void USART1_Send_String (char* str){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
	while(str[i])
 8001f90:	e009      	b.n	8001fa6 <USART1_Send_String+0x22>
	USART1_Send (str[i++]);
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	73fa      	strb	r2, [r7, #15]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ffd7 	bl	8001f54 <USART1_Send>
	while(str[i])
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ef      	bne.n	8001f92 <USART1_Send_String+0xe>
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <WriteToEEPROM>:

void WriteToEEPROM (uint32_t address, wiz_NetInfo value)
{
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc2:	b08c      	sub	sp, #48	@ 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001fc8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001fcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     HAL_FLASH_Unlock();
 8001fd0:	f002 fcd6 	bl	8004980 <HAL_FLASH_Unlock>
     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80020d0 <WriteToEEPROM+0x114>)
 8001fd6:	23b3      	movs	r3, #179	@ 0xb3
 8001fd8:	60d3      	str	r3, [r2, #12]
     FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_3);
 8001fda:	2102      	movs	r1, #2
 8001fdc:	2005      	movs	r0, #5
 8001fde:	f002 fe41 	bl	8004c64 <FLASH_Erase_Sector>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address, value.ip[0]);
 8001fe2:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	461c      	mov	r4, r3
 8001fec:	4615      	mov	r5, r2
 8001fee:	4622      	mov	r2, r4
 8001ff0:	462b      	mov	r3, r5
 8001ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f002 fc6f 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+4, value.ip[1]);
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	1d19      	adds	r1, r3, #4
 8001ffe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2200      	movs	r2, #0
 8002006:	4698      	mov	r8, r3
 8002008:	4691      	mov	r9, r2
 800200a:	4642      	mov	r2, r8
 800200c:	464b      	mov	r3, r9
 800200e:	2002      	movs	r0, #2
 8002010:	f002 fc62 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+8, value.ip[2]);
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002016:	f103 0108 	add.w	r1, r3, #8
 800201a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2200      	movs	r2, #0
 8002022:	469a      	mov	sl, r3
 8002024:	4693      	mov	fp, r2
 8002026:	4652      	mov	r2, sl
 8002028:	465b      	mov	r3, fp
 800202a:	2002      	movs	r0, #2
 800202c:	f002 fc54 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+12, value.ip[3]);
 8002030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002032:	f103 010c 	add.w	r1, r3, #12
 8002036:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2200      	movs	r2, #0
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	627a      	str	r2, [r7, #36]	@ 0x24
 8002042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002046:	2002      	movs	r0, #2
 8002048:	f002 fc46 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+16, value.gw[0]);
 800204c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204e:	f103 0110 	add.w	r1, r3, #16
 8002052:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2200      	movs	r2, #0
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	61fa      	str	r2, [r7, #28]
 800205e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002062:	2002      	movs	r0, #2
 8002064:	f002 fc38 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+20, value.gw[1]);
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	f103 0114 	add.w	r1, r3, #20
 800206e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2200      	movs	r2, #0
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	617a      	str	r2, [r7, #20]
 800207a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800207e:	2002      	movs	r0, #2
 8002080:	f002 fc2a 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+24, value.gw[2]);
 8002084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002086:	f103 0118 	add.w	r1, r3, #24
 800208a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2200      	movs	r2, #0
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	60fa      	str	r2, [r7, #12]
 8002096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800209a:	2002      	movs	r0, #2
 800209c:	f002 fc1c 	bl	80048d8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+28, value.gw[3]);
 80020a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a2:	f103 011c 	add.w	r1, r3, #28
 80020a6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020b6:	2002      	movs	r0, #2
 80020b8:	f002 fc0e 	bl	80048d8 <HAL_FLASH_Program>

     HAL_FLASH_Lock();
 80020bc:	f002 fc82 	bl	80049c4 <HAL_FLASH_Lock>
}
 80020c0:	bf00      	nop
 80020c2:	3730      	adds	r7, #48	@ 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ca:	b004      	add	sp, #16
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <ReadSettingsFromEEPROM>:

void ReadSettingsFromEEPROM() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	gWIZNETINFO.ip[0] = ReadFromEEPROM(EEPROM_ADRESS_START);
 80020d8:	481c      	ldr	r0, [pc, #112]	@ (800214c <ReadSettingsFromEEPROM+0x78>)
 80020da:	f000 f849 	bl	8002170 <ReadFromEEPROM>
 80020de:	4603      	mov	r3, r0
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 80020e4:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1] = ReadFromEEPROM(EEPROM_ADRESS_START + 4);
 80020e6:	481b      	ldr	r0, [pc, #108]	@ (8002154 <ReadSettingsFromEEPROM+0x80>)
 80020e8:	f000 f842 	bl	8002170 <ReadFromEEPROM>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 80020f2:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[2] = ReadFromEEPROM(EEPROM_ADRESS_START + 8);
 80020f4:	4818      	ldr	r0, [pc, #96]	@ (8002158 <ReadSettingsFromEEPROM+0x84>)
 80020f6:	f000 f83b 	bl	8002170 <ReadFromEEPROM>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 8002100:	721a      	strb	r2, [r3, #8]
	gWIZNETINFO.ip[3] = ReadFromEEPROM(EEPROM_ADRESS_START + 12);
 8002102:	4816      	ldr	r0, [pc, #88]	@ (800215c <ReadSettingsFromEEPROM+0x88>)
 8002104:	f000 f834 	bl	8002170 <ReadFromEEPROM>
 8002108:	4603      	mov	r3, r0
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 800210e:	725a      	strb	r2, [r3, #9]

	gWIZNETINFO.gw[0] = ReadFromEEPROM(EEPROM_ADRESS_START + 16);
 8002110:	4813      	ldr	r0, [pc, #76]	@ (8002160 <ReadSettingsFromEEPROM+0x8c>)
 8002112:	f000 f82d 	bl	8002170 <ReadFromEEPROM>
 8002116:	4603      	mov	r3, r0
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 800211c:	739a      	strb	r2, [r3, #14]
	gWIZNETINFO.gw[1] = ReadFromEEPROM(EEPROM_ADRESS_START + 20);
 800211e:	4811      	ldr	r0, [pc, #68]	@ (8002164 <ReadSettingsFromEEPROM+0x90>)
 8002120:	f000 f826 	bl	8002170 <ReadFromEEPROM>
 8002124:	4603      	mov	r3, r0
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 800212a:	73da      	strb	r2, [r3, #15]
	gWIZNETINFO.gw[2] = ReadFromEEPROM(EEPROM_ADRESS_START + 24);
 800212c:	480e      	ldr	r0, [pc, #56]	@ (8002168 <ReadSettingsFromEEPROM+0x94>)
 800212e:	f000 f81f 	bl	8002170 <ReadFromEEPROM>
 8002132:	4603      	mov	r3, r0
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 8002138:	741a      	strb	r2, [r3, #16]
	gWIZNETINFO.gw[3] = ReadFromEEPROM(EEPROM_ADRESS_START + 28);
 800213a:	480c      	ldr	r0, [pc, #48]	@ (800216c <ReadSettingsFromEEPROM+0x98>)
 800213c:	f000 f818 	bl	8002170 <ReadFromEEPROM>
 8002140:	4603      	mov	r3, r0
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b02      	ldr	r3, [pc, #8]	@ (8002150 <ReadSettingsFromEEPROM+0x7c>)
 8002146:	745a      	strb	r2, [r3, #17]
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08030000 	.word	0x08030000
 8002150:	20000000 	.word	0x20000000
 8002154:	08030004 	.word	0x08030004
 8002158:	08030008 	.word	0x08030008
 800215c:	0803000c 	.word	0x0803000c
 8002160:	08030010 	.word	0x08030010
 8002164:	08030014 	.word	0x08030014
 8002168:	08030018 	.word	0x08030018
 800216c:	0803001c 	.word	0x0803001c

08002170 <ReadFromEEPROM>:

uint32_t ReadFromEEPROM (uint32_t address)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return (*(__IO uint32_t *)address);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218e:	f002 fa39 	bl	8004604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002192:	f000 f8fd 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002196:	f000 fa35 	bl	8002604 <MX_GPIO_Init>
  MX_TIM10_Init();
 800219a:	f000 f99d 	bl	80024d8 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 800219e:	f00a f9e1 	bl	800c564 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80021a2:	f000 f963 	bl	800246c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80021a6:	f000 f9cd 	bl	8002544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableIT_UPDATE(TIM10);
 80021aa:	4865      	ldr	r0, [pc, #404]	@ (8002340 <main+0x1b8>)
 80021ac:	f7fe ffa3 	bl	80010f6 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM10);
 80021b0:	4863      	ldr	r0, [pc, #396]	@ (8002340 <main+0x1b8>)
 80021b2:	f7fe ff80 	bl	80010b6 <LL_TIM_EnableCounter>
	LL_USART_Enable(USART1);
 80021b6:	4863      	ldr	r0, [pc, #396]	@ (8002344 <main+0x1bc>)
 80021b8:	f7fe ffad 	bl	8001116 <LL_USART_Enable>
	LL_USART_EnableIT_RXNE(USART1);
 80021bc:	4861      	ldr	r0, [pc, #388]	@ (8002344 <main+0x1bc>)
 80021be:	f7fe ffd0 	bl	8001162 <LL_USART_EnableIT_RXNE>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2108      	movs	r1, #8
 80021c6:	4860      	ldr	r0, [pc, #384]	@ (8002348 <main+0x1c0>)
 80021c8:	f002 ff18 	bl	8004ffc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f002 fa5b 	bl	8004688 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2108      	movs	r1, #8
 80021d6:	485c      	ldr	r0, [pc, #368]	@ (8002348 <main+0x1c0>)
 80021d8:	f002 ff10 	bl	8004ffc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80021dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021e0:	f002 fa52 	bl	8004688 <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80021e4:	4959      	ldr	r1, [pc, #356]	@ (800234c <main+0x1c4>)
 80021e6:	485a      	ldr	r0, [pc, #360]	@ (8002350 <main+0x1c8>)
 80021e8:	f001 ff62 	bl	80040b0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80021ec:	4959      	ldr	r1, [pc, #356]	@ (8002354 <main+0x1cc>)
 80021ee:	485a      	ldr	r0, [pc, #360]	@ (8002358 <main+0x1d0>)
 80021f0:	f001 ff84 	bl	80040fc <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80021f4:	4959      	ldr	r1, [pc, #356]	@ (800235c <main+0x1d4>)
 80021f6:	485a      	ldr	r0, [pc, #360]	@ (8002360 <main+0x1d8>)
 80021f8:	f001 ffac 	bl	8004154 <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 80021fc:	4a59      	ldr	r2, [pc, #356]	@ (8002364 <main+0x1dc>)
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002206:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800220a:	f107 0208 	add.w	r2, r7, #8
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f002 f853 	bl	80042c0 <wizchip_init>
	ReadSettingsFromEEPROM();
 800221a:	f7ff ff5b 	bl	80020d4 <ReadSettingsFromEEPROM>
	if (gWIZNETINFO.ip[0] > 254){
 800221e:	4b52      	ldr	r3, [pc, #328]	@ (8002368 <main+0x1e0>)
 8002220:	799b      	ldrb	r3, [r3, #6]
 8002222:	2bff      	cmp	r3, #255	@ 0xff
 8002224:	d129      	bne.n	800227a <main+0xf2>
		gWIZNETINFO.ip[0] = 192;
 8002226:	4b50      	ldr	r3, [pc, #320]	@ (8002368 <main+0x1e0>)
 8002228:	22c0      	movs	r2, #192	@ 0xc0
 800222a:	719a      	strb	r2, [r3, #6]
		gWIZNETINFO.ip[1] = 168;
 800222c:	4b4e      	ldr	r3, [pc, #312]	@ (8002368 <main+0x1e0>)
 800222e:	22a8      	movs	r2, #168	@ 0xa8
 8002230:	71da      	strb	r2, [r3, #7]
		gWIZNETINFO.ip[2] = 0;
 8002232:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <main+0x1e0>)
 8002234:	2200      	movs	r2, #0
 8002236:	721a      	strb	r2, [r3, #8]
		gWIZNETINFO.ip[3] = 250;
 8002238:	4b4b      	ldr	r3, [pc, #300]	@ (8002368 <main+0x1e0>)
 800223a:	22fa      	movs	r2, #250	@ 0xfa
 800223c:	725a      	strb	r2, [r3, #9]

		gWIZNETINFO.gw[0] = 192;
 800223e:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <main+0x1e0>)
 8002240:	22c0      	movs	r2, #192	@ 0xc0
 8002242:	739a      	strb	r2, [r3, #14]
		gWIZNETINFO.gw[1] = 168;
 8002244:	4b48      	ldr	r3, [pc, #288]	@ (8002368 <main+0x1e0>)
 8002246:	22a8      	movs	r2, #168	@ 0xa8
 8002248:	73da      	strb	r2, [r3, #15]
		gWIZNETINFO.gw[2] = 0;
 800224a:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <main+0x1e0>)
 800224c:	2200      	movs	r2, #0
 800224e:	741a      	strb	r2, [r3, #16]
		gWIZNETINFO.gw[3] = 1;
 8002250:	4b45      	ldr	r3, [pc, #276]	@ (8002368 <main+0x1e0>)
 8002252:	2201      	movs	r2, #1
 8002254:	745a      	strb	r2, [r3, #17]
		WriteToEEPROM(EEPROM_ADRESS_START, gWIZNETINFO);
 8002256:	4c44      	ldr	r4, [pc, #272]	@ (8002368 <main+0x1e0>)
 8002258:	466b      	mov	r3, sp
 800225a:	f104 020c 	add.w	r2, r4, #12
 800225e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002260:	c303      	stmia	r3!, {r0, r1}
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	3302      	adds	r3, #2
 8002266:	0c12      	lsrs	r2, r2, #16
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800226e:	483f      	ldr	r0, [pc, #252]	@ (800236c <main+0x1e4>)
 8002270:	f7ff fea4 	bl	8001fbc <WriteToEEPROM>
		HAL_Delay(100);
 8002274:	2064      	movs	r0, #100	@ 0x64
 8002276:	f002 fa07 	bl	8004688 <HAL_Delay>

	}

	wizchip_setnetinfo(&gWIZNETINFO);
 800227a:	483b      	ldr	r0, [pc, #236]	@ (8002368 <main+0x1e0>)
 800227c:	f002 f8ac 	bl	80043d8 <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8002280:	4939      	ldr	r1, [pc, #228]	@ (8002368 <main+0x1e0>)
 8002282:	2000      	movs	r0, #0
 8002284:	f001 ff92 	bl	80041ac <ctlnetwork>
	HAL_Delay(1000);
 8002288:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800228c:	f002 f9fc 	bl	8004688 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 8002290:	2300      	movs	r3, #0
 8002292:	2250      	movs	r2, #80	@ 0x50
 8002294:	2101      	movs	r1, #1
 8002296:	2000      	movs	r0, #0
 8002298:	f000 fa38 	bl	800270c <socket>
 800229c:	4603      	mov	r3, r0
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b33      	ldr	r3, [pc, #204]	@ (8002370 <main+0x1e8>)
 80022a2:	701a      	strb	r2, [r3, #0]
		/*if (stat != HTTP_SOCKET)
			UART_Printf("socket() failed, code = %d\r\n", stat);
		else
			UART_Printf("Socket created, connecting...\r\n");*/
		stat = listen(HTTP_SOCKET);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f000 fbb3 	bl	8002a10 <listen>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b30      	ldr	r3, [pc, #192]	@ (8002370 <main+0x1e8>)
 80022b0:	701a      	strb	r2, [r3, #0]
		/*if (stat != SOCK_OK)
			UART_Printf("listen() failed, code = %d\r\n", stat);
		else
			UART_Printf("listen() OK\r\n");*/
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80022b2:	e022      	b.n	80022fa <main+0x172>
			HAL_Delay(5);
 80022b4:	2005      	movs	r0, #5
 80022b6:	f002 f9e7 	bl	8004688 <HAL_Delay>
			if (flag_usb == 1) {
 80022ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <main+0x1ec>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d109      	bne.n	80022d6 <main+0x14e>
				flag_usb = 0;
 80022c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002374 <main+0x1ec>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
				strcpy(post_url,(char *) str_rx2);
 80022c8:	492b      	ldr	r1, [pc, #172]	@ (8002378 <main+0x1f0>)
 80022ca:	482c      	ldr	r0, [pc, #176]	@ (800237c <main+0x1f4>)
 80022cc:	f00b faa5 	bl	800d81a <strcpy>
				Set_outputs(str_rx2);
 80022d0:	4829      	ldr	r0, [pc, #164]	@ (8002378 <main+0x1f0>)
 80022d2:	f7ff f84b 	bl	800136c <Set_outputs>
			}
			if (flag_get_ip == 1){
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <main+0x1f8>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d104      	bne.n	80022e8 <main+0x160>
				flag_get_ip = 0;
 80022de:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <main+0x1f8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
				send_ip_to_uart();
 80022e4:	f7fe ffae 	bl	8001244 <send_ip_to_uart>
			}
			if (flag_set_ip == 1){
 80022e8:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <main+0x1fc>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d104      	bne.n	80022fa <main+0x172>
				flag_set_ip = 0;
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <main+0x1fc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
				receive_ip_from_uart();
 80022f6:	f7fe ffe3 	bl	80012c0 <receive_ip_from_uart>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80022fa:	f44f 7042 	mov.w	r0, #776	@ 0x308
 80022fe:	f001 fbd3 	bl	8003aa8 <WIZCHIP_READ>
 8002302:	4603      	mov	r3, r0
 8002304:	2b14      	cmp	r3, #20
 8002306:	d0d5      	beq.n	80022b4 <main+0x12c>
		}
		/*UART_Printf("Input connection\r\n");
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
			UART_Printf("Error socket status\r\n");*/
		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	461a      	mov	r2, r3
 800230c:	2104      	movs	r1, #4
 800230e:	2000      	movs	r0, #0
 8002310:	f000 fdfa 	bl	8002f08 <getsockopt>
		UART_Printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 8002314:	793b      	ldrb	r3, [r7, #4]
 8002316:	4619      	mov	r1, r3
 8002318:	797b      	ldrb	r3, [r7, #5]
 800231a:	461a      	mov	r2, r3
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	4618      	mov	r0, r3
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4603      	mov	r3, r0
 8002326:	4818      	ldr	r0, [pc, #96]	@ (8002388 <main+0x200>)
 8002328:	f7ff fbf6 	bl	8001b18 <UART_Printf>

		loopback_tcps(HTTP_SOCKET, gDATABUF, 80);
 800232c:	2250      	movs	r2, #80	@ 0x50
 800232e:	4917      	ldr	r1, [pc, #92]	@ (800238c <main+0x204>)
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff fca5 	bl	8001c80 <loopback_tcps>

		close(HTTP_SOCKET);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 fafc 	bl	8002934 <close>
	while (1) {
 800233c:	e7a8      	b.n	8002290 <main+0x108>
 800233e:	bf00      	nop
 8002340:	40014400 	.word	0x40014400
 8002344:	40011000 	.word	0x40011000
 8002348:	40020000 	.word	0x40020000
 800234c:	08001be1 	.word	0x08001be1
 8002350:	08001bc9 	.word	0x08001bc9
 8002354:	08001c63 	.word	0x08001c63
 8002358:	08001c49 	.word	0x08001c49
 800235c:	08001c21 	.word	0x08001c21
 8002360:	08001bf9 	.word	0x08001bf9
 8002364:	08010e2c 	.word	0x08010e2c
 8002368:	20000000 	.word	0x20000000
 800236c:	08030000 	.word	0x08030000
 8002370:	20002464 	.word	0x20002464
 8002374:	20000455 	.word	0x20000455
 8002378:	2000040c 	.word	0x2000040c
 800237c:	2000043c 	.word	0x2000043c
 8002380:	2000045e 	.word	0x2000045e
 8002384:	2000045f 	.word	0x2000045f
 8002388:	08010e18 	.word	0x08010e18
 800238c:	20000460 	.word	0x20000460

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2230      	movs	r2, #48	@ 0x30
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f00b f99e 	bl	800d6e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <SystemClock_Config+0xd4>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a29      	ldr	r2, [pc, #164]	@ (8002464 <SystemClock_Config+0xd4>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c4:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <SystemClock_Config+0xd4>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <SystemClock_Config+0xd8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023dc:	4a22      	ldr	r2, [pc, #136]	@ (8002468 <SystemClock_Config+0xd8>)
 80023de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <SystemClock_Config+0xd8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fa:	2302      	movs	r3, #2
 80023fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002404:	2319      	movs	r3, #25
 8002406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002408:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800240c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800240e:	2304      	movs	r3, #4
 8002410:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002412:	2307      	movs	r3, #7
 8002414:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	4618      	mov	r0, r3
 800241c:	f004 f884 	bl	8006528 <HAL_RCC_OscConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002426:	f000 f96b 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800242a:	230f      	movs	r3, #15
 800242c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242e:	2302      	movs	r3, #2
 8002430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2102      	movs	r1, #2
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fae6 	bl	8006a18 <HAL_RCC_ClockConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002452:	f000 f955 	bl	8002700 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002456:	f004 fbc5 	bl	8006be4 <HAL_RCC_EnableCSS>
}
 800245a:	bf00      	nop
 800245c:	3750      	adds	r7, #80	@ 0x50
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40007000 	.word	0x40007000

0800246c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002470:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002472:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <MX_SPI1_Init+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800247c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_SPI1_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_SPI1_Init+0x64>)
 8002498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024a0:	2208      	movs	r2, #8
 80024a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024b8:	220a      	movs	r2, #10
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	@ (80024d0 <MX_SPI1_Init+0x64>)
 80024be:	f004 fcd0 	bl	8006e62 <HAL_SPI_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024c8:	f000 f91a 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20002468 	.word	0x20002468
 80024d4:	40013000 	.word	0x40013000

080024d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 80024ec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80024f0:	f7fe fe90 	bl	8001214 <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80024f4:	f7fe fd56 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2200      	movs	r2, #0
 80024fc:	210f      	movs	r1, #15
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fda6 	bl	8001050 <NVIC_EncodePriority>
 8002504:	4603      	mov	r3, r0
 8002506:	4619      	mov	r1, r3
 8002508:	2019      	movs	r0, #25
 800250a:	f7fe fd77 	bl	8000ffc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800250e:	2019      	movs	r0, #25
 8002510:	f7fe fd56 	bl	8000fc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8002514:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8002518:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 800251e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002522:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <MX_TIM10_Init+0x68>)
 800252e:	f006 f8bf 	bl	80086b0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 8002532:	4803      	ldr	r0, [pc, #12]	@ (8002540 <MX_TIM10_Init+0x68>)
 8002534:	f7fe fdcf 	bl	80010d6 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40014400 	.word	0x40014400

08002544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	@ 0x38
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	615a      	str	r2, [r3, #20]
 800255c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800256e:	2010      	movs	r0, #16
 8002570:	f7fe fe50 	bl	8001214 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002574:	2001      	movs	r0, #1
 8002576:	f7fe fe35 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800257a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800257e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002580:	2302      	movs	r3, #2
 8002582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002590:	2307      	movs	r3, #7
 8002592:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4818      	ldr	r0, [pc, #96]	@ (80025fc <MX_USART1_UART_Init+0xb8>)
 800259a:	f005 fea2 	bl	80082e2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800259e:	f7fe fd01 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fd51 	bl	8001050 <NVIC_EncodePriority>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4619      	mov	r1, r3
 80025b2:	2025      	movs	r0, #37	@ 0x25
 80025b4:	f7fe fd22 	bl	8000ffc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80025b8:	2025      	movs	r0, #37	@ 0x25
 80025ba:	f7fe fd01 	bl	8000fc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80025be:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80025c2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80025d0:	230c      	movs	r3, #12
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80025d8:	2300      	movs	r3, #0
 80025da:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	4807      	ldr	r0, [pc, #28]	@ (8002600 <MX_USART1_UART_Init+0xbc>)
 80025e4:	f006 fb46 	bl	8008c74 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80025e8:	4805      	ldr	r0, [pc, #20]	@ (8002600 <MX_USART1_UART_Init+0xbc>)
 80025ea:	f7fe fda4 	bl	8001136 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80025ee:	4804      	ldr	r0, [pc, #16]	@ (8002600 <MX_USART1_UART_Init+0xbc>)
 80025f0:	f7fe fd91 	bl	8001116 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	3738      	adds	r7, #56	@ 0x38
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020000 	.word	0x40020000
 8002600:	40011000 	.word	0x40011000

08002604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260a:	463b      	mov	r3, r7
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800261a:	2004      	movs	r0, #4
 800261c:	f7fe fde2 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002620:	2080      	movs	r0, #128	@ 0x80
 8002622:	f7fe fddf 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002626:	2001      	movs	r0, #1
 8002628:	f7fe fddc 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800262c:	2002      	movs	r0, #2
 800262e:	f7fe fdd9 	bl	80011e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8002632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002636:	4826      	ldr	r0, [pc, #152]	@ (80026d0 <MX_GPIO_Init+0xcc>)
 8002638:	f7fe fdc4 	bl	80011c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin);
 800263c:	f248 0118 	movw	r1, #32792	@ 0x8018
 8002640:	4824      	ldr	r0, [pc, #144]	@ (80026d4 <MX_GPIO_Init+0xd0>)
 8002642:	f7fe fdbf 	bl	80011c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 8002646:	f24f 71ff 	movw	r1, #63487	@ 0xf7ff
 800264a:	4823      	ldr	r0, [pc, #140]	@ (80026d8 <MX_GPIO_Init+0xd4>)
 800264c:	f7fe fdba 	bl	80011c4 <LL_GPIO_ResetOutputPin>
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8002650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002654:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002656:	2301      	movs	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002666:	463b      	mov	r3, r7
 8002668:	4619      	mov	r1, r3
 800266a:	4819      	ldr	r0, [pc, #100]	@ (80026d0 <MX_GPIO_Init+0xcc>)
 800266c:	f005 fe39 	bl	80082e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_Pin;
 8002670:	2301      	movs	r3, #1
 8002672:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002674:	2300      	movs	r3, #0
 8002676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002678:	2301      	movs	r3, #1
 800267a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800267c:	463b      	mov	r3, r7
 800267e:	4619      	mov	r1, r3
 8002680:	4814      	ldr	r0, [pc, #80]	@ (80026d4 <MX_GPIO_Init+0xd0>)
 8002682:	f005 fe2e 	bl	80082e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin;
 8002686:	f248 0318 	movw	r3, #32792	@ 0x8018
 800268a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800268c:	2301      	movs	r3, #1
 800268e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	463b      	mov	r3, r7
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <MX_GPIO_Init+0xd0>)
 80026a2:	f005 fe1e 	bl	80082e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 80026a6:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80026aa:	603b      	str	r3, [r7, #0]
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026ac:	2301      	movs	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	463b      	mov	r3, r7
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_GPIO_Init+0xd4>)
 80026c2:	f005 fe0e 	bl	80082e2 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400

080026dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026ee:	f001 ffab 	bl	8004648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40010000 	.word	0x40010000

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <Error_Handler+0x8>

0800270c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	4604      	mov	r4, r0
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	71fb      	strb	r3, [r7, #7]
 800271e:	4603      	mov	r3, r0
 8002720:	71bb      	strb	r3, [r7, #6]
 8002722:	460b      	mov	r3, r1
 8002724:	80bb      	strh	r3, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d902      	bls.n	8002736 <socket+0x2a>
 8002730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002734:	e0f0      	b.n	8002918 <socket+0x20c>
	switch(protocol)
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d005      	beq.n	8002748 <socket+0x3c>
 800273c:	2b00      	cmp	r3, #0
 800273e:	dd11      	ble.n	8002764 <socket+0x58>
 8002740:	3b02      	subs	r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d80e      	bhi.n	8002764 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002746:	e011      	b.n	800276c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2204      	movs	r2, #4
 800274e:	4619      	mov	r1, r3
 8002750:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002754:	f001 fa42 	bl	8003bdc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <socket+0x5e>
 800275e:	f06f 0302 	mvn.w	r3, #2
 8002762:	e0d9      	b.n	8002918 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002764:	f06f 0304 	mvn.w	r3, #4
 8002768:	e0d6      	b.n	8002918 <socket+0x20c>
	    break;
 800276a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <socket+0x70>
 8002776:	f06f 0305 	mvn.w	r3, #5
 800277a:	e0cd      	b.n	8002918 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d028      	beq.n	80027d4 <socket+0xc8>
	{
   	switch(protocol)
 8002782:	79bb      	ldrb	r3, [r7, #6]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d002      	beq.n	800278e <socket+0x82>
 8002788:	2b02      	cmp	r3, #2
 800278a:	d008      	beq.n	800279e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800278c:	e022      	b.n	80027d4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11a      	bne.n	80027ce <socket+0xc2>
 8002798:	f06f 0305 	mvn.w	r3, #5
 800279c:	e0bc      	b.n	8002918 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80027a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db02      	blt.n	80027b6 <socket+0xaa>
 80027b0:	f06f 0305 	mvn.w	r3, #5
 80027b4:	e0b0      	b.n	8002918 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80027c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db04      	blt.n	80027d2 <socket+0xc6>
 80027c8:	f06f 0305 	mvn.w	r3, #5
 80027cc:	e0a4      	b.n	8002918 <socket+0x20c>
   	      break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <socket+0xc8>
   	      break;
 80027d2:	bf00      	nop
   	}
   }
	close(sn);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f8ac 	bl	8002934 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	3301      	adds	r3, #1
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	f023 030f 	bic.w	r3, r3, #15
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	f001 f9a0 	bl	8003b40 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d110      	bne.n	8002828 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002806:	4b46      	ldr	r3, [pc, #280]	@ (8002920 <socket+0x214>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	b291      	uxth	r1, r2
 800280e:	4a44      	ldr	r2, [pc, #272]	@ (8002920 <socket+0x214>)
 8002810:	8011      	strh	r1, [r2, #0]
 8002812:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002814:	4b42      	ldr	r3, [pc, #264]	@ (8002920 <socket+0x214>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800281c:	4293      	cmp	r3, r2
 800281e:	d103      	bne.n	8002828 <socket+0x11c>
 8002820:	4b3f      	ldr	r3, [pc, #252]	@ (8002920 <socket+0x214>)
 8002822:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002826:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	3301      	adds	r3, #1
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002834:	461a      	mov	r2, r3
 8002836:	88bb      	ldrh	r3, [r7, #4]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	b29b      	uxth	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f001 f97d 	bl	8003b40 <WIZCHIP_WRITE>
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	3301      	adds	r3, #1
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	88bb      	ldrh	r3, [r7, #4]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f001 f970 	bl	8003b40 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	3301      	adds	r3, #1
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f001 f966 	bl	8003b40 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002874:	bf00      	nop
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3301      	adds	r3, #1
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002882:	4618      	mov	r0, r3
 8002884:	f001 f910 	bl	8003aa8 <WIZCHIP_READ>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f3      	bne.n	8002876 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2201      	movs	r2, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	b21b      	sxth	r3, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	b21a      	sxth	r2, r3
 800289c:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <socket+0x218>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	4013      	ands	r3, r2
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <socket+0x218>)
 80028aa:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <socket+0x218>)
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <socket+0x218>)
 80028c8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2201      	movs	r2, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <socket+0x21c>)
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4013      	ands	r3, r2
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <socket+0x21c>)
 80028e6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4a10      	ldr	r2, [pc, #64]	@ (800292c <socket+0x220>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002930 <socket+0x224>)
 80028f6:	2100      	movs	r1, #0
 80028f8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80028fa:	bf00      	nop
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	3301      	adds	r3, #1
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002908:	4618      	mov	r0, r3
 800290a:	f001 f8cd 	bl	8003aa8 <WIZCHIP_READ>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f3      	beq.n	80028fc <socket+0x1f0>
   return (int8_t)sn;
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	200000fc 	.word	0x200000fc
 8002924:	200024c0 	.word	0x200024c0
 8002928:	200024c2 	.word	0x200024c2
 800292c:	200024c4 	.word	0x200024c4
 8002930:	200024d4 	.word	0x200024d4

08002934 <close>:

int8_t close(uint8_t sn)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d902      	bls.n	800294a <close+0x16>
 8002944:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002948:	e055      	b.n	80029f6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	3301      	adds	r3, #1
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002956:	2110      	movs	r1, #16
 8002958:	4618      	mov	r0, r3
 800295a:	f001 f8f1 	bl	8003b40 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800295e:	bf00      	nop
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	3301      	adds	r3, #1
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800296c:	4618      	mov	r0, r3
 800296e:	f001 f89b 	bl	8003aa8 <WIZCHIP_READ>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f3      	bne.n	8002960 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	3301      	adds	r3, #1
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002984:	211f      	movs	r1, #31
 8002986:	4618      	mov	r0, r3
 8002988:	f001 f8da 	bl	8003b40 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2201      	movs	r2, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	b21b      	sxth	r3, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <close+0xcc>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4013      	ands	r3, r2
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <close+0xcc>)
 80029a8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	2201      	movs	r2, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <close+0xd0>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b21b      	sxth	r3, r3
 80029be:	4013      	ands	r3, r2
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <close+0xd0>)
 80029c6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002a08 <close+0xd4>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <close+0xd8>)
 80029d6:	2100      	movs	r1, #0
 80029d8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80029da:	bf00      	nop
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	3301      	adds	r3, #1
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f85d 	bl	8003aa8 <WIZCHIP_READ>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f3      	bne.n	80029dc <close+0xa8>
	return SOCK_OK;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200024c0 	.word	0x200024c0
 8002a04:	200024c2 	.word	0x200024c2
 8002a08:	200024c4 	.word	0x200024c4
 8002a0c:	200024d4 	.word	0x200024d4

08002a10 <listen>:

int8_t listen(uint8_t sn)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d902      	bls.n	8002a26 <listen+0x16>
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a24:	e049      	b.n	8002aba <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f83a 	bl	8003aa8 <WIZCHIP_READ>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d002      	beq.n	8002a44 <listen+0x34>
 8002a3e:	f06f 0304 	mvn.w	r3, #4
 8002a42:	e03a      	b.n	8002aba <listen+0xaa>
	CHECK_SOCKINIT();
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3301      	adds	r3, #1
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 f829 	bl	8003aa8 <WIZCHIP_READ>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b13      	cmp	r3, #19
 8002a5a:	d002      	beq.n	8002a62 <listen+0x52>
 8002a5c:	f06f 0302 	mvn.w	r3, #2
 8002a60:	e02b      	b.n	8002aba <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	3301      	adds	r3, #1
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 f865 	bl	8003b40 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002a76:	bf00      	nop
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 f80f 	bl	8003aa8 <WIZCHIP_READ>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f3      	bne.n	8002a78 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002a90:	e006      	b.n	8002aa0 <listen+0x90>
   {
         close(sn);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff4d 	bl	8002934 <close>
         return SOCKERR_SOCKCLOSED;
 8002a9a:	f06f 0303 	mvn.w	r3, #3
 8002a9e:	e00c      	b.n	8002aba <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fffb 	bl	8003aa8 <WIZCHIP_READ>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b14      	cmp	r3, #20
 8002ab6:	d1ec      	bne.n	8002a92 <listen+0x82>
   }
   return SOCK_OK;
 8002ab8:	2301      	movs	r3, #1
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d902      	bls.n	8002ada <disconnect+0x16>
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ad8:	e062      	b.n	8002ba0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	3301      	adds	r3, #1
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ffe0 	bl	8003aa8 <WIZCHIP_READ>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d002      	beq.n	8002af8 <disconnect+0x34>
 8002af2:	f06f 0304 	mvn.w	r3, #4
 8002af6:	e053      	b.n	8002ba0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3301      	adds	r3, #1
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b04:	2108      	movs	r1, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f81a 	bl	8003b40 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002b0c:	bf00      	nop
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	3301      	adds	r3, #1
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ffc4 	bl	8003aa8 <WIZCHIP_READ>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f3      	bne.n	8002b0e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba8 <disconnect+0xe4>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <disconnect+0xe4>)
 8002b42:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <disconnect+0xe8>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	fa42 f303 	asr.w	r3, r2, r3
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d016      	beq.n	8002b86 <disconnect+0xc2>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e021      	b.n	8002ba0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	3301      	adds	r3, #1
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 ff9d 	bl	8003aa8 <WIZCHIP_READ>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <disconnect+0xc2>
	   {
	      close(sn);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff feda 	bl	8002934 <close>
	      return SOCKERR_TIMEOUT;
 8002b80:	f06f 030c 	mvn.w	r3, #12
 8002b84:	e00c      	b.n	8002ba0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 ff88 	bl	8003aa8 <WIZCHIP_READ>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1de      	bne.n	8002b5c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200024c2 	.word	0x200024c2
 8002bac:	200024c0 	.word	0x200024c0

08002bb0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d902      	bls.n	8002bd4 <send+0x24>
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bd2:	e0dd      	b.n	8002d90 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 ff63 	bl	8003aa8 <WIZCHIP_READ>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d002      	beq.n	8002bf2 <send+0x42>
 8002bec:	f06f 0304 	mvn.w	r3, #4
 8002bf0:	e0ce      	b.n	8002d90 <send+0x1e0>
   CHECK_SOCKDATA();
 8002bf2:	88bb      	ldrh	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <send+0x4e>
 8002bf8:	f06f 030d 	mvn.w	r3, #13
 8002bfc:	e0c8      	b.n	8002d90 <send+0x1e0>
   tmp = getSn_SR(sn);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	3301      	adds	r3, #1
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 ff4c 	bl	8003aa8 <WIZCHIP_READ>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b17      	cmp	r3, #23
 8002c18:	d005      	beq.n	8002c26 <send+0x76>
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b1c      	cmp	r3, #28
 8002c1e:	d002      	beq.n	8002c26 <send+0x76>
 8002c20:	f06f 0306 	mvn.w	r3, #6
 8002c24:	e0b4      	b.n	8002d90 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8002c26:	4b5c      	ldr	r3, [pc, #368]	@ (8002d98 <send+0x1e8>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	fa42 f303 	asr.w	r3, r2, r3
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d039      	beq.n	8002cae <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	3301      	adds	r3, #1
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 ff2e 	bl	8003aa8 <WIZCHIP_READ>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3301      	adds	r3, #1
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002c6a:	2110      	movs	r1, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 ff67 	bl	8003b40 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2201      	movs	r2, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	4b45      	ldr	r3, [pc, #276]	@ (8002d98 <send+0x1e8>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	4013      	ands	r3, r2
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b42      	ldr	r3, [pc, #264]	@ (8002d98 <send+0x1e8>)
 8002c8e:	801a      	strh	r2, [r3, #0]
 8002c90:	e00d      	b.n	8002cae <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <send+0xfa>
      {
         close(sn);
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fe48 	bl	8002934 <close>
         return SOCKERR_TIMEOUT;
 8002ca4:	f06f 030c 	mvn.w	r3, #12
 8002ca8:	e072      	b.n	8002d90 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e070      	b.n	8002d90 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fef4 	bl	8003aa8 <WIZCHIP_READ>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002cc6:	88ba      	ldrh	r2, [r7, #4]
 8002cc8:	89bb      	ldrh	r3, [r7, #12]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d901      	bls.n	8002cd2 <send+0x122>
 8002cce:	89bb      	ldrh	r3, [r7, #12]
 8002cd0:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f841 	bl	8003d5c <getSn_TX_FSR>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fedc 	bl	8003aa8 <WIZCHIP_READ>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b17      	cmp	r3, #23
 8002cf8:	d009      	beq.n	8002d0e <send+0x15e>
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b1c      	cmp	r3, #28
 8002cfe:	d006      	beq.n	8002d0e <send+0x15e>
      {
         close(sn);
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fe16 	bl	8002934 <close>
         return SOCKERR_SOCKSTATUS;
 8002d08:	f06f 0306 	mvn.w	r3, #6
 8002d0c:	e040      	b.n	8002d90 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	@ (8002d9c <send+0x1ec>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	fa42 f303 	asr.w	r3, r2, r3
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <send+0x17e>
 8002d22:	88ba      	ldrh	r2, [r7, #4]
 8002d24:	89bb      	ldrh	r3, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d901      	bls.n	8002d2e <send+0x17e>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e030      	b.n	8002d90 <send+0x1e0>
      if(len <= freesize) break;
 8002d2e:	88ba      	ldrh	r2, [r7, #4]
 8002d30:	89bb      	ldrh	r3, [r7, #12]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d900      	bls.n	8002d38 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8002d36:	e7cc      	b.n	8002cd2 <send+0x122>
      if(len <= freesize) break;
 8002d38:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002d3a:	88ba      	ldrh	r2, [r7, #4]
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	6839      	ldr	r1, [r7, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f89d 	bl	8003e80 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d52:	2120      	movs	r1, #32
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fef3 	bl	8003b40 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002d5a:	bf00      	nop
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	3301      	adds	r3, #1
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fe9d 	bl	8003aa8 <WIZCHIP_READ>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f3      	bne.n	8002d5c <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	2201      	movs	r2, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	b21a      	sxth	r2, r3
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <send+0x1e8>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <send+0x1e8>)
 8002d8c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002d8e:	88bb      	ldrh	r3, [r7, #4]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200024c2 	.word	0x200024c2
 8002d9c:	200024c0 	.word	0x200024c0

08002da0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d902      	bls.n	8002dc4 <recv+0x24>
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dc2:	e09b      	b.n	8002efc <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3301      	adds	r3, #1
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fe6b 	bl	8003aa8 <WIZCHIP_READ>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d002      	beq.n	8002de2 <recv+0x42>
 8002ddc:	f06f 0304 	mvn.w	r3, #4
 8002de0:	e08c      	b.n	8002efc <recv+0x15c>
   CHECK_SOCKDATA();
 8002de2:	88bb      	ldrh	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <recv+0x4e>
 8002de8:	f06f 030d 	mvn.w	r3, #13
 8002dec:	e086      	b.n	8002efc <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	3301      	adds	r3, #1
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe54 	bl	8003aa8 <WIZCHIP_READ>
 8002e00:	4603      	mov	r3, r0
 8002e02:	029b      	lsls	r3, r3, #10
 8002e04:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002e06:	89ba      	ldrh	r2, [r7, #12]
 8002e08:	88bb      	ldrh	r3, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d201      	bcs.n	8002e12 <recv+0x72>
 8002e0e:	89bb      	ldrh	r3, [r7, #12]
 8002e10:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ffea 	bl	8003dee <getSn_RX_RSR>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3301      	adds	r3, #1
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fe3c 	bl	8003aa8 <WIZCHIP_READ>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b17      	cmp	r3, #23
 8002e38:	d026      	beq.n	8002e88 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b1c      	cmp	r3, #28
 8002e3e:	d11c      	bne.n	8002e7a <recv+0xda>
            {
               if(recvsize != 0) break;
 8002e40:	89bb      	ldrh	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d133      	bne.n	8002eae <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 ff87 	bl	8003d5c <getSn_TX_FSR>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461c      	mov	r4, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	3301      	adds	r3, #1
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fe22 	bl	8003aa8 <WIZCHIP_READ>
 8002e64:	4603      	mov	r3, r0
 8002e66:	029b      	lsls	r3, r3, #10
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	d10d      	bne.n	8002e88 <recv+0xe8>
               {
                  close(sn);
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fd60 	bl	8002934 <close>
                  return SOCKERR_SOCKSTATUS;
 8002e74:	f06f 0306 	mvn.w	r3, #6
 8002e78:	e040      	b.n	8002efc <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fd59 	bl	8002934 <close>
               return SOCKERR_SOCKSTATUS;
 8002e82:	f06f 0306 	mvn.w	r3, #6
 8002e86:	e039      	b.n	8002efc <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002e88:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <recv+0x164>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	fa42 f303 	asr.w	r3, r2, r3
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <recv+0x106>
 8002e9c:	89bb      	ldrh	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <recv+0x106>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e02a      	b.n	8002efc <recv+0x15c>
         if(recvsize != 0) break;
 8002ea6:	89bb      	ldrh	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8002eac:	e7b1      	b.n	8002e12 <recv+0x72>
               if(recvsize != 0) break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <recv+0x114>
         if(recvsize != 0) break;
 8002eb2:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002eb4:	89ba      	ldrh	r2, [r7, #12]
 8002eb6:	88bb      	ldrh	r3, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d201      	bcs.n	8002ec0 <recv+0x120>
 8002ebc:	89bb      	ldrh	r3, [r7, #12]
 8002ebe:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002ec0:	88ba      	ldrh	r2, [r7, #4]
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f834 	bl	8003f34 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ed8:	2140      	movs	r1, #64	@ 0x40
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fe30 	bl	8003b40 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002ee0:	bf00      	nop
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fdda 	bl	8003aa8 <WIZCHIP_READ>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f3      	bne.n	8002ee2 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002efa:	88bb      	ldrh	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	200024c0 	.word	0x200024c0

08002f08 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	603a      	str	r2, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	460b      	mov	r3, r1
 8002f16:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d902      	bls.n	8002f24 <getsockopt+0x1c>
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f22:	e0fd      	b.n	8003120 <getsockopt+0x218>
   switch(sotype)
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	f200 80f6 	bhi.w	8003118 <getsockopt+0x210>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <getsockopt+0x2c>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	08002f85 	.word	0x08002f85
 8002f3c:	08002fa1 	.word	0x08002fa1
 8002f40:	08002fbd 	.word	0x08002fbd
 8002f44:	08002ff3 	.word	0x08002ff3
 8002f48:	0800300b 	.word	0x0800300b
 8002f4c:	08003119 	.word	0x08003119
 8002f50:	08003041 	.word	0x08003041
 8002f54:	0800307b 	.word	0x0800307b
 8002f58:	0800308d 	.word	0x0800308d
 8002f5c:	0800309f 	.word	0x0800309f
 8002f60:	080030bb 	.word	0x080030bb
 8002f64:	080030f3 	.word	0x080030f3
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fd99 	bl	8003aa8 <WIZCHIP_READ>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	701a      	strb	r2, [r3, #0]
         break;
 8002f82:	e0cc      	b.n	800311e <getsockopt+0x216>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	3301      	adds	r3, #1
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fd89 	bl	8003aa8 <WIZCHIP_READ>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	701a      	strb	r2, [r3, #0]
         break;
 8002f9e:	e0be      	b.n	800311e <getsockopt+0x216>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fd7b 	bl	8003aa8 <WIZCHIP_READ>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	701a      	strb	r2, [r3, #0]
         break;
 8002fba:	e0b0      	b.n	800311e <getsockopt+0x216>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd6d 	bl	8003aa8 <WIZCHIP_READ>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b29c      	uxth	r4, r3
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	3301      	adds	r3, #1
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd61 	bl	8003aa8 <WIZCHIP_READ>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4423      	add	r3, r4
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	801a      	strh	r2, [r3, #0]
         break;
 8002ff0:	e095      	b.n	800311e <getsockopt+0x216>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002ffe:	2204      	movs	r2, #4
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fdea 	bl	8003bdc <WIZCHIP_READ_BUF>
         break;
 8003008:	e089      	b.n	800311e <getsockopt+0x216>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3301      	adds	r3, #1
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fd46 	bl	8003aa8 <WIZCHIP_READ>
 800301c:	4603      	mov	r3, r0
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	b29c      	uxth	r4, r3
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	3301      	adds	r3, #1
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd3a 	bl	8003aa8 <WIZCHIP_READ>
 8003034:	4603      	mov	r3, r0
 8003036:	4423      	add	r3, r4
 8003038:	b29a      	uxth	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	801a      	strh	r2, [r3, #0]
         break;
 800303e:	e06e      	b.n	800311e <getsockopt+0x216>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3301      	adds	r3, #1
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fd2d 	bl	8003aa8 <WIZCHIP_READ>
 800304e:	4603      	mov	r3, r0
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	2b01      	cmp	r3, #1
 8003056:	d002      	beq.n	800305e <getsockopt+0x156>
 8003058:	f06f 0304 	mvn.w	r3, #4
 800305c:	e060      	b.n	8003120 <getsockopt+0x218>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	3301      	adds	r3, #1
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	f503 533c 	add.w	r3, r3, #12032	@ 0x2f00
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fd1c 	bl	8003aa8 <WIZCHIP_READ>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	801a      	strh	r2, [r3, #0]
         break;
 8003078:	e051      	b.n	800311e <getsockopt+0x216>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fe6d 	bl	8003d5c <getSn_TX_FSR>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	801a      	strh	r2, [r3, #0]
         break;
 800308a:	e048      	b.n	800311e <getsockopt+0x216>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fead 	bl	8003dee <getSn_RX_RSR>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	801a      	strh	r2, [r3, #0]
         break;
 800309c:	e03f      	b.n	800311e <getsockopt+0x216>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3301      	adds	r3, #1
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fcfc 	bl	8003aa8 <WIZCHIP_READ>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
         break;
 80030b8:	e031      	b.n	800311e <getsockopt+0x216>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3301      	adds	r3, #1
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fcf0 	bl	8003aa8 <WIZCHIP_READ>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <getsockopt+0x1dc>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fe8a 	bl	8003dee <getSn_RX_RSR>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80030e2:	e01c      	b.n	800311e <getsockopt+0x216>
            *(uint16_t*)arg = sock_remained_size[sn];
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	4a10      	ldr	r2, [pc, #64]	@ (8003128 <getsockopt+0x220>)
 80030e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	801a      	strh	r2, [r3, #0]
         break;
 80030f0:	e015      	b.n	800311e <getsockopt+0x216>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	3301      	adds	r3, #1
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fcd4 	bl	8003aa8 <WIZCHIP_READ>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <getsockopt+0x204>
             return SOCKERR_SOCKMODE;
 8003106:	f06f 0304 	mvn.w	r3, #4
 800310a:	e009      	b.n	8003120 <getsockopt+0x218>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4a07      	ldr	r2, [pc, #28]	@ (800312c <getsockopt+0x224>)
 8003110:	5cd2      	ldrb	r2, [r2, r3]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	701a      	strb	r2, [r3, #0]
         break;
 8003116:	e002      	b.n	800311e <getsockopt+0x216>
      default:
         return SOCKERR_SOCKOPT;
 8003118:	f06f 0301 	mvn.w	r3, #1
 800311c:	e000      	b.n	8003120 <getsockopt+0x218>
   }
   return SOCK_OK;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	200024c4 	.word	0x200024c4
 800312c:	200024d4 	.word	0x200024d4

08003130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_MspInit+0x4c>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	4a0f      	ldr	r2, [pc, #60]	@ (800317c <HAL_MspInit+0x4c>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003144:	6453      	str	r3, [r2, #68]	@ 0x44
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <HAL_MspInit+0x4c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_MspInit+0x4c>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_MspInit+0x4c>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	@ 0x40
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_MspInit+0x4c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800

08003180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1d      	ldr	r2, [pc, #116]	@ (8003214 <HAL_SPI_MspInit+0x94>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d133      	bne.n	800320a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_SPI_MspInit+0x98>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003218 <HAL_SPI_MspInit+0x98>)
 80031ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031b2:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_SPI_MspInit+0x98>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <HAL_SPI_MspInit+0x98>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <HAL_SPI_MspInit+0x98>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_SPI_MspInit+0x98>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031da:	23e0      	movs	r3, #224	@ 0xe0
 80031dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e6:	2303      	movs	r3, #3
 80031e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031ea:	2305      	movs	r3, #5
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	4619      	mov	r1, r3
 80031f4:	4809      	ldr	r0, [pc, #36]	@ (800321c <HAL_SPI_MspInit+0x9c>)
 80031f6:	f001 fd7d 	bl	8004cf4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2023      	movs	r0, #35	@ 0x23
 8003200:	f001 fb1e 	bl	8004840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003204:	2023      	movs	r0, #35	@ 0x23
 8003206:	f001 fb37 	bl	8004878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	@ 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40013000 	.word	0x40013000
 8003218:	40023800 	.word	0x40023800
 800321c:	40020000 	.word	0x40020000

08003220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08c      	sub	sp, #48	@ 0x30
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <HAL_InitTick+0xd0>)
 8003236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003238:	4a2d      	ldr	r2, [pc, #180]	@ (80032f0 <HAL_InitTick+0xd0>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_InitTick+0xd0>)
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800324c:	f107 020c 	add.w	r2, r7, #12
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fdb6 	bl	8006dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800325c:	f003 fda0 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 8003260:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003264:	4a23      	ldr	r2, [pc, #140]	@ (80032f4 <HAL_InitTick+0xd4>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0c9b      	lsrs	r3, r3, #18
 800326c:	3b01      	subs	r3, #1
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003270:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <HAL_InitTick+0xd8>)
 8003272:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_InitTick+0xdc>)
 8003274:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_InitTick+0xd8>)
 8003278:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800327c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800327e:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <HAL_InitTick+0xd8>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003284:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <HAL_InitTick+0xd8>)
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328a:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_InitTick+0xd8>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003290:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_InitTick+0xd8>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003296:	4818      	ldr	r0, [pc, #96]	@ (80032f8 <HAL_InitTick+0xd8>)
 8003298:	f004 fc9e 	bl	8007bd8 <HAL_TIM_Base_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80032a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11b      	bne.n	80032e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032aa:	4813      	ldr	r0, [pc, #76]	@ (80032f8 <HAL_InitTick+0xd8>)
 80032ac:	f004 fcee 	bl	8007c8c <HAL_TIM_Base_Start_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80032b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d111      	bne.n	80032e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032be:	2019      	movs	r0, #25
 80032c0:	f001 fada 	bl	8004878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	d808      	bhi.n	80032dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80032ca:	2200      	movs	r2, #0
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	2019      	movs	r0, #25
 80032d0:	f001 fab6 	bl	8004840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <HAL_InitTick+0xe0>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e002      	b.n	80032e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80032e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3730      	adds	r7, #48	@ 0x30
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	431bde83 	.word	0x431bde83
 80032f8:	200024dc 	.word	0x200024dc
 80032fc:	40010000 	.word	0x40010000
 8003300:	20000130 	.word	0x20000130

08003304 <LL_TIM_ClearFlag_UPDATE>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f06f 0201 	mvn.w	r2, #1
 8003312:	611a      	str	r2, [r3, #16]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4013      	ands	r3, r2
 800335c:	041a      	lsls	r2, r3, #16
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43d9      	mvns	r1, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	400b      	ands	r3, r1
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800337c:	f003 fd56 	bl	8006e2c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <NMI_Handler+0x8>

08003384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <HardFault_Handler+0x4>

0800338c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <MemManage_Handler+0x4>

08003394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <BusFault_Handler+0x4>

0800339c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <UsageFault_Handler+0x4>

080033a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 80033e0:	4809      	ldr	r0, [pc, #36]	@ (8003408 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80033e2:	f7ff ff9d 	bl	8003320 <LL_TIM_IsActiveFlag_UPDATE>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <TIM1_UP_TIM10_IRQHandler+0x20>
			LL_TIM_ClearFlag_UPDATE(TIM10);
 80033ec:	4806      	ldr	r0, [pc, #24]	@ (8003408 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 80033ee:	f7ff ff89 	bl	8003304 <LL_TIM_ClearFlag_UPDATE>
			LL_GPIO_TogglePin(GPIOC, LED_Pin);
 80033f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033f6:	4805      	ldr	r0, [pc, #20]	@ (800340c <TIM1_UP_TIM10_IRQHandler+0x30>)
 80033f8:	f7ff ffa5 	bl	8003346 <LL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033fc:	4804      	ldr	r0, [pc, #16]	@ (8003410 <TIM1_UP_TIM10_IRQHandler+0x34>)
 80033fe:	f004 fca7 	bl	8007d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40014400 	.word	0x40014400
 800340c:	40020800 	.word	0x40020800
 8003410:	200024dc 	.word	0x200024dc

08003414 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003418:	4802      	ldr	r0, [pc, #8]	@ (8003424 <SPI1_IRQHandler+0x10>)
 800341a:	f004 f99b 	bl	8007754 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20002468 	.word	0x20002468

08003428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	char letter;
	static uint8_t i = 0;
	letter = USART1->DR;
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <USART1_IRQHandler+0x3c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	71fb      	strb	r3, [r7, #7]
	if (letter != '\r') {
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	2b0d      	cmp	r3, #13
 8003438:	d01a      	beq.n	8003470 <USART1_IRQHandler+0x48>
		str_rx2[i] = letter;
 800343a:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <USART1_IRQHandler+0x40>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <USART1_IRQHandler+0x44>)
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	5453      	strb	r3, [r2, r1]
		i++;
 8003446:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <USART1_IRQHandler+0x40>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <USART1_IRQHandler+0x40>)
 8003450:	701a      	strb	r2, [r3, #0]
		if (i == 24)
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <USART1_IRQHandler+0x40>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b18      	cmp	r3, #24
 8003458:	f040 8234 	bne.w	80038c4 <USART1_IRQHandler+0x49c>
			i = 0;
 800345c:	4b02      	ldr	r3, [pc, #8]	@ (8003468 <USART1_IRQHandler+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8003462:	e22f      	b.n	80038c4 <USART1_IRQHandler+0x49c>
 8003464:	40011000 	.word	0x40011000
 8003468:	20002524 	.word	0x20002524
 800346c:	2000040c 	.word	0x2000040c
		str_rx2[i] = '\r';
 8003470:	4b98      	ldr	r3, [pc, #608]	@ (80036d4 <USART1_IRQHandler+0x2ac>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b98      	ldr	r3, [pc, #608]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003478:	210d      	movs	r1, #13
 800347a:	5499      	strb	r1, [r3, r2]
		i = 0;
 800347c:	4b95      	ldr	r3, [pc, #596]	@ (80036d4 <USART1_IRQHandler+0x2ac>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
		flag_ok = 1;
 8003482:	4b96      	ldr	r3, [pc, #600]	@ (80036dc <USART1_IRQHandler+0x2b4>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='S')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 8003488:	4b93      	ldr	r3, [pc, #588]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b53      	cmp	r3, #83	@ 0x53
 800348e:	d10a      	bne.n	80034a6 <USART1_IRQHandler+0x7e>
 8003490:	4b91      	ldr	r3, [pc, #580]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	2b45      	cmp	r3, #69	@ 0x45
 8003496:	d106      	bne.n	80034a6 <USART1_IRQHandler+0x7e>
 8003498:	4b8f      	ldr	r3, [pc, #572]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800349a:	789b      	ldrb	r3, [r3, #2]
 800349c:	2b54      	cmp	r3, #84	@ 0x54
 800349e:	d102      	bne.n	80034a6 <USART1_IRQHandler+0x7e>
				flag_set_ip = 1;
 80034a0:	4b8f      	ldr	r3, [pc, #572]	@ (80036e0 <USART1_IRQHandler+0x2b8>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='G')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 80034a6:	4b8c      	ldr	r3, [pc, #560]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b47      	cmp	r3, #71	@ 0x47
 80034ac:	d10a      	bne.n	80034c4 <USART1_IRQHandler+0x9c>
 80034ae:	4b8a      	ldr	r3, [pc, #552]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034b0:	785b      	ldrb	r3, [r3, #1]
 80034b2:	2b45      	cmp	r3, #69	@ 0x45
 80034b4:	d106      	bne.n	80034c4 <USART1_IRQHandler+0x9c>
 80034b6:	4b88      	ldr	r3, [pc, #544]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	2b54      	cmp	r3, #84	@ 0x54
 80034bc:	d102      	bne.n	80034c4 <USART1_IRQHandler+0x9c>
			flag_get_ip = 1;
 80034be:	4b89      	ldr	r3, [pc, #548]	@ (80036e4 <USART1_IRQHandler+0x2bc>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='A')&&(str_rx2[1]=='M')&&(str_rx2[2]=='1')){
 80034c4:	4b84      	ldr	r3, [pc, #528]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b41      	cmp	r3, #65	@ 0x41
 80034ca:	d10a      	bne.n	80034e2 <USART1_IRQHandler+0xba>
 80034cc:	4b82      	ldr	r3, [pc, #520]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b4d      	cmp	r3, #77	@ 0x4d
 80034d2:	d106      	bne.n	80034e2 <USART1_IRQHandler+0xba>
 80034d4:	4b80      	ldr	r3, [pc, #512]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	2b31      	cmp	r3, #49	@ 0x31
 80034da:	d102      	bne.n	80034e2 <USART1_IRQHandler+0xba>
			flag_usb = 1;
 80034dc:	4b82      	ldr	r3, [pc, #520]	@ (80036e8 <USART1_IRQHandler+0x2c0>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'I') && (str_rx2[1] == 'P')) {
 80034e2:	4b7d      	ldr	r3, [pc, #500]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b49      	cmp	r3, #73	@ 0x49
 80034e8:	f040 80e9 	bne.w	80036be <USART1_IRQHandler+0x296>
 80034ec:	4b7a      	ldr	r3, [pc, #488]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	2b50      	cmp	r3, #80	@ 0x50
 80034f2:	f040 80e4 	bne.w	80036be <USART1_IRQHandler+0x296>
			if (str_rx2[2] == '1') {
 80034f6:	4b78      	ldr	r3, [pc, #480]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80034f8:	789b      	ldrb	r3, [r3, #2]
 80034fa:	2b31      	cmp	r3, #49	@ 0x31
 80034fc:	d134      	bne.n	8003568 <USART1_IRQHandler+0x140>
				if (str_rx2[3] != ';') {
 80034fe:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	2b3b      	cmp	r3, #59	@ 0x3b
 8003504:	d00f      	beq.n	8003526 <USART1_IRQHandler+0xfe>
					ip1 = (str_rx2[3] - 48) * 100;
 8003506:	4b74      	ldr	r3, [pc, #464]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003508:	78db      	ldrb	r3, [r3, #3]
 800350a:	461a      	mov	r2, r3
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	4413      	add	r3, r2
 8003510:	461a      	mov	r2, r3
 8003512:	0091      	lsls	r1, r2, #2
 8003514:	461a      	mov	r2, r3
 8003516:	460b      	mov	r3, r1
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3340      	adds	r3, #64	@ 0x40
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b72      	ldr	r3, [pc, #456]	@ (80036ec <USART1_IRQHandler+0x2c4>)
 8003524:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8003526:	4b6c      	ldr	r3, [pc, #432]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	2b3b      	cmp	r3, #59	@ 0x3b
 800352c:	d00e      	beq.n	800354c <USART1_IRQHandler+0x124>
					ip1 = ip1 + (str_rx2[4] - 48) * 10;
 800352e:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003530:	791b      	ldrb	r3, [r3, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	0092      	lsls	r2, r2, #2
 8003536:	4413      	add	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b6b      	ldr	r3, [pc, #428]	@ (80036ec <USART1_IRQHandler+0x2c4>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4413      	add	r3, r2
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3320      	adds	r3, #32
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b68      	ldr	r3, [pc, #416]	@ (80036ec <USART1_IRQHandler+0x2c4>)
 800354a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 800354c:	4b62      	ldr	r3, [pc, #392]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800354e:	795b      	ldrb	r3, [r3, #5]
 8003550:	2b3b      	cmp	r3, #59	@ 0x3b
 8003552:	d009      	beq.n	8003568 <USART1_IRQHandler+0x140>
					ip1 = ip1 + (str_rx2[5] - 48);
 8003554:	4b60      	ldr	r3, [pc, #384]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003556:	795a      	ldrb	r2, [r3, #5]
 8003558:	4b64      	ldr	r3, [pc, #400]	@ (80036ec <USART1_IRQHandler+0x2c4>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4413      	add	r3, r2
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b30      	subs	r3, #48	@ 0x30
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b61      	ldr	r3, [pc, #388]	@ (80036ec <USART1_IRQHandler+0x2c4>)
 8003566:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 8003568:	4b5b      	ldr	r3, [pc, #364]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800356a:	789b      	ldrb	r3, [r3, #2]
 800356c:	2b32      	cmp	r3, #50	@ 0x32
 800356e:	d134      	bne.n	80035da <USART1_IRQHandler+0x1b2>
				if (str_rx2[3] != ';') {
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	2b3b      	cmp	r3, #59	@ 0x3b
 8003576:	d00f      	beq.n	8003598 <USART1_IRQHandler+0x170>
					ip2 = (str_rx2[3] - 48) * 100;
 8003578:	4b57      	ldr	r3, [pc, #348]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800357a:	78db      	ldrb	r3, [r3, #3]
 800357c:	461a      	mov	r2, r3
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	4413      	add	r3, r2
 8003582:	461a      	mov	r2, r3
 8003584:	0091      	lsls	r1, r2, #2
 8003586:	461a      	mov	r2, r3
 8003588:	460b      	mov	r3, r1
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3340      	adds	r3, #64	@ 0x40
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b56      	ldr	r3, [pc, #344]	@ (80036f0 <USART1_IRQHandler+0x2c8>)
 8003596:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8003598:	4b4f      	ldr	r3, [pc, #316]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800359a:	791b      	ldrb	r3, [r3, #4]
 800359c:	2b3b      	cmp	r3, #59	@ 0x3b
 800359e:	d00e      	beq.n	80035be <USART1_IRQHandler+0x196>
					ip2 = ip2 + (str_rx2[4] - 48) * 10;
 80035a0:	4b4d      	ldr	r3, [pc, #308]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80035a2:	791b      	ldrb	r3, [r3, #4]
 80035a4:	461a      	mov	r2, r3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4b50      	ldr	r3, [pc, #320]	@ (80036f0 <USART1_IRQHandler+0x2c8>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3320      	adds	r3, #32
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b4d      	ldr	r3, [pc, #308]	@ (80036f0 <USART1_IRQHandler+0x2c8>)
 80035bc:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 80035be:	4b46      	ldr	r3, [pc, #280]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80035c0:	795b      	ldrb	r3, [r3, #5]
 80035c2:	2b3b      	cmp	r3, #59	@ 0x3b
 80035c4:	d009      	beq.n	80035da <USART1_IRQHandler+0x1b2>
					ip2 = ip2 + (str_rx2[5] - 48);
 80035c6:	4b44      	ldr	r3, [pc, #272]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80035c8:	795a      	ldrb	r2, [r3, #5]
 80035ca:	4b49      	ldr	r3, [pc, #292]	@ (80036f0 <USART1_IRQHandler+0x2c8>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	3b30      	subs	r3, #48	@ 0x30
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b46      	ldr	r3, [pc, #280]	@ (80036f0 <USART1_IRQHandler+0x2c8>)
 80035d8:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 80035da:	4b3f      	ldr	r3, [pc, #252]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80035dc:	789b      	ldrb	r3, [r3, #2]
 80035de:	2b33      	cmp	r3, #51	@ 0x33
 80035e0:	d134      	bne.n	800364c <USART1_IRQHandler+0x224>
				if (str_rx2[3] != ';') {
 80035e2:	4b3d      	ldr	r3, [pc, #244]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	2b3b      	cmp	r3, #59	@ 0x3b
 80035e8:	d00f      	beq.n	800360a <USART1_IRQHandler+0x1e2>
					ip3 = (str_rx2[3] - 48) * 100;
 80035ea:	4b3b      	ldr	r3, [pc, #236]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80035ec:	78db      	ldrb	r3, [r3, #3]
 80035ee:	461a      	mov	r2, r3
 80035f0:	0092      	lsls	r2, r2, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	0091      	lsls	r1, r2, #2
 80035f8:	461a      	mov	r2, r3
 80035fa:	460b      	mov	r3, r1
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3340      	adds	r3, #64	@ 0x40
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <USART1_IRQHandler+0x2cc>)
 8003608:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 800360a:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003610:	d00e      	beq.n	8003630 <USART1_IRQHandler+0x208>
					ip3 = ip3 + (str_rx2[4] - 48) * 10;
 8003612:	4b31      	ldr	r3, [pc, #196]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003614:	791b      	ldrb	r3, [r3, #4]
 8003616:	461a      	mov	r2, r3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4413      	add	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <USART1_IRQHandler+0x2cc>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4413      	add	r3, r2
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3320      	adds	r3, #32
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b31      	ldr	r3, [pc, #196]	@ (80036f4 <USART1_IRQHandler+0x2cc>)
 800362e:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8003630:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003632:	795b      	ldrb	r3, [r3, #5]
 8003634:	2b3b      	cmp	r3, #59	@ 0x3b
 8003636:	d009      	beq.n	800364c <USART1_IRQHandler+0x224>
					ip3 = ip3 + (str_rx2[5] - 48);
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800363a:	795a      	ldrb	r2, [r3, #5]
 800363c:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <USART1_IRQHandler+0x2cc>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4413      	add	r3, r2
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3b30      	subs	r3, #48	@ 0x30
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b2a      	ldr	r3, [pc, #168]	@ (80036f4 <USART1_IRQHandler+0x2cc>)
 800364a:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 800364c:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800364e:	789b      	ldrb	r3, [r3, #2]
 8003650:	2b34      	cmp	r3, #52	@ 0x34
 8003652:	d134      	bne.n	80036be <USART1_IRQHandler+0x296>
				if (str_rx2[3] != ';') {
 8003654:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003656:	78db      	ldrb	r3, [r3, #3]
 8003658:	2b3b      	cmp	r3, #59	@ 0x3b
 800365a:	d00f      	beq.n	800367c <USART1_IRQHandler+0x254>
					ip4 = (str_rx2[3] - 48) * 100;
 800365c:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800365e:	78db      	ldrb	r3, [r3, #3]
 8003660:	461a      	mov	r2, r3
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	4413      	add	r3, r2
 8003666:	461a      	mov	r2, r3
 8003668:	0091      	lsls	r1, r2, #2
 800366a:	461a      	mov	r2, r3
 800366c:	460b      	mov	r3, r1
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3340      	adds	r3, #64	@ 0x40
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <USART1_IRQHandler+0x2d0>)
 800367a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 800367c:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 800367e:	791b      	ldrb	r3, [r3, #4]
 8003680:	2b3b      	cmp	r3, #59	@ 0x3b
 8003682:	d00e      	beq.n	80036a2 <USART1_IRQHandler+0x27a>
					ip4 = ip4 + (str_rx2[4] - 48) * 10;
 8003684:	4b14      	ldr	r3, [pc, #80]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 8003686:	791b      	ldrb	r3, [r3, #4]
 8003688:	461a      	mov	r2, r3
 800368a:	0092      	lsls	r2, r2, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <USART1_IRQHandler+0x2d0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3320      	adds	r3, #32
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <USART1_IRQHandler+0x2d0>)
 80036a0:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80036a4:	795b      	ldrb	r3, [r3, #5]
 80036a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80036a8:	d009      	beq.n	80036be <USART1_IRQHandler+0x296>
					ip4 = ip4 + (str_rx2[5] - 48);
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80036ac:	795a      	ldrb	r2, [r3, #5]
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <USART1_IRQHandler+0x2d0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3b30      	subs	r3, #48	@ 0x30
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <USART1_IRQHandler+0x2d0>)
 80036bc:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'G') && (str_rx2[1] == 'W')) {
 80036be:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b47      	cmp	r3, #71	@ 0x47
 80036c4:	f040 80fe 	bne.w	80038c4 <USART1_IRQHandler+0x49c>
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <USART1_IRQHandler+0x2b0>)
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b57      	cmp	r3, #87	@ 0x57
 80036ce:	f040 80f9 	bne.w	80038c4 <USART1_IRQHandler+0x49c>
 80036d2:	e013      	b.n	80036fc <USART1_IRQHandler+0x2d4>
 80036d4:	20002524 	.word	0x20002524
 80036d8:	2000040c 	.word	0x2000040c
 80036dc:	20000425 	.word	0x20000425
 80036e0:	2000045f 	.word	0x2000045f
 80036e4:	2000045e 	.word	0x2000045e
 80036e8:	20000455 	.word	0x20000455
 80036ec:	20000456 	.word	0x20000456
 80036f0:	20000457 	.word	0x20000457
 80036f4:	20000458 	.word	0x20000458
 80036f8:	20000459 	.word	0x20000459
			if (str_rx2[2] == '1') {
 80036fc:	4b74      	ldr	r3, [pc, #464]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80036fe:	789b      	ldrb	r3, [r3, #2]
 8003700:	2b31      	cmp	r3, #49	@ 0x31
 8003702:	d134      	bne.n	800376e <USART1_IRQHandler+0x346>
				if (str_rx2[3] != ';') {
 8003704:	4b72      	ldr	r3, [pc, #456]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	2b3b      	cmp	r3, #59	@ 0x3b
 800370a:	d00f      	beq.n	800372c <USART1_IRQHandler+0x304>
					gw1 = (str_rx2[3] - 48) * 100;
 800370c:	4b70      	ldr	r3, [pc, #448]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 800370e:	78db      	ldrb	r3, [r3, #3]
 8003710:	461a      	mov	r2, r3
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	4413      	add	r3, r2
 8003716:	461a      	mov	r2, r3
 8003718:	0091      	lsls	r1, r2, #2
 800371a:	461a      	mov	r2, r3
 800371c:	460b      	mov	r3, r1
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3340      	adds	r3, #64	@ 0x40
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <USART1_IRQHandler+0x4ac>)
 800372a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 800372c:	4b68      	ldr	r3, [pc, #416]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 800372e:	791b      	ldrb	r3, [r3, #4]
 8003730:	2b3b      	cmp	r3, #59	@ 0x3b
 8003732:	d00e      	beq.n	8003752 <USART1_IRQHandler+0x32a>
					gw1 = gw1 + (str_rx2[4] - 48) * 10;
 8003734:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	461a      	mov	r2, r3
 800373a:	0092      	lsls	r2, r2, #2
 800373c:	4413      	add	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b64      	ldr	r3, [pc, #400]	@ (80038d4 <USART1_IRQHandler+0x4ac>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3320      	adds	r3, #32
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b61      	ldr	r3, [pc, #388]	@ (80038d4 <USART1_IRQHandler+0x4ac>)
 8003750:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8003752:	4b5f      	ldr	r3, [pc, #380]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003754:	795b      	ldrb	r3, [r3, #5]
 8003756:	2b3b      	cmp	r3, #59	@ 0x3b
 8003758:	d009      	beq.n	800376e <USART1_IRQHandler+0x346>
					gw1 = gw1 + (str_rx2[5] - 48);
 800375a:	4b5d      	ldr	r3, [pc, #372]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 800375c:	795a      	ldrb	r2, [r3, #5]
 800375e:	4b5d      	ldr	r3, [pc, #372]	@ (80038d4 <USART1_IRQHandler+0x4ac>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4413      	add	r3, r2
 8003764:	b2db      	uxtb	r3, r3
 8003766:	3b30      	subs	r3, #48	@ 0x30
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b5a      	ldr	r3, [pc, #360]	@ (80038d4 <USART1_IRQHandler+0x4ac>)
 800376c:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 800376e:	4b58      	ldr	r3, [pc, #352]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003770:	789b      	ldrb	r3, [r3, #2]
 8003772:	2b32      	cmp	r3, #50	@ 0x32
 8003774:	d134      	bne.n	80037e0 <USART1_IRQHandler+0x3b8>
				if (str_rx2[3] != ';') {
 8003776:	4b56      	ldr	r3, [pc, #344]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	2b3b      	cmp	r3, #59	@ 0x3b
 800377c:	d00f      	beq.n	800379e <USART1_IRQHandler+0x376>
					gw2 = (str_rx2[3] - 48) * 100;
 800377e:	4b54      	ldr	r3, [pc, #336]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	461a      	mov	r2, r3
 8003784:	0092      	lsls	r2, r2, #2
 8003786:	4413      	add	r3, r2
 8003788:	461a      	mov	r2, r3
 800378a:	0091      	lsls	r1, r2, #2
 800378c:	461a      	mov	r2, r3
 800378e:	460b      	mov	r3, r1
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3340      	adds	r3, #64	@ 0x40
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b4f      	ldr	r3, [pc, #316]	@ (80038d8 <USART1_IRQHandler+0x4b0>)
 800379c:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 800379e:	4b4c      	ldr	r3, [pc, #304]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037a0:	791b      	ldrb	r3, [r3, #4]
 80037a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80037a4:	d00e      	beq.n	80037c4 <USART1_IRQHandler+0x39c>
					gw2 = gw2 + (str_rx2[4] - 48) * 10;
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037a8:	791b      	ldrb	r3, [r3, #4]
 80037aa:	461a      	mov	r2, r3
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	4b48      	ldr	r3, [pc, #288]	@ (80038d8 <USART1_IRQHandler+0x4b0>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	3320      	adds	r3, #32
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	4b45      	ldr	r3, [pc, #276]	@ (80038d8 <USART1_IRQHandler+0x4b0>)
 80037c2:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 80037c4:	4b42      	ldr	r3, [pc, #264]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037c6:	795b      	ldrb	r3, [r3, #5]
 80037c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80037ca:	d009      	beq.n	80037e0 <USART1_IRQHandler+0x3b8>
					gw2 = gw2 + (str_rx2[5] - 48);
 80037cc:	4b40      	ldr	r3, [pc, #256]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037ce:	795a      	ldrb	r2, [r3, #5]
 80037d0:	4b41      	ldr	r3, [pc, #260]	@ (80038d8 <USART1_IRQHandler+0x4b0>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b30      	subs	r3, #48	@ 0x30
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	4b3e      	ldr	r3, [pc, #248]	@ (80038d8 <USART1_IRQHandler+0x4b0>)
 80037de:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 80037e0:	4b3b      	ldr	r3, [pc, #236]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037e2:	789b      	ldrb	r3, [r3, #2]
 80037e4:	2b33      	cmp	r3, #51	@ 0x33
 80037e6:	d134      	bne.n	8003852 <USART1_IRQHandler+0x42a>
				if (str_rx2[3] != ';') {
 80037e8:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037ea:	78db      	ldrb	r3, [r3, #3]
 80037ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80037ee:	d00f      	beq.n	8003810 <USART1_IRQHandler+0x3e8>
					gw3 = (str_rx2[3] - 48) * 100;
 80037f0:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80037f2:	78db      	ldrb	r3, [r3, #3]
 80037f4:	461a      	mov	r2, r3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	461a      	mov	r2, r3
 80037fc:	0091      	lsls	r1, r2, #2
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	b2db      	uxtb	r3, r3
 8003808:	3340      	adds	r3, #64	@ 0x40
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <USART1_IRQHandler+0x4b4>)
 800380e:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8003810:	4b2f      	ldr	r3, [pc, #188]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003812:	791b      	ldrb	r3, [r3, #4]
 8003814:	2b3b      	cmp	r3, #59	@ 0x3b
 8003816:	d00e      	beq.n	8003836 <USART1_IRQHandler+0x40e>
					gw3 = gw3 + (str_rx2[4] - 48) * 10;
 8003818:	4b2d      	ldr	r3, [pc, #180]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	461a      	mov	r2, r3
 800381e:	0092      	lsls	r2, r2, #2
 8003820:	4413      	add	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <USART1_IRQHandler+0x4b4>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3320      	adds	r3, #32
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <USART1_IRQHandler+0x4b4>)
 8003834:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8003836:	4b26      	ldr	r3, [pc, #152]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003838:	795b      	ldrb	r3, [r3, #5]
 800383a:	2b3b      	cmp	r3, #59	@ 0x3b
 800383c:	d009      	beq.n	8003852 <USART1_IRQHandler+0x42a>
					gw3 = gw3 + (str_rx2[5] - 48);
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003840:	795a      	ldrb	r2, [r3, #5]
 8003842:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <USART1_IRQHandler+0x4b4>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	4413      	add	r3, r2
 8003848:	b2db      	uxtb	r3, r3
 800384a:	3b30      	subs	r3, #48	@ 0x30
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <USART1_IRQHandler+0x4b4>)
 8003850:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 8003852:	4b1f      	ldr	r3, [pc, #124]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003854:	789b      	ldrb	r3, [r3, #2]
 8003856:	2b34      	cmp	r3, #52	@ 0x34
 8003858:	d134      	bne.n	80038c4 <USART1_IRQHandler+0x49c>
				if (str_rx2[3] != ';') {
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 800385c:	78db      	ldrb	r3, [r3, #3]
 800385e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003860:	d00f      	beq.n	8003882 <USART1_IRQHandler+0x45a>
					gw4 = (str_rx2[3] - 48) * 100;
 8003862:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003864:	78db      	ldrb	r3, [r3, #3]
 8003866:	461a      	mov	r2, r3
 8003868:	0092      	lsls	r2, r2, #2
 800386a:	4413      	add	r3, r2
 800386c:	461a      	mov	r2, r3
 800386e:	0091      	lsls	r1, r2, #2
 8003870:	461a      	mov	r2, r3
 8003872:	460b      	mov	r3, r1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3340      	adds	r3, #64	@ 0x40
 800387c:	b2da      	uxtb	r2, r3
 800387e:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <USART1_IRQHandler+0x4b8>)
 8003880:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8003882:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 8003884:	791b      	ldrb	r3, [r3, #4]
 8003886:	2b3b      	cmp	r3, #59	@ 0x3b
 8003888:	d00e      	beq.n	80038a8 <USART1_IRQHandler+0x480>
					gw4 = gw4 + (str_rx2[4] - 48) * 10;
 800388a:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 800388c:	791b      	ldrb	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	0092      	lsls	r2, r2, #2
 8003892:	4413      	add	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <USART1_IRQHandler+0x4b8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4413      	add	r3, r2
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	3320      	adds	r3, #32
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <USART1_IRQHandler+0x4b8>)
 80038a6:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 80038a8:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80038aa:	795b      	ldrb	r3, [r3, #5]
 80038ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80038ae:	d009      	beq.n	80038c4 <USART1_IRQHandler+0x49c>
					gw4 = gw4 + (str_rx2[5] - 48);
 80038b0:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <USART1_IRQHandler+0x4a8>)
 80038b2:	795a      	ldrb	r2, [r3, #5]
 80038b4:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <USART1_IRQHandler+0x4b8>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b30      	subs	r3, #48	@ 0x30
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <USART1_IRQHandler+0x4b8>)
 80038c2:	701a      	strb	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	2000040c 	.word	0x2000040c
 80038d4:	2000045a 	.word	0x2000045a
 80038d8:	2000045b 	.word	0x2000045b
 80038dc:	2000045c 	.word	0x2000045c
 80038e0:	2000045d 	.word	0x2000045d

080038e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038e8:	4802      	ldr	r0, [pc, #8]	@ (80038f4 <OTG_FS_IRQHandler+0x10>)
 80038ea:	f001 fcf0 	bl	80052ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20003238 	.word	0x20003238

080038f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return 1;
 80038fc:	2301      	movs	r3, #1
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_kill>:

int _kill(int pid, int sig)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003912:	f009 ff55 	bl	800d7c0 <__errno>
 8003916:	4603      	mov	r3, r0
 8003918:	2216      	movs	r2, #22
 800391a:	601a      	str	r2, [r3, #0]
  return -1;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_exit>:

void _exit (int status)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003930:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ffe7 	bl	8003908 <_kill>
  while (1) {}    /* Make sure we hang here */
 800393a:	bf00      	nop
 800393c:	e7fd      	b.n	800393a <_exit+0x12>

0800393e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e00a      	b.n	8003966 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003950:	f3af 8000 	nop.w
 8003954:	4601      	mov	r1, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	60ba      	str	r2, [r7, #8]
 800395c:	b2ca      	uxtb	r2, r1
 800395e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3301      	adds	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	dbf0      	blt.n	8003950 <_read+0x12>
  }

  return len;
 800396e:	687b      	ldr	r3, [r7, #4]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e009      	b.n	800399e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	60ba      	str	r2, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dbf1      	blt.n	800398a <_write+0x12>
  }
  return len;
 80039a6:	687b      	ldr	r3, [r7, #4]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_close>:

int _close(int file)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039d8:	605a      	str	r2, [r3, #4]
  return 0;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <_isatty>:

int _isatty(int file)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039f0:	2301      	movs	r3, #1
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <_sbrk+0x5c>)
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <_sbrk+0x60>)
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a2c:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <_sbrk+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <_sbrk+0x64>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <_sbrk+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3a:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <_sbrk+0x64>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d207      	bcs.n	8003a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a48:	f009 feba 	bl	800d7c0 <__errno>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	220c      	movs	r2, #12
 8003a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a56:	e009      	b.n	8003a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a05      	ldr	r2, [pc, #20]	@ (8003a7c <_sbrk+0x64>)
 8003a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20010000 	.word	0x20010000
 8003a78:	00000400 	.word	0x00000400
 8003a7c:	20002528 	.word	0x20002528
 8003a80:	20003ab0 	.word	0x20003ab0

08003a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <SystemInit+0x20>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <SystemInit+0x20>)
 8003a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003ab0:	4b22      	ldr	r3, [pc, #136]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003ab6:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003abc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <WIZCHIP_READ+0x24>
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d114      	bne.n	8003af6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	0c12      	lsrs	r2, r2, #16
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003ada:	4b18      	ldr	r3, [pc, #96]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	0a12      	lsrs	r2, r2, #8
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003ae8:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	4610      	mov	r0, r2
 8003af2:	4798      	blx	r3
 8003af4:	e011      	b.n	8003b1a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f107 020c 	add.w	r2, r7, #12
 8003b14:	2103      	movs	r1, #3
 8003b16:	4610      	mov	r0, r2
 8003b18:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003b1a:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4798      	blx	r3
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003b2a:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <WIZCHIP_READ+0x94>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	4798      	blx	r3
   return ret;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000104 	.word	0x20000104

08003b40 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003b4c:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b60:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d119      	bne.n	8003b9c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003b68:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	0c12      	lsrs	r2, r2, #16
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	4610      	mov	r0, r2
 8003b74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003b76:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	0a12      	lsrs	r2, r2, #8
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4610      	mov	r0, r2
 8003b82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4610      	mov	r0, r2
 8003b98:	4798      	blx	r3
 8003b9a:	e013      	b.n	8003bc4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003bb6:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	f107 020c 	add.w	r2, r7, #12
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003bc4:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003bca:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <WIZCHIP_WRITE+0x98>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	4798      	blx	r3
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000104 	.word	0x20000104

08003bdc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003bea:	4b2b      	ldr	r3, [pc, #172]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003bf0:	4b29      	ldr	r3, [pc, #164]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003bf6:	4b28      	ldr	r3, [pc, #160]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <WIZCHIP_READ_BUF+0x2a>
 8003bfe:	4b26      	ldr	r3, [pc, #152]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d126      	bne.n	8003c54 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003c06:	4b24      	ldr	r3, [pc, #144]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	0c12      	lsrs	r2, r2, #16
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	4610      	mov	r0, r2
 8003c12:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003c14:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	0a12      	lsrs	r2, r2, #8
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003c22:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	82fb      	strh	r3, [r7, #22]
 8003c32:	e00a      	b.n	8003c4a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003c34:	4b18      	ldr	r3, [pc, #96]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	8afa      	ldrh	r2, [r7, #22]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	188c      	adds	r4, r1, r2
 8003c3e:	4798      	blx	r3
 8003c40:	4603      	mov	r3, r0
 8003c42:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003c44:	8afb      	ldrh	r3, [r7, #22]
 8003c46:	3301      	adds	r3, #1
 8003c48:	82fb      	strh	r3, [r7, #22]
 8003c4a:	8afa      	ldrh	r2, [r7, #22]
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3f0      	bcc.n	8003c34 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c52:	e017      	b.n	8003c84 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	f107 0210 	add.w	r2, r7, #16
 8003c72:	2103      	movs	r1, #3
 8003c74:	4610      	mov	r0, r2
 8003c76:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003c78:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	68b8      	ldr	r0, [r7, #8]
 8003c82:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003c84:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003c8a:	4b03      	ldr	r3, [pc, #12]	@ (8003c98 <WIZCHIP_READ_BUF+0xbc>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4798      	blx	r3
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}
 8003c98:	20000104 	.word	0x20000104

08003c9c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003cb0:	4b29      	ldr	r3, [pc, #164]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003cbe:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d126      	bne.n	8003d14 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003cc6:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	0c12      	lsrs	r2, r2, #16
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003cd4:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	0a12      	lsrs	r2, r2, #8
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	4610      	mov	r0, r2
 8003cec:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	82fb      	strh	r3, [r7, #22]
 8003cf2:	e00a      	b.n	8003d0a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003cf4:	4b18      	ldr	r3, [pc, #96]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	8afa      	ldrh	r2, [r7, #22]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	4610      	mov	r0, r2
 8003d02:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003d04:	8afb      	ldrh	r3, [r7, #22]
 8003d06:	3301      	adds	r3, #1
 8003d08:	82fb      	strh	r3, [r7, #22]
 8003d0a:	8afa      	ldrh	r2, [r7, #22]
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3f0      	bcc.n	8003cf4 <WIZCHIP_WRITE_BUF+0x58>
 8003d12:	e017      	b.n	8003d44 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	f107 0210 	add.w	r2, r7, #16
 8003d32:	2103      	movs	r1, #3
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	68b8      	ldr	r0, [r7, #8]
 8003d42:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003d4a:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <WIZCHIP_WRITE_BUF+0xbc>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	4798      	blx	r3
}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000104 	.word	0x20000104

08003d5c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	81fb      	strh	r3, [r7, #14]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	3301      	adds	r3, #1
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fe94 	bl	8003aa8 <WIZCHIP_READ>
 8003d80:	4603      	mov	r3, r0
 8003d82:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003d84:	89bb      	ldrh	r3, [r7, #12]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	b29c      	uxth	r4, r3
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	3301      	adds	r3, #1
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fe86 	bl	8003aa8 <WIZCHIP_READ>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4423      	add	r3, r4
 8003da0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003da2:	89bb      	ldrh	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	3301      	adds	r3, #1
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fe77 	bl	8003aa8 <WIZCHIP_READ>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003dbe:	89fb      	ldrh	r3, [r7, #14]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	b29c      	uxth	r4, r3
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	3301      	adds	r3, #1
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fe69 	bl	8003aa8 <WIZCHIP_READ>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4423      	add	r3, r4
 8003dda:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003ddc:	89fa      	ldrh	r2, [r7, #14]
 8003dde:	89bb      	ldrh	r3, [r7, #12]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1c4      	bne.n	8003d6e <getSn_TX_FSR+0x12>
   return val;
 8003de4:	89fb      	ldrh	r3, [r7, #14]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}

08003dee <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003dee:	b590      	push	{r4, r7, lr}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	81fb      	strh	r3, [r7, #14]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3301      	adds	r3, #1
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fe4b 	bl	8003aa8 <WIZCHIP_READ>
 8003e12:	4603      	mov	r3, r0
 8003e14:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003e16:	89bb      	ldrh	r3, [r7, #12]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	b29c      	uxth	r4, r3
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	3301      	adds	r3, #1
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe3d 	bl	8003aa8 <WIZCHIP_READ>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4423      	add	r3, r4
 8003e32:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003e34:	89bb      	ldrh	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d019      	beq.n	8003e6e <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3301      	adds	r3, #1
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fe2e 	bl	8003aa8 <WIZCHIP_READ>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	b29c      	uxth	r4, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fe20 	bl	8003aa8 <WIZCHIP_READ>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4423      	add	r3, r4
 8003e6c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003e6e:	89fa      	ldrh	r2, [r7, #14]
 8003e70:	89bb      	ldrh	r3, [r7, #12]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d1c4      	bne.n	8003e00 <getSn_RX_RSR+0x12>
   return val;
 8003e76:	89fb      	ldrh	r3, [r7, #14]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}

08003e80 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	71fb      	strb	r3, [r7, #7]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003e98:	88bb      	ldrh	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d046      	beq.n	8003f2c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fdfc 	bl	8003aa8 <WIZCHIP_READ>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	b29c      	uxth	r4, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	3301      	adds	r3, #1
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fdf0 	bl	8003aa8 <WIZCHIP_READ>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4423      	add	r3, r4
 8003ecc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003ece:	89fb      	ldrh	r3, [r7, #14]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	79fa      	ldrb	r2, [r7, #7]
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	3202      	adds	r2, #2
 8003ed8:	00d2      	lsls	r2, r2, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003ede:	88bb      	ldrh	r3, [r7, #4]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f7ff fed9 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003eea:	89fa      	ldrh	r2, [r7, #14]
 8003eec:	88bb      	ldrh	r3, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003efe:	461a      	mov	r2, r3
 8003f00:	89fb      	ldrh	r3, [r7, #14]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7ff fe18 	bl	8003b40 <WIZCHIP_WRITE>
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3301      	adds	r3, #1
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7ff fe0b 	bl	8003b40 <WIZCHIP_WRITE>
 8003f2a:	e000      	b.n	8003f2e <wiz_send_data+0xae>
   if(len == 0)  return;
 8003f2c:	bf00      	nop
}
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd90      	pop	{r4, r7, pc}

08003f34 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	71fb      	strb	r3, [r7, #7]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003f4c:	88bb      	ldrh	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d046      	beq.n	8003fe0 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	3301      	adds	r3, #1
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fda2 	bl	8003aa8 <WIZCHIP_READ>
 8003f64:	4603      	mov	r3, r0
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	b29c      	uxth	r4, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3301      	adds	r3, #1
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd96 	bl	8003aa8 <WIZCHIP_READ>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4423      	add	r3, r4
 8003f80:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	79fa      	ldrb	r2, [r7, #7]
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	3203      	adds	r2, #3
 8003f8c:	00d2      	lsls	r2, r2, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003f92:	88bb      	ldrh	r3, [r7, #4]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	68b8      	ldr	r0, [r7, #8]
 8003f9a:	f7ff fe1f 	bl	8003bdc <WIZCHIP_READ_BUF>
   ptr += len;
 8003f9e:	89fa      	ldrh	r2, [r7, #14]
 8003fa0:	88bb      	ldrh	r3, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3301      	adds	r3, #1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7ff fdbe 	bl	8003b40 <WIZCHIP_WRITE>
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	3301      	adds	r3, #1
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	89fb      	ldrh	r3, [r7, #14]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7ff fdb1 	bl	8003b40 <WIZCHIP_WRITE>
 8003fde:	e000      	b.n	8003fe2 <wiz_recv_data+0xae>
   if(len == 0) return;
 8003fe0:	bf00      	nop
}
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
 800405c:	2300      	movs	r3, #0
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	807b      	strh	r3, [r7, #2]
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	807b      	strh	r3, [r7, #2]
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <reg_wizchip_cs_cbfunc+0x16>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <reg_wizchip_cs_cbfunc+0x40>)
 80040c8:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <reg_wizchip_cs_cbfunc+0x44>)
 80040ca:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <reg_wizchip_cs_cbfunc+0x40>)
 80040ce:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <reg_wizchip_cs_cbfunc+0x48>)
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	e006      	b.n	80040e2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80040d4:	4a06      	ldr	r2, [pc, #24]	@ (80040f0 <reg_wizchip_cs_cbfunc+0x40>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80040da:	4a05      	ldr	r2, [pc, #20]	@ (80040f0 <reg_wizchip_cs_cbfunc+0x40>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6193      	str	r3, [r2, #24]
   }
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000104 	.word	0x20000104
 80040f4:	08004005 	.word	0x08004005
 80040f8:	08004013 	.word	0x08004013

080040fc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004106:	bf00      	nop
 8004108:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <reg_wizchip_spi_cbfunc+0x4c>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f9      	beq.n	8004108 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <reg_wizchip_spi_cbfunc+0x24>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004120:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <reg_wizchip_spi_cbfunc+0x4c>)
 8004122:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <reg_wizchip_spi_cbfunc+0x50>)
 8004124:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004126:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <reg_wizchip_spi_cbfunc+0x4c>)
 8004128:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <reg_wizchip_spi_cbfunc+0x54>)
 800412a:	621a      	str	r2, [r3, #32]
 800412c:	e006      	b.n	800413c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800412e:	4a06      	ldr	r2, [pc, #24]	@ (8004148 <reg_wizchip_spi_cbfunc+0x4c>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004134:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <reg_wizchip_spi_cbfunc+0x4c>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6213      	str	r3, [r2, #32]
   }
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	20000104 	.word	0x20000104
 800414c:	08004059 	.word	0x08004059
 8004150:	08004069 	.word	0x08004069

08004154 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800415e:	bf00      	nop
 8004160:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f9      	beq.n	8004160 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <reg_wizchip_spiburst_cbfunc+0x24>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800417a:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <reg_wizchip_spiburst_cbfunc+0x50>)
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004180:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28
 8004184:	e006      	b.n	8004194 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004186:	4a06      	ldr	r2, [pc, #24]	@ (80041a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800418c:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	20000104 	.word	0x20000104
 80041a4:	0800407f 	.word	0x0800407f
 80041a8:	08004097 	.word	0x08004097

080041ac <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d82c      	bhi.n	8004218 <ctlnetwork+0x6c>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <ctlnetwork+0x18>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041dd 	.word	0x080041dd
 80041c8:	080041e5 	.word	0x080041e5
 80041cc:	080041ed 	.word	0x080041ed
 80041d0:	080041fb 	.word	0x080041fb
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004211 	.word	0x08004211
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80041dc:	6838      	ldr	r0, [r7, #0]
 80041de:	f000 f8fb 	bl	80043d8 <wizchip_setnetinfo>
         break;
 80041e2:	e01c      	b.n	800421e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f000 f937 	bl	8004458 <wizchip_getnetinfo>
         break;
 80041ea:	e018      	b.n	800421e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f971 	bl	80044d8 <wizchip_setnetmode>
 80041f6:	4603      	mov	r3, r0
 80041f8:	e012      	b.n	8004220 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80041fa:	f000 f98f 	bl	800451c <wizchip_getnetmode>
 80041fe:	4603      	mov	r3, r0
 8004200:	461a      	mov	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	701a      	strb	r2, [r3, #0]
         break;
 8004206:	e00a      	b.n	800421e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004208:	6838      	ldr	r0, [r7, #0]
 800420a:	f000 f98f 	bl	800452c <wizchip_settimeout>
         break;
 800420e:	e006      	b.n	800421e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004210:	6838      	ldr	r0, [r7, #0]
 8004212:	f000 f9ac 	bl	800456e <wizchip_gettimeout>
         break;
 8004216:	e002      	b.n	800421e <ctlnetwork+0x72>
      default:
         return -1;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800421c:	e000      	b.n	8004220 <ctlnetwork+0x74>
   }
   return 0;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	2206      	movs	r2, #6
 8004232:	4619      	mov	r1, r3
 8004234:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004238:	f7ff fcd0 	bl	8003bdc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	2204      	movs	r2, #4
 8004242:	4619      	mov	r1, r3
 8004244:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004248:	f7ff fcc8 	bl	8003bdc <WIZCHIP_READ_BUF>
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	2204      	movs	r2, #4
 8004252:	4619      	mov	r1, r3
 8004254:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004258:	f7ff fcc0 	bl	8003bdc <WIZCHIP_READ_BUF>
 800425c:	f107 030c 	add.w	r3, r7, #12
 8004260:	2204      	movs	r2, #4
 8004262:	4619      	mov	r1, r3
 8004264:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004268:	f7ff fcb8 	bl	8003bdc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800426c:	2180      	movs	r1, #128	@ 0x80
 800426e:	2000      	movs	r0, #0
 8004270:	f7ff fc66 	bl	8003b40 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004274:	2000      	movs	r0, #0
 8004276:	f7ff fc17 	bl	8003aa8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2206      	movs	r2, #6
 800427e:	4619      	mov	r1, r3
 8004280:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004284:	f7ff fd0a 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	2204      	movs	r2, #4
 800428e:	4619      	mov	r1, r3
 8004290:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004294:	f7ff fd02 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	2204      	movs	r2, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80042a4:	f7ff fcfa 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	2204      	movs	r2, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80042b4:	f7ff fcf2 	bl	8003c9c <WIZCHIP_WRITE_BUF>
}
 80042b8:	bf00      	nop
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80042ce:	f7ff ffab 	bl	8004228 <wizchip_sw_reset>
   if(txsize)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d03b      	beq.n	8004350 <wizchip_init+0x90>
   {
      tmp = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e015      	b.n	800430e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80042e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	7bbb      	ldrb	r3, [r7, #14]
 80042ee:	4413      	add	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80042f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	dd02      	ble.n	8004302 <wizchip_init+0x42>
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004300:	e066      	b.n	80043d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004312:	2b07      	cmp	r3, #7
 8004314:	dde5      	ble.n	80042e2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e015      	b.n	8004348 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800431c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	3301      	adds	r3, #1
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800432a:	4618      	mov	r0, r3
 800432c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	4619      	mov	r1, r3
 8004338:	f7ff fc02 	bl	8003b40 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800433c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3301      	adds	r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434c:	2b07      	cmp	r3, #7
 800434e:	dde5      	ble.n	800431c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03b      	beq.n	80043ce <wizchip_init+0x10e>
   {
      tmp = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	e015      	b.n	800438c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4413      	add	r3, r2
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	7bbb      	ldrb	r3, [r7, #14]
 800436c:	4413      	add	r3, r2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8004372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004376:	2b10      	cmp	r3, #16
 8004378:	dd02      	ble.n	8004380 <wizchip_init+0xc0>
 800437a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800437e:	e027      	b.n	80043d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	3301      	adds	r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004390:	2b07      	cmp	r3, #7
 8004392:	dde5      	ble.n	8004360 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004394:	2300      	movs	r3, #0
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	e015      	b.n	80043c6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	3301      	adds	r3, #1
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80043a8:	4618      	mov	r0, r3
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f7ff fbc3 	bl	8003b40 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	2b07      	cmp	r3, #7
 80043cc:	dde5      	ble.n	800439a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2206      	movs	r2, #6
 80043e4:	4619      	mov	r1, r3
 80043e6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80043ea:	f7ff fc57 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	330e      	adds	r3, #14
 80043f2:	2204      	movs	r2, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80043fa:	f7ff fc4f 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	330a      	adds	r3, #10
 8004402:	2204      	movs	r2, #4
 8004404:	4619      	mov	r1, r3
 8004406:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800440a:	f7ff fc47 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3306      	adds	r3, #6
 8004412:	2204      	movs	r2, #4
 8004414:	4619      	mov	r1, r3
 8004416:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800441a:	f7ff fc3f 	bl	8003c9c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7c9a      	ldrb	r2, [r3, #18]
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <wizchip_setnetinfo+0x78>)
 8004424:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7cda      	ldrb	r2, [r3, #19]
 800442a:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <wizchip_setnetinfo+0x78>)
 800442c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7d1a      	ldrb	r2, [r3, #20]
 8004432:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <wizchip_setnetinfo+0x78>)
 8004434:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	7d5a      	ldrb	r2, [r3, #21]
 800443a:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <wizchip_setnetinfo+0x78>)
 800443c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7d9a      	ldrb	r2, [r3, #22]
 8004442:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <wizchip_setnetinfo+0x7c>)
 8004444:	701a      	strb	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	2000252c 	.word	0x2000252c
 8004454:	20002530 	.word	0x20002530

08004458 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2206      	movs	r2, #6
 8004464:	4619      	mov	r1, r3
 8004466:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800446a:	f7ff fbb7 	bl	8003bdc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	330e      	adds	r3, #14
 8004472:	2204      	movs	r2, #4
 8004474:	4619      	mov	r1, r3
 8004476:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800447a:	f7ff fbaf 	bl	8003bdc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	330a      	adds	r3, #10
 8004482:	2204      	movs	r2, #4
 8004484:	4619      	mov	r1, r3
 8004486:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800448a:	f7ff fba7 	bl	8003bdc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3306      	adds	r3, #6
 8004492:	2204      	movs	r2, #4
 8004494:	4619      	mov	r1, r3
 8004496:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800449a:	f7ff fb9f 	bl	8003bdc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800449e:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <wizchip_getnetinfo+0x78>)
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <wizchip_getnetinfo+0x78>)
 80044a8:	785a      	ldrb	r2, [r3, #1]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80044ae:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <wizchip_getnetinfo+0x78>)
 80044b0:	789a      	ldrb	r2, [r3, #2]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <wizchip_getnetinfo+0x78>)
 80044b8:	78da      	ldrb	r2, [r3, #3]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80044be:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <wizchip_getnetinfo+0x7c>)
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	759a      	strb	r2, [r3, #22]
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000252c 	.word	0x2000252c
 80044d4:	20002530 	.word	0x20002530

080044d8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <wizchip_setnetmode+0x1e>
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044f4:	e00e      	b.n	8004514 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7ff fad6 	bl	8003aa8 <WIZCHIP_READ>
 80044fc:	4603      	mov	r3, r0
 80044fe:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4313      	orrs	r3, r2
 8004506:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	4619      	mov	r1, r3
 800450c:	2000      	movs	r0, #0
 800450e:	f7ff fb17 	bl	8003b40 <WIZCHIP_WRITE>
   return 0;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004520:	2000      	movs	r0, #0
 8004522:	f7ff fac1 	bl	8003aa8 <WIZCHIP_READ>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}

0800452c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4619      	mov	r1, r3
 800453a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800453e:	f7ff faff 	bl	8003b40 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	885b      	ldrh	r3, [r3, #2]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b29b      	uxth	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	4619      	mov	r1, r3
 800454e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004552:	f7ff faf5 	bl	8003b40 <WIZCHIP_WRITE>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	885b      	ldrh	r3, [r3, #2]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4619      	mov	r1, r3
 800455e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004562:	f7ff faed 	bl	8003b40 <WIZCHIP_WRITE>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800456e:	b590      	push	{r4, r7, lr}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004576:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800457a:	f7ff fa95 	bl	8003aa8 <WIZCHIP_READ>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004586:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800458a:	f7ff fa8d 	bl	8003aa8 <WIZCHIP_READ>
 800458e:	4603      	mov	r3, r0
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	b29c      	uxth	r4, r3
 8004594:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004598:	f7ff fa86 	bl	8003aa8 <WIZCHIP_READ>
 800459c:	4603      	mov	r3, r0
 800459e:	4423      	add	r3, r4
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	805a      	strh	r2, [r3, #2]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}
	...

080045b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045b4:	480d      	ldr	r0, [pc, #52]	@ (80045ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045b6:	490e      	ldr	r1, [pc, #56]	@ (80045f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045b8:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045bc:	e002      	b.n	80045c4 <LoopCopyDataInit>

080045be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045c2:	3304      	adds	r3, #4

080045c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045c8:	d3f9      	bcc.n	80045be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ca:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045cc:	4c0b      	ldr	r4, [pc, #44]	@ (80045fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80045ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045d0:	e001      	b.n	80045d6 <LoopFillZerobss>

080045d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045d4:	3204      	adds	r2, #4

080045d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045d8:	d3fb      	bcc.n	80045d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045da:	f7ff fa53 	bl	8003a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045de:	f009 f8f5 	bl	800d7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045e2:	f7fd fdd1 	bl	8002188 <main>
  bx  lr    
 80045e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80045ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045f0:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 80045f4:	08012424 	.word	0x08012424
  ldr r2, =_sbss
 80045f8:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 80045fc:	20003ab0 	.word	0x20003ab0

08004600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004600:	e7fe      	b.n	8004600 <ADC_IRQHandler>
	...

08004604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004608:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <HAL_Init+0x40>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a0d      	ldr	r2, [pc, #52]	@ (8004644 <HAL_Init+0x40>)
 800460e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <HAL_Init+0x40>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <HAL_Init+0x40>)
 800461a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800461e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <HAL_Init+0x40>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a07      	ldr	r2, [pc, #28]	@ (8004644 <HAL_Init+0x40>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800462c:	2003      	movs	r0, #3
 800462e:	f000 f8fc 	bl	800482a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004632:	200f      	movs	r0, #15
 8004634:	f7fe fdf4 	bl	8003220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004638:	f7fe fd7a 	bl	8003130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023c00 	.word	0x40023c00

08004648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_IncTick+0x20>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_IncTick+0x24>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4413      	add	r3, r2
 8004658:	4a04      	ldr	r2, [pc, #16]	@ (800466c <HAL_IncTick+0x24>)
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000134 	.word	0x20000134
 800466c:	20002534 	.word	0x20002534

08004670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return uwTick;
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_GetTick+0x14>)
 8004676:	681b      	ldr	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20002534 	.word	0x20002534

08004688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7ff ffee 	bl	8004670 <HAL_GetTick>
 8004694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a0:	d005      	beq.n	80046ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_Delay+0x44>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ae:	bf00      	nop
 80046b0:	f7ff ffde 	bl	8004670 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d8f7      	bhi.n	80046b0 <HAL_Delay+0x28>
  {
  }
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000134 	.word	0x20000134

080046d0 <__NVIC_SetPriorityGrouping>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <__NVIC_SetPriorityGrouping+0x44>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046ec:	4013      	ands	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <__NVIC_SetPriorityGrouping+0x44>)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	60d3      	str	r3, [r2, #12]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <__NVIC_GetPriorityGrouping>:
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800471c:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <__NVIC_GetPriorityGrouping+0x18>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	f003 0307 	and.w	r3, r3, #7
}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <__NVIC_EnableIRQ>:
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	2b00      	cmp	r3, #0
 8004744:	db0b      	blt.n	800475e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	f003 021f 	and.w	r2, r3, #31
 800474c:	4907      	ldr	r1, [pc, #28]	@ (800476c <__NVIC_EnableIRQ+0x38>)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2001      	movs	r0, #1
 8004756:	fa00 f202 	lsl.w	r2, r0, r2
 800475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000e100 	.word	0xe000e100

08004770 <__NVIC_SetPriority>:
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	2b00      	cmp	r3, #0
 8004782:	db0a      	blt.n	800479a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	490c      	ldr	r1, [pc, #48]	@ (80047bc <__NVIC_SetPriority+0x4c>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	0112      	lsls	r2, r2, #4
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	440b      	add	r3, r1
 8004794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004798:	e00a      	b.n	80047b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4908      	ldr	r1, [pc, #32]	@ (80047c0 <__NVIC_SetPriority+0x50>)
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	3b04      	subs	r3, #4
 80047a8:	0112      	lsls	r2, r2, #4
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	440b      	add	r3, r1
 80047ae:	761a      	strb	r2, [r3, #24]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000e100 	.word	0xe000e100
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <NVIC_EncodePriority>:
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	@ 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f1c3 0307 	rsb	r3, r3, #7
 80047de:	2b04      	cmp	r3, #4
 80047e0:	bf28      	it	cs
 80047e2:	2304      	movcs	r3, #4
 80047e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3304      	adds	r3, #4
 80047ea:	2b06      	cmp	r3, #6
 80047ec:	d902      	bls.n	80047f4 <NVIC_EncodePriority+0x30>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3b03      	subs	r3, #3
 80047f2:	e000      	b.n	80047f6 <NVIC_EncodePriority+0x32>
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	401a      	ands	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800480c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	43d9      	mvns	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800481c:	4313      	orrs	r3, r2
}
 800481e:	4618      	mov	r0, r3
 8004820:	3724      	adds	r7, #36	@ 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ff4c 	bl	80046d0 <__NVIC_SetPriorityGrouping>
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004852:	f7ff ff61 	bl	8004718 <__NVIC_GetPriorityGrouping>
 8004856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f7ff ffb1 	bl	80047c4 <NVIC_EncodePriority>
 8004862:	4602      	mov	r2, r0
 8004864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff ff80 	bl	8004770 <__NVIC_SetPriority>
}
 8004870:	bf00      	nop
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff54 	bl	8004734 <__NVIC_EnableIRQ>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d004      	beq.n	80048b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2280      	movs	r2, #128	@ 0x80
 80048ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e00c      	b.n	80048cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2205      	movs	r2, #5
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048ea:	4b23      	ldr	r3, [pc, #140]	@ (8004978 <HAL_FLASH_Program+0xa0>)
 80048ec:	7e1b      	ldrb	r3, [r3, #24]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_FLASH_Program+0x1e>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e03b      	b.n	800496e <HAL_FLASH_Program+0x96>
 80048f6:	4b20      	ldr	r3, [pc, #128]	@ (8004978 <HAL_FLASH_Program+0xa0>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004900:	f000 f870 	bl	80049e4 <FLASH_WaitForLastOperation>
 8004904:	4603      	mov	r3, r0
 8004906:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d12b      	bne.n	8004966 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004914:	783b      	ldrb	r3, [r7, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f000 f91b 	bl	8004b54 <FLASH_Program_Byte>
 800491e:	e016      	b.n	800494e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004926:	883b      	ldrh	r3, [r7, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f000 f8ee 	bl	8004b0c <FLASH_Program_HalfWord>
 8004930:	e00d      	b.n	800494e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d105      	bne.n	8004944 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f000 f8c3 	bl	8004ac8 <FLASH_Program_Word>
 8004942:	e004      	b.n	800494e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f000 f88b 	bl	8004a64 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800494e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004952:	f000 f847 	bl	80049e4 <FLASH_WaitForLastOperation>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <HAL_FLASH_Program+0xa4>)
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	4a07      	ldr	r2, [pc, #28]	@ (800497c <HAL_FLASH_Program+0xa4>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004966:	4b04      	ldr	r3, [pc, #16]	@ (8004978 <HAL_FLASH_Program+0xa0>)
 8004968:	2200      	movs	r2, #0
 800496a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20002538 	.word	0x20002538
 800497c:	40023c00 	.word	0x40023c00

08004980 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800498a:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_FLASH_Unlock+0x38>)
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da0b      	bge.n	80049aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_FLASH_Unlock+0x38>)
 8004994:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <HAL_FLASH_Unlock+0x3c>)
 8004996:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004998:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <HAL_FLASH_Unlock+0x38>)
 800499a:	4a09      	ldr	r2, [pc, #36]	@ (80049c0 <HAL_FLASH_Unlock+0x40>)
 800499c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_FLASH_Unlock+0x38>)
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da01      	bge.n	80049aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80049aa:	79fb      	ldrb	r3, [r7, #7]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40023c00 	.word	0x40023c00
 80049bc:	45670123 	.word	0x45670123
 80049c0:	cdef89ab 	.word	0xcdef89ab

080049c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_FLASH_Lock+0x1c>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_FLASH_Lock+0x1c>)
 80049ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40023c00 	.word	0x40023c00

080049e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049f0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <FLASH_WaitForLastOperation+0x78>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80049f6:	f7ff fe3b 	bl	8004670 <HAL_GetTick>
 80049fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80049fc:	e010      	b.n	8004a20 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a04:	d00c      	beq.n	8004a20 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <FLASH_WaitForLastOperation+0x38>
 8004a0c:	f7ff fe30 	bl	8004670 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d201      	bcs.n	8004a20 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e019      	b.n	8004a54 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004a20:	4b0f      	ldr	r3, [pc, #60]	@ (8004a60 <FLASH_WaitForLastOperation+0x7c>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e8      	bne.n	80049fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a60 <FLASH_WaitForLastOperation+0x7c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a38:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <FLASH_WaitForLastOperation+0x7c>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <FLASH_WaitForLastOperation+0x7c>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004a4a:	f000 f8a5 	bl	8004b98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
  
}  
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20002538 	.word	0x20002538
 8004a60:	40023c00 	.word	0x40023c00

08004a64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a70:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <FLASH_Program_DoubleWord+0x60>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <FLASH_Program_DoubleWord+0x60>)
 8004a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <FLASH_Program_DoubleWord+0x60>)
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	4a10      	ldr	r2, [pc, #64]	@ (8004ac4 <FLASH_Program_DoubleWord+0x60>)
 8004a82:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <FLASH_Program_DoubleWord+0x60>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac4 <FLASH_Program_DoubleWord+0x60>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004a9a:	f3bf 8f6f 	isb	sy
}
 8004a9e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	000a      	movs	r2, r1
 8004aae:	2300      	movs	r3, #0
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	3104      	adds	r1, #4
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40023c00 	.word	0x40023c00

08004ac8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <FLASH_Program_Word+0x40>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b08 <FLASH_Program_Word+0x40>)
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004adc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004ade:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <FLASH_Program_Word+0x40>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	@ (8004b08 <FLASH_Program_Word+0x40>)
 8004ae4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ae8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004aea:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <FLASH_Program_Word+0x40>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	4a06      	ldr	r2, [pc, #24]	@ (8004b08 <FLASH_Program_Word+0x40>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	601a      	str	r2, [r3, #0]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	40023c00 	.word	0x40023c00

08004b0c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b18:	4b0d      	ldr	r3, [pc, #52]	@ (8004b50 <FLASH_Program_HalfWord+0x44>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <FLASH_Program_HalfWord+0x44>)
 8004b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004b24:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <FLASH_Program_HalfWord+0x44>)
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <FLASH_Program_HalfWord+0x44>)
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <FLASH_Program_HalfWord+0x44>)
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	4a06      	ldr	r2, [pc, #24]	@ (8004b50 <FLASH_Program_HalfWord+0x44>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	801a      	strh	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40023c00 	.word	0x40023c00

08004b54 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <FLASH_Program_Byte+0x40>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	4a0b      	ldr	r2, [pc, #44]	@ (8004b94 <FLASH_Program_Byte+0x40>)
 8004b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <FLASH_Program_Byte+0x40>)
 8004b6e:	4a09      	ldr	r2, [pc, #36]	@ (8004b94 <FLASH_Program_Byte+0x40>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <FLASH_Program_Byte+0x40>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	4a06      	ldr	r2, [pc, #24]	@ (8004b94 <FLASH_Program_Byte+0x40>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	701a      	strb	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40023c00 	.word	0x40023c00

08004b98 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f043 0310 	orr.w	r3, r3, #16
 8004bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004bb2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004bb4:	4b29      	ldr	r3, [pc, #164]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004bba:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004bc6:	4b26      	ldr	r3, [pc, #152]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f043 0308 	orr.w	r3, r3, #8
 8004bce:	4a24      	ldr	r2, [pc, #144]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004bd0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004bd2:	4b22      	ldr	r3, [pc, #136]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004bd8:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004be4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004bee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004bf2:	2240      	movs	r2, #64	@ 0x40
 8004bf4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004c02:	4b17      	ldr	r3, [pc, #92]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f043 0302 	orr.w	r3, r3, #2
 8004c0a:	4a15      	ldr	r2, [pc, #84]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004c0c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004c10:	2280      	movs	r2, #128	@ 0x80
 8004c12:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004c2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c32:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f043 0320 	orr.w	r3, r3, #32
 8004c48:	4a05      	ldr	r2, [pc, #20]	@ (8004c60 <FLASH_SetErrorCode+0xc8>)
 8004c4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004c4c:	4b03      	ldr	r3, [pc, #12]	@ (8004c5c <FLASH_SetErrorCode+0xc4>)
 8004c4e:	2202      	movs	r2, #2
 8004c50:	60da      	str	r2, [r3, #12]
  }
}
 8004c52:	bf00      	nop
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40023c00 	.word	0x40023c00
 8004c60:	20002538 	.word	0x20002538

08004c64 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e010      	b.n	8004ca2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d103      	bne.n	8004c8e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004c86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e009      	b.n	8004ca2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d103      	bne.n	8004c9c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e002      	b.n	8004ca2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004c9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ca2:	4b13      	ldr	r3, [pc, #76]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004cae:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	490f      	ldr	r1, [pc, #60]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cc0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	4a07      	ldr	r2, [pc, #28]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cd2:	f043 0302 	orr.w	r3, r3, #2
 8004cd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	@ (8004cf0 <FLASH_Erase_Sector+0x8c>)
 8004cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce2:	6113      	str	r3, [r2, #16]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	@ 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e159      	b.n	8004fc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d10:	2201      	movs	r2, #1
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f040 8148 	bne.w	8004fbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d005      	beq.n	8004d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d130      	bne.n	8004da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	2203      	movs	r2, #3
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 0201 	and.w	r2, r3, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d017      	beq.n	8004de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d123      	bne.n	8004e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	220f      	movs	r2, #15
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	08da      	lsrs	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3208      	adds	r2, #8
 8004e32:	69b9      	ldr	r1, [r7, #24]
 8004e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	2203      	movs	r2, #3
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0203 	and.w	r2, r3, #3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80a2 	beq.w	8004fbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	4b57      	ldr	r3, [pc, #348]	@ (8004fdc <HAL_GPIO_Init+0x2e8>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	4a56      	ldr	r2, [pc, #344]	@ (8004fdc <HAL_GPIO_Init+0x2e8>)
 8004e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e8a:	4b54      	ldr	r3, [pc, #336]	@ (8004fdc <HAL_GPIO_Init+0x2e8>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e96:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_GPIO_Init+0x2ec>)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a49      	ldr	r2, [pc, #292]	@ (8004fe4 <HAL_GPIO_Init+0x2f0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x202>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a48      	ldr	r2, [pc, #288]	@ (8004fe8 <HAL_GPIO_Init+0x2f4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x1fe>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a47      	ldr	r2, [pc, #284]	@ (8004fec <HAL_GPIO_Init+0x2f8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x1fa>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a46      	ldr	r2, [pc, #280]	@ (8004ff0 <HAL_GPIO_Init+0x2fc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x1f6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a45      	ldr	r2, [pc, #276]	@ (8004ff4 <HAL_GPIO_Init+0x300>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x1f2>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	e008      	b.n	8004ef8 <HAL_GPIO_Init+0x204>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e006      	b.n	8004ef8 <HAL_GPIO_Init+0x204>
 8004eea:	2303      	movs	r3, #3
 8004eec:	e004      	b.n	8004ef8 <HAL_GPIO_Init+0x204>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e002      	b.n	8004ef8 <HAL_GPIO_Init+0x204>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <HAL_GPIO_Init+0x204>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	f002 0203 	and.w	r2, r2, #3
 8004efe:	0092      	lsls	r2, r2, #2
 8004f00:	4093      	lsls	r3, r2
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f08:	4935      	ldr	r1, [pc, #212]	@ (8004fe0 <HAL_GPIO_Init+0x2ec>)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	3302      	adds	r3, #2
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f16:	4b38      	ldr	r3, [pc, #224]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4013      	ands	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f64:	4a24      	ldr	r2, [pc, #144]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f94:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff8 <HAL_GPIO_Init+0x304>)
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	f67f aea2 	bls.w	8004d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	3724      	adds	r7, #36	@ 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	40013800 	.word	0x40013800
 8004fe4:	40020000 	.word	0x40020000
 8004fe8:	40020400 	.word	0x40020400
 8004fec:	40020800 	.word	0x40020800
 8004ff0:	40020c00 	.word	0x40020c00
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40013c00 	.word	0x40013c00

08004ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
 8005008:	4613      	mov	r3, r2
 800500a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800500c:	787b      	ldrb	r3, [r7, #1]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005018:	e003      	b.n	8005022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	041a      	lsls	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	619a      	str	r2, [r3, #24]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800502e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005030:	b08f      	sub	sp, #60	@ 0x3c
 8005032:	af0a      	add	r7, sp, #40	@ 0x28
 8005034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e10f      	b.n	8005260 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f007 fc88 	bl	800c970 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2203      	movs	r2, #3
 8005064:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f003 ff71 	bl	8008f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	687e      	ldr	r6, [r7, #4]
 800508c:	466d      	mov	r5, sp
 800508e:	f106 0410 	add.w	r4, r6, #16
 8005092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800509a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800509e:	e885 0003 	stmia.w	r5, {r0, r1}
 80050a2:	1d33      	adds	r3, r6, #4
 80050a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050a6:	6838      	ldr	r0, [r7, #0]
 80050a8:	f003 fe48 	bl	8008d3c <USB_CoreInit>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0d0      	b.n	8005260 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f003 ff5f 	bl	8008f88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	e04a      	b.n	8005166 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	333d      	adds	r3, #61	@ 0x3d
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050e4:	7bfa      	ldrb	r2, [r7, #15]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	333c      	adds	r3, #60	@ 0x3c
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	b298      	uxth	r0, r3
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3344      	adds	r3, #68	@ 0x44
 800510c:	4602      	mov	r2, r0
 800510e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005110:	7bfa      	ldrb	r2, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3340      	adds	r3, #64	@ 0x40
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3348      	adds	r3, #72	@ 0x48
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	334c      	adds	r3, #76	@ 0x4c
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3354      	adds	r3, #84	@ 0x54
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	3301      	adds	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
 8005166:	7bfa      	ldrb	r2, [r7, #15]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d3af      	bcc.n	80050d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005170:	2300      	movs	r3, #0
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	e044      	b.n	8005200 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051a2:	7bfa      	ldrb	r2, [r7, #15]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051b8:	7bfa      	ldrb	r2, [r7, #15]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	3301      	adds	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	7bfa      	ldrb	r2, [r7, #15]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d3b5      	bcc.n	8005176 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	687e      	ldr	r6, [r7, #4]
 8005212:	466d      	mov	r5, sp
 8005214:	f106 0410 	add.w	r4, r6, #16
 8005218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800521a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800521c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800521e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005224:	e885 0003 	stmia.w	r5, {r0, r1}
 8005228:	1d33      	adds	r3, r6, #4
 800522a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800522c:	6838      	ldr	r0, [r7, #0]
 800522e:	f003 fef7 	bl	8009020 <USB_DevInit>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e00d      	b.n	8005260 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f005 f846 	bl	800a2ea <USB_DevDisconnect>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005268 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_PCD_Start+0x1c>
 8005280:	2302      	movs	r3, #2
 8005282:	e020      	b.n	80052c6 <HAL_PCD_Start+0x5e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	2b01      	cmp	r3, #1
 8005292:	d109      	bne.n	80052a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005298:	2b01      	cmp	r3, #1
 800529a:	d005      	beq.n	80052a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f003 fe49 	bl	8008f44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f004 fff6 	bl	800a2a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052ce:	b590      	push	{r4, r7, lr}
 80052d0:	b08d      	sub	sp, #52	@ 0x34
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f005 f8b4 	bl	800a452 <USB_GetMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 848a 	bne.w	8005c06 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f005 f818 	bl	800a32c <USB_ReadInterrupts>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8480 	beq.w	8005c04 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f005 f805 	bl	800a32c <USB_ReadInterrupts>
 8005322:	4603      	mov	r3, r0
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d107      	bne.n	800533c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f002 0202 	and.w	r2, r2, #2
 800533a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f004 fff3 	bl	800a32c <USB_ReadInterrupts>
 8005346:	4603      	mov	r3, r0
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d161      	bne.n	8005414 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0210 	bic.w	r2, r2, #16
 800535e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f003 020f 	and.w	r2, r3, #15
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	0c5b      	lsrs	r3, r3, #17
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	2b02      	cmp	r3, #2
 800538a:	d124      	bne.n	80053d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d035      	beq.n	8005404 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6a38      	ldr	r0, [r7, #32]
 80053ac:	f004 fe2a 	bl	800a004 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053bc:	441a      	add	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ce:	441a      	add	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
 80053d4:	e016      	b.n	8005404 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	0c5b      	lsrs	r3, r3, #17
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d110      	bne.n	8005404 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80053e8:	2208      	movs	r2, #8
 80053ea:	4619      	mov	r1, r3
 80053ec:	6a38      	ldr	r0, [r7, #32]
 80053ee:	f004 fe09 	bl	800a004 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053fe:	441a      	add	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0210 	orr.w	r2, r2, #16
 8005412:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f004 ff87 	bl	800a32c <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005424:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005428:	f040 80a7 	bne.w	800557a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 ff8c 	bl	800a352 <USB_ReadDevAllOutEpInterrupt>
 800543a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800543c:	e099      	b.n	8005572 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800543e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 808e 	beq.w	8005566 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f004 ffb0 	bl	800a3ba <USB_ReadDevOutEPInterrupt>
 800545a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005472:	461a      	mov	r2, r3
 8005474:	2301      	movs	r3, #1
 8005476:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fec2 	bl	8006204 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00c      	beq.n	80054a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005496:	461a      	mov	r2, r3
 8005498:	2308      	movs	r3, #8
 800549a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800549c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 ff98 	bl	80063d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ba:	461a      	mov	r2, r3
 80054bc:	2310      	movs	r3, #16
 80054be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d030      	beq.n	800552c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b80      	cmp	r3, #128	@ 0x80
 80054d4:	d109      	bne.n	80054ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4413      	add	r3, r2
 80054fc:	3304      	adds	r3, #4
 80054fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	78db      	ldrb	r3, [r3, #3]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d108      	bne.n	800551a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2200      	movs	r2, #0
 800550c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	b2db      	uxtb	r3, r3
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f007 fb27 	bl	800cb68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005526:	461a      	mov	r2, r3
 8005528:	2302      	movs	r3, #2
 800552a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005542:	461a      	mov	r2, r3
 8005544:	2320      	movs	r3, #32
 8005546:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555e:	461a      	mov	r2, r3
 8005560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005564:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	3301      	adds	r3, #1
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f af62 	bne.w	800543e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f004 fed4 	bl	800a32c <USB_ReadInterrupts>
 8005584:	4603      	mov	r3, r0
 8005586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800558a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800558e:	f040 80db 	bne.w	8005748 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f004 fef5 	bl	800a386 <USB_ReadDevAllInEpInterrupt>
 800559c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80055a2:	e0cd      	b.n	8005740 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80c2 	beq.w	8005734 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	4611      	mov	r1, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f004 ff1b 	bl	800a3f6 <USB_ReadDevInEPInterrupt>
 80055c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d057      	beq.n	800567c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	2201      	movs	r2, #1
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69f9      	ldr	r1, [r7, #28]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ec:	4013      	ands	r3, r2
 80055ee:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fc:	461a      	mov	r2, r3
 80055fe:	2301      	movs	r3, #1
 8005600:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d132      	bne.n	8005670 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	334c      	adds	r3, #76	@ 0x4c
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4403      	add	r3, r0
 800562a:	3348      	adds	r3, #72	@ 0x48
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4419      	add	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4403      	add	r3, r0
 800563e:	334c      	adds	r3, #76	@ 0x4c
 8005640:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d113      	bne.n	8005670 <HAL_PCD_IRQHandler+0x3a2>
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3354      	adds	r3, #84	@ 0x54
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d108      	bne.n	8005670 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005668:	461a      	mov	r2, r3
 800566a:	2101      	movs	r1, #1
 800566c:	f004 ff22 	bl	800a4b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	b2db      	uxtb	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f007 f9fb 	bl	800ca72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	461a      	mov	r2, r3
 8005694:	2308      	movs	r3, #8
 8005696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ae:	461a      	mov	r2, r3
 80056b0:	2310      	movs	r3, #16
 80056b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ca:	461a      	mov	r2, r3
 80056cc:	2340      	movs	r3, #64	@ 0x40
 80056ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d023      	beq.n	8005722 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80056da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056dc:	6a38      	ldr	r0, [r7, #32]
 80056de:	f003 fe03 	bl	80092e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80056e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	3338      	adds	r3, #56	@ 0x38
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	3304      	adds	r3, #4
 80056f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	78db      	ldrb	r3, [r3, #3]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d108      	bne.n	8005710 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f007 fa3e 	bl	800cb8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	2302      	movs	r3, #2
 8005720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800572c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fcdb 	bl	80060ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	3301      	adds	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	f47f af2e 	bne.w	80055a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f004 fded 	bl	800a32c <USB_ReadInterrupts>
 8005752:	4603      	mov	r3, r0
 8005754:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800575c:	d122      	bne.n	80057a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8005778:	2b01      	cmp	r3, #1
 800577a:	d108      	bne.n	800578e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005784:	2100      	movs	r1, #0
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fec2 	bl	8006510 <HAL_PCDEx_LPM_Callback>
 800578c:	e002      	b.n	8005794 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f007 f9dc 	bl	800cb4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80057a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f004 fdbf 	bl	800a32c <USB_ReadInterrupts>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b8:	d112      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f007 f998 	bl	800cb00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80057de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f004 fda1 	bl	800a32c <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f4:	f040 80b7 	bne.w	8005966 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2110      	movs	r1, #16
 8005812:	4618      	mov	r0, r3
 8005814:	f003 fd68 	bl	80092e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800581c:	e046      	b.n	80058ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582a:	461a      	mov	r2, r3
 800582c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005830:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800584c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585e:	461a      	mov	r2, r3
 8005860:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005864:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005880:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005884:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a8:	3301      	adds	r3, #1
 80058aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3b3      	bcc.n	800581e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80058c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058e2:	f043 030b 	orr.w	r3, r3, #11
 80058e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058f8:	f043 030b 	orr.w	r3, r3, #11
 80058fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80058fe:	e015      	b.n	800592c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800590e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005912:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005916:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005926:	f043 030b 	orr.w	r3, r3, #11
 800592a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800593a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800593e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005950:	461a      	mov	r2, r3
 8005952:	f004 fdaf 	bl	800a4b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f004 fcde 	bl	800a32c <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597a:	d124      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f004 fd74 	bl	800a46e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f003 fd29 	bl	80093e2 <USB_GetDevSpeed>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681c      	ldr	r4, [r3, #0]
 800599c:	f001 f9f4 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 80059a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	4620      	mov	r0, r4
 80059ac:	f003 fa28 	bl	8008e00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f007 f886 	bl	800cac2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80059c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 fcae 	bl	800a32c <USB_ReadInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d10a      	bne.n	80059f0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f007 f863 	bl	800caa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f002 0208 	and.w	r2, r2, #8
 80059ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f004 fc99 	bl	800a32c <USB_ReadInterrupts>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a00:	2b80      	cmp	r3, #128	@ 0x80
 8005a02:	d122      	bne.n	8005a4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a10:	2301      	movs	r3, #1
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a14:	e014      	b.n	8005a40 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb27 	bl	8006088 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d3e5      	bcc.n	8005a16 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f004 fc6c 	bl	800a32c <USB_ReadInterrupts>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a5e:	d13b      	bne.n	8005ad8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a60:	2301      	movs	r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a64:	e02b      	b.n	8005abe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	3340      	adds	r3, #64	@ 0x40
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d115      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da12      	bge.n	8005ab8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	333f      	adds	r3, #63	@ 0x3f
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fae8 	bl	8006088 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	3301      	adds	r3, #1
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d3ce      	bcc.n	8005a66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f004 fc25 	bl	800a32c <USB_ReadInterrupts>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aec:	d155      	bne.n	8005b9a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aee:	2301      	movs	r3, #1
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af2:	e045      	b.n	8005b80 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b08:	4613      	mov	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d12e      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da2b      	bge.n	8005b7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005b2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d121      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005b48:	2201      	movs	r2, #1
 8005b4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b76:	6053      	str	r3, [r2, #4]
            break;
 8005b78:	e007      	b.n	8005b8a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3b4      	bcc.n	8005af4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f004 fbc4 	bl	800a32c <USB_ReadInterrupts>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bae:	d10a      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f006 fffd 	bl	800cbb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f004 fbae 	bl	800a32c <USB_ReadInterrupts>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d115      	bne.n	8005c06 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f006 ffed 	bl	800cbcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e000      	b.n	8005c06 <HAL_PCD_IRQHandler+0x938>
      return;
 8005c04:	bf00      	nop
    }
  }
}
 8005c06:	3734      	adds	r7, #52	@ 0x34
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_PCD_SetAddress+0x1a>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e013      	b.n	8005c4e <HAL_PCD_SetAddress+0x42>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f004 fb0c 	bl	800a25c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	461a      	mov	r2, r3
 8005c64:	4603      	mov	r3, r0
 8005c66:	70fb      	strb	r3, [r7, #3]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	803b      	strh	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da0f      	bge.n	8005c9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	f003 020f 	and.w	r2, r3, #15
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	3338      	adds	r3, #56	@ 0x38
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4413      	add	r3, r2
 8005c90:	3304      	adds	r3, #4
 8005c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	705a      	strb	r2, [r3, #1]
 8005c9a:	e00f      	b.n	8005cbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005cc8:	883a      	ldrh	r2, [r7, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	78ba      	ldrb	r2, [r7, #2]
 8005cd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ce6:	78bb      	ldrb	r3, [r7, #2]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d102      	bne.n	8005cf2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_PCD_EP_Open+0xaa>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e00e      	b.n	8005d1e <HAL_PCD_EP_Open+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68f9      	ldr	r1, [r7, #12]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f003 fb8c 	bl	800942c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da0f      	bge.n	8005d5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 020f 	and.w	r2, r3, #15
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	3338      	adds	r3, #56	@ 0x38
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3304      	adds	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	705a      	strb	r2, [r3, #1]
 8005d58:	e00f      	b.n	8005d7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	3304      	adds	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_PCD_EP_Close+0x6e>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e00e      	b.n	8005db2 <HAL_PCD_EP_Close+0x8c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68f9      	ldr	r1, [r7, #12]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f003 fbca 	bl	800953c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dca:	7afb      	ldrb	r3, [r7, #11]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	3304      	adds	r3, #4
 8005de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2200      	movs	r2, #0
 8005df4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d102      	bne.n	8005e16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	f003 fea9 	bl	8009b84 <USB_EP0StartXfer>
 8005e32:	e008      	b.n	8005e46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6979      	ldr	r1, [r7, #20]
 8005e42:	f003 fc57 	bl	80096f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8005e72:	681b      	ldr	r3, [r3, #0]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	3338      	adds	r3, #56	@ 0x38
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d102      	bne.n	8005eda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6979      	ldr	r1, [r7, #20]
 8005ef2:	f003 fe47 	bl	8009b84 <USB_EP0StartXfer>
 8005ef6:	e008      	b.n	8005f0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	6979      	ldr	r1, [r7, #20]
 8005f06:	f003 fbf5 	bl	80096f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d901      	bls.n	8005f32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e050      	b.n	8005fd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	da0f      	bge.n	8005f5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 020f 	and.w	r2, r3, #15
 8005f40:	4613      	mov	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	3338      	adds	r3, #56	@ 0x38
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3304      	adds	r3, #4
 8005f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	705a      	strb	r2, [r3, #1]
 8005f58:	e00d      	b.n	8005f76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_PCD_EP_SetStall+0x82>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e01e      	b.n	8005fd4 <HAL_PCD_EP_SetStall+0xc0>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f004 f885 	bl	800a0b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	b2d9      	uxtb	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f004 fa75 	bl	800a4b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d901      	bls.n	8005ffa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e042      	b.n	8006080 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da0f      	bge.n	8006022 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	4613      	mov	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	3338      	adds	r3, #56	@ 0x38
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	3304      	adds	r3, #4
 8006018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	705a      	strb	r2, [r3, #1]
 8006020:	e00f      	b.n	8006042 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	4413      	add	r3, r2
 8006038:	3304      	adds	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_PCD_EP_ClrStall+0x86>
 800605e:	2302      	movs	r3, #2
 8006060:	e00e      	b.n	8006080 <HAL_PCD_EP_ClrStall+0xa4>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	4618      	mov	r0, r3
 8006072:	f004 f88d 	bl	800a190 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da0c      	bge.n	80060b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	3338      	adds	r3, #56	@ 0x38
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	4413      	add	r3, r2
 80060b0:	3304      	adds	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e00c      	b.n	80060d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	3304      	adds	r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f003 feac 	bl	8009e34 <USB_EPStopXfer>
 80060dc:	4603      	mov	r3, r0
 80060de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80060e0:	7afb      	ldrb	r3, [r7, #11]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b08a      	sub	sp, #40	@ 0x28
 80060ee:	af02      	add	r7, sp, #8
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	3338      	adds	r3, #56	@ 0x38
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	429a      	cmp	r2, r3
 800611c:	d901      	bls.n	8006122 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06c      	b.n	80061fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	429a      	cmp	r2, r3
 8006136:	d902      	bls.n	800613e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3303      	adds	r3, #3
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006146:	e02b      	b.n	80061a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	429a      	cmp	r2, r3
 800615c:	d902      	bls.n	8006164 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	3303      	adds	r3, #3
 8006168:	089b      	lsrs	r3, r3, #2
 800616a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6919      	ldr	r1, [r3, #16]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800617c:	b2db      	uxtb	r3, r3
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4603      	mov	r3, r0
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f003 ff00 	bl	8009f88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	441a      	add	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d809      	bhi.n	80061ca <PCD_WriteEmptyTxFifo+0xe0>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d203      	bcs.n	80061ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1be      	bne.n	8006148 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d811      	bhi.n	80061fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2201      	movs	r2, #1
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	43db      	mvns	r3, r3
 80061f0:	6939      	ldr	r1, [r7, #16]
 80061f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061f6:	4013      	ands	r3, r2
 80061f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	333c      	adds	r3, #60	@ 0x3c
 800621c:	3304      	adds	r3, #4
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d17b      	bne.n	8006332 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d015      	beq.n	8006270 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4a61      	ldr	r2, [pc, #388]	@ (80063cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	f240 80b9 	bls.w	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80b3 	beq.w	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800626c:	6093      	str	r3, [r2, #8]
 800626e:	e0a7      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006286:	461a      	mov	r2, r3
 8006288:	2320      	movs	r3, #32
 800628a:	6093      	str	r3, [r2, #8]
 800628c:	e098      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 8093 	bne.w	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4a4b      	ldr	r2, [pc, #300]	@ (80063cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d90f      	bls.n	80062c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b8:	461a      	mov	r2, r3
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	6093      	str	r3, [r2, #8]
 80062c0:	e07e      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	3304      	adds	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	0159      	lsls	r1, r3, #5
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	440b      	add	r3, r1
 80062e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d114      	bne.n	8006324 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800630c:	461a      	mov	r2, r3
 800630e:	2101      	movs	r1, #1
 8006310:	f004 f8d0 	bl	800a4b4 <USB_EP0_OutStart>
 8006314:	e006      	b.n	8006324 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f006 fb86 	bl	800ca3c <HAL_PCD_DataOutStageCallback>
 8006330:	e046      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	4a26      	ldr	r2, [pc, #152]	@ (80063d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d124      	bne.n	8006384 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	461a      	mov	r2, r3
 8006352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006356:	6093      	str	r3, [r2, #8]
 8006358:	e032      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006370:	461a      	mov	r2, r3
 8006372:	2320      	movs	r3, #32
 8006374:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f006 fb5d 	bl	800ca3c <HAL_PCD_DataOutStageCallback>
 8006382:	e01d      	b.n	80063c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d114      	bne.n	80063b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80063ac:	461a      	mov	r2, r3
 80063ae:	2100      	movs	r1, #0
 80063b0:	f004 f880 	bl	800a4b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f006 fb3e 	bl	800ca3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	4f54300a 	.word	0x4f54300a
 80063d0:	4f54310a 	.word	0x4f54310a

080063d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	333c      	adds	r3, #60	@ 0x3c
 80063ec:	3304      	adds	r3, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a15      	ldr	r2, [pc, #84]	@ (800645c <PCD_EP_OutSetupPacket_int+0x88>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d90e      	bls.n	8006428 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006426:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f006 faf5 	bl	800ca18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <PCD_EP_OutSetupPacket_int+0x88>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d90c      	bls.n	8006450 <PCD_EP_OutSetupPacket_int+0x7c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d108      	bne.n	8006450 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006448:	461a      	mov	r2, r3
 800644a:	2101      	movs	r1, #1
 800644c:	f004 f832 	bl	800a4b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	4f54300a 	.word	0x4f54300a

08006460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
 800646c:	4613      	mov	r3, r2
 800646e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800647e:	883b      	ldrh	r3, [r7, #0]
 8006480:	0419      	lsls	r1, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	430a      	orrs	r2, r1
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28
 800648c:	e028      	b.n	80064e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4413      	add	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e00d      	b.n	80064be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	3340      	adds	r3, #64	@ 0x40
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	3301      	adds	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
 80064be:	7bfa      	ldrb	r2, [r7, #15]
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d3ec      	bcc.n	80064a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80064c8:	883b      	ldrh	r3, [r7, #0]
 80064ca:	0418      	lsls	r0, r3, #16
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4302      	orrs	r2, r0
 80064d8:	3340      	adds	r3, #64	@ 0x40
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	887a      	ldrh	r2, [r7, #2]
 8006500:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e267      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d075      	beq.n	8006632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006546:	4b88      	ldr	r3, [pc, #544]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00c      	beq.n	800656c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006552:	4b85      	ldr	r3, [pc, #532]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800655a:	2b08      	cmp	r3, #8
 800655c:	d112      	bne.n	8006584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800655e:	4b82      	ldr	r3, [pc, #520]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800656a:	d10b      	bne.n	8006584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656c:	4b7e      	ldr	r3, [pc, #504]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d05b      	beq.n	8006630 <HAL_RCC_OscConfig+0x108>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d157      	bne.n	8006630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e242      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800658c:	d106      	bne.n	800659c <HAL_RCC_OscConfig+0x74>
 800658e:	4b76      	ldr	r3, [pc, #472]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a75      	ldr	r2, [pc, #468]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e01d      	b.n	80065d8 <HAL_RCC_OscConfig+0xb0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x98>
 80065a6:	4b70      	ldr	r3, [pc, #448]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a6f      	ldr	r2, [pc, #444]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6c      	ldr	r2, [pc, #432]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e00b      	b.n	80065d8 <HAL_RCC_OscConfig+0xb0>
 80065c0:	4b69      	ldr	r3, [pc, #420]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a68      	ldr	r2, [pc, #416]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b66      	ldr	r3, [pc, #408]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a65      	ldr	r2, [pc, #404]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e0:	f7fe f846 	bl	8004670 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065e8:	f7fe f842 	bl	8004670 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	@ 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e207      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0xc0>
 8006606:	e014      	b.n	8006632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006608:	f7fe f832 	bl	8004670 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006610:	f7fe f82e 	bl	8004670 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e1f3      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006622:	4b51      	ldr	r3, [pc, #324]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0xe8>
 800662e:	e000      	b.n	8006632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d063      	beq.n	8006706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800663e:	4b4a      	ldr	r3, [pc, #296]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 030c 	and.w	r3, r3, #12
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800664a:	4b47      	ldr	r3, [pc, #284]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006652:	2b08      	cmp	r3, #8
 8006654:	d11c      	bne.n	8006690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006656:	4b44      	ldr	r3, [pc, #272]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d116      	bne.n	8006690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006662:	4b41      	ldr	r3, [pc, #260]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_RCC_OscConfig+0x152>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e1c7      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800667a:	4b3b      	ldr	r3, [pc, #236]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4937      	ldr	r1, [pc, #220]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800668e:	e03a      	b.n	8006706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d020      	beq.n	80066da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006698:	4b34      	ldr	r3, [pc, #208]	@ (800676c <HAL_RCC_OscConfig+0x244>)
 800669a:	2201      	movs	r2, #1
 800669c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669e:	f7fd ffe7 	bl	8004670 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066a6:	f7fd ffe3 	bl	8004670 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e1a8      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c4:	4b28      	ldr	r3, [pc, #160]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4925      	ldr	r1, [pc, #148]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]
 80066d8:	e015      	b.n	8006706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066da:	4b24      	ldr	r3, [pc, #144]	@ (800676c <HAL_RCC_OscConfig+0x244>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fd ffc6 	bl	8004670 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fd ffc2 	bl	8004670 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e187      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d036      	beq.n	8006780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800671a:	4b15      	ldr	r3, [pc, #84]	@ (8006770 <HAL_RCC_OscConfig+0x248>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006720:	f7fd ffa6 	bl	8004670 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006728:	f7fd ffa2 	bl	8004670 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e167      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800673a:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <HAL_RCC_OscConfig+0x240>)
 800673c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0x200>
 8006746:	e01b      	b.n	8006780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006748:	4b09      	ldr	r3, [pc, #36]	@ (8006770 <HAL_RCC_OscConfig+0x248>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674e:	f7fd ff8f 	bl	8004670 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006754:	e00e      	b.n	8006774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006756:	f7fd ff8b 	bl	8004670 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d907      	bls.n	8006774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e150      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006768:	40023800 	.word	0x40023800
 800676c:	42470000 	.word	0x42470000
 8006770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006774:	4b88      	ldr	r3, [pc, #544]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ea      	bne.n	8006756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8097 	beq.w	80068bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006792:	4b81      	ldr	r3, [pc, #516]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10f      	bne.n	80067be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	2300      	movs	r3, #0
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80067a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80067ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067be:	4b77      	ldr	r3, [pc, #476]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d118      	bne.n	80067fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ca:	4b74      	ldr	r3, [pc, #464]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a73      	ldr	r2, [pc, #460]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067d6:	f7fd ff4b 	bl	8004670 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067de:	f7fd ff47 	bl	8004670 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e10c      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f0:	4b6a      	ldr	r3, [pc, #424]	@ (800699c <HAL_RCC_OscConfig+0x474>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d106      	bne.n	8006812 <HAL_RCC_OscConfig+0x2ea>
 8006804:	4b64      	ldr	r3, [pc, #400]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006808:	4a63      	ldr	r2, [pc, #396]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006810:	e01c      	b.n	800684c <HAL_RCC_OscConfig+0x324>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b05      	cmp	r3, #5
 8006818:	d10c      	bne.n	8006834 <HAL_RCC_OscConfig+0x30c>
 800681a:	4b5f      	ldr	r3, [pc, #380]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681e:	4a5e      	ldr	r2, [pc, #376]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006820:	f043 0304 	orr.w	r3, r3, #4
 8006824:	6713      	str	r3, [r2, #112]	@ 0x70
 8006826:	4b5c      	ldr	r3, [pc, #368]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682a:	4a5b      	ldr	r2, [pc, #364]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6713      	str	r3, [r2, #112]	@ 0x70
 8006832:	e00b      	b.n	800684c <HAL_RCC_OscConfig+0x324>
 8006834:	4b58      	ldr	r3, [pc, #352]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006838:	4a57      	ldr	r2, [pc, #348]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006840:	4b55      	ldr	r3, [pc, #340]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006844:	4a54      	ldr	r2, [pc, #336]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006846:	f023 0304 	bic.w	r3, r3, #4
 800684a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d015      	beq.n	8006880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fd ff0c 	bl	8004670 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685a:	e00a      	b.n	8006872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800685c:	f7fd ff08 	bl	8004670 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e0cb      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006872:	4b49      	ldr	r3, [pc, #292]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ee      	beq.n	800685c <HAL_RCC_OscConfig+0x334>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006880:	f7fd fef6 	bl	8004670 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006886:	e00a      	b.n	800689e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006888:	f7fd fef2 	bl	8004670 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e0b5      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800689e:	4b3e      	ldr	r3, [pc, #248]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1ee      	bne.n	8006888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d105      	bne.n	80068bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b0:	4b39      	ldr	r3, [pc, #228]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	4a38      	ldr	r2, [pc, #224]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80a1 	beq.w	8006a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068c6:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d05c      	beq.n	800698c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d141      	bne.n	800695e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068da:	4b31      	ldr	r3, [pc, #196]	@ (80069a0 <HAL_RCC_OscConfig+0x478>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fd fec6 	bl	8004670 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e8:	f7fd fec2 	bl	8004670 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e087      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fa:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	3b01      	subs	r3, #1
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	491b      	ldr	r1, [pc, #108]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 800692c:	4313      	orrs	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006930:	4b1b      	ldr	r3, [pc, #108]	@ (80069a0 <HAL_RCC_OscConfig+0x478>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006936:	f7fd fe9b 	bl	8004670 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800693e:	f7fd fe97 	bl	8004670 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e05c      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006950:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x416>
 800695c:	e054      	b.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <HAL_RCC_OscConfig+0x478>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fd fe84 	bl	8004670 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800696c:	f7fd fe80 	bl	8004670 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e045      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <HAL_RCC_OscConfig+0x470>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x444>
 800698a:	e03d      	b.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e038      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006998:	40023800 	.word	0x40023800
 800699c:	40007000 	.word	0x40007000
 80069a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a14 <HAL_RCC_OscConfig+0x4ec>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d028      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069bc:	429a      	cmp	r2, r3
 80069be:	d121      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d11a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069dc:	4293      	cmp	r3, r2
 80069de:	d111      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	3b01      	subs	r3, #1
 80069ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d107      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40023800 	.word	0x40023800

08006a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0cc      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b68      	ldr	r3, [pc, #416]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d90c      	bls.n	8006a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b65      	ldr	r3, [pc, #404]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a42:	4b63      	ldr	r3, [pc, #396]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0b8      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a6c:	4b59      	ldr	r3, [pc, #356]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a58      	ldr	r2, [pc, #352]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a84:	4b53      	ldr	r3, [pc, #332]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4a52      	ldr	r2, [pc, #328]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a90:	4b50      	ldr	r3, [pc, #320]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	494d      	ldr	r1, [pc, #308]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d044      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab6:	4b47      	ldr	r3, [pc, #284]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d119      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e07f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e06f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e067      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006af6:	4b37      	ldr	r3, [pc, #220]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 0203 	bic.w	r2, r3, #3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4934      	ldr	r1, [pc, #208]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b08:	f7fd fdb2 	bl	8004670 <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b10:	f7fd fdae 	bl	8004670 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e04f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b26:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 020c 	and.w	r2, r3, #12
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d1eb      	bne.n	8006b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b38:	4b25      	ldr	r3, [pc, #148]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20c      	bcs.n	8006b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b46:	4b22      	ldr	r3, [pc, #136]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4e:	4b20      	ldr	r3, [pc, #128]	@ (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e032      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b6c:	4b19      	ldr	r3, [pc, #100]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4916      	ldr	r1, [pc, #88]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b8a:	4b12      	ldr	r3, [pc, #72]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	490e      	ldr	r1, [pc, #56]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b9e:	f000 f82d 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	490a      	ldr	r1, [pc, #40]	@ (8006bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb0:	5ccb      	ldrb	r3, [r1, r3]
 8006bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb6:	4a09      	ldr	r2, [pc, #36]	@ (8006bdc <HAL_RCC_ClockConfig+0x1c4>)
 8006bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bba:	4b09      	ldr	r3, [pc, #36]	@ (8006be0 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fc fb2e 	bl	8003220 <HAL_InitTick>

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40023c00 	.word	0x40023c00
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	08012020 	.word	0x08012020
 8006bdc:	20000100 	.word	0x20000100
 8006be0:	20000130 	.word	0x20000130

08006be4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006be8:	4b03      	ldr	r3, [pc, #12]	@ (8006bf8 <HAL_RCC_EnableCSS+0x14>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	4247004c 	.word	0x4247004c

08006bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b090      	sub	sp, #64	@ 0x40
 8006c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c14:	4b59      	ldr	r3, [pc, #356]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d00d      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x40>
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	f200 80a1 	bhi.w	8006d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0x34>
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c2e:	e09b      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c30:	4b53      	ldr	r3, [pc, #332]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c32:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006c34:	e09b      	b.n	8006d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c36:	4b53      	ldr	r3, [pc, #332]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c3a:	e098      	b.n	8006d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c46:	4b4d      	ldr	r3, [pc, #308]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d028      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c52:	4b4a      	ldr	r3, [pc, #296]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	2200      	movs	r2, #0
 8006c5a:	623b      	str	r3, [r7, #32]
 8006c5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c64:	2100      	movs	r1, #0
 8006c66:	4b47      	ldr	r3, [pc, #284]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c68:	fb03 f201 	mul.w	r2, r3, r1
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	fb00 f303 	mul.w	r3, r0, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	4a43      	ldr	r2, [pc, #268]	@ (8006d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c76:	fba0 1202 	umull	r1, r2, r0, r2
 8006c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c7c:	460a      	mov	r2, r1
 8006c7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c82:	4413      	add	r3, r2
 8006c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	2200      	movs	r2, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	61fa      	str	r2, [r7, #28]
 8006c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006c96:	f7f9 ffd7 	bl	8000c48 <__aeabi_uldivmod>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca2:	e053      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca4:	4b35      	ldr	r3, [pc, #212]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	099b      	lsrs	r3, r3, #6
 8006caa:	2200      	movs	r2, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	617a      	str	r2, [r7, #20]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006cb6:	f04f 0b00 	mov.w	fp, #0
 8006cba:	4652      	mov	r2, sl
 8006cbc:	465b      	mov	r3, fp
 8006cbe:	f04f 0000 	mov.w	r0, #0
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	0159      	lsls	r1, r3, #5
 8006cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ccc:	0150      	lsls	r0, r2, #5
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8006cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cee:	ebb2 0408 	subs.w	r4, r2, r8
 8006cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	00eb      	lsls	r3, r5, #3
 8006d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d04:	00e2      	lsls	r2, r4, #3
 8006d06:	4614      	mov	r4, r2
 8006d08:	461d      	mov	r5, r3
 8006d0a:	eb14 030a 	adds.w	r3, r4, sl
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	eb45 030b 	adc.w	r3, r5, fp
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d22:	4629      	mov	r1, r5
 8006d24:	028b      	lsls	r3, r1, #10
 8006d26:	4621      	mov	r1, r4
 8006d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	028a      	lsls	r2, r1, #10
 8006d30:	4610      	mov	r0, r2
 8006d32:	4619      	mov	r1, r3
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	2200      	movs	r2, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	60fa      	str	r2, [r7, #12]
 8006d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d40:	f7f9 ff82 	bl	8000c48 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4613      	mov	r3, r2
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	0c1b      	lsrs	r3, r3, #16
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	3301      	adds	r3, #1
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d66:	e002      	b.n	8006d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d68:	4b05      	ldr	r3, [pc, #20]	@ (8006d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3740      	adds	r7, #64	@ 0x40
 8006d74:	46bd      	mov	sp, r7
 8006d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	00f42400 	.word	0x00f42400
 8006d84:	017d7840 	.word	0x017d7840

08006d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d8c:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000100 	.word	0x20000100

08006da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006da4:	f7ff fff0 	bl	8006d88 <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	0b5b      	lsrs	r3, r3, #13
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4903      	ldr	r1, [pc, #12]	@ (8006dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	08012030 	.word	0x08012030

08006dc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	220f      	movs	r2, #15
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dd8:	4b12      	ldr	r3, [pc, #72]	@ (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0203 	and.w	r2, r3, #3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006de4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006df0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006dfc:	4b09      	ldr	r3, [pc, #36]	@ (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	08db      	lsrs	r3, r3, #3
 8006e02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e0a:	4b07      	ldr	r3, [pc, #28]	@ (8006e28 <HAL_RCC_GetClockConfig+0x60>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0207 	and.w	r2, r3, #7
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	601a      	str	r2, [r3, #0]
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800
 8006e28:	40023c00 	.word	0x40023c00

08006e2c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <HAL_RCC_NMI_IRQHandler+0x20>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e38:	2b80      	cmp	r3, #128	@ 0x80
 8006e3a:	d104      	bne.n	8006e46 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006e3c:	f000 f80a 	bl	8006e54 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006e40:	4b03      	ldr	r3, [pc, #12]	@ (8006e50 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006e42:	2280      	movs	r2, #128	@ 0x80
 8006e44:	701a      	strb	r2, [r3, #0]
  }
}
 8006e46:	bf00      	nop
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	4002380e 	.word	0x4002380e

08006e54 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e07b      	b.n	8006f6c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d108      	bne.n	8006e8e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e84:	d009      	beq.n	8006e9a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	61da      	str	r2, [r3, #28]
 8006e8c:	e005      	b.n	8006e9a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d106      	bne.n	8006eba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7fc f963 	bl	8003180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ed0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f1e:	ea42 0103 	orr.w	r1, r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	f003 0104 	and.w	r1, r3, #4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	f003 0210 	and.w	r2, r3, #16
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_SPI_Transmit+0x22>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e126      	b.n	80071e4 <HAL_SPI_Transmit+0x270>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f9e:	f7fd fb67 	bl	8004670 <HAL_GetTick>
 8006fa2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d002      	beq.n	8006fba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fb8:	e10b      	b.n	80071d2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Transmit+0x52>
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fca:	e102      	b.n	80071d2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007012:	d10f      	bne.n	8007034 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007032:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b40      	cmp	r3, #64	@ 0x40
 8007040:	d007      	beq.n	8007052 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705a:	d14b      	bne.n	80070f4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_SPI_Transmit+0xf6>
 8007064:	8afb      	ldrh	r3, [r7, #22]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d13e      	bne.n	80070e8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	881a      	ldrh	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707a:	1c9a      	adds	r2, r3, #2
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800708e:	e02b      	b.n	80070e8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d112      	bne.n	80070c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070c2:	e011      	b.n	80070e8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c4:	f7fd fad4 	bl	8004670 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d803      	bhi.n	80070dc <HAL_SPI_Transmit+0x168>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070da:	d102      	bne.n	80070e2 <HAL_SPI_Transmit+0x16e>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070e6:	e074      	b.n	80071d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1ce      	bne.n	8007090 <HAL_SPI_Transmit+0x11c>
 80070f2:	e04c      	b.n	800718e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_SPI_Transmit+0x18e>
 80070fc:	8afb      	ldrh	r3, [r7, #22]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d140      	bne.n	8007184 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007128:	e02c      	b.n	8007184 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b02      	cmp	r3, #2
 8007136:	d113      	bne.n	8007160 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800715e:	e011      	b.n	8007184 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007160:	f7fd fa86 	bl	8004670 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d803      	bhi.n	8007178 <HAL_SPI_Transmit+0x204>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007176:	d102      	bne.n	800717e <HAL_SPI_Transmit+0x20a>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007182:	e026      	b.n	80071d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1cd      	bne.n	800712a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fcde 	bl	8007b54 <SPI_EndRxTxTransaction>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e000      	b.n	80071d2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80071d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80071e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007208:	d112      	bne.n	8007230 <HAL_SPI_Receive+0x44>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10e      	bne.n	8007230 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2204      	movs	r2, #4
 8007216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800721a:	88fa      	ldrh	r2, [r7, #6]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4613      	mov	r3, r2
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	68b9      	ldr	r1, [r7, #8]
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f8f1 	bl	800740e <HAL_SPI_TransmitReceive>
 800722c:	4603      	mov	r3, r0
 800722e:	e0ea      	b.n	8007406 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_SPI_Receive+0x52>
 800723a:	2302      	movs	r3, #2
 800723c:	e0e3      	b.n	8007406 <HAL_SPI_Receive+0x21a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007246:	f7fd fa13 	bl	8004670 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d002      	beq.n	800725e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007258:	2302      	movs	r3, #2
 800725a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800725c:	e0ca      	b.n	80073f4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <HAL_SPI_Receive+0x7e>
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800726e:	e0c1      	b.n	80073f4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2204      	movs	r2, #4
 8007274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	88fa      	ldrh	r2, [r7, #6]
 800728e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b6:	d10f      	bne.n	80072d8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e2:	2b40      	cmp	r3, #64	@ 0x40
 80072e4:	d007      	beq.n	80072f6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d162      	bne.n	80073c4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072fe:	e02e      	b.n	800735e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b01      	cmp	r3, #1
 800730c:	d115      	bne.n	800733a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f103 020c 	add.w	r2, r3, #12
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007338:	e011      	b.n	800735e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800733a:	f7fd f999 	bl	8004670 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d803      	bhi.n	8007352 <HAL_SPI_Receive+0x166>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007350:	d102      	bne.n	8007358 <HAL_SPI_Receive+0x16c>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800735c:	e04a      	b.n	80073f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1cb      	bne.n	8007300 <HAL_SPI_Receive+0x114>
 8007368:	e031      	b.n	80073ce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b01      	cmp	r3, #1
 8007376:	d113      	bne.n	80073a0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007382:	b292      	uxth	r2, r2
 8007384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800739e:	e011      	b.n	80073c4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a0:	f7fd f966 	bl	8004670 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d803      	bhi.n	80073b8 <HAL_SPI_Receive+0x1cc>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073b6:	d102      	bne.n	80073be <HAL_SPI_Receive+0x1d2>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073c2:	e017      	b.n	80073f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1cd      	bne.n	800736a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 fb58 	bl	8007a88 <SPI_EndRxTransaction>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
 80073f0:	e000      	b.n	80073f4 <HAL_SPI_Receive+0x208>
  }

error :
 80073f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08c      	sub	sp, #48	@ 0x30
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x26>
 8007430:	2302      	movs	r3, #2
 8007432:	e18a      	b.n	800774a <HAL_SPI_TransmitReceive+0x33c>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800743c:	f7fd f918 	bl	8004670 <HAL_GetTick>
 8007440:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007452:	887b      	ldrh	r3, [r7, #2]
 8007454:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007456:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800745a:	2b01      	cmp	r3, #1
 800745c:	d00f      	beq.n	800747e <HAL_SPI_TransmitReceive+0x70>
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007464:	d107      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x68>
 800746e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007472:	2b04      	cmp	r3, #4
 8007474:	d003      	beq.n	800747e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007476:	2302      	movs	r3, #2
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800747c:	e15b      	b.n	8007736 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x82>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x82>
 800748a:	887b      	ldrh	r3, [r7, #2]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007496:	e14e      	b.n	8007736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d003      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2205      	movs	r2, #5
 80074a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	887a      	ldrh	r2, [r7, #2]
 80074bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	887a      	ldrh	r2, [r7, #2]
 80074c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	887a      	ldrh	r2, [r7, #2]
 80074ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	887a      	ldrh	r2, [r7, #2]
 80074d4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ec:	2b40      	cmp	r3, #64	@ 0x40
 80074ee:	d007      	beq.n	8007500 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007508:	d178      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x10a>
 8007512:	8b7b      	ldrh	r3, [r7, #26]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d166      	bne.n	80075e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007528:	1c9a      	adds	r2, r3, #2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753c:	e053      	b.n	80075e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d11b      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x176>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d016      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x176>
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d113      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007560:	881a      	ldrh	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	1c9a      	adds	r2, r3, #2
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b01      	cmp	r3, #1
 8007590:	d119      	bne.n	80075c6 <HAL_SPI_TransmitReceive+0x1b8>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d014      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	b292      	uxth	r2, r2
 80075a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	1c9a      	adds	r2, r3, #2
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c2:	2301      	movs	r3, #1
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075c6:	f7fd f853 	bl	8004670 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d807      	bhi.n	80075e6 <HAL_SPI_TransmitReceive+0x1d8>
 80075d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075dc:	d003      	beq.n	80075e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80075e4:	e0a7      	b.n	8007736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1a6      	bne.n	800753e <HAL_SPI_TransmitReceive+0x130>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1a1      	bne.n	800753e <HAL_SPI_TransmitReceive+0x130>
 80075fa:	e07c      	b.n	80076f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_SPI_TransmitReceive+0x1fc>
 8007604:	8b7b      	ldrh	r3, [r7, #26]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d16b      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007630:	e057      	b.n	80076e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d11c      	bne.n	800767a <HAL_SPI_TransmitReceive+0x26c>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d017      	beq.n	800767a <HAL_SPI_TransmitReceive+0x26c>
 800764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764c:	2b01      	cmp	r3, #1
 800764e:	d114      	bne.n	800767a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b01      	cmp	r3, #1
 8007686:	d119      	bne.n	80076bc <HAL_SPI_TransmitReceive+0x2ae>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d014      	beq.n	80076bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076b8:	2301      	movs	r3, #1
 80076ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076bc:	f7fc ffd8 	bl	8004670 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d803      	bhi.n	80076d4 <HAL_SPI_TransmitReceive+0x2c6>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076d2:	d102      	bne.n	80076da <HAL_SPI_TransmitReceive+0x2cc>
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80076e0:	e029      	b.n	8007736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1a2      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x224>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d19d      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fa2a 	bl	8007b54 <SPI_EndRxTxTransaction>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d006      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007712:	e010      	b.n	8007736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10b      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	e000      	b.n	8007736 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007746:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800774a:	4618      	mov	r0, r3
 800774c:	3730      	adds	r7, #48	@ 0x30
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10e      	bne.n	8007794 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
    return;
 8007792:	e0ce      	b.n	8007932 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <HAL_SPI_IRQHandler+0x5e>
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
    return;
 80077b0:	e0bf      	b.n	8007932 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <HAL_SPI_IRQHandler+0x7e>
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80b0 	beq.w	8007932 <HAL_SPI_IRQHandler+0x1de>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80aa 	beq.w	8007932 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d023      	beq.n	8007830 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d011      	beq.n	8007818 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f8:	f043 0204 	orr.w	r2, r3, #4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	e00b      	b.n	8007830 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	693b      	ldr	r3, [r7, #16]
        return;
 800782e:	e080      	b.n	8007932 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d014      	beq.n	8007864 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783e:	f043 0201 	orr.w	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00c      	beq.n	8007888 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007872:	f043 0208 	orr.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800787a:	2300      	movs	r3, #0
 800787c:	60bb      	str	r3, [r7, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788c:	2b00      	cmp	r3, #0
 800788e:	d04f      	beq.n	8007930 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800789e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <HAL_SPI_IRQHandler+0x168>
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d034      	beq.n	8007926 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0203 	bic.w	r2, r2, #3
 80078ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d011      	beq.n	80078f8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d8:	4a17      	ldr	r2, [pc, #92]	@ (8007938 <HAL_SPI_IRQHandler+0x1e4>)
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fc ffd7 	bl	8004894 <HAL_DMA_Abort_IT>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d016      	beq.n	800792e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007904:	4a0c      	ldr	r2, [pc, #48]	@ (8007938 <HAL_SPI_IRQHandler+0x1e4>)
 8007906:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800790c:	4618      	mov	r0, r3
 800790e:	f7fc ffc1 	bl	8004894 <HAL_DMA_Abort_IT>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007924:	e003      	b.n	800792e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f808 	bl	800793c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800792c:	e000      	b.n	8007930 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800792e:	bf00      	nop
    return;
 8007930:	bf00      	nop
  }
}
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	08007951 	.word	0x08007951

0800793c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7ff ffe6 	bl	800793c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	4613      	mov	r3, r2
 8007986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007988:	f7fc fe72 	bl	8004670 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4413      	add	r3, r2
 8007996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007998:	f7fc fe6a 	bl	8004670 <HAL_GetTick>
 800799c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800799e:	4b39      	ldr	r3, [pc, #228]	@ (8007a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	015b      	lsls	r3, r3, #5
 80079a4:	0d1b      	lsrs	r3, r3, #20
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ae:	e054      	b.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079b6:	d050      	beq.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079b8:	f7fc fe5a 	bl	8004670 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d902      	bls.n	80079ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d13d      	bne.n	8007a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079e6:	d111      	bne.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079f0:	d004      	beq.n	80079fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079fa:	d107      	bne.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a14:	d10f      	bne.n	8007a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e017      	b.n	8007a7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4013      	ands	r3, r2
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	bf0c      	ite	eq
 8007a6a:	2301      	moveq	r3, #1
 8007a6c:	2300      	movne	r3, #0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d19b      	bne.n	80079b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000100 	.word	0x20000100

08007a88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a9c:	d111      	bne.n	8007ac2 <SPI_EndRxTransaction+0x3a>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aa6:	d004      	beq.n	8007ab2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab0:	d107      	bne.n	8007ac2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ac0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aca:	d12a      	bne.n	8007b22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ad4:	d012      	beq.n	8007afc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2180      	movs	r1, #128	@ 0x80
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff ff49 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d02d      	beq.n	8007b48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af0:	f043 0220 	orr.w	r2, r3, #32
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e026      	b.n	8007b4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2200      	movs	r2, #0
 8007b04:	2101      	movs	r1, #1
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff ff36 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01a      	beq.n	8007b48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b16:	f043 0220 	orr.w	r2, r3, #32
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e013      	b.n	8007b4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff ff23 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e000      	b.n	8007b4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b60:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd0 <SPI_EndRxTxTransaction+0x7c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd4 <SPI_EndRxTxTransaction+0x80>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	0d5b      	lsrs	r3, r3, #21
 8007b6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007b70:	fb02 f303 	mul.w	r3, r2, r3
 8007b74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b7e:	d112      	bne.n	8007ba6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff fef4 	bl	8007978 <SPI_WaitFlagStateUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d016      	beq.n	8007bc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e00f      	b.n	8007bc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bbc:	2b80      	cmp	r3, #128	@ 0x80
 8007bbe:	d0f2      	beq.n	8007ba6 <SPI_EndRxTxTransaction+0x52>
 8007bc0:	e000      	b.n	8007bc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007bc2:	bf00      	nop
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000100 	.word	0x20000100
 8007bd4:	165e9f81 	.word	0x165e9f81

08007bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e041      	b.n	8007c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f839 	bl	8007c76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f000 f9ca 	bl	8007fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d001      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e044      	b.n	8007d2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0201 	orr.w	r2, r2, #1
 8007cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8007d3c <HAL_TIM_Base_Start_IT+0xb0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d018      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cce:	d013      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d40 <HAL_TIM_Base_Start_IT+0xb4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00e      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a19      	ldr	r2, [pc, #100]	@ (8007d44 <HAL_TIM_Base_Start_IT+0xb8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a17      	ldr	r2, [pc, #92]	@ (8007d48 <HAL_TIM_Base_Start_IT+0xbc>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x6c>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a16      	ldr	r2, [pc, #88]	@ (8007d4c <HAL_TIM_Base_Start_IT+0xc0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d111      	bne.n	8007d1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b06      	cmp	r3, #6
 8007d08:	d010      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	e007      	b.n	8007d2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40014000 	.word	0x40014000

08007d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d122      	bne.n	8007dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d11b      	bne.n	8007dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0202 	mvn.w	r2, #2
 8007d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f8ee 	bl	8007f74 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8e0 	bl	8007f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f8f1 	bl	8007f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d122      	bne.n	8007e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d11b      	bne.n	8007e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0204 	mvn.w	r2, #4
 8007dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f8c4 	bl	8007f74 <HAL_TIM_IC_CaptureCallback>
 8007dec:	e005      	b.n	8007dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f8b6 	bl	8007f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f8c7 	bl	8007f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d122      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d11b      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0208 	mvn.w	r2, #8
 8007e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f89a 	bl	8007f74 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f88c 	bl	8007f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f89d 	bl	8007f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	d122      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d11b      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0210 	mvn.w	r2, #16
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f870 	bl	8007f74 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f862 	bl	8007f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f873 	bl	8007f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0201 	mvn.w	r2, #1
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fa fc04 	bl	80026dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ede:	2b80      	cmp	r3, #128	@ 0x80
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eec:	2b80      	cmp	r3, #128	@ 0x80
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8e2 	bl	80080c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0a:	2b40      	cmp	r3, #64	@ 0x40
 8007f0c:	d10e      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f18:	2b40      	cmp	r3, #64	@ 0x40
 8007f1a:	d107      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f838 	bl	8007f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0320 	and.w	r3, r3, #32
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d10e      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d107      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0220 	mvn.w	r2, #32
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f8ac 	bl	80080b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a34      	ldr	r2, [pc, #208]	@ (8008094 <TIM_Base_SetConfig+0xe4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00f      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fce:	d00b      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a31      	ldr	r2, [pc, #196]	@ (8008098 <TIM_Base_SetConfig+0xe8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d007      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a30      	ldr	r2, [pc, #192]	@ (800809c <TIM_Base_SetConfig+0xec>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_Base_SetConfig+0x38>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80080a0 <TIM_Base_SetConfig+0xf0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d108      	bne.n	8007ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a25      	ldr	r2, [pc, #148]	@ (8008094 <TIM_Base_SetConfig+0xe4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d01b      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008008:	d017      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a22      	ldr	r2, [pc, #136]	@ (8008098 <TIM_Base_SetConfig+0xe8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a21      	ldr	r2, [pc, #132]	@ (800809c <TIM_Base_SetConfig+0xec>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00f      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a20      	ldr	r2, [pc, #128]	@ (80080a0 <TIM_Base_SetConfig+0xf0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a1f      	ldr	r2, [pc, #124]	@ (80080a4 <TIM_Base_SetConfig+0xf4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <TIM_Base_SetConfig+0xf8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_Base_SetConfig+0x8a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <TIM_Base_SetConfig+0xfc>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d108      	bne.n	800804c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a08      	ldr	r2, [pc, #32]	@ (8008094 <TIM_Base_SetConfig+0xe4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d103      	bne.n	8008080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	615a      	str	r2, [r3, #20]
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	40010000 	.word	0x40010000
 8008098:	40000400 	.word	0x40000400
 800809c:	40000800 	.word	0x40000800
 80080a0:	40000c00 	.word	0x40000c00
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40014400 	.word	0x40014400
 80080ac:	40014800 	.word	0x40014800

080080b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <LL_GPIO_SetPinMode>:
{
 80080d8:	b480      	push	{r7}
 80080da:	b089      	sub	sp, #36	@ 0x24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	fa93 f3a3 	rbit	r3, r3
 80080f2:	613b      	str	r3, [r7, #16]
  return result;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	fab3 f383 	clz	r3, r3
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	2103      	movs	r1, #3
 8008100:	fa01 f303 	lsl.w	r3, r1, r3
 8008104:	43db      	mvns	r3, r3
 8008106:	401a      	ands	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	fa93 f3a3 	rbit	r3, r3
 8008112:	61bb      	str	r3, [r7, #24]
  return result;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	fab3 f383 	clz	r3, r3
 800811a:	b2db      	uxtb	r3, r3
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	bf00      	nop
 800812c:	3724      	adds	r7, #36	@ 0x24
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <LL_GPIO_SetPinOutputType>:
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	43db      	mvns	r3, r3
 800814a:	401a      	ands	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	605a      	str	r2, [r3, #4]
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <LL_GPIO_SetPinSpeed>:
{
 8008166:	b480      	push	{r7}
 8008168:	b089      	sub	sp, #36	@ 0x24
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	fa93 f3a3 	rbit	r3, r3
 8008180:	613b      	str	r3, [r7, #16]
  return result;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	fab3 f383 	clz	r3, r3
 8008188:	b2db      	uxtb	r3, r3
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	2103      	movs	r1, #3
 800818e:	fa01 f303 	lsl.w	r3, r1, r3
 8008192:	43db      	mvns	r3, r3
 8008194:	401a      	ands	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	fa93 f3a3 	rbit	r3, r3
 80081a0:	61bb      	str	r3, [r7, #24]
  return result;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	fab3 f383 	clz	r3, r3
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	431a      	orrs	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	609a      	str	r2, [r3, #8]
}
 80081b8:	bf00      	nop
 80081ba:	3724      	adds	r7, #36	@ 0x24
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <LL_GPIO_SetPinPull>:
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	@ 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	fa93 f3a3 	rbit	r3, r3
 80081de:	613b      	str	r3, [r7, #16]
  return result;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	fab3 f383 	clz	r3, r3
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	2103      	movs	r1, #3
 80081ec:	fa01 f303 	lsl.w	r3, r1, r3
 80081f0:	43db      	mvns	r3, r3
 80081f2:	401a      	ands	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	fa93 f3a3 	rbit	r3, r3
 80081fe:	61bb      	str	r3, [r7, #24]
  return result;
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	fab3 f383 	clz	r3, r3
 8008206:	b2db      	uxtb	r3, r3
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	fa01 f303 	lsl.w	r3, r1, r3
 8008210:	431a      	orrs	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	60da      	str	r2, [r3, #12]
}
 8008216:	bf00      	nop
 8008218:	3724      	adds	r7, #36	@ 0x24
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <LL_GPIO_SetAFPin_0_7>:
{
 8008222:	b480      	push	{r7}
 8008224:	b089      	sub	sp, #36	@ 0x24
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1a      	ldr	r2, [r3, #32]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	fa93 f3a3 	rbit	r3, r3
 800823c:	613b      	str	r3, [r7, #16]
  return result;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	fab3 f383 	clz	r3, r3
 8008244:	b2db      	uxtb	r3, r3
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	210f      	movs	r1, #15
 800824a:	fa01 f303 	lsl.w	r3, r1, r3
 800824e:	43db      	mvns	r3, r3
 8008250:	401a      	ands	r2, r3
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	fa93 f3a3 	rbit	r3, r3
 800825c:	61bb      	str	r3, [r7, #24]
  return result;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	fab3 f383 	clz	r3, r3
 8008264:	b2db      	uxtb	r3, r3
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	fa01 f303 	lsl.w	r3, r1, r3
 800826e:	431a      	orrs	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	621a      	str	r2, [r3, #32]
}
 8008274:	bf00      	nop
 8008276:	3724      	adds	r7, #36	@ 0x24
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <LL_GPIO_SetAFPin_8_15>:
{
 8008280:	b480      	push	{r7}
 8008282:	b089      	sub	sp, #36	@ 0x24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	fa93 f3a3 	rbit	r3, r3
 800829c:	613b      	str	r3, [r7, #16]
  return result;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	fab3 f383 	clz	r3, r3
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	210f      	movs	r1, #15
 80082aa:	fa01 f303 	lsl.w	r3, r1, r3
 80082ae:	43db      	mvns	r3, r3
 80082b0:	401a      	ands	r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	fa93 f3a3 	rbit	r3, r3
 80082be:	61bb      	str	r3, [r7, #24]
  return result;
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	fab3 f383 	clz	r3, r3
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	fa01 f303 	lsl.w	r3, r1, r3
 80082d0:	431a      	orrs	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	@ 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b088      	sub	sp, #32
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	fa93 f3a3 	rbit	r3, r3
 8008300:	613b      	str	r3, [r7, #16]
  return result;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	fab3 f383 	clz	r3, r3
 8008308:	b2db      	uxtb	r3, r3
 800830a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800830c:	e050      	b.n	80083b0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	2101      	movs	r1, #1
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	fa01 f303 	lsl.w	r3, r1, r3
 800831a:	4013      	ands	r3, r2
 800831c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d042      	beq.n	80083aa <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d003      	beq.n	8008334 <LL_GPIO_Init+0x52>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d10d      	bne.n	8008350 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	69b9      	ldr	r1, [r7, #24]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ff12 	bl	8008166 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	461a      	mov	r2, r3
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff fef3 	bl	8008136 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	461a      	mov	r2, r3
 8008356:	69b9      	ldr	r1, [r7, #24]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff ff33 	bl	80081c4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d11a      	bne.n	800839c <LL_GPIO_Init+0xba>
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	fa93 f3a3 	rbit	r3, r3
 8008370:	60bb      	str	r3, [r7, #8]
  return result;
 8008372:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008374:	fab3 f383 	clz	r3, r3
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b07      	cmp	r3, #7
 800837c:	d807      	bhi.n	800838e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	461a      	mov	r2, r3
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff ff4b 	bl	8008222 <LL_GPIO_SetAFPin_0_7>
 800838c:	e006      	b.n	800839c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	461a      	mov	r2, r3
 8008394:	69b9      	ldr	r1, [r7, #24]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ff72 	bl	8008280 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	461a      	mov	r2, r3
 80083a2:	69b9      	ldr	r1, [r7, #24]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff fe97 	bl	80080d8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	3301      	adds	r3, #1
 80083ae:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1a7      	bne.n	800830e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <LL_RCC_GetSysClkSource+0x18>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 030c 	and.w	r3, r3, #12
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40023800 	.word	0x40023800

080083e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083e8:	4b04      	ldr	r3, [pc, #16]	@ (80083fc <LL_RCC_GetAHBPrescaler+0x18>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40023800 	.word	0x40023800

08008400 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008404:	4b04      	ldr	r3, [pc, #16]	@ (8008418 <LL_RCC_GetAPB1Prescaler+0x18>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800840c:	4618      	mov	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40023800 	.word	0x40023800

0800841c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <LL_RCC_GetAPB2Prescaler+0x18>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8008428:	4618      	mov	r0, r3
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	40023800 	.word	0x40023800

08008438 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800843c:	4b04      	ldr	r3, [pc, #16]	@ (8008450 <LL_RCC_PLL_GetMainSource+0x18>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8008444:	4618      	mov	r0, r3
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40023800 	.word	0x40023800

08008454 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008458:	4b04      	ldr	r3, [pc, #16]	@ (800846c <LL_RCC_PLL_GetN+0x18>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	099b      	lsrs	r3, r3, #6
 800845e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8008462:	4618      	mov	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	40023800 	.word	0x40023800

08008470 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8008474:	4b04      	ldr	r3, [pc, #16]	@ (8008488 <LL_RCC_PLL_GetP+0x18>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40023800 	.word	0x40023800

0800848c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008490:	4b04      	ldr	r3, [pc, #16]	@ (80084a4 <LL_RCC_PLL_GetDivider+0x18>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8008498:	4618      	mov	r0, r3
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40023800 	.word	0x40023800

080084a8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80084b0:	f000 f820 	bl	80084f4 <RCC_GetSystemClockFreq>
 80084b4:	4602      	mov	r2, r0
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f840 	bl	8008544 <RCC_GetHCLKClockFreq>
 80084c4:	4602      	mov	r2, r0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 f84e 	bl	8008570 <RCC_GetPCLK1ClockFreq>
 80084d4:	4602      	mov	r2, r0
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f85a 	bl	8008598 <RCC_GetPCLK2ClockFreq>
 80084e4:	4602      	mov	r2, r0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80084fe:	f7ff ff63 	bl	80083c8 <LL_RCC_GetSysClkSource>
 8008502:	4603      	mov	r3, r0
 8008504:	2b08      	cmp	r3, #8
 8008506:	d00c      	beq.n	8008522 <RCC_GetSystemClockFreq+0x2e>
 8008508:	2b08      	cmp	r3, #8
 800850a:	d80f      	bhi.n	800852c <RCC_GetSystemClockFreq+0x38>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <RCC_GetSystemClockFreq+0x22>
 8008510:	2b04      	cmp	r3, #4
 8008512:	d003      	beq.n	800851c <RCC_GetSystemClockFreq+0x28>
 8008514:	e00a      	b.n	800852c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008516:	4b09      	ldr	r3, [pc, #36]	@ (800853c <RCC_GetSystemClockFreq+0x48>)
 8008518:	607b      	str	r3, [r7, #4]
      break;
 800851a:	e00a      	b.n	8008532 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800851c:	4b08      	ldr	r3, [pc, #32]	@ (8008540 <RCC_GetSystemClockFreq+0x4c>)
 800851e:	607b      	str	r3, [r7, #4]
      break;
 8008520:	e007      	b.n	8008532 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8008522:	2008      	movs	r0, #8
 8008524:	f000 f84c 	bl	80085c0 <RCC_PLL_GetFreqDomain_SYS>
 8008528:	6078      	str	r0, [r7, #4]
      break;
 800852a:	e002      	b.n	8008532 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800852c:	4b03      	ldr	r3, [pc, #12]	@ (800853c <RCC_GetSystemClockFreq+0x48>)
 800852e:	607b      	str	r3, [r7, #4]
      break;
 8008530:	bf00      	nop
  }

  return frequency;
 8008532:	687b      	ldr	r3, [r7, #4]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	00f42400 	.word	0x00f42400
 8008540:	017d7840 	.word	0x017d7840

08008544 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800854c:	f7ff ff4a 	bl	80083e4 <LL_RCC_GetAHBPrescaler>
 8008550:	4603      	mov	r3, r0
 8008552:	091b      	lsrs	r3, r3, #4
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	4a04      	ldr	r2, [pc, #16]	@ (800856c <RCC_GetHCLKClockFreq+0x28>)
 800855a:	5cd3      	ldrb	r3, [r2, r3]
 800855c:	461a      	mov	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	40d3      	lsrs	r3, r2
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	08012020 	.word	0x08012020

08008570 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008578:	f7ff ff42 	bl	8008400 <LL_RCC_GetAPB1Prescaler>
 800857c:	4603      	mov	r3, r0
 800857e:	0a9b      	lsrs	r3, r3, #10
 8008580:	4a04      	ldr	r2, [pc, #16]	@ (8008594 <RCC_GetPCLK1ClockFreq+0x24>)
 8008582:	5cd3      	ldrb	r3, [r2, r3]
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	40d3      	lsrs	r3, r2
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	08012030 	.word	0x08012030

08008598 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80085a0:	f7ff ff3c 	bl	800841c <LL_RCC_GetAPB2Prescaler>
 80085a4:	4603      	mov	r3, r0
 80085a6:	0b5b      	lsrs	r3, r3, #13
 80085a8:	4a04      	ldr	r2, [pc, #16]	@ (80085bc <RCC_GetPCLK2ClockFreq+0x24>)
 80085aa:	5cd3      	ldrb	r3, [r2, r3]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	40d3      	lsrs	r3, r2
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	08012030 	.word	0x08012030

080085c0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80085d4:	f7ff ff30 	bl	8008438 <LL_RCC_PLL_GetMainSource>
 80085d8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085e6:	d003      	beq.n	80085f0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80085e8:	e005      	b.n	80085f6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80085ea:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80085ec:	617b      	str	r3, [r7, #20]
      break;
 80085ee:	e005      	b.n	80085fc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80085f0:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80085f2:	617b      	str	r3, [r7, #20]
      break;
 80085f4:	e002      	b.n	80085fc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80085f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80085f8:	617b      	str	r3, [r7, #20]
      break;
 80085fa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d113      	bne.n	800862a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008602:	f7ff ff43 	bl	800848c <LL_RCC_PLL_GetDivider>
 8008606:	4602      	mov	r2, r0
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	fbb3 f4f2 	udiv	r4, r3, r2
 800860e:	f7ff ff21 	bl	8008454 <LL_RCC_PLL_GetN>
 8008612:	4603      	mov	r3, r0
 8008614:	fb03 f404 	mul.w	r4, r3, r4
 8008618:	f7ff ff2a 	bl	8008470 <LL_RCC_PLL_GetP>
 800861c:	4603      	mov	r3, r0
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	3301      	adds	r3, #1
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	fbb4 f3f3 	udiv	r3, r4, r3
 8008628:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800862a:	693b      	ldr	r3, [r7, #16]
}
 800862c:	4618      	mov	r0, r3
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	bd90      	pop	{r4, r7, pc}
 8008634:	00f42400 	.word	0x00f42400
 8008638:	017d7840 	.word	0x017d7840

0800863c <LL_TIM_SetPrescaler>:
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <LL_TIM_SetAutoReload>:
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <LL_TIM_SetRepetitionCounter>:
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f043 0201 	orr.w	r2, r3, #1
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	615a      	str	r2, [r3, #20]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a31      	ldr	r2, [pc, #196]	@ (8008788 <LL_TIM_Init+0xd8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00f      	beq.n	80086e8 <LL_TIM_Init+0x38>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ce:	d00b      	beq.n	80086e8 <LL_TIM_Init+0x38>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a2e      	ldr	r2, [pc, #184]	@ (800878c <LL_TIM_Init+0xdc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d007      	beq.n	80086e8 <LL_TIM_Init+0x38>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a2d      	ldr	r2, [pc, #180]	@ (8008790 <LL_TIM_Init+0xe0>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d003      	beq.n	80086e8 <LL_TIM_Init+0x38>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a2c      	ldr	r2, [pc, #176]	@ (8008794 <LL_TIM_Init+0xe4>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d106      	bne.n	80086f6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a23      	ldr	r2, [pc, #140]	@ (8008788 <LL_TIM_Init+0xd8>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d01b      	beq.n	8008736 <LL_TIM_Init+0x86>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008704:	d017      	beq.n	8008736 <LL_TIM_Init+0x86>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a20      	ldr	r2, [pc, #128]	@ (800878c <LL_TIM_Init+0xdc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d013      	beq.n	8008736 <LL_TIM_Init+0x86>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1f      	ldr	r2, [pc, #124]	@ (8008790 <LL_TIM_Init+0xe0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00f      	beq.n	8008736 <LL_TIM_Init+0x86>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1e      	ldr	r2, [pc, #120]	@ (8008794 <LL_TIM_Init+0xe4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00b      	beq.n	8008736 <LL_TIM_Init+0x86>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1d      	ldr	r2, [pc, #116]	@ (8008798 <LL_TIM_Init+0xe8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d007      	beq.n	8008736 <LL_TIM_Init+0x86>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a1c      	ldr	r2, [pc, #112]	@ (800879c <LL_TIM_Init+0xec>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <LL_TIM_Init+0x86>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1b      	ldr	r2, [pc, #108]	@ (80087a0 <LL_TIM_Init+0xf0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d106      	bne.n	8008744 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ff81 	bl	8008658 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ff6d 	bl	800863c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a08      	ldr	r2, [pc, #32]	@ (8008788 <LL_TIM_Init+0xd8>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d105      	bne.n	8008776 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ff7f 	bl	8008674 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff ff8a 	bl	8008690 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40010000 	.word	0x40010000
 800878c:	40000400 	.word	0x40000400
 8008790:	40000800 	.word	0x40000800
 8008794:	40000c00 	.word	0x40000c00
 8008798:	40014000 	.word	0x40014000
 800879c:	40014400 	.word	0x40014400
 80087a0:	40014800 	.word	0x40014800

080087a4 <LL_USART_IsEnabled>:
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087b8:	bf0c      	ite	eq
 80087ba:	2301      	moveq	r3, #1
 80087bc:	2300      	movne	r3, #0
 80087be:	b2db      	uxtb	r3, r3
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <LL_USART_SetStopBitsLength>:
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	611a      	str	r2, [r3, #16]
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <LL_USART_SetHWFlowCtrl>:
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	615a      	str	r2, [r3, #20]
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <LL_USART_SetBaudRate>:
{
 8008818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800881c:	b0c0      	sub	sp, #256	@ 0x100
 800881e:	af00      	add	r7, sp, #0
 8008820:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008824:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8008828:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800882c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008838:	f040 810c 	bne.w	8008a54 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800883c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008840:	2200      	movs	r2, #0
 8008842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008846:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800884a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800884e:	4622      	mov	r2, r4
 8008850:	462b      	mov	r3, r5
 8008852:	1891      	adds	r1, r2, r2
 8008854:	6639      	str	r1, [r7, #96]	@ 0x60
 8008856:	415b      	adcs	r3, r3
 8008858:	667b      	str	r3, [r7, #100]	@ 0x64
 800885a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800885e:	4621      	mov	r1, r4
 8008860:	eb12 0801 	adds.w	r8, r2, r1
 8008864:	4629      	mov	r1, r5
 8008866:	eb43 0901 	adc.w	r9, r3, r1
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800887a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800887e:	4690      	mov	r8, r2
 8008880:	4699      	mov	r9, r3
 8008882:	4623      	mov	r3, r4
 8008884:	eb18 0303 	adds.w	r3, r8, r3
 8008888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800888c:	462b      	mov	r3, r5
 800888e:	eb49 0303 	adc.w	r3, r9, r3
 8008892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800889a:	2200      	movs	r2, #0
 800889c:	469a      	mov	sl, r3
 800889e:	4693      	mov	fp, r2
 80088a0:	eb1a 030a 	adds.w	r3, sl, sl
 80088a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088a6:	eb4b 030b 	adc.w	r3, fp, fp
 80088aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088b4:	f7f8 f9c8 	bl	8000c48 <__aeabi_uldivmod>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4b64      	ldr	r3, [pc, #400]	@ (8008a50 <LL_USART_SetBaudRate+0x238>)
 80088be:	fba3 2302 	umull	r2, r3, r3, r2
 80088c2:	095b      	lsrs	r3, r3, #5
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	b29c      	uxth	r4, r3
 80088ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088d4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80088d8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	1891      	adds	r1, r2, r2
 80088e2:	6539      	str	r1, [r7, #80]	@ 0x50
 80088e4:	415b      	adcs	r3, r3
 80088e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80088e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80088ec:	4641      	mov	r1, r8
 80088ee:	1851      	adds	r1, r2, r1
 80088f0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80088f2:	4649      	mov	r1, r9
 80088f4:	414b      	adcs	r3, r1
 80088f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	f04f 0300 	mov.w	r3, #0
 8008900:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8008904:	4659      	mov	r1, fp
 8008906:	00cb      	lsls	r3, r1, #3
 8008908:	4651      	mov	r1, sl
 800890a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800890e:	4651      	mov	r1, sl
 8008910:	00ca      	lsls	r2, r1, #3
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	4603      	mov	r3, r0
 8008918:	4642      	mov	r2, r8
 800891a:	189b      	adds	r3, r3, r2
 800891c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008920:	464b      	mov	r3, r9
 8008922:	460a      	mov	r2, r1
 8008924:	eb42 0303 	adc.w	r3, r2, r3
 8008928:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800892c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008930:	2200      	movs	r2, #0
 8008932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008936:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800893a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800893e:	460b      	mov	r3, r1
 8008940:	18db      	adds	r3, r3, r3
 8008942:	643b      	str	r3, [r7, #64]	@ 0x40
 8008944:	4613      	mov	r3, r2
 8008946:	eb42 0303 	adc.w	r3, r2, r3
 800894a:	647b      	str	r3, [r7, #68]	@ 0x44
 800894c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008950:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8008954:	f7f8 f978 	bl	8000c48 <__aeabi_uldivmod>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4611      	mov	r1, r2
 800895e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a50 <LL_USART_SetBaudRate+0x238>)
 8008960:	fba3 2301 	umull	r2, r3, r3, r1
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	2264      	movs	r2, #100	@ 0x64
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	1acb      	subs	r3, r1, r3
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008974:	4b36      	ldr	r3, [pc, #216]	@ (8008a50 <LL_USART_SetBaudRate+0x238>)
 8008976:	fba3 2302 	umull	r2, r3, r3, r2
 800897a:	095b      	lsrs	r3, r3, #5
 800897c:	b29b      	uxth	r3, r3
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	b29b      	uxth	r3, r3
 8008982:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008986:	b29b      	uxth	r3, r3
 8008988:	4423      	add	r3, r4
 800898a:	b29c      	uxth	r4, r3
 800898c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008990:	2200      	movs	r2, #0
 8008992:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008996:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800899a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800899e:	4642      	mov	r2, r8
 80089a0:	464b      	mov	r3, r9
 80089a2:	1891      	adds	r1, r2, r2
 80089a4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80089a6:	415b      	adcs	r3, r3
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80089ae:	4641      	mov	r1, r8
 80089b0:	1851      	adds	r1, r2, r1
 80089b2:	6339      	str	r1, [r7, #48]	@ 0x30
 80089b4:	4649      	mov	r1, r9
 80089b6:	414b      	adcs	r3, r1
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089c6:	4659      	mov	r1, fp
 80089c8:	00cb      	lsls	r3, r1, #3
 80089ca:	4651      	mov	r1, sl
 80089cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089d0:	4651      	mov	r1, sl
 80089d2:	00ca      	lsls	r2, r1, #3
 80089d4:	4610      	mov	r0, r2
 80089d6:	4619      	mov	r1, r3
 80089d8:	4603      	mov	r3, r0
 80089da:	4642      	mov	r2, r8
 80089dc:	189b      	adds	r3, r3, r2
 80089de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089e2:	464b      	mov	r3, r9
 80089e4:	460a      	mov	r2, r1
 80089e6:	eb42 0303 	adc.w	r3, r2, r3
 80089ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80089ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089f8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80089fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008a00:	460b      	mov	r3, r1
 8008a02:	18db      	adds	r3, r3, r3
 8008a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a06:	4613      	mov	r3, r2
 8008a08:	eb42 0303 	adc.w	r3, r2, r3
 8008a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a12:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8008a16:	f7f8 f917 	bl	8000c48 <__aeabi_uldivmod>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a50 <LL_USART_SetBaudRate+0x238>)
 8008a20:	fba3 1302 	umull	r1, r3, r3, r2
 8008a24:	095b      	lsrs	r3, r3, #5
 8008a26:	2164      	movs	r1, #100	@ 0x64
 8008a28:	fb01 f303 	mul.w	r3, r1, r3
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	3332      	adds	r3, #50	@ 0x32
 8008a32:	4a07      	ldr	r2, [pc, #28]	@ (8008a50 <LL_USART_SetBaudRate+0x238>)
 8008a34:	fba2 2303 	umull	r2, r3, r2, r3
 8008a38:	095b      	lsrs	r3, r3, #5
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4423      	add	r3, r4
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a4c:	609a      	str	r2, [r3, #8]
}
 8008a4e:	e108      	b.n	8008c62 <LL_USART_SetBaudRate+0x44a>
 8008a50:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8008a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a5e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a62:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8008a66:	4642      	mov	r2, r8
 8008a68:	464b      	mov	r3, r9
 8008a6a:	1891      	adds	r1, r2, r2
 8008a6c:	6239      	str	r1, [r7, #32]
 8008a6e:	415b      	adcs	r3, r3
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a76:	4641      	mov	r1, r8
 8008a78:	1854      	adds	r4, r2, r1
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	eb43 0501 	adc.w	r5, r3, r1
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	00eb      	lsls	r3, r5, #3
 8008a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a8e:	00e2      	lsls	r2, r4, #3
 8008a90:	4614      	mov	r4, r2
 8008a92:	461d      	mov	r5, r3
 8008a94:	4643      	mov	r3, r8
 8008a96:	18e3      	adds	r3, r4, r3
 8008a98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a9c:	464b      	mov	r3, r9
 8008a9e:	eb45 0303 	adc.w	r3, r5, r3
 8008aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008aa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ab0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008ab4:	f04f 0200 	mov.w	r2, #0
 8008ab8:	f04f 0300 	mov.w	r3, #0
 8008abc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	008b      	lsls	r3, r1, #2
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aca:	4621      	mov	r1, r4
 8008acc:	008a      	lsls	r2, r1, #2
 8008ace:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8008ad2:	f7f8 f8b9 	bl	8000c48 <__aeabi_uldivmod>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4b65      	ldr	r3, [pc, #404]	@ (8008c70 <LL_USART_SetBaudRate+0x458>)
 8008adc:	fba3 2302 	umull	r2, r3, r3, r2
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	b29c      	uxth	r4, r3
 8008ae8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008af6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8008afa:	4642      	mov	r2, r8
 8008afc:	464b      	mov	r3, r9
 8008afe:	1891      	adds	r1, r2, r2
 8008b00:	61b9      	str	r1, [r7, #24]
 8008b02:	415b      	adcs	r3, r3
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	1851      	adds	r1, r2, r1
 8008b0e:	6139      	str	r1, [r7, #16]
 8008b10:	4649      	mov	r1, r9
 8008b12:	414b      	adcs	r3, r1
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b22:	4659      	mov	r1, fp
 8008b24:	00cb      	lsls	r3, r1, #3
 8008b26:	4651      	mov	r1, sl
 8008b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	00ca      	lsls	r2, r1, #3
 8008b30:	4610      	mov	r0, r2
 8008b32:	4619      	mov	r1, r3
 8008b34:	4603      	mov	r3, r0
 8008b36:	4642      	mov	r2, r8
 8008b38:	189b      	adds	r3, r3, r2
 8008b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b3e:	464b      	mov	r3, r9
 8008b40:	460a      	mov	r2, r1
 8008b42:	eb42 0303 	adc.w	r3, r2, r3
 8008b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8008b64:	4649      	mov	r1, r9
 8008b66:	008b      	lsls	r3, r1, #2
 8008b68:	4641      	mov	r1, r8
 8008b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b6e:	4641      	mov	r1, r8
 8008b70:	008a      	lsls	r2, r1, #2
 8008b72:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8008b76:	f7f8 f867 	bl	8000c48 <__aeabi_uldivmod>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4b3b      	ldr	r3, [pc, #236]	@ (8008c70 <LL_USART_SetBaudRate+0x458>)
 8008b82:	fba3 2301 	umull	r2, r3, r3, r1
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	2264      	movs	r2, #100	@ 0x64
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	1acb      	subs	r3, r1, r3
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	3332      	adds	r3, #50	@ 0x32
 8008b94:	4a36      	ldr	r2, [pc, #216]	@ (8008c70 <LL_USART_SetBaudRate+0x458>)
 8008b96:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	4423      	add	r3, r4
 8008ba6:	b29c      	uxth	r4, r3
 8008ba8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bac:	2200      	movs	r2, #0
 8008bae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bb0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008bb2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008bb6:	4642      	mov	r2, r8
 8008bb8:	464b      	mov	r3, r9
 8008bba:	1891      	adds	r1, r2, r2
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	415b      	adcs	r3, r3
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bc6:	4641      	mov	r1, r8
 8008bc8:	1851      	adds	r1, r2, r1
 8008bca:	6039      	str	r1, [r7, #0]
 8008bcc:	4649      	mov	r1, r9
 8008bce:	414b      	adcs	r3, r1
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bde:	4659      	mov	r1, fp
 8008be0:	00cb      	lsls	r3, r1, #3
 8008be2:	4651      	mov	r1, sl
 8008be4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008be8:	4651      	mov	r1, sl
 8008bea:	00ca      	lsls	r2, r1, #3
 8008bec:	4610      	mov	r0, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	189b      	adds	r3, r3, r2
 8008bf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	460a      	mov	r2, r1
 8008bfc:	eb42 0303 	adc.w	r3, r2, r3
 8008c00:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008c06:	2200      	movs	r2, #0
 8008c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8008c18:	4649      	mov	r1, r9
 8008c1a:	008b      	lsls	r3, r1, #2
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c22:	4641      	mov	r1, r8
 8008c24:	008a      	lsls	r2, r1, #2
 8008c26:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8008c2a:	f7f8 f80d 	bl	8000c48 <__aeabi_uldivmod>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4b0f      	ldr	r3, [pc, #60]	@ (8008c70 <LL_USART_SetBaudRate+0x458>)
 8008c34:	fba3 1302 	umull	r1, r3, r3, r2
 8008c38:	095b      	lsrs	r3, r3, #5
 8008c3a:	2164      	movs	r1, #100	@ 0x64
 8008c3c:	fb01 f303 	mul.w	r3, r1, r3
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	3332      	adds	r3, #50	@ 0x32
 8008c46:	4a0a      	ldr	r2, [pc, #40]	@ (8008c70 <LL_USART_SetBaudRate+0x458>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f003 030f 	and.w	r3, r3, #15
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4423      	add	r3, r4
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c60:	609a      	str	r2, [r3, #8]
}
 8008c62:	bf00      	nop
 8008c64:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c6e:	bf00      	nop
 8008c70:	51eb851f 	.word	0x51eb851f

08008c74 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff fd8c 	bl	80087a4 <LL_USART_IsEnabled>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d149      	bne.n	8008d26 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008c9a:	f023 030c 	bic.w	r3, r3, #12
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	6851      	ldr	r1, [r2, #4]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	68d2      	ldr	r2, [r2, #12]
 8008ca6:	4311      	orrs	r1, r2
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	6912      	ldr	r2, [r2, #16]
 8008cac:	4311      	orrs	r1, r2
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	6992      	ldr	r2, [r2, #24]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff fd83 	bl	80087cc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff fd90 	bl	80087f2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8008cd2:	f107 0308 	add.w	r3, r7, #8
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fbe6 	bl	80084a8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a14      	ldr	r2, [pc, #80]	@ (8008d30 <LL_USART_Init+0xbc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d102      	bne.n	8008cea <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	61bb      	str	r3, [r7, #24]
 8008ce8:	e00c      	b.n	8008d04 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a11      	ldr	r2, [pc, #68]	@ (8008d34 <LL_USART_Init+0xc0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d102      	bne.n	8008cf8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e005      	b.n	8008d04 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8008d38 <LL_USART_Init+0xc4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d101      	bne.n	8008d04 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00d      	beq.n	8008d26 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8008d12:	2300      	movs	r3, #0
 8008d14:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69b9      	ldr	r1, [r7, #24]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fd79 	bl	8008818 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8008d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40011000 	.word	0x40011000
 8008d34:	40004400 	.word	0x40004400
 8008d38:	40011400 	.word	0x40011400

08008d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	f107 001c 	add.w	r0, r7, #28
 8008d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d122      	bne.n	8008d9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d105      	bne.n	8008d8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fbee 	bl	800a570 <USB_CoreReset>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
 8008d98:	e01a      	b.n	8008dd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 fbe2 	bl	800a570 <USB_CoreReset>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8008dc2:	e005      	b.n	8008dd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d10b      	bne.n	8008dee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f043 0206 	orr.w	r2, r3, #6
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f043 0220 	orr.w	r2, r3, #32
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dfa:	b004      	add	sp, #16
 8008dfc:	4770      	bx	lr
	...

08008e00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d165      	bne.n	8008ee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4a41      	ldr	r2, [pc, #260]	@ (8008f1c <USB_SetTurnaroundTime+0x11c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d906      	bls.n	8008e2a <USB_SetTurnaroundTime+0x2a>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4a40      	ldr	r2, [pc, #256]	@ (8008f20 <USB_SetTurnaroundTime+0x120>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d202      	bcs.n	8008e2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e24:	230f      	movs	r3, #15
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e062      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f20 <USB_SetTurnaroundTime+0x120>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d306      	bcc.n	8008e40 <USB_SetTurnaroundTime+0x40>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4a3b      	ldr	r2, [pc, #236]	@ (8008f24 <USB_SetTurnaroundTime+0x124>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d202      	bcs.n	8008e40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e3a:	230e      	movs	r3, #14
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e057      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4a38      	ldr	r2, [pc, #224]	@ (8008f24 <USB_SetTurnaroundTime+0x124>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d306      	bcc.n	8008e56 <USB_SetTurnaroundTime+0x56>
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4a37      	ldr	r2, [pc, #220]	@ (8008f28 <USB_SetTurnaroundTime+0x128>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d202      	bcs.n	8008e56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e50:	230d      	movs	r3, #13
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	e04c      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4a33      	ldr	r2, [pc, #204]	@ (8008f28 <USB_SetTurnaroundTime+0x128>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d306      	bcc.n	8008e6c <USB_SetTurnaroundTime+0x6c>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4a32      	ldr	r2, [pc, #200]	@ (8008f2c <USB_SetTurnaroundTime+0x12c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d802      	bhi.n	8008e6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e66:	230c      	movs	r3, #12
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	e041      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8008f2c <USB_SetTurnaroundTime+0x12c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d906      	bls.n	8008e82 <USB_SetTurnaroundTime+0x82>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4a2e      	ldr	r2, [pc, #184]	@ (8008f30 <USB_SetTurnaroundTime+0x130>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d802      	bhi.n	8008e82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e7c:	230b      	movs	r3, #11
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	e036      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4a2a      	ldr	r2, [pc, #168]	@ (8008f30 <USB_SetTurnaroundTime+0x130>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d906      	bls.n	8008e98 <USB_SetTurnaroundTime+0x98>
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4a29      	ldr	r2, [pc, #164]	@ (8008f34 <USB_SetTurnaroundTime+0x134>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d802      	bhi.n	8008e98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e92:	230a      	movs	r3, #10
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	e02b      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4a26      	ldr	r2, [pc, #152]	@ (8008f34 <USB_SetTurnaroundTime+0x134>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d906      	bls.n	8008eae <USB_SetTurnaroundTime+0xae>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4a25      	ldr	r2, [pc, #148]	@ (8008f38 <USB_SetTurnaroundTime+0x138>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d202      	bcs.n	8008eae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ea8:	2309      	movs	r3, #9
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e020      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4a21      	ldr	r2, [pc, #132]	@ (8008f38 <USB_SetTurnaroundTime+0x138>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d306      	bcc.n	8008ec4 <USB_SetTurnaroundTime+0xc4>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4a20      	ldr	r2, [pc, #128]	@ (8008f3c <USB_SetTurnaroundTime+0x13c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d802      	bhi.n	8008ec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ebe:	2308      	movs	r3, #8
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	e015      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f3c <USB_SetTurnaroundTime+0x13c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d906      	bls.n	8008eda <USB_SetTurnaroundTime+0xda>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4a1c      	ldr	r2, [pc, #112]	@ (8008f40 <USB_SetTurnaroundTime+0x140>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d202      	bcs.n	8008eda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ed4:	2307      	movs	r3, #7
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	e00a      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eda:	2306      	movs	r3, #6
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	e007      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ee6:	2309      	movs	r3, #9
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	e001      	b.n	8008ef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008eec:	2309      	movs	r3, #9
 8008eee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	029b      	lsls	r3, r3, #10
 8008f04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	00d8acbf 	.word	0x00d8acbf
 8008f20:	00e4e1c0 	.word	0x00e4e1c0
 8008f24:	00f42400 	.word	0x00f42400
 8008f28:	01067380 	.word	0x01067380
 8008f2c:	011a499f 	.word	0x011a499f
 8008f30:	01312cff 	.word	0x01312cff
 8008f34:	014ca43f 	.word	0x014ca43f
 8008f38:	016e3600 	.word	0x016e3600
 8008f3c:	01a6ab1f 	.word	0x01a6ab1f
 8008f40:	01e84800 	.word	0x01e84800

08008f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f043 0201 	orr.w	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f023 0201 	bic.w	r2, r3, #1
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d115      	bne.n	8008fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	f7fb fb66 	bl	8004688 <HAL_Delay>
      ms++;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 fa45 	bl	800a452 <USB_GetMode>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d01e      	beq.n	800900c <USB_SetCurrentMode+0x84>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b31      	cmp	r3, #49	@ 0x31
 8008fd2:	d9f0      	bls.n	8008fb6 <USB_SetCurrentMode+0x2e>
 8008fd4:	e01a      	b.n	800900c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d115      	bne.n	8009008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7fb fb4d 	bl	8004688 <HAL_Delay>
      ms++;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fa2c 	bl	800a452 <USB_GetMode>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <USB_SetCurrentMode+0x84>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b31      	cmp	r3, #49	@ 0x31
 8009004:	d9f0      	bls.n	8008fe8 <USB_SetCurrentMode+0x60>
 8009006:	e001      	b.n	800900c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e005      	b.n	8009018 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b32      	cmp	r3, #50	@ 0x32
 8009010:	d101      	bne.n	8009016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009020:	b084      	sub	sp, #16
 8009022:	b580      	push	{r7, lr}
 8009024:	b086      	sub	sp, #24
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800902e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	e009      	b.n	8009054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3340      	adds	r3, #64	@ 0x40
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	2200      	movs	r2, #0
 800904c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3301      	adds	r3, #1
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2b0e      	cmp	r3, #14
 8009058:	d9f2      	bls.n	8009040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800905a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11c      	bne.n	800909a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800906e:	f043 0302 	orr.w	r3, r3, #2
 8009072:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009078:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009084:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009090:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	639a      	str	r2, [r3, #56]	@ 0x38
 8009098:	e00b      	b.n	80090b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090aa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090b8:	461a      	mov	r2, r3
 80090ba:	2300      	movs	r3, #0
 80090bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c4:	4619      	mov	r1, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090cc:	461a      	mov	r2, r3
 80090ce:	680b      	ldr	r3, [r1, #0]
 80090d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d10c      	bne.n	80090f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d104      	bne.n	80090e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f965 	bl	80093b0 <USB_SetDevSpeed>
 80090e6:	e008      	b.n	80090fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090e8:	2101      	movs	r1, #1
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f960 	bl	80093b0 <USB_SetDevSpeed>
 80090f0:	e003      	b.n	80090fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090f2:	2103      	movs	r1, #3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f95b 	bl	80093b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090fa:	2110      	movs	r1, #16
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f8f3 	bl	80092e8 <USB_FlushTxFifo>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f91f 	bl	8009350 <USB_FlushRxFifo>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009122:	461a      	mov	r2, r3
 8009124:	2300      	movs	r3, #0
 8009126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912e:	461a      	mov	r2, r3
 8009130:	2300      	movs	r3, #0
 8009132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800913a:	461a      	mov	r2, r3
 800913c:	2300      	movs	r3, #0
 800913e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009140:	2300      	movs	r3, #0
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	e043      	b.n	80091ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800915c:	d118      	bne.n	8009190 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e013      	b.n	80091a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009186:	461a      	mov	r2, r3
 8009188:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	e008      	b.n	80091a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800919c:	461a      	mov	r2, r3
 800919e:	2300      	movs	r3, #0
 80091a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ae:	461a      	mov	r2, r3
 80091b0:	2300      	movs	r3, #0
 80091b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c0:	461a      	mov	r2, r3
 80091c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3301      	adds	r3, #1
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d3b7      	bcc.n	8009146 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	e043      	b.n	8009264 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091f2:	d118      	bne.n	8009226 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009206:	461a      	mov	r2, r3
 8009208:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	e013      	b.n	8009238 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800921c:	461a      	mov	r2, r3
 800921e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	e008      	b.n	8009238 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009232:	461a      	mov	r2, r3
 8009234:	2300      	movs	r3, #0
 8009236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009244:	461a      	mov	r2, r3
 8009246:	2300      	movs	r3, #0
 8009248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009256:	461a      	mov	r2, r3
 8009258:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800925c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	3301      	adds	r3, #1
 8009262:	613b      	str	r3, [r7, #16]
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	429a      	cmp	r2, r3
 800926a:	d3b7      	bcc.n	80091dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800927a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800927e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800928c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	2b00      	cmp	r3, #0
 8009292:	d105      	bne.n	80092a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f043 0210 	orr.w	r2, r3, #16
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	699a      	ldr	r2, [r3, #24]
 80092a4:	4b0f      	ldr	r3, [pc, #60]	@ (80092e4 <USB_DevInit+0x2c4>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f043 0208 	orr.w	r2, r3, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d107      	bne.n	80092d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092cc:	f043 0304 	orr.w	r3, r3, #4
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092e0:	b004      	add	sp, #16
 80092e2:	4770      	bx	lr
 80092e4:	803c3800 	.word	0x803c3800

080092e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a13      	ldr	r2, [pc, #76]	@ (800934c <USB_FlushTxFifo+0x64>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d901      	bls.n	8009308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e01b      	b.n	8009340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	daf2      	bge.n	80092f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	019b      	lsls	r3, r3, #6
 8009318:	f043 0220 	orr.w	r2, r3, #32
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4a08      	ldr	r2, [pc, #32]	@ (800934c <USB_FlushTxFifo+0x64>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d901      	bls.n	8009332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e006      	b.n	8009340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b20      	cmp	r3, #32
 800933c:	d0f0      	beq.n	8009320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	00030d40 	.word	0x00030d40

08009350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a11      	ldr	r2, [pc, #68]	@ (80093ac <USB_FlushRxFifo+0x5c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e018      	b.n	80093a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	daf2      	bge.n	800935c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2210      	movs	r2, #16
 800937e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3301      	adds	r3, #1
 8009384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4a08      	ldr	r2, [pc, #32]	@ (80093ac <USB_FlushRxFifo+0x5c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d901      	bls.n	8009392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e006      	b.n	80093a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b10      	cmp	r3, #16
 800939c:	d0f0      	beq.n	8009380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	00030d40 	.word	0x00030d40

080093b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093d0:	4313      	orrs	r3, r2
 80093d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b087      	sub	sp, #28
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 0306 	and.w	r3, r3, #6
 80093fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009402:	2300      	movs	r3, #0
 8009404:	75fb      	strb	r3, [r7, #23]
 8009406:	e00a      	b.n	800941e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d002      	beq.n	8009414 <USB_GetDevSpeed+0x32>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b06      	cmp	r3, #6
 8009412:	d102      	bne.n	800941a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009414:	2302      	movs	r3, #2
 8009416:	75fb      	strb	r3, [r7, #23]
 8009418:	e001      	b.n	800941e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800941a:	230f      	movs	r3, #15
 800941c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009420:	4618      	mov	r0, r3
 8009422:	371c      	adds	r7, #28
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d13a      	bne.n	80094be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	f003 030f 	and.w	r3, r3, #15
 8009458:	2101      	movs	r1, #1
 800945a:	fa01 f303 	lsl.w	r3, r1, r3
 800945e:	b29b      	uxth	r3, r3
 8009460:	68f9      	ldr	r1, [r7, #12]
 8009462:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009466:	4313      	orrs	r3, r2
 8009468:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d155      	bne.n	800952c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	791b      	ldrb	r3, [r3, #4]
 800949a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800949c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	059b      	lsls	r3, r3, #22
 80094a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094a4:	4313      	orrs	r3, r2
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	0151      	lsls	r1, r2, #5
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	440a      	add	r2, r1
 80094ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	e036      	b.n	800952c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c4:	69da      	ldr	r2, [r3, #28]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	f003 030f 	and.w	r3, r3, #15
 80094ce:	2101      	movs	r1, #1
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	68f9      	ldr	r1, [r7, #12]
 80094d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094dc:	4313      	orrs	r3, r2
 80094de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d11a      	bne.n	800952c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	791b      	ldrb	r3, [r3, #4]
 8009510:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009512:	430b      	orrs	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	0151      	lsls	r1, r2, #5
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	440a      	add	r2, r1
 800951e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800952a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
	...

0800953c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d161      	bne.n	800961c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800956a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800956e:	d11f      	bne.n	80095b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800958a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800958e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	0151      	lsls	r1, r2, #5
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	440a      	add	r2, r1
 80095a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	2101      	movs	r1, #1
 80095c2:	fa01 f303 	lsl.w	r3, r1, r3
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	43db      	mvns	r3, r3
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095d0:	4013      	ands	r3, r2
 80095d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 030f 	and.w	r3, r3, #15
 80095e4:	2101      	movs	r1, #1
 80095e6:	fa01 f303 	lsl.w	r3, r1, r3
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	43db      	mvns	r3, r3
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095f4:	4013      	ands	r3, r2
 80095f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	0159      	lsls	r1, r3, #5
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	440b      	add	r3, r1
 800960e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009612:	4619      	mov	r1, r3
 8009614:	4b35      	ldr	r3, [pc, #212]	@ (80096ec <USB_DeactivateEndpoint+0x1b0>)
 8009616:	4013      	ands	r3, r2
 8009618:	600b      	str	r3, [r1, #0]
 800961a:	e060      	b.n	80096de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800962e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009632:	d11f      	bne.n	8009674 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	0151      	lsls	r1, r2, #5
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	440a      	add	r2, r1
 800964a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800964e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009652:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	0151      	lsls	r1, r2, #5
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	440a      	add	r2, r1
 800966a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800966e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800967a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	f003 030f 	and.w	r3, r3, #15
 8009684:	2101      	movs	r1, #1
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	041b      	lsls	r3, r3, #16
 800968c:	43db      	mvns	r3, r3
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009694:	4013      	ands	r3, r2
 8009696:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800969e:	69da      	ldr	r2, [r3, #28]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	2101      	movs	r1, #1
 80096aa:	fa01 f303 	lsl.w	r3, r1, r3
 80096ae:	041b      	lsls	r3, r3, #16
 80096b0:	43db      	mvns	r3, r3
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096b8:	4013      	ands	r3, r2
 80096ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	0159      	lsls	r1, r3, #5
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	440b      	add	r3, r1
 80096d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d6:	4619      	mov	r1, r3
 80096d8:	4b05      	ldr	r3, [pc, #20]	@ (80096f0 <USB_DeactivateEndpoint+0x1b4>)
 80096da:	4013      	ands	r3, r2
 80096dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	ec337800 	.word	0xec337800
 80096f0:	eff37800 	.word	0xeff37800

080096f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	@ 0x28
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b01      	cmp	r3, #1
 8009712:	f040 815c 	bne.w	80099ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d132      	bne.n	8009784 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	69fa      	ldr	r2, [r7, #28]
 8009732:	440a      	add	r2, r1
 8009734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009738:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800973c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	0151      	lsls	r1, r2, #5
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	440a      	add	r2, r1
 8009758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800975c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	0151      	lsls	r1, r2, #5
 8009774:	69fa      	ldr	r2, [r7, #28]
 8009776:	440a      	add	r2, r1
 8009778:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977c:	0cdb      	lsrs	r3, r3, #19
 800977e:	04db      	lsls	r3, r3, #19
 8009780:	6113      	str	r3, [r2, #16]
 8009782:	e074      	b.n	800986e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	440a      	add	r2, r1
 800979a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800979e:	0cdb      	lsrs	r3, r3, #19
 80097a0:	04db      	lsls	r3, r3, #19
 80097a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	0151      	lsls	r1, r2, #5
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	440a      	add	r2, r1
 80097ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6999      	ldr	r1, [r3, #24]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	440b      	add	r3, r1
 80097e0:	1e59      	subs	r1, r3, #1
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80097ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097ec:	4b9d      	ldr	r3, [pc, #628]	@ (8009a64 <USB_EPStartXfer+0x370>)
 80097ee:	400b      	ands	r3, r1
 80097f0:	69b9      	ldr	r1, [r7, #24]
 80097f2:	0148      	lsls	r0, r1, #5
 80097f4:	69f9      	ldr	r1, [r7, #28]
 80097f6:	4401      	add	r1, r0
 80097f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097fc:	4313      	orrs	r3, r2
 80097fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980c:	691a      	ldr	r2, [r3, #16]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009816:	69b9      	ldr	r1, [r7, #24]
 8009818:	0148      	lsls	r0, r1, #5
 800981a:	69f9      	ldr	r1, [r7, #28]
 800981c:	4401      	add	r1, r0
 800981e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009822:	4313      	orrs	r3, r2
 8009824:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	791b      	ldrb	r3, [r3, #4]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d11f      	bne.n	800986e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	440a      	add	r2, r1
 8009844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009848:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800984c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009868:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800986c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d14b      	bne.n	800990c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	015a      	lsls	r2, r3, #5
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	4413      	add	r3, r2
 8009884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009888:	461a      	mov	r2, r3
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	791b      	ldrb	r3, [r3, #4]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d128      	bne.n	80098ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d110      	bne.n	80098ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	0151      	lsls	r1, r2, #5
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	440a      	add	r2, r1
 80098be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	e00f      	b.n	80098ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	0151      	lsls	r1, r2, #5
 80098dc:	69fa      	ldr	r2, [r7, #28]
 80098de:	440a      	add	r2, r1
 80098e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	0151      	lsls	r1, r2, #5
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	440a      	add	r2, r1
 8009900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009904:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e133      	b.n	8009b74 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009926:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800992a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	791b      	ldrb	r3, [r3, #4]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d015      	beq.n	8009960 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 811b 	beq.w	8009b74 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	2101      	movs	r1, #1
 8009950:	fa01 f303 	lsl.w	r3, r1, r3
 8009954:	69f9      	ldr	r1, [r7, #28]
 8009956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800995a:	4313      	orrs	r3, r2
 800995c:	634b      	str	r3, [r1, #52]	@ 0x34
 800995e:	e109      	b.n	8009b74 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800996c:	2b00      	cmp	r3, #0
 800996e:	d110      	bne.n	8009992 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	0151      	lsls	r1, r2, #5
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	440a      	add	r2, r1
 8009986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800998a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	e00f      	b.n	80099b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6919      	ldr	r1, [r3, #16]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	b298      	uxth	r0, r3
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	4603      	mov	r3, r0
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fade 	bl	8009f88 <USB_WritePacket>
 80099cc:	e0d2      	b.n	8009b74 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	69ba      	ldr	r2, [r7, #24]
 80099de:	0151      	lsls	r1, r2, #5
 80099e0:	69fa      	ldr	r2, [r7, #28]
 80099e2:	440a      	add	r2, r1
 80099e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099e8:	0cdb      	lsrs	r3, r3, #19
 80099ea:	04db      	lsls	r3, r3, #19
 80099ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	69fa      	ldr	r2, [r7, #28]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a08:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a0c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d126      	bne.n	8009a68 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a26:	691a      	ldr	r2, [r3, #16]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a30:	69b9      	ldr	r1, [r7, #24]
 8009a32:	0148      	lsls	r0, r1, #5
 8009a34:	69f9      	ldr	r1, [r7, #28]
 8009a36:	4401      	add	r1, r0
 8009a38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a5e:	6113      	str	r3, [r2, #16]
 8009a60:	e03a      	b.n	8009ad8 <USB_EPStartXfer+0x3e4>
 8009a62:	bf00      	nop
 8009a64:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	699a      	ldr	r2, [r3, #24]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	4413      	add	r3, r2
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	8afa      	ldrh	r2, [r7, #22]
 8009a84:	fb03 f202 	mul.w	r2, r3, r2
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a98:	691a      	ldr	r2, [r3, #16]
 8009a9a:	8afb      	ldrh	r3, [r7, #22]
 8009a9c:	04d9      	lsls	r1, r3, #19
 8009a9e:	4b38      	ldr	r3, [pc, #224]	@ (8009b80 <USB_EPStartXfer+0x48c>)
 8009aa0:	400b      	ands	r3, r1
 8009aa2:	69b9      	ldr	r1, [r7, #24]
 8009aa4:	0148      	lsls	r0, r1, #5
 8009aa6:	69f9      	ldr	r1, [r7, #28]
 8009aa8:	4401      	add	r1, r0
 8009aaa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009abe:	691a      	ldr	r2, [r3, #16]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	0148      	lsls	r0, r1, #5
 8009acc:	69f9      	ldr	r1, [r7, #28]
 8009ace:	4401      	add	r1, r0
 8009ad0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d10d      	bne.n	8009afa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d009      	beq.n	8009afa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6919      	ldr	r1, [r3, #16]
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af6:	460a      	mov	r2, r1
 8009af8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	791b      	ldrb	r3, [r3, #4]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d128      	bne.n	8009b54 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d110      	bne.n	8009b34 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e00f      	b.n	8009b54 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	0151      	lsls	r1, r2, #5
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	1ff80000 	.word	0x1ff80000

08009b84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	785b      	ldrb	r3, [r3, #1]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	f040 80ce 	bne.w	8009d42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d132      	bne.n	8009c14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bc8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009bcc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	0151      	lsls	r1, r2, #5
 8009be4:	697a      	ldr	r2, [r7, #20]
 8009be6:	440a      	add	r2, r1
 8009be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c0c:	0cdb      	lsrs	r3, r3, #19
 8009c0e:	04db      	lsls	r3, r3, #19
 8009c10:	6113      	str	r3, [r2, #16]
 8009c12:	e04e      	b.n	8009cb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	0151      	lsls	r1, r2, #5
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	440a      	add	r2, r1
 8009c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c2e:	0cdb      	lsrs	r3, r3, #19
 8009c30:	04db      	lsls	r3, r3, #19
 8009c32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	0151      	lsls	r1, r2, #5
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	440a      	add	r2, r1
 8009c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009c56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	699a      	ldr	r2, [r3, #24]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d903      	bls.n	8009c6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ca2:	6939      	ldr	r1, [r7, #16]
 8009ca4:	0148      	lsls	r0, r1, #5
 8009ca6:	6979      	ldr	r1, [r7, #20]
 8009ca8:	4401      	add	r1, r0
 8009caa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d11e      	bne.n	8009cf6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d009      	beq.n	8009cd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	0151      	lsls	r1, r2, #5
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	440a      	add	r2, r1
 8009cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	e097      	b.n	8009e26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	0151      	lsls	r1, r2, #5
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	440a      	add	r2, r1
 8009d0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 8083 	beq.w	8009e26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	2101      	movs	r1, #1
 8009d32:	fa01 f303 	lsl.w	r3, r1, r3
 8009d36:	6979      	ldr	r1, [r7, #20]
 8009d38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8009d40:	e071      	b.n	8009e26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	0151      	lsls	r1, r2, #5
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	440a      	add	r2, r1
 8009d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d5c:	0cdb      	lsrs	r3, r3, #19
 8009d5e:	04db      	lsls	r3, r3, #19
 8009d60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	0151      	lsls	r1, r2, #5
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	440a      	add	r2, r1
 8009d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d7c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d80:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	0151      	lsls	r1, r2, #5
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	440a      	add	r2, r1
 8009db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009db8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009dbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dca:	691a      	ldr	r2, [r3, #16]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dd4:	6939      	ldr	r1, [r7, #16]
 8009dd6:	0148      	lsls	r0, r1, #5
 8009dd8:	6979      	ldr	r1, [r7, #20]
 8009dda:	4401      	add	r1, r0
 8009ddc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009de0:	4313      	orrs	r3, r2
 8009de2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d10d      	bne.n	8009e06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6919      	ldr	r1, [r3, #16]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e02:	460a      	mov	r2, r1
 8009e04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d14a      	bne.n	8009ee8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e6a:	f040 8086 	bne.w	8009f7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	7812      	ldrb	r2, [r2, #0]
 8009ea6:	0151      	lsls	r1, r2, #5
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	440a      	add	r2, r1
 8009eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009eb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d902      	bls.n	8009ecc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eca:	e056      	b.n	8009f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ee4:	d0e7      	beq.n	8009eb6 <USB_EPStopXfer+0x82>
 8009ee6:	e048      	b.n	8009f7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f00:	d13b      	bne.n	8009f7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	7812      	ldrb	r2, [r2, #0]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	7812      	ldrb	r2, [r2, #0]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d902      	bls.n	8009f60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f5e:	e00c      	b.n	8009f7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f78:	d0e7      	beq.n	8009f4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	371c      	adds	r7, #28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b089      	sub	sp, #36	@ 0x24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	4611      	mov	r1, r2
 8009f94:	461a      	mov	r2, r3
 8009f96:	460b      	mov	r3, r1
 8009f98:	71fb      	strb	r3, [r7, #7]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d123      	bne.n	8009ff6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fae:	88bb      	ldrh	r3, [r7, #4]
 8009fb0:	3303      	adds	r3, #3
 8009fb2:	089b      	lsrs	r3, r3, #2
 8009fb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61bb      	str	r3, [r7, #24]
 8009fba:	e018      	b.n	8009fee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	031a      	lsls	r2, r3, #12
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fc8:	461a      	mov	r2, r3
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	3301      	adds	r3, #1
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	69ba      	ldr	r2, [r7, #24]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d3e2      	bcc.n	8009fbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3724      	adds	r7, #36	@ 0x24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a004:	b480      	push	{r7}
 800a006:	b08b      	sub	sp, #44	@ 0x2c
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	4613      	mov	r3, r2
 800a010:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	089b      	lsrs	r3, r3, #2
 800a01e:	b29b      	uxth	r3, r3
 800a020:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a02a:	2300      	movs	r3, #0
 800a02c:	623b      	str	r3, [r7, #32]
 800a02e:	e014      	b.n	800a05a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	3301      	adds	r3, #1
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a044:	3301      	adds	r3, #1
 800a046:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04a:	3301      	adds	r3, #1
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	3301      	adds	r3, #1
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	3301      	adds	r3, #1
 800a058:	623b      	str	r3, [r7, #32]
 800a05a:	6a3a      	ldr	r2, [r7, #32]
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d3e6      	bcc.n	800a030 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a062:	8bfb      	ldrh	r3, [r7, #30]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01e      	beq.n	800a0a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a072:	461a      	mov	r2, r3
 800a074:	f107 0310 	add.w	r3, r7, #16
 800a078:	6812      	ldr	r2, [r2, #0]
 800a07a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	fa22 f303 	lsr.w	r3, r2, r3
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	701a      	strb	r2, [r3, #0]
      i++;
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	3301      	adds	r3, #1
 800a092:	623b      	str	r3, [r7, #32]
      pDest++;
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	3301      	adds	r3, #1
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a09a:	8bfb      	ldrh	r3, [r7, #30]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0a0:	8bfb      	ldrh	r3, [r7, #30]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1ea      	bne.n	800a07c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	372c      	adds	r7, #44	@ 0x2c
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d12c      	bne.n	800a12a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	db12      	blt.n	800a108 <USB_EPSetStall+0x54>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00f      	beq.n	800a108 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	0151      	lsls	r1, r2, #5
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a102:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a106:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	0151      	lsls	r1, r2, #5
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	440a      	add	r2, r1
 800a11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	e02b      	b.n	800a182 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	db12      	blt.n	800a162 <USB_EPSetStall+0xae>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00f      	beq.n	800a162 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	0151      	lsls	r1, r2, #5
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	440a      	add	r2, r1
 800a158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a15c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a160:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a17c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a180:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d128      	bne.n	800a1fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	0151      	lsls	r1, r2, #5
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	440a      	add	r2, r1
 800a1c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	791b      	ldrb	r3, [r3, #4]
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d003      	beq.n	800a1dc <USB_EPClearStall+0x4c>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	791b      	ldrb	r3, [r3, #4]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d138      	bne.n	800a24e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	e027      	b.n	800a24e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	0151      	lsls	r1, r2, #5
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	440a      	add	r2, r1
 800a214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a218:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a21c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	791b      	ldrb	r3, [r3, #4]
 800a222:	2b03      	cmp	r3, #3
 800a224:	d003      	beq.n	800a22e <USB_EPClearStall+0x9e>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	791b      	ldrb	r3, [r3, #4]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d10f      	bne.n	800a24e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4413      	add	r3, r2
 800a236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	0151      	lsls	r1, r2, #5
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	440a      	add	r2, r1
 800a244:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a24c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a27a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a27e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a290:	68f9      	ldr	r1, [r7, #12]
 800a292:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a296:	4313      	orrs	r3, r2
 800a298:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2d6:	f023 0302 	bic.w	r3, r3, #2
 800a2da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a304:	f023 0303 	bic.w	r3, r3, #3
 800a308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a318:	f043 0302 	orr.w	r3, r3, #2
 800a31c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	4013      	ands	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a344:	68fb      	ldr	r3, [r7, #12]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a352:	b480      	push	{r7}
 800a354:	b085      	sub	sp, #20
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	4013      	ands	r3, r2
 800a374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	0c1b      	lsrs	r3, r3, #16
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	b29b      	uxth	r3, r3
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b087      	sub	sp, #28
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a418:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	fa22 f303 	lsr.w	r3, r2, r3
 800a426:	01db      	lsls	r3, r3, #7
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	4013      	ands	r3, r2
 800a442:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a444:	68bb      	ldr	r3, [r7, #8]
}
 800a446:	4618      	mov	r0, r3
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	f003 0301 	and.w	r3, r3, #1
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a488:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a48c:	f023 0307 	bic.w	r3, r3, #7
 800a490:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	333c      	adds	r3, #60	@ 0x3c
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	4a26      	ldr	r2, [pc, #152]	@ (800a56c <USB_EP0_OutStart+0xb8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d90a      	bls.n	800a4ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4e8:	d101      	bne.n	800a4ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e037      	b.n	800a55e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a50c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a51c:	f043 0318 	orr.w	r3, r3, #24
 800a520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a530:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a534:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d10f      	bne.n	800a55c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a542:	461a      	mov	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a556:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a55a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	4f54300a 	.word	0x4f54300a

0800a570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3301      	adds	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4a13      	ldr	r2, [pc, #76]	@ (800a5d4 <USB_CoreReset+0x64>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d901      	bls.n	800a58e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e01b      	b.n	800a5c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	daf2      	bge.n	800a57c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f043 0201 	orr.w	r2, r3, #1
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4a09      	ldr	r2, [pc, #36]	@ (800a5d4 <USB_CoreReset+0x64>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d901      	bls.n	800a5b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e006      	b.n	800a5c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d0f0      	beq.n	800a5a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	00030d40 	.word	0x00030d40

0800a5d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a5e8:	f002 fc88 	bl	800cefc <USBD_static_malloc>
 800a5ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	32b0      	adds	r2, #176	@ 0xb0
 800a5fe:	2100      	movs	r1, #0
 800a600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a604:	2302      	movs	r3, #2
 800a606:	e0d4      	b.n	800a7b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a608:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a60c:	2100      	movs	r1, #0
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f003 f866 	bl	800d6e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32b0      	adds	r2, #176	@ 0xb0
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32b0      	adds	r2, #176	@ 0xb0
 800a62e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	7c1b      	ldrb	r3, [r3, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d138      	bne.n	800a6b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a640:	4b5e      	ldr	r3, [pc, #376]	@ (800a7bc <USBD_CDC_Init+0x1e4>)
 800a642:	7819      	ldrb	r1, [r3, #0]
 800a644:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a648:	2202      	movs	r2, #2
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f002 fb33 	bl	800ccb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a650:	4b5a      	ldr	r3, [pc, #360]	@ (800a7bc <USBD_CDC_Init+0x1e4>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	f003 020f 	and.w	r2, r3, #15
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	3324      	adds	r3, #36	@ 0x24
 800a666:	2201      	movs	r2, #1
 800a668:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a66a:	4b55      	ldr	r3, [pc, #340]	@ (800a7c0 <USBD_CDC_Init+0x1e8>)
 800a66c:	7819      	ldrb	r1, [r3, #0]
 800a66e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a672:	2202      	movs	r2, #2
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f002 fb1e 	bl	800ccb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a67a:	4b51      	ldr	r3, [pc, #324]	@ (800a7c0 <USBD_CDC_Init+0x1e8>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f003 020f 	and.w	r2, r3, #15
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	440b      	add	r3, r1
 800a68e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a692:	2201      	movs	r2, #1
 800a694:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a696:	4b4b      	ldr	r3, [pc, #300]	@ (800a7c4 <USBD_CDC_Init+0x1ec>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	f003 020f 	and.w	r2, r3, #15
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	440b      	add	r3, r1
 800a6aa:	3326      	adds	r3, #38	@ 0x26
 800a6ac:	2210      	movs	r2, #16
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	e035      	b.n	800a71e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6b2:	4b42      	ldr	r3, [pc, #264]	@ (800a7bc <USBD_CDC_Init+0x1e4>)
 800a6b4:	7819      	ldrb	r1, [r3, #0]
 800a6b6:	2340      	movs	r3, #64	@ 0x40
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f002 fafb 	bl	800ccb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6c0:	4b3e      	ldr	r3, [pc, #248]	@ (800a7bc <USBD_CDC_Init+0x1e4>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	f003 020f 	and.w	r2, r3, #15
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	440b      	add	r3, r1
 800a6d4:	3324      	adds	r3, #36	@ 0x24
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6da:	4b39      	ldr	r3, [pc, #228]	@ (800a7c0 <USBD_CDC_Init+0x1e8>)
 800a6dc:	7819      	ldrb	r1, [r3, #0]
 800a6de:	2340      	movs	r3, #64	@ 0x40
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f002 fae7 	bl	800ccb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6e8:	4b35      	ldr	r3, [pc, #212]	@ (800a7c0 <USBD_CDC_Init+0x1e8>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	f003 020f 	and.w	r2, r3, #15
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a700:	2201      	movs	r2, #1
 800a702:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a704:	4b2f      	ldr	r3, [pc, #188]	@ (800a7c4 <USBD_CDC_Init+0x1ec>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 020f 	and.w	r2, r3, #15
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	440b      	add	r3, r1
 800a718:	3326      	adds	r3, #38	@ 0x26
 800a71a:	2210      	movs	r2, #16
 800a71c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a71e:	4b29      	ldr	r3, [pc, #164]	@ (800a7c4 <USBD_CDC_Init+0x1ec>)
 800a720:	7819      	ldrb	r1, [r3, #0]
 800a722:	2308      	movs	r3, #8
 800a724:	2203      	movs	r2, #3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f002 fac5 	bl	800ccb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a72c:	4b25      	ldr	r3, [pc, #148]	@ (800a7c4 <USBD_CDC_Init+0x1ec>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	3324      	adds	r3, #36	@ 0x24
 800a742:	2201      	movs	r2, #1
 800a744:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	33b0      	adds	r3, #176	@ 0xb0
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a77c:	2302      	movs	r3, #2
 800a77e:	e018      	b.n	800a7b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	7c1b      	ldrb	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10a      	bne.n	800a79e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a788:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c0 <USBD_CDC_Init+0x1e8>)
 800a78a:	7819      	ldrb	r1, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f002 fb7c 	bl	800ce94 <USBD_LL_PrepareReceive>
 800a79c:	e008      	b.n	800a7b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a79e:	4b08      	ldr	r3, [pc, #32]	@ (800a7c0 <USBD_CDC_Init+0x1e8>)
 800a7a0:	7819      	ldrb	r1, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7a8:	2340      	movs	r3, #64	@ 0x40
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f002 fb72 	bl	800ce94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200001bf 	.word	0x200001bf
 800a7c0:	200001c0 	.word	0x200001c0
 800a7c4:	200001c1 	.word	0x200001c1

0800a7c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a7d4:	4b3a      	ldr	r3, [pc, #232]	@ (800a8c0 <USBD_CDC_DeInit+0xf8>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f002 fa91 	bl	800cd02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a7e0:	4b37      	ldr	r3, [pc, #220]	@ (800a8c0 <USBD_CDC_DeInit+0xf8>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3324      	adds	r3, #36	@ 0x24
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a7fa:	4b32      	ldr	r3, [pc, #200]	@ (800a8c4 <USBD_CDC_DeInit+0xfc>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f002 fa7e 	bl	800cd02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a806:	4b2f      	ldr	r3, [pc, #188]	@ (800a8c4 <USBD_CDC_DeInit+0xfc>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	f003 020f 	and.w	r2, r3, #15
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a81e:	2200      	movs	r2, #0
 800a820:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a822:	4b29      	ldr	r3, [pc, #164]	@ (800a8c8 <USBD_CDC_DeInit+0x100>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f002 fa6a 	bl	800cd02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a82e:	4b26      	ldr	r3, [pc, #152]	@ (800a8c8 <USBD_CDC_DeInit+0x100>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	f003 020f 	and.w	r2, r3, #15
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	3324      	adds	r3, #36	@ 0x24
 800a844:	2200      	movs	r2, #0
 800a846:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a848:	4b1f      	ldr	r3, [pc, #124]	@ (800a8c8 <USBD_CDC_DeInit+0x100>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	f003 020f 	and.w	r2, r3, #15
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	440b      	add	r3, r1
 800a85c:	3326      	adds	r3, #38	@ 0x26
 800a85e:	2200      	movs	r2, #0
 800a860:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	32b0      	adds	r2, #176	@ 0xb0
 800a86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01f      	beq.n	800a8b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	33b0      	adds	r3, #176	@ 0xb0
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	32b0      	adds	r2, #176	@ 0xb0
 800a892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a896:	4618      	mov	r0, r3
 800a898:	f002 fb3e 	bl	800cf18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	32b0      	adds	r2, #176	@ 0xb0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	200001bf 	.word	0x200001bf
 800a8c4:	200001c0 	.word	0x200001c0
 800a8c8:	200001c1 	.word	0x200001c1

0800a8cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	32b0      	adds	r2, #176	@ 0xb0
 800a8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e0bf      	b.n	800aa7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a904:	2b00      	cmp	r3, #0
 800a906:	d050      	beq.n	800a9aa <USBD_CDC_Setup+0xde>
 800a908:	2b20      	cmp	r3, #32
 800a90a:	f040 80af 	bne.w	800aa6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	88db      	ldrh	r3, [r3, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d03a      	beq.n	800a98c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	b25b      	sxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da1b      	bge.n	800a958 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	33b0      	adds	r3, #176	@ 0xb0
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a936:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	88d2      	ldrh	r2, [r2, #6]
 800a93c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	88db      	ldrh	r3, [r3, #6]
 800a942:	2b07      	cmp	r3, #7
 800a944:	bf28      	it	cs
 800a946:	2307      	movcs	r3, #7
 800a948:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	89fa      	ldrh	r2, [r7, #14]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 fd87 	bl	800c464 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a956:	e090      	b.n	800aa7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	785a      	ldrb	r2, [r3, #1]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	88db      	ldrh	r3, [r3, #6]
 800a966:	2b3f      	cmp	r3, #63	@ 0x3f
 800a968:	d803      	bhi.n	800a972 <USBD_CDC_Setup+0xa6>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	88db      	ldrh	r3, [r3, #6]
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	e000      	b.n	800a974 <USBD_CDC_Setup+0xa8>
 800a972:	2240      	movs	r2, #64	@ 0x40
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a97a:	6939      	ldr	r1, [r7, #16]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a982:	461a      	mov	r2, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 fd99 	bl	800c4bc <USBD_CtlPrepareRx>
      break;
 800a98a:	e076      	b.n	800aa7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	33b0      	adds	r3, #176	@ 0xb0
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	7850      	ldrb	r0, [r2, #1]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	4798      	blx	r3
      break;
 800a9a8:	e067      	b.n	800aa7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	785b      	ldrb	r3, [r3, #1]
 800a9ae:	2b0b      	cmp	r3, #11
 800a9b0:	d851      	bhi.n	800aa56 <USBD_CDC_Setup+0x18a>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <USBD_CDC_Setup+0xec>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800a9e9 	.word	0x0800a9e9
 800a9bc:	0800aa65 	.word	0x0800aa65
 800a9c0:	0800aa57 	.word	0x0800aa57
 800a9c4:	0800aa57 	.word	0x0800aa57
 800a9c8:	0800aa57 	.word	0x0800aa57
 800a9cc:	0800aa57 	.word	0x0800aa57
 800a9d0:	0800aa57 	.word	0x0800aa57
 800a9d4:	0800aa57 	.word	0x0800aa57
 800a9d8:	0800aa57 	.word	0x0800aa57
 800a9dc:	0800aa57 	.word	0x0800aa57
 800a9e0:	0800aa13 	.word	0x0800aa13
 800a9e4:	0800aa3d 	.word	0x0800aa3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d107      	bne.n	800aa04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9f4:	f107 030a 	add.w	r3, r7, #10
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 fd31 	bl	800c464 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa02:	e032      	b.n	800aa6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 fcbb 	bl	800c382 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa10:	e02b      	b.n	800aa6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d107      	bne.n	800aa2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa1e:	f107 030d 	add.w	r3, r7, #13
 800aa22:	2201      	movs	r2, #1
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fd1c 	bl	800c464 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa2c:	e01d      	b.n	800aa6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 fca6 	bl	800c382 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	75fb      	strb	r3, [r7, #23]
          break;
 800aa3a:	e016      	b.n	800aa6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	d00f      	beq.n	800aa68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fc99 	bl	800c382 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa50:	2303      	movs	r3, #3
 800aa52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa54:	e008      	b.n	800aa68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 fc92 	bl	800c382 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	75fb      	strb	r3, [r7, #23]
          break;
 800aa62:	e002      	b.n	800aa6a <USBD_CDC_Setup+0x19e>
          break;
 800aa64:	bf00      	nop
 800aa66:	e008      	b.n	800aa7a <USBD_CDC_Setup+0x1ae>
          break;
 800aa68:	bf00      	nop
      }
      break;
 800aa6a:	e006      	b.n	800aa7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fc87 	bl	800c382 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	75fb      	strb	r3, [r7, #23]
      break;
 800aa78:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	32b0      	adds	r2, #176	@ 0xb0
 800aaa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e065      	b.n	800ab7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	32b0      	adds	r2, #176	@ 0xb0
 800aab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	f003 020f 	and.w	r2, r3, #15
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	440b      	add	r3, r1
 800aad0:	3318      	adds	r3, #24
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d02f      	beq.n	800ab38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	f003 020f 	and.w	r2, r3, #15
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	440b      	add	r3, r1
 800aaea:	3318      	adds	r3, #24
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	f003 010f 	and.w	r1, r3, #15
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	440b      	add	r3, r1
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4403      	add	r3, r0
 800ab00:	3348      	adds	r3, #72	@ 0x48
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab08:	fb01 f303 	mul.w	r3, r1, r3
 800ab0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d112      	bne.n	800ab38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab12:	78fb      	ldrb	r3, [r7, #3]
 800ab14:	f003 020f 	and.w	r2, r3, #15
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	440b      	add	r3, r1
 800ab24:	3318      	adds	r3, #24
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab2a:	78f9      	ldrb	r1, [r7, #3]
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	2200      	movs	r2, #0
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f002 f98e 	bl	800ce52 <USBD_LL_Transmit>
 800ab36:	e01f      	b.n	800ab78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	33b0      	adds	r3, #176	@ 0xb0
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d010      	beq.n	800ab78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	33b0      	adds	r3, #176	@ 0xb0
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab74:	78fa      	ldrb	r2, [r7, #3]
 800ab76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	32b0      	adds	r2, #176	@ 0xb0
 800ab98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	32b0      	adds	r2, #176	@ 0xb0
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e01a      	b.n	800abea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f002 f98c 	bl	800ced6 <USBD_LL_GetRxDataSize>
 800abbe:	4602      	mov	r2, r0
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	33b0      	adds	r3, #176	@ 0xb0
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800abe4:	4611      	mov	r1, r2
 800abe6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	32b0      	adds	r2, #176	@ 0xb0
 800ac04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e024      	b.n	800ac5e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	33b0      	adds	r3, #176	@ 0xb0
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d019      	beq.n	800ac5c <USBD_CDC_EP0_RxReady+0x6a>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac2e:	2bff      	cmp	r3, #255	@ 0xff
 800ac30:	d014      	beq.n	800ac5c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	33b0      	adds	r3, #176	@ 0xb0
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	22ff      	movs	r2, #255	@ 0xff
 800ac58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac70:	2182      	movs	r1, #130	@ 0x82
 800ac72:	4818      	ldr	r0, [pc, #96]	@ (800acd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac74:	f000 fd4f 	bl	800b716 <USBD_GetEpDesc>
 800ac78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	4815      	ldr	r0, [pc, #84]	@ (800acd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac7e:	f000 fd4a 	bl	800b716 <USBD_GetEpDesc>
 800ac82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac84:	2181      	movs	r1, #129	@ 0x81
 800ac86:	4813      	ldr	r0, [pc, #76]	@ (800acd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac88:	f000 fd45 	bl	800b716 <USBD_GetEpDesc>
 800ac8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	2210      	movs	r2, #16
 800ac98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d006      	beq.n	800acae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aca8:	711a      	strb	r2, [r3, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acbc:	711a      	strb	r2, [r3, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2243      	movs	r2, #67	@ 0x43
 800acc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acc8:	4b02      	ldr	r3, [pc, #8]	@ (800acd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800acca:	4618      	mov	r0, r3
 800accc:	3718      	adds	r7, #24
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	2000017c 	.word	0x2000017c

0800acd8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ace0:	2182      	movs	r1, #130	@ 0x82
 800ace2:	4818      	ldr	r0, [pc, #96]	@ (800ad44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ace4:	f000 fd17 	bl	800b716 <USBD_GetEpDesc>
 800ace8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acea:	2101      	movs	r1, #1
 800acec:	4815      	ldr	r0, [pc, #84]	@ (800ad44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acee:	f000 fd12 	bl	800b716 <USBD_GetEpDesc>
 800acf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acf4:	2181      	movs	r1, #129	@ 0x81
 800acf6:	4813      	ldr	r0, [pc, #76]	@ (800ad44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acf8:	f000 fd0d 	bl	800b716 <USBD_GetEpDesc>
 800acfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2210      	movs	r2, #16
 800ad08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d006      	beq.n	800ad1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2200      	movs	r2, #0
 800ad14:	711a      	strb	r2, [r3, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f042 0202 	orr.w	r2, r2, #2
 800ad1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d006      	beq.n	800ad32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	711a      	strb	r2, [r3, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f042 0202 	orr.w	r2, r2, #2
 800ad30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2243      	movs	r2, #67	@ 0x43
 800ad36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad38:	4b02      	ldr	r3, [pc, #8]	@ (800ad44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	2000017c 	.word	0x2000017c

0800ad48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad50:	2182      	movs	r1, #130	@ 0x82
 800ad52:	4818      	ldr	r0, [pc, #96]	@ (800adb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad54:	f000 fcdf 	bl	800b716 <USBD_GetEpDesc>
 800ad58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4815      	ldr	r0, [pc, #84]	@ (800adb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad5e:	f000 fcda 	bl	800b716 <USBD_GetEpDesc>
 800ad62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad64:	2181      	movs	r1, #129	@ 0x81
 800ad66:	4813      	ldr	r0, [pc, #76]	@ (800adb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad68:	f000 fcd5 	bl	800b716 <USBD_GetEpDesc>
 800ad6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2210      	movs	r2, #16
 800ad78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d006      	beq.n	800ad8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad88:	711a      	strb	r2, [r3, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d006      	beq.n	800ada2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad9c:	711a      	strb	r2, [r3, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2243      	movs	r2, #67	@ 0x43
 800ada6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ada8:	4b02      	ldr	r3, [pc, #8]	@ (800adb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3718      	adds	r7, #24
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	2000017c 	.word	0x2000017c

0800adb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	220a      	movs	r2, #10
 800adc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800adc6:	4b03      	ldr	r3, [pc, #12]	@ (800add4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	20000138 	.word	0x20000138

0800add8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ade8:	2303      	movs	r3, #3
 800adea:	e009      	b.n	800ae00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	33b0      	adds	r3, #176	@ 0xb0
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	32b0      	adds	r2, #176	@ 0xb0
 800ae22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e008      	b.n	800ae44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	371c      	adds	r7, #28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	32b0      	adds	r2, #176	@ 0xb0
 800ae64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e004      	b.n	800ae7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
	...

0800ae8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32b0      	adds	r2, #176	@ 0xb0
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	32b0      	adds	r2, #176	@ 0xb0
 800aeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e025      	b.n	800af0a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d11f      	bne.n	800af08 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aed0:	4b10      	ldr	r3, [pc, #64]	@ (800af14 <USBD_CDC_TransmitPacket+0x88>)
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	f003 020f 	and.w	r2, r3, #15
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4403      	add	r3, r0
 800aeea:	3318      	adds	r3, #24
 800aeec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <USBD_CDC_TransmitPacket+0x88>)
 800aef0:	7819      	ldrb	r1, [r3, #0]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f001 ffa7 	bl	800ce52 <USBD_LL_Transmit>

    ret = USBD_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af08:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200001bf 	.word	0x200001bf

0800af18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	32b0      	adds	r2, #176	@ 0xb0
 800af2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	32b0      	adds	r2, #176	@ 0xb0
 800af3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af42:	2303      	movs	r3, #3
 800af44:	e018      	b.n	800af78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7c1b      	ldrb	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af4e:	4b0c      	ldr	r3, [pc, #48]	@ (800af80 <USBD_CDC_ReceivePacket+0x68>)
 800af50:	7819      	ldrb	r1, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 ff99 	bl	800ce94 <USBD_LL_PrepareReceive>
 800af62:	e008      	b.n	800af76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af64:	4b06      	ldr	r3, [pc, #24]	@ (800af80 <USBD_CDC_ReceivePacket+0x68>)
 800af66:	7819      	ldrb	r1, [r3, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af6e:	2340      	movs	r3, #64	@ 0x40
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 ff8f 	bl	800ce94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	200001c0 	.word	0x200001c0

0800af84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af98:	2303      	movs	r3, #3
 800af9a:	e01f      	b.n	800afdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	79fa      	ldrb	r2, [r7, #7]
 800afce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f001 fe09 	bl	800cbe8 <USBD_LL_Init>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	e025      	b.n	800b048 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	32ae      	adds	r2, #174	@ 0xae
 800b00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00f      	beq.n	800b038 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	32ae      	adds	r2, #174	@ 0xae
 800b022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b028:	f107 020e 	add.w	r2, r7, #14
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	4602      	mov	r2, r0
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 fe11 	bl	800cc80 <USBD_LL_Start>
 800b05e:	4603      	mov	r3, r0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b070:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b072:	4618      	mov	r0, r3
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	78fa      	ldrb	r2, [r7, #3]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	4798      	blx	r3
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	78fa      	ldrb	r2, [r7, #3]
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	4798      	blx	r3
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f001 f906 	bl	800c30e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b110:	461a      	mov	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b11e:	f003 031f 	and.w	r3, r3, #31
 800b122:	2b02      	cmp	r3, #2
 800b124:	d01a      	beq.n	800b15c <USBD_LL_SetupStage+0x72>
 800b126:	2b02      	cmp	r3, #2
 800b128:	d822      	bhi.n	800b170 <USBD_LL_SetupStage+0x86>
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <USBD_LL_SetupStage+0x4a>
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d00a      	beq.n	800b148 <USBD_LL_SetupStage+0x5e>
 800b132:	e01d      	b.n	800b170 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fb5d 	bl	800b7fc <USBD_StdDevReq>
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]
      break;
 800b146:	e020      	b.n	800b18a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fbc5 	bl	800b8e0 <USBD_StdItfReq>
 800b156:	4603      	mov	r3, r0
 800b158:	73fb      	strb	r3, [r7, #15]
      break;
 800b15a:	e016      	b.n	800b18a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fc27 	bl	800b9b8 <USBD_StdEPReq>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73fb      	strb	r3, [r7, #15]
      break;
 800b16e:	e00c      	b.n	800b18a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b176:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f001 fdde 	bl	800cd40 <USBD_LL_StallEP>
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
      break;
 800b188:	bf00      	nop
  }

  return ret;
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	460b      	mov	r3, r1
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d16e      	bne.n	800b28a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	f040 8098 	bne.w	800b2f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d913      	bls.n	800b1f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	689a      	ldr	r2, [r3, #8]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	1ad2      	subs	r2, r2, r3
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	bf28      	it	cs
 800b1e6:	4613      	movcs	r3, r2
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f001 f982 	bl	800c4f6 <USBD_CtlContinueRx>
 800b1f2:	e07d      	b.n	800b2f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1fa:	f003 031f 	and.w	r3, r3, #31
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d014      	beq.n	800b22c <USBD_LL_DataOutStage+0x98>
 800b202:	2b02      	cmp	r3, #2
 800b204:	d81d      	bhi.n	800b242 <USBD_LL_DataOutStage+0xae>
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <USBD_LL_DataOutStage+0x7c>
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d003      	beq.n	800b216 <USBD_LL_DataOutStage+0x82>
 800b20e:	e018      	b.n	800b242 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b210:	2300      	movs	r3, #0
 800b212:	75bb      	strb	r3, [r7, #22]
            break;
 800b214:	e018      	b.n	800b248 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	4619      	mov	r1, r3
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 fa5e 	bl	800b6e2 <USBD_CoreFindIF>
 800b226:	4603      	mov	r3, r0
 800b228:	75bb      	strb	r3, [r7, #22]
            break;
 800b22a:	e00d      	b.n	800b248 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b232:	b2db      	uxtb	r3, r3
 800b234:	4619      	mov	r1, r3
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 fa60 	bl	800b6fc <USBD_CoreFindEP>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75bb      	strb	r3, [r7, #22]
            break;
 800b240:	e002      	b.n	800b248 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	75bb      	strb	r3, [r7, #22]
            break;
 800b246:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b248:	7dbb      	ldrb	r3, [r7, #22]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d119      	bne.n	800b282 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b03      	cmp	r3, #3
 800b258:	d113      	bne.n	800b282 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b25a:	7dba      	ldrb	r2, [r7, #22]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	32ae      	adds	r2, #174	@ 0xae
 800b260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00b      	beq.n	800b282 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b26a:	7dba      	ldrb	r2, [r7, #22]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b272:	7dba      	ldrb	r2, [r7, #22]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	32ae      	adds	r2, #174	@ 0xae
 800b278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f001 f948 	bl	800c518 <USBD_CtlSendStatus>
 800b288:	e032      	b.n	800b2f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b290:	b2db      	uxtb	r3, r3
 800b292:	4619      	mov	r1, r3
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fa31 	bl	800b6fc <USBD_CoreFindEP>
 800b29a:	4603      	mov	r3, r0
 800b29c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b29e:	7dbb      	ldrb	r3, [r7, #22]
 800b2a0:	2bff      	cmp	r3, #255	@ 0xff
 800b2a2:	d025      	beq.n	800b2f0 <USBD_LL_DataOutStage+0x15c>
 800b2a4:	7dbb      	ldrb	r3, [r7, #22]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d122      	bne.n	800b2f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d117      	bne.n	800b2e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2b6:	7dba      	ldrb	r2, [r7, #22]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	32ae      	adds	r2, #174	@ 0xae
 800b2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00f      	beq.n	800b2e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2c6:	7dba      	ldrb	r2, [r7, #22]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2ce:	7dba      	ldrb	r2, [r7, #22]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	32ae      	adds	r2, #174	@ 0xae
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	7afa      	ldrb	r2, [r7, #11]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	4798      	blx	r3
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	e000      	b.n	800b2f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b086      	sub	sp, #24
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	460b      	mov	r3, r1
 800b304:	607a      	str	r2, [r7, #4]
 800b306:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d16f      	bne.n	800b3ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3314      	adds	r3, #20
 800b312:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d15a      	bne.n	800b3d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	689a      	ldr	r2, [r3, #8]
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	429a      	cmp	r2, r3
 800b328:	d914      	bls.n	800b354 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	1ad2      	subs	r2, r2, r3
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	461a      	mov	r2, r3
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f001 f8aa 	bl	800c49a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b346:	2300      	movs	r3, #0
 800b348:	2200      	movs	r2, #0
 800b34a:	2100      	movs	r1, #0
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f001 fda1 	bl	800ce94 <USBD_LL_PrepareReceive>
 800b352:	e03f      	b.n	800b3d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d11c      	bne.n	800b39a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b368:	429a      	cmp	r2, r3
 800b36a:	d316      	bcc.n	800b39a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b376:	429a      	cmp	r2, r3
 800b378:	d20f      	bcs.n	800b39a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b37a:	2200      	movs	r2, #0
 800b37c:	2100      	movs	r1, #0
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f001 f88b 	bl	800c49a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b38c:	2300      	movs	r3, #0
 800b38e:	2200      	movs	r2, #0
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f001 fd7e 	bl	800ce94 <USBD_LL_PrepareReceive>
 800b398:	e01c      	b.n	800b3d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d10f      	bne.n	800b3c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3c6:	2180      	movs	r1, #128	@ 0x80
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f001 fcb9 	bl	800cd40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f001 f8b5 	bl	800c53e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d03a      	beq.n	800b454 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f7ff fe42 	bl	800b068 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b3ec:	e032      	b.n	800b454 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b3ee:	7afb      	ldrb	r3, [r7, #11]
 800b3f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f97f 	bl	800b6fc <USBD_CoreFindEP>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	2bff      	cmp	r3, #255	@ 0xff
 800b406:	d025      	beq.n	800b454 <USBD_LL_DataInStage+0x15a>
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d122      	bne.n	800b454 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b03      	cmp	r3, #3
 800b418:	d11c      	bne.n	800b454 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b41a:	7dfa      	ldrb	r2, [r7, #23]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	32ae      	adds	r2, #174	@ 0xae
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d014      	beq.n	800b454 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b42a:	7dfa      	ldrb	r2, [r7, #23]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b432:	7dfa      	ldrb	r2, [r7, #23]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	32ae      	adds	r2, #174	@ 0xae
 800b438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	7afa      	ldrb	r2, [r7, #11]
 800b440:	4611      	mov	r1, r2
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	4798      	blx	r3
 800b446:	4603      	mov	r3, r0
 800b448:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b44a:	7dbb      	ldrb	r3, [r7, #22]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b450:	7dbb      	ldrb	r3, [r7, #22]
 800b452:	e000      	b.n	800b456 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b496:	2b00      	cmp	r3, #0
 800b498:	d014      	beq.n	800b4c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00e      	beq.n	800b4c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6852      	ldr	r2, [r2, #4]
 800b4b2:	b2d2      	uxtb	r2, r2
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4c4:	2340      	movs	r3, #64	@ 0x40
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fbf3 	bl	800ccb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2240      	movs	r2, #64	@ 0x40
 800b4dc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4e0:	2340      	movs	r3, #64	@ 0x40
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2180      	movs	r1, #128	@ 0x80
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 fbe5 	bl	800ccb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2240      	movs	r2, #64	@ 0x40
 800b4f6:	621a      	str	r2, [r3, #32]

  return ret;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	460b      	mov	r3, r1
 800b50c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	78fa      	ldrb	r2, [r7, #3]
 800b512:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b530:	b2da      	uxtb	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2204      	movs	r2, #4
 800b53c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d106      	bne.n	800b570 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d110      	bne.n	800b5b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	32ae      	adds	r2, #174	@ 0xae
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e01c      	b.n	800b61a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d115      	bne.n	800b618 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	32ae      	adds	r2, #174	@ 0xae
 800b5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00b      	beq.n	800b618 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	32ae      	adds	r2, #174	@ 0xae
 800b60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	78fa      	ldrb	r2, [r7, #3]
 800b612:	4611      	mov	r1, r2
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	460b      	mov	r3, r1
 800b62c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	32ae      	adds	r2, #174	@ 0xae
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	e01c      	b.n	800b67e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d115      	bne.n	800b67c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	32ae      	adds	r2, #174	@ 0xae
 800b65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00b      	beq.n	800b67c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	32ae      	adds	r2, #174	@ 0xae
 800b66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	4611      	mov	r1, r2
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00e      	beq.n	800b6d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	6852      	ldr	r2, [r2, #4]
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	4798      	blx	r3
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b6ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b708:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b086      	sub	sp, #24
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	460b      	mov	r3, r1
 800b720:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	b29b      	uxth	r3, r3
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	7812      	ldrb	r2, [r2, #0]
 800b738:	4293      	cmp	r3, r2
 800b73a:	d91f      	bls.n	800b77c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b742:	e013      	b.n	800b76c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b744:	f107 030a 	add.w	r3, r7, #10
 800b748:	4619      	mov	r1, r3
 800b74a:	6978      	ldr	r0, [r7, #20]
 800b74c:	f000 f81b 	bl	800b786 <USBD_GetNextDesc>
 800b750:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	785b      	ldrb	r3, [r3, #1]
 800b756:	2b05      	cmp	r3, #5
 800b758:	d108      	bne.n	800b76c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	789b      	ldrb	r3, [r3, #2]
 800b762:	78fa      	ldrb	r2, [r7, #3]
 800b764:	429a      	cmp	r2, r3
 800b766:	d008      	beq.n	800b77a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	885b      	ldrh	r3, [r3, #2]
 800b770:	b29a      	uxth	r2, r3
 800b772:	897b      	ldrh	r3, [r7, #10]
 800b774:	429a      	cmp	r2, r3
 800b776:	d8e5      	bhi.n	800b744 <USBD_GetEpDesc+0x2e>
 800b778:	e000      	b.n	800b77c <USBD_GetEpDesc+0x66>
          break;
 800b77a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b77c:	693b      	ldr	r3, [r7, #16]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b786:	b480      	push	{r7}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	7812      	ldrb	r2, [r2, #0]
 800b79c:	4413      	add	r3, r2
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b087      	sub	sp, #28
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7dc:	8a3b      	ldrh	r3, [r7, #16]
 800b7de:	021b      	lsls	r3, r3, #8
 800b7e0:	b21a      	sxth	r2, r3
 800b7e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	b21b      	sxth	r3, r3
 800b7ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7ec:	89fb      	ldrh	r3, [r7, #14]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
	...

0800b7fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b812:	2b40      	cmp	r3, #64	@ 0x40
 800b814:	d005      	beq.n	800b822 <USBD_StdDevReq+0x26>
 800b816:	2b40      	cmp	r3, #64	@ 0x40
 800b818:	d857      	bhi.n	800b8ca <USBD_StdDevReq+0xce>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00f      	beq.n	800b83e <USBD_StdDevReq+0x42>
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d153      	bne.n	800b8ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	32ae      	adds	r2, #174	@ 0xae
 800b82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	4798      	blx	r3
 800b838:	4603      	mov	r3, r0
 800b83a:	73fb      	strb	r3, [r7, #15]
      break;
 800b83c:	e04a      	b.n	800b8d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	785b      	ldrb	r3, [r3, #1]
 800b842:	2b09      	cmp	r3, #9
 800b844:	d83b      	bhi.n	800b8be <USBD_StdDevReq+0xc2>
 800b846:	a201      	add	r2, pc, #4	@ (adr r2, 800b84c <USBD_StdDevReq+0x50>)
 800b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84c:	0800b8a1 	.word	0x0800b8a1
 800b850:	0800b8b5 	.word	0x0800b8b5
 800b854:	0800b8bf 	.word	0x0800b8bf
 800b858:	0800b8ab 	.word	0x0800b8ab
 800b85c:	0800b8bf 	.word	0x0800b8bf
 800b860:	0800b87f 	.word	0x0800b87f
 800b864:	0800b875 	.word	0x0800b875
 800b868:	0800b8bf 	.word	0x0800b8bf
 800b86c:	0800b897 	.word	0x0800b897
 800b870:	0800b889 	.word	0x0800b889
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fa3c 	bl	800bcf4 <USBD_GetDescriptor>
          break;
 800b87c:	e024      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fba1 	bl	800bfc8 <USBD_SetAddress>
          break;
 800b886:	e01f      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fbe0 	bl	800c050 <USBD_SetConfig>
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]
          break;
 800b894:	e018      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fc83 	bl	800c1a4 <USBD_GetConfig>
          break;
 800b89e:	e013      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fcb4 	bl	800c210 <USBD_GetStatus>
          break;
 800b8a8:	e00e      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fce3 	bl	800c278 <USBD_SetFeature>
          break;
 800b8b2:	e009      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fd07 	bl	800c2ca <USBD_ClrFeature>
          break;
 800b8bc:	e004      	b.n	800b8c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fd5e 	bl	800c382 <USBD_CtlError>
          break;
 800b8c6:	bf00      	nop
      }
      break;
 800b8c8:	e004      	b.n	800b8d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fd58 	bl	800c382 <USBD_CtlError>
      break;
 800b8d2:	bf00      	nop
  }

  return ret;
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop

0800b8e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8f6:	2b40      	cmp	r3, #64	@ 0x40
 800b8f8:	d005      	beq.n	800b906 <USBD_StdItfReq+0x26>
 800b8fa:	2b40      	cmp	r3, #64	@ 0x40
 800b8fc:	d852      	bhi.n	800b9a4 <USBD_StdItfReq+0xc4>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <USBD_StdItfReq+0x26>
 800b902:	2b20      	cmp	r3, #32
 800b904:	d14e      	bne.n	800b9a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	3b01      	subs	r3, #1
 800b910:	2b02      	cmp	r3, #2
 800b912:	d840      	bhi.n	800b996 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	889b      	ldrh	r3, [r3, #4]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d836      	bhi.n	800b98c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	889b      	ldrh	r3, [r3, #4]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7ff fedb 	bl	800b6e2 <USBD_CoreFindIF>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	2bff      	cmp	r3, #255	@ 0xff
 800b934:	d01d      	beq.n	800b972 <USBD_StdItfReq+0x92>
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d11a      	bne.n	800b972 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b93c:	7bba      	ldrb	r2, [r7, #14]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	32ae      	adds	r2, #174	@ 0xae
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00f      	beq.n	800b96c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b94c:	7bba      	ldrb	r2, [r7, #14]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b954:	7bba      	ldrb	r2, [r7, #14]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32ae      	adds	r2, #174	@ 0xae
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b96a:	e004      	b.n	800b976 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b96c:	2303      	movs	r3, #3
 800b96e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b970:	e001      	b.n	800b976 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	88db      	ldrh	r3, [r3, #6]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d110      	bne.n	800b9a0 <USBD_StdItfReq+0xc0>
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10d      	bne.n	800b9a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fdc7 	bl	800c518 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b98a:	e009      	b.n	800b9a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fcf7 	bl	800c382 <USBD_CtlError>
          break;
 800b994:	e004      	b.n	800b9a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fcf2 	bl	800c382 <USBD_CtlError>
          break;
 800b99e:	e000      	b.n	800b9a2 <USBD_StdItfReq+0xc2>
          break;
 800b9a0:	bf00      	nop
      }
      break;
 800b9a2:	e004      	b.n	800b9ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fceb 	bl	800c382 <USBD_CtlError>
      break;
 800b9ac:	bf00      	nop
  }

  return ret;
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	889b      	ldrh	r3, [r3, #4]
 800b9ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9d4:	2b40      	cmp	r3, #64	@ 0x40
 800b9d6:	d007      	beq.n	800b9e8 <USBD_StdEPReq+0x30>
 800b9d8:	2b40      	cmp	r3, #64	@ 0x40
 800b9da:	f200 817f 	bhi.w	800bcdc <USBD_StdEPReq+0x324>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d02a      	beq.n	800ba38 <USBD_StdEPReq+0x80>
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	f040 817a 	bne.w	800bcdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fe85 	bl	800b6fc <USBD_CoreFindEP>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9f6:	7b7b      	ldrb	r3, [r7, #13]
 800b9f8:	2bff      	cmp	r3, #255	@ 0xff
 800b9fa:	f000 8174 	beq.w	800bce6 <USBD_StdEPReq+0x32e>
 800b9fe:	7b7b      	ldrb	r3, [r7, #13]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f040 8170 	bne.w	800bce6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba06:	7b7a      	ldrb	r2, [r7, #13]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba0e:	7b7a      	ldrb	r2, [r7, #13]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	32ae      	adds	r2, #174	@ 0xae
 800ba14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 8163 	beq.w	800bce6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba20:	7b7a      	ldrb	r2, [r7, #13]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32ae      	adds	r2, #174	@ 0xae
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4798      	blx	r3
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba36:	e156      	b.n	800bce6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d008      	beq.n	800ba52 <USBD_StdEPReq+0x9a>
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	f300 8145 	bgt.w	800bcd0 <USBD_StdEPReq+0x318>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 809b 	beq.w	800bb82 <USBD_StdEPReq+0x1ca>
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d03c      	beq.n	800baca <USBD_StdEPReq+0x112>
 800ba50:	e13e      	b.n	800bcd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d002      	beq.n	800ba64 <USBD_StdEPReq+0xac>
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d016      	beq.n	800ba90 <USBD_StdEPReq+0xd8>
 800ba62:	e02c      	b.n	800babe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00d      	beq.n	800ba86 <USBD_StdEPReq+0xce>
 800ba6a:	7bbb      	ldrb	r3, [r7, #14]
 800ba6c:	2b80      	cmp	r3, #128	@ 0x80
 800ba6e:	d00a      	beq.n	800ba86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 f963 	bl	800cd40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba7a:	2180      	movs	r1, #128	@ 0x80
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 f95f 	bl	800cd40 <USBD_LL_StallEP>
 800ba82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba84:	e020      	b.n	800bac8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fc7a 	bl	800c382 <USBD_CtlError>
              break;
 800ba8e:	e01b      	b.n	800bac8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	885b      	ldrh	r3, [r3, #2]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10e      	bne.n	800bab6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <USBD_StdEPReq+0xfe>
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	2b80      	cmp	r3, #128	@ 0x80
 800baa2:	d008      	beq.n	800bab6 <USBD_StdEPReq+0xfe>
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	88db      	ldrh	r3, [r3, #6]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d104      	bne.n	800bab6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 f945 	bl	800cd40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fd2e 	bl	800c518 <USBD_CtlSendStatus>

              break;
 800babc:	e004      	b.n	800bac8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fc5e 	bl	800c382 <USBD_CtlError>
              break;
 800bac6:	bf00      	nop
          }
          break;
 800bac8:	e107      	b.n	800bcda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d002      	beq.n	800badc <USBD_StdEPReq+0x124>
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d016      	beq.n	800bb08 <USBD_StdEPReq+0x150>
 800bada:	e04b      	b.n	800bb74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00d      	beq.n	800bafe <USBD_StdEPReq+0x146>
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b80      	cmp	r3, #128	@ 0x80
 800bae6:	d00a      	beq.n	800bafe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 f927 	bl	800cd40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800baf2:	2180      	movs	r1, #128	@ 0x80
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 f923 	bl	800cd40 <USBD_LL_StallEP>
 800bafa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bafc:	e040      	b.n	800bb80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fc3e 	bl	800c382 <USBD_CtlError>
              break;
 800bb06:	e03b      	b.n	800bb80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d136      	bne.n	800bb7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb10:	7bbb      	ldrb	r3, [r7, #14]
 800bb12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 f92d 	bl	800cd7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fcf7 	bl	800c518 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff fde4 	bl	800b6fc <USBD_CoreFindEP>
 800bb34:	4603      	mov	r3, r0
 800bb36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb38:	7b7b      	ldrb	r3, [r7, #13]
 800bb3a:	2bff      	cmp	r3, #255	@ 0xff
 800bb3c:	d01f      	beq.n	800bb7e <USBD_StdEPReq+0x1c6>
 800bb3e:	7b7b      	ldrb	r3, [r7, #13]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11c      	bne.n	800bb7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb44:	7b7a      	ldrb	r2, [r7, #13]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb4c:	7b7a      	ldrb	r2, [r7, #13]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	32ae      	adds	r2, #174	@ 0xae
 800bb52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d010      	beq.n	800bb7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb5c:	7b7a      	ldrb	r2, [r7, #13]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	32ae      	adds	r2, #174	@ 0xae
 800bb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	4798      	blx	r3
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bb72:	e004      	b.n	800bb7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fc03 	bl	800c382 <USBD_CtlError>
              break;
 800bb7c:	e000      	b.n	800bb80 <USBD_StdEPReq+0x1c8>
              break;
 800bb7e:	bf00      	nop
          }
          break;
 800bb80:	e0ab      	b.n	800bcda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d002      	beq.n	800bb94 <USBD_StdEPReq+0x1dc>
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d032      	beq.n	800bbf8 <USBD_StdEPReq+0x240>
 800bb92:	e097      	b.n	800bcc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d007      	beq.n	800bbaa <USBD_StdEPReq+0x1f2>
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b80      	cmp	r3, #128	@ 0x80
 800bb9e:	d004      	beq.n	800bbaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fbed 	bl	800c382 <USBD_CtlError>
                break;
 800bba8:	e091      	b.n	800bcce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	da0b      	bge.n	800bbca <USBD_StdEPReq+0x212>
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	3310      	adds	r3, #16
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	e00b      	b.n	800bbe2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbca:	7bbb      	ldrb	r3, [r7, #14]
 800bbcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	4413      	add	r3, r2
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2202      	movs	r2, #2
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fc37 	bl	800c464 <USBD_CtlSendData>
              break;
 800bbf6:	e06a      	b.n	800bcce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bbf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	da11      	bge.n	800bc24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	f003 020f 	and.w	r2, r3, #15
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	3324      	adds	r3, #36	@ 0x24
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d117      	bne.n	800bc4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fbb0 	bl	800c382 <USBD_CtlError>
                  break;
 800bc22:	e054      	b.n	800bcce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	f003 020f 	and.w	r2, r3, #15
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	440b      	add	r3, r1
 800bc36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d104      	bne.n	800bc4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fb9d 	bl	800c382 <USBD_CtlError>
                  break;
 800bc48:	e041      	b.n	800bcce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	da0b      	bge.n	800bc6a <USBD_StdEPReq+0x2b2>
 800bc52:	7bbb      	ldrb	r3, [r7, #14]
 800bc54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	3310      	adds	r3, #16
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	4413      	add	r3, r2
 800bc66:	3304      	adds	r3, #4
 800bc68:	e00b      	b.n	800bc82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc6a:	7bbb      	ldrb	r3, [r7, #14]
 800bc6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	4413      	add	r3, r2
 800bc80:	3304      	adds	r3, #4
 800bc82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc84:	7bbb      	ldrb	r3, [r7, #14]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <USBD_StdEPReq+0x2d8>
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b80      	cmp	r3, #128	@ 0x80
 800bc8e:	d103      	bne.n	800bc98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e00e      	b.n	800bcb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f001 f88d 	bl	800cdbc <USBD_LL_IsStallEP>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d003      	beq.n	800bcb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	e002      	b.n	800bcb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2202      	movs	r2, #2
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fbd1 	bl	800c464 <USBD_CtlSendData>
              break;
 800bcc2:	e004      	b.n	800bcce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fb5b 	bl	800c382 <USBD_CtlError>
              break;
 800bccc:	bf00      	nop
          }
          break;
 800bcce:	e004      	b.n	800bcda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fb55 	bl	800c382 <USBD_CtlError>
          break;
 800bcd8:	bf00      	nop
      }
      break;
 800bcda:	e005      	b.n	800bce8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fb4f 	bl	800c382 <USBD_CtlError>
      break;
 800bce4:	e000      	b.n	800bce8 <USBD_StdEPReq+0x330>
      break;
 800bce6:	bf00      	nop
  }

  return ret;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
	...

0800bcf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd06:	2300      	movs	r3, #0
 800bd08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	885b      	ldrh	r3, [r3, #2]
 800bd0e:	0a1b      	lsrs	r3, r3, #8
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b06      	cmp	r3, #6
 800bd16:	f200 8128 	bhi.w	800bf6a <USBD_GetDescriptor+0x276>
 800bd1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd20 <USBD_GetDescriptor+0x2c>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bd3d 	.word	0x0800bd3d
 800bd24:	0800bd55 	.word	0x0800bd55
 800bd28:	0800bd95 	.word	0x0800bd95
 800bd2c:	0800bf6b 	.word	0x0800bf6b
 800bd30:	0800bf6b 	.word	0x0800bf6b
 800bd34:	0800bf0b 	.word	0x0800bf0b
 800bd38:	0800bf37 	.word	0x0800bf37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	7c12      	ldrb	r2, [r2, #16]
 800bd48:	f107 0108 	add.w	r1, r7, #8
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	4798      	blx	r3
 800bd50:	60f8      	str	r0, [r7, #12]
      break;
 800bd52:	e112      	b.n	800bf7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7c1b      	ldrb	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10d      	bne.n	800bd78 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd64:	f107 0208 	add.w	r2, r7, #8
 800bd68:	4610      	mov	r0, r2
 800bd6a:	4798      	blx	r3
 800bd6c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3301      	adds	r3, #1
 800bd72:	2202      	movs	r2, #2
 800bd74:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd76:	e100      	b.n	800bf7a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd80:	f107 0208 	add.w	r2, r7, #8
 800bd84:	4610      	mov	r0, r2
 800bd86:	4798      	blx	r3
 800bd88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	2202      	movs	r2, #2
 800bd90:	701a      	strb	r2, [r3, #0]
      break;
 800bd92:	e0f2      	b.n	800bf7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	885b      	ldrh	r3, [r3, #2]
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	2b05      	cmp	r3, #5
 800bd9c:	f200 80ac 	bhi.w	800bef8 <USBD_GetDescriptor+0x204>
 800bda0:	a201      	add	r2, pc, #4	@ (adr r2, 800bda8 <USBD_GetDescriptor+0xb4>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdc1 	.word	0x0800bdc1
 800bdac:	0800bdf5 	.word	0x0800bdf5
 800bdb0:	0800be29 	.word	0x0800be29
 800bdb4:	0800be5d 	.word	0x0800be5d
 800bdb8:	0800be91 	.word	0x0800be91
 800bdbc:	0800bec5 	.word	0x0800bec5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00b      	beq.n	800bde4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	7c12      	ldrb	r2, [r2, #16]
 800bdd8:	f107 0108 	add.w	r1, r7, #8
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
 800bde0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bde2:	e091      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 facb 	bl	800c382 <USBD_CtlError>
            err++;
 800bdec:	7afb      	ldrb	r3, [r7, #11]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdf2:	e089      	b.n	800bf08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00b      	beq.n	800be18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	7c12      	ldrb	r2, [r2, #16]
 800be0c:	f107 0108 	add.w	r1, r7, #8
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
 800be14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be16:	e077      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fab1 	bl	800c382 <USBD_CtlError>
            err++;
 800be20:	7afb      	ldrb	r3, [r7, #11]
 800be22:	3301      	adds	r3, #1
 800be24:	72fb      	strb	r3, [r7, #11]
          break;
 800be26:	e06f      	b.n	800bf08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	7c12      	ldrb	r2, [r2, #16]
 800be40:	f107 0108 	add.w	r1, r7, #8
 800be44:	4610      	mov	r0, r2
 800be46:	4798      	blx	r3
 800be48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be4a:	e05d      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fa97 	bl	800c382 <USBD_CtlError>
            err++;
 800be54:	7afb      	ldrb	r3, [r7, #11]
 800be56:	3301      	adds	r3, #1
 800be58:	72fb      	strb	r3, [r7, #11]
          break;
 800be5a:	e055      	b.n	800bf08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00b      	beq.n	800be80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	7c12      	ldrb	r2, [r2, #16]
 800be74:	f107 0108 	add.w	r1, r7, #8
 800be78:	4610      	mov	r0, r2
 800be7a:	4798      	blx	r3
 800be7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be7e:	e043      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa7d 	bl	800c382 <USBD_CtlError>
            err++;
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	3301      	adds	r3, #1
 800be8c:	72fb      	strb	r3, [r7, #11]
          break;
 800be8e:	e03b      	b.n	800bf08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	7c12      	ldrb	r2, [r2, #16]
 800bea8:	f107 0108 	add.w	r1, r7, #8
 800beac:	4610      	mov	r0, r2
 800beae:	4798      	blx	r3
 800beb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beb2:	e029      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fa63 	bl	800c382 <USBD_CtlError>
            err++;
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	3301      	adds	r3, #1
 800bec0:	72fb      	strb	r3, [r7, #11]
          break;
 800bec2:	e021      	b.n	800bf08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00b      	beq.n	800bee8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	7c12      	ldrb	r2, [r2, #16]
 800bedc:	f107 0108 	add.w	r1, r7, #8
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
 800bee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bee6:	e00f      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa49 	bl	800c382 <USBD_CtlError>
            err++;
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	3301      	adds	r3, #1
 800bef4:	72fb      	strb	r3, [r7, #11]
          break;
 800bef6:	e007      	b.n	800bf08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fa41 	bl	800c382 <USBD_CtlError>
          err++;
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	3301      	adds	r3, #1
 800bf04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf06:	bf00      	nop
      }
      break;
 800bf08:	e037      	b.n	800bf7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	7c1b      	ldrb	r3, [r3, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d109      	bne.n	800bf26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf1a:	f107 0208 	add.w	r2, r7, #8
 800bf1e:	4610      	mov	r0, r2
 800bf20:	4798      	blx	r3
 800bf22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf24:	e029      	b.n	800bf7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fa2a 	bl	800c382 <USBD_CtlError>
        err++;
 800bf2e:	7afb      	ldrb	r3, [r7, #11]
 800bf30:	3301      	adds	r3, #1
 800bf32:	72fb      	strb	r3, [r7, #11]
      break;
 800bf34:	e021      	b.n	800bf7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7c1b      	ldrb	r3, [r3, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10d      	bne.n	800bf5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf46:	f107 0208 	add.w	r2, r7, #8
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	4798      	blx	r3
 800bf4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3301      	adds	r3, #1
 800bf54:	2207      	movs	r2, #7
 800bf56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf58:	e00f      	b.n	800bf7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fa10 	bl	800c382 <USBD_CtlError>
        err++;
 800bf62:	7afb      	ldrb	r3, [r7, #11]
 800bf64:	3301      	adds	r3, #1
 800bf66:	72fb      	strb	r3, [r7, #11]
      break;
 800bf68:	e007      	b.n	800bf7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fa08 	bl	800c382 <USBD_CtlError>
      err++;
 800bf72:	7afb      	ldrb	r3, [r7, #11]
 800bf74:	3301      	adds	r3, #1
 800bf76:	72fb      	strb	r3, [r7, #11]
      break;
 800bf78:	bf00      	nop
  }

  if (err != 0U)
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d11e      	bne.n	800bfbe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	88db      	ldrh	r3, [r3, #6]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d016      	beq.n	800bfb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf88:	893b      	ldrh	r3, [r7, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00e      	beq.n	800bfac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	88da      	ldrh	r2, [r3, #6]
 800bf92:	893b      	ldrh	r3, [r7, #8]
 800bf94:	4293      	cmp	r3, r2
 800bf96:	bf28      	it	cs
 800bf98:	4613      	movcs	r3, r2
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf9e:	893b      	ldrh	r3, [r7, #8]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	68f9      	ldr	r1, [r7, #12]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa5d 	bl	800c464 <USBD_CtlSendData>
 800bfaa:	e009      	b.n	800bfc0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f9e7 	bl	800c382 <USBD_CtlError>
 800bfb4:	e004      	b.n	800bfc0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 faae 	bl	800c518 <USBD_CtlSendStatus>
 800bfbc:	e000      	b.n	800bfc0 <USBD_GetDescriptor+0x2cc>
    return;
 800bfbe:	bf00      	nop
  }
}
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop

0800bfc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	889b      	ldrh	r3, [r3, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d131      	bne.n	800c03e <USBD_SetAddress+0x76>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	88db      	ldrh	r3, [r3, #6]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d12d      	bne.n	800c03e <USBD_SetAddress+0x76>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	885b      	ldrh	r3, [r3, #2]
 800bfe6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfe8:	d829      	bhi.n	800c03e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	885b      	ldrh	r3, [r3, #2]
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bff4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d104      	bne.n	800c00c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9bc 	bl	800c382 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00a:	e01d      	b.n	800c048 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7bfa      	ldrb	r2, [r7, #15]
 800c010:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	4619      	mov	r1, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fefb 	bl	800ce14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fa7a 	bl	800c518 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2202      	movs	r2, #2
 800c02e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c032:	e009      	b.n	800c048 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c03c:	e004      	b.n	800c048 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f99e 	bl	800c382 <USBD_CtlError>
  }
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	885b      	ldrh	r3, [r3, #2]
 800c062:	b2da      	uxtb	r2, r3
 800c064:	4b4e      	ldr	r3, [pc, #312]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c066:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c068:	4b4d      	ldr	r3, [pc, #308]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d905      	bls.n	800c07c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f985 	bl	800c382 <USBD_CtlError>
    return USBD_FAIL;
 800c078:	2303      	movs	r3, #3
 800c07a:	e08c      	b.n	800c196 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b02      	cmp	r3, #2
 800c086:	d002      	beq.n	800c08e <USBD_SetConfig+0x3e>
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d029      	beq.n	800c0e0 <USBD_SetConfig+0x90>
 800c08c:	e075      	b.n	800c17a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c08e:	4b44      	ldr	r3, [pc, #272]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d020      	beq.n	800c0d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c096:	4b42      	ldr	r3, [pc, #264]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7fe ffe9 	bl	800b07e <USBD_SetClassConfig>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f962 	bl	800c382 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0c6:	e065      	b.n	800c194 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fa25 	bl	800c518 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2203      	movs	r2, #3
 800c0d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0d6:	e05d      	b.n	800c194 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fa1d 	bl	800c518 <USBD_CtlSendStatus>
      break;
 800c0de:	e059      	b.n	800c194 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0e0:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d112      	bne.n	800c10e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c0f0:	4b2b      	ldr	r3, [pc, #172]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0fa:	4b29      	ldr	r3, [pc, #164]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7fe ffd8 	bl	800b0b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fa06 	bl	800c518 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c10c:	e042      	b.n	800c194 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c10e:	4b24      	ldr	r3, [pc, #144]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d02a      	beq.n	800c172 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	b2db      	uxtb	r3, r3
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7fe ffc6 	bl	800b0b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c12a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c134:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7fe ff9f 	bl	800b07e <USBD_SetClassConfig>
 800c140:	4603      	mov	r3, r0
 800c142:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c144:	7bfb      	ldrb	r3, [r7, #15]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00f      	beq.n	800c16a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 f918 	bl	800c382 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7fe ffab 	bl	800b0b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2202      	movs	r2, #2
 800c164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c168:	e014      	b.n	800c194 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f9d4 	bl	800c518 <USBD_CtlSendStatus>
      break;
 800c170:	e010      	b.n	800c194 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f9d0 	bl	800c518 <USBD_CtlSendStatus>
      break;
 800c178:	e00c      	b.n	800c194 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f900 	bl	800c382 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c182:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <USBD_SetConfig+0x150>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7fe ff94 	bl	800b0b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c18e:	2303      	movs	r3, #3
 800c190:	73fb      	strb	r3, [r7, #15]
      break;
 800c192:	bf00      	nop
  }

  return ret;
 800c194:	7bfb      	ldrb	r3, [r7, #15]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	20002558 	.word	0x20002558

0800c1a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	88db      	ldrh	r3, [r3, #6]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d004      	beq.n	800c1c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f8e2 	bl	800c382 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1be:	e023      	b.n	800c208 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	dc02      	bgt.n	800c1d2 <USBD_GetConfig+0x2e>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	dc03      	bgt.n	800c1d8 <USBD_GetConfig+0x34>
 800c1d0:	e015      	b.n	800c1fe <USBD_GetConfig+0x5a>
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d00b      	beq.n	800c1ee <USBD_GetConfig+0x4a>
 800c1d6:	e012      	b.n	800c1fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f93c 	bl	800c464 <USBD_CtlSendData>
        break;
 800c1ec:	e00c      	b.n	800c208 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f934 	bl	800c464 <USBD_CtlSendData>
        break;
 800c1fc:	e004      	b.n	800c208 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f8be 	bl	800c382 <USBD_CtlError>
        break;
 800c206:	bf00      	nop
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c220:	b2db      	uxtb	r3, r3
 800c222:	3b01      	subs	r3, #1
 800c224:	2b02      	cmp	r3, #2
 800c226:	d81e      	bhi.n	800c266 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	88db      	ldrh	r3, [r3, #6]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d004      	beq.n	800c23a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f8a5 	bl	800c382 <USBD_CtlError>
        break;
 800c238:	e01a      	b.n	800c270 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c246:	2b00      	cmp	r3, #0
 800c248:	d005      	beq.n	800c256 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	f043 0202 	orr.w	r2, r3, #2
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	330c      	adds	r3, #12
 800c25a:	2202      	movs	r2, #2
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f900 	bl	800c464 <USBD_CtlSendData>
      break;
 800c264:	e004      	b.n	800c270 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f88a 	bl	800c382 <USBD_CtlError>
      break;
 800c26e:	bf00      	nop
  }
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	885b      	ldrh	r3, [r3, #2]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d107      	bne.n	800c29a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f940 	bl	800c518 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c298:	e013      	b.n	800c2c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d10b      	bne.n	800c2ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	889b      	ldrh	r3, [r3, #4]
 800c2a6:	0a1b      	lsrs	r3, r3, #8
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f930 	bl	800c518 <USBD_CtlSendStatus>
}
 800c2b8:	e003      	b.n	800c2c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f860 	bl	800c382 <USBD_CtlError>
}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d80b      	bhi.n	800c2fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	885b      	ldrh	r3, [r3, #2]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d10c      	bne.n	800c304 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f910 	bl	800c518 <USBD_CtlSendStatus>
      }
      break;
 800c2f8:	e004      	b.n	800c304 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f840 	bl	800c382 <USBD_CtlError>
      break;
 800c302:	e000      	b.n	800c306 <USBD_ClrFeature+0x3c>
      break;
 800c304:	bf00      	nop
  }
}
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	781a      	ldrb	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	781a      	ldrb	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3301      	adds	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff fa40 	bl	800b7be <SWAPBYTE>
 800c33e:	4603      	mov	r3, r0
 800c340:	461a      	mov	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3301      	adds	r3, #1
 800c350:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f7ff fa33 	bl	800b7be <SWAPBYTE>
 800c358:	4603      	mov	r3, r0
 800c35a:	461a      	mov	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3301      	adds	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f7ff fa26 	bl	800b7be <SWAPBYTE>
 800c372:	4603      	mov	r3, r0
 800c374:	461a      	mov	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	80da      	strh	r2, [r3, #6]
}
 800c37a:	bf00      	nop
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b082      	sub	sp, #8
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c38c:	2180      	movs	r1, #128	@ 0x80
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fcd6 	bl	800cd40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c394:	2100      	movs	r1, #0
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fcd2 	bl	800cd40 <USBD_LL_StallEP>
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d036      	beq.n	800c428 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c3be:	6938      	ldr	r0, [r7, #16]
 800c3c0:	f000 f836 	bl	800c430 <USBD_GetLen>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	7812      	ldrb	r2, [r2, #0]
 800c3dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	2203      	movs	r2, #3
 800c3ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3f4:	e013      	b.n	800c41e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c3f6:	7dfb      	ldrb	r3, [r7, #23]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	7812      	ldrb	r2, [r2, #0]
 800c400:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	3301      	adds	r3, #1
 800c406:	613b      	str	r3, [r7, #16]
    idx++;
 800c408:	7dfb      	ldrb	r3, [r7, #23]
 800c40a:	3301      	adds	r3, #1
 800c40c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	4413      	add	r3, r2
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
    idx++;
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	3301      	adds	r3, #1
 800c41c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e7      	bne.n	800c3f6 <USBD_GetString+0x52>
 800c426:	e000      	b.n	800c42a <USBD_GetString+0x86>
    return;
 800c428:	bf00      	nop
  }
}
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c438:	2300      	movs	r3, #0
 800c43a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c440:	e005      	b.n	800c44e <USBD_GetLen+0x1e>
  {
    len++;
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	3301      	adds	r3, #1
 800c446:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	3301      	adds	r3, #1
 800c44c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1f5      	bne.n	800c442 <USBD_GetLen+0x12>
  }

  return len;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2202      	movs	r2, #2
 800c474:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	2100      	movs	r1, #0
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 fce1 	bl	800ce52 <USBD_LL_Transmit>

  return USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	60f8      	str	r0, [r7, #12]
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 fcd0 	bl	800ce52 <USBD_LL_Transmit>

  return USBD_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2203      	movs	r2, #3
 800c4cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 fcd4 	bl	800ce94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	2100      	movs	r1, #0
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 fcc3 	bl	800ce94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2204      	movs	r2, #4
 800c524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c528:	2300      	movs	r3, #0
 800c52a:	2200      	movs	r2, #0
 800c52c:	2100      	movs	r1, #0
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fc8f 	bl	800ce52 <USBD_LL_Transmit>

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2205      	movs	r2, #5
 800c54a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c54e:	2300      	movs	r3, #0
 800c550:	2200      	movs	r2, #0
 800c552:	2100      	movs	r1, #0
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fc9d 	bl	800ce94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c568:	2200      	movs	r2, #0
 800c56a:	4912      	ldr	r1, [pc, #72]	@ (800c5b4 <MX_USB_DEVICE_Init+0x50>)
 800c56c:	4812      	ldr	r0, [pc, #72]	@ (800c5b8 <MX_USB_DEVICE_Init+0x54>)
 800c56e:	f7fe fd09 	bl	800af84 <USBD_Init>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c578:	f7f6 f8c2 	bl	8002700 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c57c:	490f      	ldr	r1, [pc, #60]	@ (800c5bc <MX_USB_DEVICE_Init+0x58>)
 800c57e:	480e      	ldr	r0, [pc, #56]	@ (800c5b8 <MX_USB_DEVICE_Init+0x54>)
 800c580:	f7fe fd30 	bl	800afe4 <USBD_RegisterClass>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d001      	beq.n	800c58e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c58a:	f7f6 f8b9 	bl	8002700 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c58e:	490c      	ldr	r1, [pc, #48]	@ (800c5c0 <MX_USB_DEVICE_Init+0x5c>)
 800c590:	4809      	ldr	r0, [pc, #36]	@ (800c5b8 <MX_USB_DEVICE_Init+0x54>)
 800c592:	f7fe fc21 	bl	800add8 <USBD_CDC_RegisterInterface>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d001      	beq.n	800c5a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c59c:	f7f6 f8b0 	bl	8002700 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5a0:	4805      	ldr	r0, [pc, #20]	@ (800c5b8 <MX_USB_DEVICE_Init+0x54>)
 800c5a2:	f7fe fd55 	bl	800b050 <USBD_Start>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5ac:	f7f6 f8a8 	bl	8002700 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5b0:	bf00      	nop
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	200001d8 	.word	0x200001d8
 800c5b8:	2000255c 	.word	0x2000255c
 800c5bc:	20000144 	.word	0x20000144
 800c5c0:	200001c4 	.word	0x200001c4

0800c5c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4905      	ldr	r1, [pc, #20]	@ (800c5e0 <CDC_Init_FS+0x1c>)
 800c5cc:	4805      	ldr	r0, [pc, #20]	@ (800c5e4 <CDC_Init_FS+0x20>)
 800c5ce:	f7fe fc1d 	bl	800ae0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5d2:	4905      	ldr	r1, [pc, #20]	@ (800c5e8 <CDC_Init_FS+0x24>)
 800c5d4:	4803      	ldr	r0, [pc, #12]	@ (800c5e4 <CDC_Init_FS+0x20>)
 800c5d6:	f7fe fc3b 	bl	800ae50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20002c38 	.word	0x20002c38
 800c5e4:	2000255c 	.word	0x2000255c
 800c5e8:	20002838 	.word	0x20002838

0800c5ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	6039      	str	r1, [r7, #0]
 800c606:	71fb      	strb	r3, [r7, #7]
 800c608:	4613      	mov	r3, r2
 800c60a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	2b23      	cmp	r3, #35	@ 0x23
 800c610:	d84a      	bhi.n	800c6a8 <CDC_Control_FS+0xac>
 800c612:	a201      	add	r2, pc, #4	@ (adr r2, 800c618 <CDC_Control_FS+0x1c>)
 800c614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c618:	0800c6a9 	.word	0x0800c6a9
 800c61c:	0800c6a9 	.word	0x0800c6a9
 800c620:	0800c6a9 	.word	0x0800c6a9
 800c624:	0800c6a9 	.word	0x0800c6a9
 800c628:	0800c6a9 	.word	0x0800c6a9
 800c62c:	0800c6a9 	.word	0x0800c6a9
 800c630:	0800c6a9 	.word	0x0800c6a9
 800c634:	0800c6a9 	.word	0x0800c6a9
 800c638:	0800c6a9 	.word	0x0800c6a9
 800c63c:	0800c6a9 	.word	0x0800c6a9
 800c640:	0800c6a9 	.word	0x0800c6a9
 800c644:	0800c6a9 	.word	0x0800c6a9
 800c648:	0800c6a9 	.word	0x0800c6a9
 800c64c:	0800c6a9 	.word	0x0800c6a9
 800c650:	0800c6a9 	.word	0x0800c6a9
 800c654:	0800c6a9 	.word	0x0800c6a9
 800c658:	0800c6a9 	.word	0x0800c6a9
 800c65c:	0800c6a9 	.word	0x0800c6a9
 800c660:	0800c6a9 	.word	0x0800c6a9
 800c664:	0800c6a9 	.word	0x0800c6a9
 800c668:	0800c6a9 	.word	0x0800c6a9
 800c66c:	0800c6a9 	.word	0x0800c6a9
 800c670:	0800c6a9 	.word	0x0800c6a9
 800c674:	0800c6a9 	.word	0x0800c6a9
 800c678:	0800c6a9 	.word	0x0800c6a9
 800c67c:	0800c6a9 	.word	0x0800c6a9
 800c680:	0800c6a9 	.word	0x0800c6a9
 800c684:	0800c6a9 	.word	0x0800c6a9
 800c688:	0800c6a9 	.word	0x0800c6a9
 800c68c:	0800c6a9 	.word	0x0800c6a9
 800c690:	0800c6a9 	.word	0x0800c6a9
 800c694:	0800c6a9 	.word	0x0800c6a9
 800c698:	0800c6a9 	.word	0x0800c6a9
 800c69c:	0800c6a9 	.word	0x0800c6a9
 800c6a0:	0800c6a9 	.word	0x0800c6a9
 800c6a4:	0800c6a9 	.word	0x0800c6a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6a8:	bf00      	nop
  }

  return (USBD_OK);
 800c6aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6c2:	6879      	ldr	r1, [r7, #4]
 800c6c4:	4805      	ldr	r0, [pc, #20]	@ (800c6dc <CDC_Receive_FS+0x24>)
 800c6c6:	f7fe fbc3 	bl	800ae50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6ca:	4804      	ldr	r0, [pc, #16]	@ (800c6dc <CDC_Receive_FS+0x24>)
 800c6cc:	f7fe fc24 	bl	800af18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	2000255c 	.word	0x2000255c

0800c6e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c6f0:	4b0d      	ldr	r3, [pc, #52]	@ (800c728 <CDC_Transmit_FS+0x48>)
 800c6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c6f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c702:	2301      	movs	r3, #1
 800c704:	e00b      	b.n	800c71e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c706:	887b      	ldrh	r3, [r7, #2]
 800c708:	461a      	mov	r2, r3
 800c70a:	6879      	ldr	r1, [r7, #4]
 800c70c:	4806      	ldr	r0, [pc, #24]	@ (800c728 <CDC_Transmit_FS+0x48>)
 800c70e:	f7fe fb7d 	bl	800ae0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c712:	4805      	ldr	r0, [pc, #20]	@ (800c728 <CDC_Transmit_FS+0x48>)
 800c714:	f7fe fbba 	bl	800ae8c <USBD_CDC_TransmitPacket>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	2000255c 	.word	0x2000255c

0800c72c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c73e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c742:	4618      	mov	r0, r3
 800c744:	371c      	adds	r7, #28
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
	...

0800c750 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2212      	movs	r2, #18
 800c760:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c762:	4b03      	ldr	r3, [pc, #12]	@ (800c770 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	200001f4 	.word	0x200001f4

0800c774 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	2204      	movs	r2, #4
 800c784:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c786:	4b03      	ldr	r3, [pc, #12]	@ (800c794 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	20000208 	.word	0x20000208

0800c798 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	6039      	str	r1, [r7, #0]
 800c7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7a4:	79fb      	ldrb	r3, [r7, #7]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d105      	bne.n	800c7b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	4907      	ldr	r1, [pc, #28]	@ (800c7cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c7ae:	4808      	ldr	r0, [pc, #32]	@ (800c7d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7b0:	f7ff fdf8 	bl	800c3a4 <USBD_GetString>
 800c7b4:	e004      	b.n	800c7c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4904      	ldr	r1, [pc, #16]	@ (800c7cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c7ba:	4805      	ldr	r0, [pc, #20]	@ (800c7d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7bc:	f7ff fdf2 	bl	800c3a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7c0:	4b02      	ldr	r3, [pc, #8]	@ (800c7cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20003038 	.word	0x20003038
 800c7d0:	08010e34 	.word	0x08010e34

0800c7d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	4603      	mov	r3, r0
 800c7dc:	6039      	str	r1, [r7, #0]
 800c7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	4904      	ldr	r1, [pc, #16]	@ (800c7f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c7e4:	4804      	ldr	r0, [pc, #16]	@ (800c7f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c7e6:	f7ff fddd 	bl	800c3a4 <USBD_GetString>
  return USBD_StrDesc;
 800c7ea:	4b02      	ldr	r3, [pc, #8]	@ (800c7f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20003038 	.word	0x20003038
 800c7f8:	08010e4c 	.word	0x08010e4c

0800c7fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	4603      	mov	r3, r0
 800c804:	6039      	str	r1, [r7, #0]
 800c806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	221a      	movs	r2, #26
 800c80c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c80e:	f000 f843 	bl	800c898 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c812:	4b02      	ldr	r3, [pc, #8]	@ (800c81c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	2000020c 	.word	0x2000020c

0800c820 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	6039      	str	r1, [r7, #0]
 800c82a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d105      	bne.n	800c83e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	4907      	ldr	r1, [pc, #28]	@ (800c854 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c836:	4808      	ldr	r0, [pc, #32]	@ (800c858 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c838:	f7ff fdb4 	bl	800c3a4 <USBD_GetString>
 800c83c:	e004      	b.n	800c848 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	4904      	ldr	r1, [pc, #16]	@ (800c854 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c842:	4805      	ldr	r0, [pc, #20]	@ (800c858 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c844:	f7ff fdae 	bl	800c3a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c848:	4b02      	ldr	r3, [pc, #8]	@ (800c854 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20003038 	.word	0x20003038
 800c858:	08010e60 	.word	0x08010e60

0800c85c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	4603      	mov	r3, r0
 800c864:	6039      	str	r1, [r7, #0]
 800c866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c868:	79fb      	ldrb	r3, [r7, #7]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d105      	bne.n	800c87a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	4907      	ldr	r1, [pc, #28]	@ (800c890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c872:	4808      	ldr	r0, [pc, #32]	@ (800c894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c874:	f7ff fd96 	bl	800c3a4 <USBD_GetString>
 800c878:	e004      	b.n	800c884 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	4904      	ldr	r1, [pc, #16]	@ (800c890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c87e:	4805      	ldr	r0, [pc, #20]	@ (800c894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c880:	f7ff fd90 	bl	800c3a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c884:	4b02      	ldr	r3, [pc, #8]	@ (800c890 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20003038 	.word	0x20003038
 800c894:	08010e6c 	.word	0x08010e6c

0800c898 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c89e:	4b0f      	ldr	r3, [pc, #60]	@ (800c8dc <Get_SerialNum+0x44>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c8a4:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e0 <Get_SerialNum+0x48>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c8aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e4 <Get_SerialNum+0x4c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d009      	beq.n	800c8d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c8be:	2208      	movs	r2, #8
 800c8c0:	4909      	ldr	r1, [pc, #36]	@ (800c8e8 <Get_SerialNum+0x50>)
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f000 f814 	bl	800c8f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8c8:	2204      	movs	r2, #4
 800c8ca:	4908      	ldr	r1, [pc, #32]	@ (800c8ec <Get_SerialNum+0x54>)
 800c8cc:	68b8      	ldr	r0, [r7, #8]
 800c8ce:	f000 f80f 	bl	800c8f0 <IntToUnicode>
  }
}
 800c8d2:	bf00      	nop
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	1fff7a10 	.word	0x1fff7a10
 800c8e0:	1fff7a14 	.word	0x1fff7a14
 800c8e4:	1fff7a18 	.word	0x1fff7a18
 800c8e8:	2000020e 	.word	0x2000020e
 800c8ec:	2000021e 	.word	0x2000021e

0800c8f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c902:	2300      	movs	r3, #0
 800c904:	75fb      	strb	r3, [r7, #23]
 800c906:	e027      	b.n	800c958 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	0f1b      	lsrs	r3, r3, #28
 800c90c:	2b09      	cmp	r3, #9
 800c90e:	d80b      	bhi.n	800c928 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	0f1b      	lsrs	r3, r3, #28
 800c914:	b2da      	uxtb	r2, r3
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	4619      	mov	r1, r3
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	440b      	add	r3, r1
 800c920:	3230      	adds	r2, #48	@ 0x30
 800c922:	b2d2      	uxtb	r2, r2
 800c924:	701a      	strb	r2, [r3, #0]
 800c926:	e00a      	b.n	800c93e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	0f1b      	lsrs	r3, r3, #28
 800c92c:	b2da      	uxtb	r2, r3
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	4619      	mov	r1, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	440b      	add	r3, r1
 800c938:	3237      	adds	r2, #55	@ 0x37
 800c93a:	b2d2      	uxtb	r2, r2
 800c93c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	011b      	lsls	r3, r3, #4
 800c942:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	005b      	lsls	r3, r3, #1
 800c948:	3301      	adds	r3, #1
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	4413      	add	r3, r2
 800c94e:	2200      	movs	r2, #0
 800c950:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	3301      	adds	r3, #1
 800c956:	75fb      	strb	r3, [r7, #23]
 800c958:	7dfa      	ldrb	r2, [r7, #23]
 800c95a:	79fb      	ldrb	r3, [r7, #7]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d3d3      	bcc.n	800c908 <IntToUnicode+0x18>
  }
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	371c      	adds	r7, #28
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
	...

0800c970 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08a      	sub	sp, #40	@ 0x28
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c978:	f107 0314 	add.w	r3, r7, #20
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	605a      	str	r2, [r3, #4]
 800c982:	609a      	str	r2, [r3, #8]
 800c984:	60da      	str	r2, [r3, #12]
 800c986:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c990:	d13a      	bne.n	800ca08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c992:	2300      	movs	r3, #0
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	4b1e      	ldr	r3, [pc, #120]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99a:	4a1d      	ldr	r2, [pc, #116]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c99c:	f043 0301 	orr.w	r3, r3, #1
 800c9a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	613b      	str	r3, [r7, #16]
 800c9ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c9ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c9b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c9c0:	230a      	movs	r3, #10
 800c9c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9c4:	f107 0314 	add.w	r3, r7, #20
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4812      	ldr	r0, [pc, #72]	@ (800ca14 <HAL_PCD_MspInit+0xa4>)
 800c9cc:	f7f8 f992 	bl	8004cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c9d0:	4b0f      	ldr	r3, [pc, #60]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d4:	4a0e      	ldr	r2, [pc, #56]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9da:	6353      	str	r3, [r2, #52]	@ 0x34
 800c9dc:	2300      	movs	r3, #0
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9e4:	4a0a      	ldr	r2, [pc, #40]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c9e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c9ea:	6453      	str	r3, [r2, #68]	@ 0x44
 800c9ec:	4b08      	ldr	r3, [pc, #32]	@ (800ca10 <HAL_PCD_MspInit+0xa0>)
 800c9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	2043      	movs	r0, #67	@ 0x43
 800c9fe:	f7f7 ff1f 	bl	8004840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca02:	2043      	movs	r0, #67	@ 0x43
 800ca04:	f7f7 ff38 	bl	8004878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca08:	bf00      	nop
 800ca0a:	3728      	adds	r7, #40	@ 0x28
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	40023800 	.word	0x40023800
 800ca14:	40020000 	.word	0x40020000

0800ca18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	4610      	mov	r0, r2
 800ca30:	f7fe fb5b 	bl	800b0ea <USBD_LL_SetupStage>
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800ca4e:	78fa      	ldrb	r2, [r7, #3]
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	4613      	mov	r3, r2
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	4413      	add	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	440b      	add	r3, r1
 800ca5c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	4619      	mov	r1, r3
 800ca66:	f7fe fb95 	bl	800b194 <USBD_LL_DataOutStage>
}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800ca84:	78fa      	ldrb	r2, [r7, #3]
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	4413      	add	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	440b      	add	r3, r1
 800ca92:	334c      	adds	r3, #76	@ 0x4c
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	f7fe fc2e 	bl	800b2fa <USBD_LL_DataInStage>
}
 800ca9e:	bf00      	nop
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fe fd62 	bl	800b57e <USBD_LL_SOF>
}
 800caba:	bf00      	nop
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800caca:	2301      	movs	r3, #1
 800cacc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d001      	beq.n	800cada <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cad6:	f7f5 fe13 	bl	8002700 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cae0:	7bfa      	ldrb	r2, [r7, #15]
 800cae2:	4611      	mov	r1, r2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe fd0c 	bl	800b502 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fe fcb4 	bl	800b45e <USBD_LL_Reset>
}
 800caf6:	bf00      	nop
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe fd07 	bl	800b522 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	6812      	ldr	r2, [r2, #0]
 800cb22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cb26:	f043 0301 	orr.w	r3, r3, #1
 800cb2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d005      	beq.n	800cb40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb34:	4b04      	ldr	r3, [pc, #16]	@ (800cb48 <HAL_PCD_SuspendCallback+0x48>)
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	4a03      	ldr	r2, [pc, #12]	@ (800cb48 <HAL_PCD_SuspendCallback+0x48>)
 800cb3a:	f043 0306 	orr.w	r3, r3, #6
 800cb3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	e000ed00 	.word	0xe000ed00

0800cb4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fcf7 	bl	800b54e <USBD_LL_Resume>
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	460b      	mov	r3, r1
 800cb72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cb7a:	78fa      	ldrb	r2, [r7, #3]
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fd4f 	bl	800b622 <USBD_LL_IsoOUTIncomplete>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cb9e:	78fa      	ldrb	r2, [r7, #3]
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fd0b 	bl	800b5be <USBD_LL_IsoINIncomplete>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe fd61 	bl	800b686 <USBD_LL_DevConnected>
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe fd5e 	bl	800b69c <USBD_LL_DevDisconnected>
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d13c      	bne.n	800cc72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cbf8:	4a20      	ldr	r2, [pc, #128]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a1e      	ldr	r2, [pc, #120]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cc08:	4b1c      	ldr	r3, [pc, #112]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cc0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cc10:	4b1a      	ldr	r3, [pc, #104]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc12:	2204      	movs	r2, #4
 800cc14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cc16:	4b19      	ldr	r3, [pc, #100]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc18:	2202      	movs	r2, #2
 800cc1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cc1c:	4b17      	ldr	r3, [pc, #92]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc22:	4b16      	ldr	r3, [pc, #88]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc24:	2202      	movs	r2, #2
 800cc26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc28:	4b14      	ldr	r3, [pc, #80]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cc2e:	4b13      	ldr	r3, [pc, #76]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cc34:	4b11      	ldr	r3, [pc, #68]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cc3a:	4b10      	ldr	r3, [pc, #64]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cc40:	4b0e      	ldr	r3, [pc, #56]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cc46:	480d      	ldr	r0, [pc, #52]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc48:	f7f8 f9f1 	bl	800502e <HAL_PCD_Init>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cc52:	f7f5 fd55 	bl	8002700 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cc56:	2180      	movs	r1, #128	@ 0x80
 800cc58:	4808      	ldr	r0, [pc, #32]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc5a:	f7f9 fc48 	bl	80064ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cc5e:	2240      	movs	r2, #64	@ 0x40
 800cc60:	2100      	movs	r1, #0
 800cc62:	4806      	ldr	r0, [pc, #24]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc64:	f7f9 fbfc 	bl	8006460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cc68:	2280      	movs	r2, #128	@ 0x80
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	4803      	ldr	r0, [pc, #12]	@ (800cc7c <USBD_LL_Init+0x94>)
 800cc6e:	f7f9 fbf7 	bl	8006460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	20003238 	.word	0x20003238

0800cc80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7f8 fae6 	bl	8005268 <HAL_PCD_Start>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 f942 	bl	800cf2c <USBD_Get_USB_Status>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	70fb      	strb	r3, [r7, #3]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70bb      	strb	r3, [r7, #2]
 800cccc:	4613      	mov	r3, r2
 800ccce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ccde:	78bb      	ldrb	r3, [r7, #2]
 800cce0:	883a      	ldrh	r2, [r7, #0]
 800cce2:	78f9      	ldrb	r1, [r7, #3]
 800cce4:	f7f8 ffb7 	bl	8005c56 <HAL_PCD_EP_Open>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 f91c 	bl	800cf2c <USBD_Get_USB_Status>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd1c:	78fa      	ldrb	r2, [r7, #3]
 800cd1e:	4611      	mov	r1, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7f9 f800 	bl	8005d26 <HAL_PCD_EP_Close>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f8fd 	bl	800cf2c <USBD_Get_USB_Status>
 800cd32:	4603      	mov	r3, r0
 800cd34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd5a:	78fa      	ldrb	r2, [r7, #3]
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f9 f8d8 	bl	8005f14 <HAL_PCD_EP_SetStall>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 f8de 	bl	800cf2c <USBD_Get_USB_Status>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd98:	78fa      	ldrb	r2, [r7, #3]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f9 f91d 	bl	8005fdc <HAL_PCD_EP_ClrStall>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f8bf 	bl	800cf2c <USBD_Get_USB_Status>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	da0b      	bge.n	800cdf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdd8:	78fb      	ldrb	r3, [r7, #3]
 800cdda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	4613      	mov	r3, r2
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	440b      	add	r3, r1
 800cdea:	333e      	adds	r3, #62	@ 0x3e
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	e00b      	b.n	800ce08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdf6:	68f9      	ldr	r1, [r7, #12]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	4413      	add	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	440b      	add	r3, r1
 800ce02:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800ce06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce2e:	78fa      	ldrb	r2, [r7, #3]
 800ce30:	4611      	mov	r1, r2
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7f8 feea 	bl	8005c0c <HAL_PCD_SetAddress>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f874 	bl	800cf2c <USBD_Get_USB_Status>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b086      	sub	sp, #24
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	60f8      	str	r0, [r7, #12]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	603b      	str	r3, [r7, #0]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce66:	2300      	movs	r3, #0
 800ce68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce70:	7af9      	ldrb	r1, [r7, #11]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	f7f9 f803 	bl	8005e80 <HAL_PCD_EP_Transmit>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce7e:	7dfb      	ldrb	r3, [r7, #23]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 f853 	bl	800cf2c <USBD_Get_USB_Status>
 800ce86:	4603      	mov	r3, r0
 800ce88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	607a      	str	r2, [r7, #4]
 800ce9e:	603b      	str	r3, [r7, #0]
 800cea0:	460b      	mov	r3, r1
 800cea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ceb2:	7af9      	ldrb	r1, [r7, #11]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	f7f8 ff7f 	bl	8005dba <HAL_PCD_EP_Receive>
 800cebc:	4603      	mov	r3, r0
 800cebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f832 	bl	800cf2c <USBD_Get_USB_Status>
 800cec8:	4603      	mov	r3, r0
 800ceca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cecc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b082      	sub	sp, #8
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	460b      	mov	r3, r1
 800cee0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cee8:	78fa      	ldrb	r2, [r7, #3]
 800ceea:	4611      	mov	r1, r2
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7f8 ffaf 	bl	8005e50 <HAL_PCD_EP_GetRxCount>
 800cef2:	4603      	mov	r3, r0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf04:	4b03      	ldr	r3, [pc, #12]	@ (800cf14 <USBD_static_malloc+0x18>)
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	370c      	adds	r7, #12
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	20003744 	.word	0x20003744

0800cf18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]

}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf3a:	79fb      	ldrb	r3, [r7, #7]
 800cf3c:	2b03      	cmp	r3, #3
 800cf3e:	d817      	bhi.n	800cf70 <USBD_Get_USB_Status+0x44>
 800cf40:	a201      	add	r2, pc, #4	@ (adr r2, 800cf48 <USBD_Get_USB_Status+0x1c>)
 800cf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf46:	bf00      	nop
 800cf48:	0800cf59 	.word	0x0800cf59
 800cf4c:	0800cf5f 	.word	0x0800cf5f
 800cf50:	0800cf65 	.word	0x0800cf65
 800cf54:	0800cf6b 	.word	0x0800cf6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5c:	e00b      	b.n	800cf76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	73fb      	strb	r3, [r7, #15]
    break;
 800cf62:	e008      	b.n	800cf76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf64:	2301      	movs	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]
    break;
 800cf68:	e005      	b.n	800cf76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6e:	e002      	b.n	800cf76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf70:	2303      	movs	r3, #3
 800cf72:	73fb      	strb	r3, [r7, #15]
    break;
 800cf74:	bf00      	nop
  }
  return usb_status;
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <_scanf_float>:
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	b087      	sub	sp, #28
 800cf8a:	4617      	mov	r7, r2
 800cf8c:	9303      	str	r3, [sp, #12]
 800cf8e:	688b      	ldr	r3, [r1, #8]
 800cf90:	1e5a      	subs	r2, r3, #1
 800cf92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cf96:	bf81      	itttt	hi
 800cf98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cf9c:	eb03 0b05 	addhi.w	fp, r3, r5
 800cfa0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cfa4:	608b      	strhi	r3, [r1, #8]
 800cfa6:	680b      	ldr	r3, [r1, #0]
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	f04f 0500 	mov.w	r5, #0
 800cfae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cfb2:	f842 3b1c 	str.w	r3, [r2], #28
 800cfb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cfba:	4680      	mov	r8, r0
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	bf98      	it	ls
 800cfc0:	f04f 0b00 	movls.w	fp, #0
 800cfc4:	9201      	str	r2, [sp, #4]
 800cfc6:	4616      	mov	r6, r2
 800cfc8:	46aa      	mov	sl, r5
 800cfca:	46a9      	mov	r9, r5
 800cfcc:	9502      	str	r5, [sp, #8]
 800cfce:	68a2      	ldr	r2, [r4, #8]
 800cfd0:	b152      	cbz	r2, 800cfe8 <_scanf_float+0x64>
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b4e      	cmp	r3, #78	@ 0x4e
 800cfd8:	d864      	bhi.n	800d0a4 <_scanf_float+0x120>
 800cfda:	2b40      	cmp	r3, #64	@ 0x40
 800cfdc:	d83c      	bhi.n	800d058 <_scanf_float+0xd4>
 800cfde:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cfe2:	b2c8      	uxtb	r0, r1
 800cfe4:	280e      	cmp	r0, #14
 800cfe6:	d93a      	bls.n	800d05e <_scanf_float+0xda>
 800cfe8:	f1b9 0f00 	cmp.w	r9, #0
 800cfec:	d003      	beq.n	800cff6 <_scanf_float+0x72>
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cffa:	f1ba 0f01 	cmp.w	sl, #1
 800cffe:	f200 8117 	bhi.w	800d230 <_scanf_float+0x2ac>
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	429e      	cmp	r6, r3
 800d006:	f200 8108 	bhi.w	800d21a <_scanf_float+0x296>
 800d00a:	2001      	movs	r0, #1
 800d00c:	b007      	add	sp, #28
 800d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d012:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d016:	2a0d      	cmp	r2, #13
 800d018:	d8e6      	bhi.n	800cfe8 <_scanf_float+0x64>
 800d01a:	a101      	add	r1, pc, #4	@ (adr r1, 800d020 <_scanf_float+0x9c>)
 800d01c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d020:	0800d167 	.word	0x0800d167
 800d024:	0800cfe9 	.word	0x0800cfe9
 800d028:	0800cfe9 	.word	0x0800cfe9
 800d02c:	0800cfe9 	.word	0x0800cfe9
 800d030:	0800d1c7 	.word	0x0800d1c7
 800d034:	0800d19f 	.word	0x0800d19f
 800d038:	0800cfe9 	.word	0x0800cfe9
 800d03c:	0800cfe9 	.word	0x0800cfe9
 800d040:	0800d175 	.word	0x0800d175
 800d044:	0800cfe9 	.word	0x0800cfe9
 800d048:	0800cfe9 	.word	0x0800cfe9
 800d04c:	0800cfe9 	.word	0x0800cfe9
 800d050:	0800cfe9 	.word	0x0800cfe9
 800d054:	0800d12d 	.word	0x0800d12d
 800d058:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d05c:	e7db      	b.n	800d016 <_scanf_float+0x92>
 800d05e:	290e      	cmp	r1, #14
 800d060:	d8c2      	bhi.n	800cfe8 <_scanf_float+0x64>
 800d062:	a001      	add	r0, pc, #4	@ (adr r0, 800d068 <_scanf_float+0xe4>)
 800d064:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d068:	0800d11d 	.word	0x0800d11d
 800d06c:	0800cfe9 	.word	0x0800cfe9
 800d070:	0800d11d 	.word	0x0800d11d
 800d074:	0800d1b3 	.word	0x0800d1b3
 800d078:	0800cfe9 	.word	0x0800cfe9
 800d07c:	0800d0c5 	.word	0x0800d0c5
 800d080:	0800d103 	.word	0x0800d103
 800d084:	0800d103 	.word	0x0800d103
 800d088:	0800d103 	.word	0x0800d103
 800d08c:	0800d103 	.word	0x0800d103
 800d090:	0800d103 	.word	0x0800d103
 800d094:	0800d103 	.word	0x0800d103
 800d098:	0800d103 	.word	0x0800d103
 800d09c:	0800d103 	.word	0x0800d103
 800d0a0:	0800d103 	.word	0x0800d103
 800d0a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d0a6:	d809      	bhi.n	800d0bc <_scanf_float+0x138>
 800d0a8:	2b60      	cmp	r3, #96	@ 0x60
 800d0aa:	d8b2      	bhi.n	800d012 <_scanf_float+0x8e>
 800d0ac:	2b54      	cmp	r3, #84	@ 0x54
 800d0ae:	d07b      	beq.n	800d1a8 <_scanf_float+0x224>
 800d0b0:	2b59      	cmp	r3, #89	@ 0x59
 800d0b2:	d199      	bne.n	800cfe8 <_scanf_float+0x64>
 800d0b4:	2d07      	cmp	r5, #7
 800d0b6:	d197      	bne.n	800cfe8 <_scanf_float+0x64>
 800d0b8:	2508      	movs	r5, #8
 800d0ba:	e02c      	b.n	800d116 <_scanf_float+0x192>
 800d0bc:	2b74      	cmp	r3, #116	@ 0x74
 800d0be:	d073      	beq.n	800d1a8 <_scanf_float+0x224>
 800d0c0:	2b79      	cmp	r3, #121	@ 0x79
 800d0c2:	e7f6      	b.n	800d0b2 <_scanf_float+0x12e>
 800d0c4:	6821      	ldr	r1, [r4, #0]
 800d0c6:	05c8      	lsls	r0, r1, #23
 800d0c8:	d51b      	bpl.n	800d102 <_scanf_float+0x17e>
 800d0ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d0ce:	6021      	str	r1, [r4, #0]
 800d0d0:	f109 0901 	add.w	r9, r9, #1
 800d0d4:	f1bb 0f00 	cmp.w	fp, #0
 800d0d8:	d003      	beq.n	800d0e2 <_scanf_float+0x15e>
 800d0da:	3201      	adds	r2, #1
 800d0dc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d0e0:	60a2      	str	r2, [r4, #8]
 800d0e2:	68a3      	ldr	r3, [r4, #8]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	60a3      	str	r3, [r4, #8]
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	6123      	str	r3, [r4, #16]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	607b      	str	r3, [r7, #4]
 800d0f6:	f340 8087 	ble.w	800d208 <_scanf_float+0x284>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	603b      	str	r3, [r7, #0]
 800d100:	e765      	b.n	800cfce <_scanf_float+0x4a>
 800d102:	eb1a 0105 	adds.w	r1, sl, r5
 800d106:	f47f af6f 	bne.w	800cfe8 <_scanf_float+0x64>
 800d10a:	6822      	ldr	r2, [r4, #0]
 800d10c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d110:	6022      	str	r2, [r4, #0]
 800d112:	460d      	mov	r5, r1
 800d114:	468a      	mov	sl, r1
 800d116:	f806 3b01 	strb.w	r3, [r6], #1
 800d11a:	e7e2      	b.n	800d0e2 <_scanf_float+0x15e>
 800d11c:	6822      	ldr	r2, [r4, #0]
 800d11e:	0610      	lsls	r0, r2, #24
 800d120:	f57f af62 	bpl.w	800cfe8 <_scanf_float+0x64>
 800d124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d128:	6022      	str	r2, [r4, #0]
 800d12a:	e7f4      	b.n	800d116 <_scanf_float+0x192>
 800d12c:	f1ba 0f00 	cmp.w	sl, #0
 800d130:	d10e      	bne.n	800d150 <_scanf_float+0x1cc>
 800d132:	f1b9 0f00 	cmp.w	r9, #0
 800d136:	d10e      	bne.n	800d156 <_scanf_float+0x1d2>
 800d138:	6822      	ldr	r2, [r4, #0]
 800d13a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d13e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d142:	d108      	bne.n	800d156 <_scanf_float+0x1d2>
 800d144:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d148:	6022      	str	r2, [r4, #0]
 800d14a:	f04f 0a01 	mov.w	sl, #1
 800d14e:	e7e2      	b.n	800d116 <_scanf_float+0x192>
 800d150:	f1ba 0f02 	cmp.w	sl, #2
 800d154:	d055      	beq.n	800d202 <_scanf_float+0x27e>
 800d156:	2d01      	cmp	r5, #1
 800d158:	d002      	beq.n	800d160 <_scanf_float+0x1dc>
 800d15a:	2d04      	cmp	r5, #4
 800d15c:	f47f af44 	bne.w	800cfe8 <_scanf_float+0x64>
 800d160:	3501      	adds	r5, #1
 800d162:	b2ed      	uxtb	r5, r5
 800d164:	e7d7      	b.n	800d116 <_scanf_float+0x192>
 800d166:	f1ba 0f01 	cmp.w	sl, #1
 800d16a:	f47f af3d 	bne.w	800cfe8 <_scanf_float+0x64>
 800d16e:	f04f 0a02 	mov.w	sl, #2
 800d172:	e7d0      	b.n	800d116 <_scanf_float+0x192>
 800d174:	b97d      	cbnz	r5, 800d196 <_scanf_float+0x212>
 800d176:	f1b9 0f00 	cmp.w	r9, #0
 800d17a:	f47f af38 	bne.w	800cfee <_scanf_float+0x6a>
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d184:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d188:	f040 8108 	bne.w	800d39c <_scanf_float+0x418>
 800d18c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d190:	6022      	str	r2, [r4, #0]
 800d192:	2501      	movs	r5, #1
 800d194:	e7bf      	b.n	800d116 <_scanf_float+0x192>
 800d196:	2d03      	cmp	r5, #3
 800d198:	d0e2      	beq.n	800d160 <_scanf_float+0x1dc>
 800d19a:	2d05      	cmp	r5, #5
 800d19c:	e7de      	b.n	800d15c <_scanf_float+0x1d8>
 800d19e:	2d02      	cmp	r5, #2
 800d1a0:	f47f af22 	bne.w	800cfe8 <_scanf_float+0x64>
 800d1a4:	2503      	movs	r5, #3
 800d1a6:	e7b6      	b.n	800d116 <_scanf_float+0x192>
 800d1a8:	2d06      	cmp	r5, #6
 800d1aa:	f47f af1d 	bne.w	800cfe8 <_scanf_float+0x64>
 800d1ae:	2507      	movs	r5, #7
 800d1b0:	e7b1      	b.n	800d116 <_scanf_float+0x192>
 800d1b2:	6822      	ldr	r2, [r4, #0]
 800d1b4:	0591      	lsls	r1, r2, #22
 800d1b6:	f57f af17 	bpl.w	800cfe8 <_scanf_float+0x64>
 800d1ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d1be:	6022      	str	r2, [r4, #0]
 800d1c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1c4:	e7a7      	b.n	800d116 <_scanf_float+0x192>
 800d1c6:	6822      	ldr	r2, [r4, #0]
 800d1c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d1cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d1d0:	d006      	beq.n	800d1e0 <_scanf_float+0x25c>
 800d1d2:	0550      	lsls	r0, r2, #21
 800d1d4:	f57f af08 	bpl.w	800cfe8 <_scanf_float+0x64>
 800d1d8:	f1b9 0f00 	cmp.w	r9, #0
 800d1dc:	f000 80de 	beq.w	800d39c <_scanf_float+0x418>
 800d1e0:	0591      	lsls	r1, r2, #22
 800d1e2:	bf58      	it	pl
 800d1e4:	9902      	ldrpl	r1, [sp, #8]
 800d1e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d1ea:	bf58      	it	pl
 800d1ec:	eba9 0101 	subpl.w	r1, r9, r1
 800d1f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d1f4:	bf58      	it	pl
 800d1f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d1fa:	6022      	str	r2, [r4, #0]
 800d1fc:	f04f 0900 	mov.w	r9, #0
 800d200:	e789      	b.n	800d116 <_scanf_float+0x192>
 800d202:	f04f 0a03 	mov.w	sl, #3
 800d206:	e786      	b.n	800d116 <_scanf_float+0x192>
 800d208:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d20c:	4639      	mov	r1, r7
 800d20e:	4640      	mov	r0, r8
 800d210:	4798      	blx	r3
 800d212:	2800      	cmp	r0, #0
 800d214:	f43f aedb 	beq.w	800cfce <_scanf_float+0x4a>
 800d218:	e6e6      	b.n	800cfe8 <_scanf_float+0x64>
 800d21a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d21e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d222:	463a      	mov	r2, r7
 800d224:	4640      	mov	r0, r8
 800d226:	4798      	blx	r3
 800d228:	6923      	ldr	r3, [r4, #16]
 800d22a:	3b01      	subs	r3, #1
 800d22c:	6123      	str	r3, [r4, #16]
 800d22e:	e6e8      	b.n	800d002 <_scanf_float+0x7e>
 800d230:	1e6b      	subs	r3, r5, #1
 800d232:	2b06      	cmp	r3, #6
 800d234:	d824      	bhi.n	800d280 <_scanf_float+0x2fc>
 800d236:	2d02      	cmp	r5, #2
 800d238:	d836      	bhi.n	800d2a8 <_scanf_float+0x324>
 800d23a:	9b01      	ldr	r3, [sp, #4]
 800d23c:	429e      	cmp	r6, r3
 800d23e:	f67f aee4 	bls.w	800d00a <_scanf_float+0x86>
 800d242:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d24a:	463a      	mov	r2, r7
 800d24c:	4640      	mov	r0, r8
 800d24e:	4798      	blx	r3
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	3b01      	subs	r3, #1
 800d254:	6123      	str	r3, [r4, #16]
 800d256:	e7f0      	b.n	800d23a <_scanf_float+0x2b6>
 800d258:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d25c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d260:	463a      	mov	r2, r7
 800d262:	4640      	mov	r0, r8
 800d264:	4798      	blx	r3
 800d266:	6923      	ldr	r3, [r4, #16]
 800d268:	3b01      	subs	r3, #1
 800d26a:	6123      	str	r3, [r4, #16]
 800d26c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d270:	fa5f fa8a 	uxtb.w	sl, sl
 800d274:	f1ba 0f02 	cmp.w	sl, #2
 800d278:	d1ee      	bne.n	800d258 <_scanf_float+0x2d4>
 800d27a:	3d03      	subs	r5, #3
 800d27c:	b2ed      	uxtb	r5, r5
 800d27e:	1b76      	subs	r6, r6, r5
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	05da      	lsls	r2, r3, #23
 800d284:	d530      	bpl.n	800d2e8 <_scanf_float+0x364>
 800d286:	055b      	lsls	r3, r3, #21
 800d288:	d511      	bpl.n	800d2ae <_scanf_float+0x32a>
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	429e      	cmp	r6, r3
 800d28e:	f67f aebc 	bls.w	800d00a <_scanf_float+0x86>
 800d292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d29a:	463a      	mov	r2, r7
 800d29c:	4640      	mov	r0, r8
 800d29e:	4798      	blx	r3
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	e7f0      	b.n	800d28a <_scanf_float+0x306>
 800d2a8:	46aa      	mov	sl, r5
 800d2aa:	46b3      	mov	fp, r6
 800d2ac:	e7de      	b.n	800d26c <_scanf_float+0x2e8>
 800d2ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d2b2:	6923      	ldr	r3, [r4, #16]
 800d2b4:	2965      	cmp	r1, #101	@ 0x65
 800d2b6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d2ba:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d2be:	6123      	str	r3, [r4, #16]
 800d2c0:	d00c      	beq.n	800d2dc <_scanf_float+0x358>
 800d2c2:	2945      	cmp	r1, #69	@ 0x45
 800d2c4:	d00a      	beq.n	800d2dc <_scanf_float+0x358>
 800d2c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	4798      	blx	r3
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	1eb5      	subs	r5, r6, #2
 800d2da:	6123      	str	r3, [r4, #16]
 800d2dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d2e0:	463a      	mov	r2, r7
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	4798      	blx	r3
 800d2e6:	462e      	mov	r6, r5
 800d2e8:	6822      	ldr	r2, [r4, #0]
 800d2ea:	f012 0210 	ands.w	r2, r2, #16
 800d2ee:	d001      	beq.n	800d2f4 <_scanf_float+0x370>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e68b      	b.n	800d00c <_scanf_float+0x88>
 800d2f4:	7032      	strb	r2, [r6, #0]
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d2fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d300:	d11c      	bne.n	800d33c <_scanf_float+0x3b8>
 800d302:	9b02      	ldr	r3, [sp, #8]
 800d304:	454b      	cmp	r3, r9
 800d306:	eba3 0209 	sub.w	r2, r3, r9
 800d30a:	d123      	bne.n	800d354 <_scanf_float+0x3d0>
 800d30c:	9901      	ldr	r1, [sp, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	4640      	mov	r0, r8
 800d312:	f001 f999 	bl	800e648 <_strtod_r>
 800d316:	9b03      	ldr	r3, [sp, #12]
 800d318:	6821      	ldr	r1, [r4, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f011 0f02 	tst.w	r1, #2
 800d320:	ec57 6b10 	vmov	r6, r7, d0
 800d324:	f103 0204 	add.w	r2, r3, #4
 800d328:	d01f      	beq.n	800d36a <_scanf_float+0x3e6>
 800d32a:	9903      	ldr	r1, [sp, #12]
 800d32c:	600a      	str	r2, [r1, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	e9c3 6700 	strd	r6, r7, [r3]
 800d334:	68e3      	ldr	r3, [r4, #12]
 800d336:	3301      	adds	r3, #1
 800d338:	60e3      	str	r3, [r4, #12]
 800d33a:	e7d9      	b.n	800d2f0 <_scanf_float+0x36c>
 800d33c:	9b04      	ldr	r3, [sp, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d0e4      	beq.n	800d30c <_scanf_float+0x388>
 800d342:	9905      	ldr	r1, [sp, #20]
 800d344:	230a      	movs	r3, #10
 800d346:	3101      	adds	r1, #1
 800d348:	4640      	mov	r0, r8
 800d34a:	f001 f9fd 	bl	800e748 <_strtol_r>
 800d34e:	9b04      	ldr	r3, [sp, #16]
 800d350:	9e05      	ldr	r6, [sp, #20]
 800d352:	1ac2      	subs	r2, r0, r3
 800d354:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d358:	429e      	cmp	r6, r3
 800d35a:	bf28      	it	cs
 800d35c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d360:	4910      	ldr	r1, [pc, #64]	@ (800d3a4 <_scanf_float+0x420>)
 800d362:	4630      	mov	r0, r6
 800d364:	f000 f8e4 	bl	800d530 <siprintf>
 800d368:	e7d0      	b.n	800d30c <_scanf_float+0x388>
 800d36a:	f011 0f04 	tst.w	r1, #4
 800d36e:	9903      	ldr	r1, [sp, #12]
 800d370:	600a      	str	r2, [r1, #0]
 800d372:	d1dc      	bne.n	800d32e <_scanf_float+0x3aa>
 800d374:	681d      	ldr	r5, [r3, #0]
 800d376:	4632      	mov	r2, r6
 800d378:	463b      	mov	r3, r7
 800d37a:	4630      	mov	r0, r6
 800d37c:	4639      	mov	r1, r7
 800d37e:	f7f3 fbdd 	bl	8000b3c <__aeabi_dcmpun>
 800d382:	b128      	cbz	r0, 800d390 <_scanf_float+0x40c>
 800d384:	4808      	ldr	r0, [pc, #32]	@ (800d3a8 <_scanf_float+0x424>)
 800d386:	f000 fa5f 	bl	800d848 <nanf>
 800d38a:	ed85 0a00 	vstr	s0, [r5]
 800d38e:	e7d1      	b.n	800d334 <_scanf_float+0x3b0>
 800d390:	4630      	mov	r0, r6
 800d392:	4639      	mov	r1, r7
 800d394:	f7f3 fc08 	bl	8000ba8 <__aeabi_d2f>
 800d398:	6028      	str	r0, [r5, #0]
 800d39a:	e7cb      	b.n	800d334 <_scanf_float+0x3b0>
 800d39c:	f04f 0900 	mov.w	r9, #0
 800d3a0:	e629      	b.n	800cff6 <_scanf_float+0x72>
 800d3a2:	bf00      	nop
 800d3a4:	08012038 	.word	0x08012038
 800d3a8:	08012413 	.word	0x08012413

0800d3ac <std>:
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3ba:	6083      	str	r3, [r0, #8]
 800d3bc:	8181      	strh	r1, [r0, #12]
 800d3be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3c0:	81c2      	strh	r2, [r0, #14]
 800d3c2:	6183      	str	r3, [r0, #24]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	2208      	movs	r2, #8
 800d3c8:	305c      	adds	r0, #92	@ 0x5c
 800d3ca:	f000 f989 	bl	800d6e0 <memset>
 800d3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d404 <std+0x58>)
 800d3d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d408 <std+0x5c>)
 800d3d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d40c <std+0x60>)
 800d3d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3da:	4b0d      	ldr	r3, [pc, #52]	@ (800d410 <std+0x64>)
 800d3dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3de:	4b0d      	ldr	r3, [pc, #52]	@ (800d414 <std+0x68>)
 800d3e0:	6224      	str	r4, [r4, #32]
 800d3e2:	429c      	cmp	r4, r3
 800d3e4:	d006      	beq.n	800d3f4 <std+0x48>
 800d3e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d3ea:	4294      	cmp	r4, r2
 800d3ec:	d002      	beq.n	800d3f4 <std+0x48>
 800d3ee:	33d0      	adds	r3, #208	@ 0xd0
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	d105      	bne.n	800d400 <std+0x54>
 800d3f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3fc:	f000 ba0a 	b.w	800d814 <__retarget_lock_init_recursive>
 800d400:	bd10      	pop	{r4, pc}
 800d402:	bf00      	nop
 800d404:	0800d5c5 	.word	0x0800d5c5
 800d408:	0800d5eb 	.word	0x0800d5eb
 800d40c:	0800d623 	.word	0x0800d623
 800d410:	0800d647 	.word	0x0800d647
 800d414:	20003964 	.word	0x20003964

0800d418 <stdio_exit_handler>:
 800d418:	4a02      	ldr	r2, [pc, #8]	@ (800d424 <stdio_exit_handler+0xc>)
 800d41a:	4903      	ldr	r1, [pc, #12]	@ (800d428 <stdio_exit_handler+0x10>)
 800d41c:	4803      	ldr	r0, [pc, #12]	@ (800d42c <stdio_exit_handler+0x14>)
 800d41e:	f000 b869 	b.w	800d4f4 <_fwalk_sglue>
 800d422:	bf00      	nop
 800d424:	20000228 	.word	0x20000228
 800d428:	0800f6d9 	.word	0x0800f6d9
 800d42c:	20000238 	.word	0x20000238

0800d430 <cleanup_stdio>:
 800d430:	6841      	ldr	r1, [r0, #4]
 800d432:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <cleanup_stdio+0x34>)
 800d434:	4299      	cmp	r1, r3
 800d436:	b510      	push	{r4, lr}
 800d438:	4604      	mov	r4, r0
 800d43a:	d001      	beq.n	800d440 <cleanup_stdio+0x10>
 800d43c:	f002 f94c 	bl	800f6d8 <_fflush_r>
 800d440:	68a1      	ldr	r1, [r4, #8]
 800d442:	4b09      	ldr	r3, [pc, #36]	@ (800d468 <cleanup_stdio+0x38>)
 800d444:	4299      	cmp	r1, r3
 800d446:	d002      	beq.n	800d44e <cleanup_stdio+0x1e>
 800d448:	4620      	mov	r0, r4
 800d44a:	f002 f945 	bl	800f6d8 <_fflush_r>
 800d44e:	68e1      	ldr	r1, [r4, #12]
 800d450:	4b06      	ldr	r3, [pc, #24]	@ (800d46c <cleanup_stdio+0x3c>)
 800d452:	4299      	cmp	r1, r3
 800d454:	d004      	beq.n	800d460 <cleanup_stdio+0x30>
 800d456:	4620      	mov	r0, r4
 800d458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d45c:	f002 b93c 	b.w	800f6d8 <_fflush_r>
 800d460:	bd10      	pop	{r4, pc}
 800d462:	bf00      	nop
 800d464:	20003964 	.word	0x20003964
 800d468:	200039cc 	.word	0x200039cc
 800d46c:	20003a34 	.word	0x20003a34

0800d470 <global_stdio_init.part.0>:
 800d470:	b510      	push	{r4, lr}
 800d472:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <global_stdio_init.part.0+0x30>)
 800d474:	4c0b      	ldr	r4, [pc, #44]	@ (800d4a4 <global_stdio_init.part.0+0x34>)
 800d476:	4a0c      	ldr	r2, [pc, #48]	@ (800d4a8 <global_stdio_init.part.0+0x38>)
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	4620      	mov	r0, r4
 800d47c:	2200      	movs	r2, #0
 800d47e:	2104      	movs	r1, #4
 800d480:	f7ff ff94 	bl	800d3ac <std>
 800d484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d488:	2201      	movs	r2, #1
 800d48a:	2109      	movs	r1, #9
 800d48c:	f7ff ff8e 	bl	800d3ac <std>
 800d490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d494:	2202      	movs	r2, #2
 800d496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d49a:	2112      	movs	r1, #18
 800d49c:	f7ff bf86 	b.w	800d3ac <std>
 800d4a0:	20003a9c 	.word	0x20003a9c
 800d4a4:	20003964 	.word	0x20003964
 800d4a8:	0800d419 	.word	0x0800d419

0800d4ac <__sfp_lock_acquire>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	@ (800d4b4 <__sfp_lock_acquire+0x8>)
 800d4ae:	f000 b9b2 	b.w	800d816 <__retarget_lock_acquire_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	20003aa5 	.word	0x20003aa5

0800d4b8 <__sfp_lock_release>:
 800d4b8:	4801      	ldr	r0, [pc, #4]	@ (800d4c0 <__sfp_lock_release+0x8>)
 800d4ba:	f000 b9ad 	b.w	800d818 <__retarget_lock_release_recursive>
 800d4be:	bf00      	nop
 800d4c0:	20003aa5 	.word	0x20003aa5

0800d4c4 <__sinit>:
 800d4c4:	b510      	push	{r4, lr}
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	f7ff fff0 	bl	800d4ac <__sfp_lock_acquire>
 800d4cc:	6a23      	ldr	r3, [r4, #32]
 800d4ce:	b11b      	cbz	r3, 800d4d8 <__sinit+0x14>
 800d4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4d4:	f7ff bff0 	b.w	800d4b8 <__sfp_lock_release>
 800d4d8:	4b04      	ldr	r3, [pc, #16]	@ (800d4ec <__sinit+0x28>)
 800d4da:	6223      	str	r3, [r4, #32]
 800d4dc:	4b04      	ldr	r3, [pc, #16]	@ (800d4f0 <__sinit+0x2c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f5      	bne.n	800d4d0 <__sinit+0xc>
 800d4e4:	f7ff ffc4 	bl	800d470 <global_stdio_init.part.0>
 800d4e8:	e7f2      	b.n	800d4d0 <__sinit+0xc>
 800d4ea:	bf00      	nop
 800d4ec:	0800d431 	.word	0x0800d431
 800d4f0:	20003a9c 	.word	0x20003a9c

0800d4f4 <_fwalk_sglue>:
 800d4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	4688      	mov	r8, r1
 800d4fc:	4614      	mov	r4, r2
 800d4fe:	2600      	movs	r6, #0
 800d500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d504:	f1b9 0901 	subs.w	r9, r9, #1
 800d508:	d505      	bpl.n	800d516 <_fwalk_sglue+0x22>
 800d50a:	6824      	ldr	r4, [r4, #0]
 800d50c:	2c00      	cmp	r4, #0
 800d50e:	d1f7      	bne.n	800d500 <_fwalk_sglue+0xc>
 800d510:	4630      	mov	r0, r6
 800d512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d907      	bls.n	800d52c <_fwalk_sglue+0x38>
 800d51c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d520:	3301      	adds	r3, #1
 800d522:	d003      	beq.n	800d52c <_fwalk_sglue+0x38>
 800d524:	4629      	mov	r1, r5
 800d526:	4638      	mov	r0, r7
 800d528:	47c0      	blx	r8
 800d52a:	4306      	orrs	r6, r0
 800d52c:	3568      	adds	r5, #104	@ 0x68
 800d52e:	e7e9      	b.n	800d504 <_fwalk_sglue+0x10>

0800d530 <siprintf>:
 800d530:	b40e      	push	{r1, r2, r3}
 800d532:	b500      	push	{lr}
 800d534:	b09c      	sub	sp, #112	@ 0x70
 800d536:	ab1d      	add	r3, sp, #116	@ 0x74
 800d538:	9002      	str	r0, [sp, #8]
 800d53a:	9006      	str	r0, [sp, #24]
 800d53c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d540:	4809      	ldr	r0, [pc, #36]	@ (800d568 <siprintf+0x38>)
 800d542:	9107      	str	r1, [sp, #28]
 800d544:	9104      	str	r1, [sp, #16]
 800d546:	4909      	ldr	r1, [pc, #36]	@ (800d56c <siprintf+0x3c>)
 800d548:	f853 2b04 	ldr.w	r2, [r3], #4
 800d54c:	9105      	str	r1, [sp, #20]
 800d54e:	6800      	ldr	r0, [r0, #0]
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	a902      	add	r1, sp, #8
 800d554:	f001 f956 	bl	800e804 <_svfiprintf_r>
 800d558:	9b02      	ldr	r3, [sp, #8]
 800d55a:	2200      	movs	r2, #0
 800d55c:	701a      	strb	r2, [r3, #0]
 800d55e:	b01c      	add	sp, #112	@ 0x70
 800d560:	f85d eb04 	ldr.w	lr, [sp], #4
 800d564:	b003      	add	sp, #12
 800d566:	4770      	bx	lr
 800d568:	20000234 	.word	0x20000234
 800d56c:	ffff0208 	.word	0xffff0208

0800d570 <siscanf>:
 800d570:	b40e      	push	{r1, r2, r3}
 800d572:	b530      	push	{r4, r5, lr}
 800d574:	b09c      	sub	sp, #112	@ 0x70
 800d576:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d578:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d57c:	f854 5b04 	ldr.w	r5, [r4], #4
 800d580:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d584:	9002      	str	r0, [sp, #8]
 800d586:	9006      	str	r0, [sp, #24]
 800d588:	f7f2 fe2a 	bl	80001e0 <strlen>
 800d58c:	4b0b      	ldr	r3, [pc, #44]	@ (800d5bc <siscanf+0x4c>)
 800d58e:	9003      	str	r0, [sp, #12]
 800d590:	9007      	str	r0, [sp, #28]
 800d592:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d594:	480a      	ldr	r0, [pc, #40]	@ (800d5c0 <siscanf+0x50>)
 800d596:	9401      	str	r4, [sp, #4]
 800d598:	2300      	movs	r3, #0
 800d59a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d59c:	9314      	str	r3, [sp, #80]	@ 0x50
 800d59e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d5a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d5a6:	462a      	mov	r2, r5
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	a902      	add	r1, sp, #8
 800d5ac:	6800      	ldr	r0, [r0, #0]
 800d5ae:	f001 fa7d 	bl	800eaac <__ssvfiscanf_r>
 800d5b2:	b01c      	add	sp, #112	@ 0x70
 800d5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5b8:	b003      	add	sp, #12
 800d5ba:	4770      	bx	lr
 800d5bc:	0800d5e7 	.word	0x0800d5e7
 800d5c0:	20000234 	.word	0x20000234

0800d5c4 <__sread>:
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5cc:	f000 f8d4 	bl	800d778 <_read_r>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	bfab      	itete	ge
 800d5d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5d8:	181b      	addge	r3, r3, r0
 800d5da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5de:	bfac      	ite	ge
 800d5e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5e2:	81a3      	strhlt	r3, [r4, #12]
 800d5e4:	bd10      	pop	{r4, pc}

0800d5e6 <__seofread>:
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	4770      	bx	lr

0800d5ea <__swrite>:
 800d5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	461f      	mov	r7, r3
 800d5f0:	898b      	ldrh	r3, [r1, #12]
 800d5f2:	05db      	lsls	r3, r3, #23
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	4616      	mov	r6, r2
 800d5fa:	d505      	bpl.n	800d608 <__swrite+0x1e>
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	2302      	movs	r3, #2
 800d602:	2200      	movs	r2, #0
 800d604:	f000 f8a6 	bl	800d754 <_lseek_r>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d60e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d612:	81a3      	strh	r3, [r4, #12]
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	4628      	mov	r0, r5
 800d61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61e:	f000 b8bd 	b.w	800d79c <_write_r>

0800d622 <__sseek>:
 800d622:	b510      	push	{r4, lr}
 800d624:	460c      	mov	r4, r1
 800d626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62a:	f000 f893 	bl	800d754 <_lseek_r>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	bf15      	itete	ne
 800d634:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d63a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d63e:	81a3      	strheq	r3, [r4, #12]
 800d640:	bf18      	it	ne
 800d642:	81a3      	strhne	r3, [r4, #12]
 800d644:	bd10      	pop	{r4, pc}

0800d646 <__sclose>:
 800d646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64a:	f000 b873 	b.w	800d734 <_close_r>

0800d64e <_vsniprintf_r>:
 800d64e:	b530      	push	{r4, r5, lr}
 800d650:	4614      	mov	r4, r2
 800d652:	2c00      	cmp	r4, #0
 800d654:	b09b      	sub	sp, #108	@ 0x6c
 800d656:	4605      	mov	r5, r0
 800d658:	461a      	mov	r2, r3
 800d65a:	da05      	bge.n	800d668 <_vsniprintf_r+0x1a>
 800d65c:	238b      	movs	r3, #139	@ 0x8b
 800d65e:	6003      	str	r3, [r0, #0]
 800d660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d664:	b01b      	add	sp, #108	@ 0x6c
 800d666:	bd30      	pop	{r4, r5, pc}
 800d668:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d66c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d670:	bf14      	ite	ne
 800d672:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d676:	4623      	moveq	r3, r4
 800d678:	9302      	str	r3, [sp, #8]
 800d67a:	9305      	str	r3, [sp, #20]
 800d67c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d680:	9100      	str	r1, [sp, #0]
 800d682:	9104      	str	r1, [sp, #16]
 800d684:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d688:	4669      	mov	r1, sp
 800d68a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d68c:	f001 f8ba 	bl	800e804 <_svfiprintf_r>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	bfbc      	itt	lt
 800d694:	238b      	movlt	r3, #139	@ 0x8b
 800d696:	602b      	strlt	r3, [r5, #0]
 800d698:	2c00      	cmp	r4, #0
 800d69a:	d0e3      	beq.n	800d664 <_vsniprintf_r+0x16>
 800d69c:	9b00      	ldr	r3, [sp, #0]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	701a      	strb	r2, [r3, #0]
 800d6a2:	e7df      	b.n	800d664 <_vsniprintf_r+0x16>

0800d6a4 <vsniprintf>:
 800d6a4:	b507      	push	{r0, r1, r2, lr}
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	460a      	mov	r2, r1
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	4803      	ldr	r0, [pc, #12]	@ (800d6bc <vsniprintf+0x18>)
 800d6b0:	6800      	ldr	r0, [r0, #0]
 800d6b2:	f7ff ffcc 	bl	800d64e <_vsniprintf_r>
 800d6b6:	b003      	add	sp, #12
 800d6b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6bc:	20000234 	.word	0x20000234

0800d6c0 <memcmp>:
 800d6c0:	b510      	push	{r4, lr}
 800d6c2:	3901      	subs	r1, #1
 800d6c4:	4402      	add	r2, r0
 800d6c6:	4290      	cmp	r0, r2
 800d6c8:	d101      	bne.n	800d6ce <memcmp+0xe>
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	e005      	b.n	800d6da <memcmp+0x1a>
 800d6ce:	7803      	ldrb	r3, [r0, #0]
 800d6d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	d001      	beq.n	800d6dc <memcmp+0x1c>
 800d6d8:	1b18      	subs	r0, r3, r4
 800d6da:	bd10      	pop	{r4, pc}
 800d6dc:	3001      	adds	r0, #1
 800d6de:	e7f2      	b.n	800d6c6 <memcmp+0x6>

0800d6e0 <memset>:
 800d6e0:	4402      	add	r2, r0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d100      	bne.n	800d6ea <memset+0xa>
 800d6e8:	4770      	bx	lr
 800d6ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ee:	e7f9      	b.n	800d6e4 <memset+0x4>

0800d6f0 <strcat>:
 800d6f0:	b510      	push	{r4, lr}
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	7814      	ldrb	r4, [r2, #0]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	3201      	adds	r2, #1
 800d6fa:	2c00      	cmp	r4, #0
 800d6fc:	d1fa      	bne.n	800d6f4 <strcat+0x4>
 800d6fe:	3b01      	subs	r3, #1
 800d700:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d704:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d708:	2a00      	cmp	r2, #0
 800d70a:	d1f9      	bne.n	800d700 <strcat+0x10>
 800d70c:	bd10      	pop	{r4, pc}

0800d70e <strncpy>:
 800d70e:	b510      	push	{r4, lr}
 800d710:	3901      	subs	r1, #1
 800d712:	4603      	mov	r3, r0
 800d714:	b132      	cbz	r2, 800d724 <strncpy+0x16>
 800d716:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d71a:	f803 4b01 	strb.w	r4, [r3], #1
 800d71e:	3a01      	subs	r2, #1
 800d720:	2c00      	cmp	r4, #0
 800d722:	d1f7      	bne.n	800d714 <strncpy+0x6>
 800d724:	441a      	add	r2, r3
 800d726:	2100      	movs	r1, #0
 800d728:	4293      	cmp	r3, r2
 800d72a:	d100      	bne.n	800d72e <strncpy+0x20>
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	f803 1b01 	strb.w	r1, [r3], #1
 800d732:	e7f9      	b.n	800d728 <strncpy+0x1a>

0800d734 <_close_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	4d06      	ldr	r5, [pc, #24]	@ (800d750 <_close_r+0x1c>)
 800d738:	2300      	movs	r3, #0
 800d73a:	4604      	mov	r4, r0
 800d73c:	4608      	mov	r0, r1
 800d73e:	602b      	str	r3, [r5, #0]
 800d740:	f7f6 f936 	bl	80039b0 <_close>
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d102      	bne.n	800d74e <_close_r+0x1a>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	b103      	cbz	r3, 800d74e <_close_r+0x1a>
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	20003aa0 	.word	0x20003aa0

0800d754 <_lseek_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d07      	ldr	r5, [pc, #28]	@ (800d774 <_lseek_r+0x20>)
 800d758:	4604      	mov	r4, r0
 800d75a:	4608      	mov	r0, r1
 800d75c:	4611      	mov	r1, r2
 800d75e:	2200      	movs	r2, #0
 800d760:	602a      	str	r2, [r5, #0]
 800d762:	461a      	mov	r2, r3
 800d764:	f7f6 f94b 	bl	80039fe <_lseek>
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d102      	bne.n	800d772 <_lseek_r+0x1e>
 800d76c:	682b      	ldr	r3, [r5, #0]
 800d76e:	b103      	cbz	r3, 800d772 <_lseek_r+0x1e>
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	bd38      	pop	{r3, r4, r5, pc}
 800d774:	20003aa0 	.word	0x20003aa0

0800d778 <_read_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	4d07      	ldr	r5, [pc, #28]	@ (800d798 <_read_r+0x20>)
 800d77c:	4604      	mov	r4, r0
 800d77e:	4608      	mov	r0, r1
 800d780:	4611      	mov	r1, r2
 800d782:	2200      	movs	r2, #0
 800d784:	602a      	str	r2, [r5, #0]
 800d786:	461a      	mov	r2, r3
 800d788:	f7f6 f8d9 	bl	800393e <_read>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d102      	bne.n	800d796 <_read_r+0x1e>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	b103      	cbz	r3, 800d796 <_read_r+0x1e>
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	bd38      	pop	{r3, r4, r5, pc}
 800d798:	20003aa0 	.word	0x20003aa0

0800d79c <_write_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4d07      	ldr	r5, [pc, #28]	@ (800d7bc <_write_r+0x20>)
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	4608      	mov	r0, r1
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	602a      	str	r2, [r5, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	f7f6 f8e4 	bl	8003978 <_write>
 800d7b0:	1c43      	adds	r3, r0, #1
 800d7b2:	d102      	bne.n	800d7ba <_write_r+0x1e>
 800d7b4:	682b      	ldr	r3, [r5, #0]
 800d7b6:	b103      	cbz	r3, 800d7ba <_write_r+0x1e>
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	20003aa0 	.word	0x20003aa0

0800d7c0 <__errno>:
 800d7c0:	4b01      	ldr	r3, [pc, #4]	@ (800d7c8 <__errno+0x8>)
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	20000234 	.word	0x20000234

0800d7cc <__libc_init_array>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	4d0d      	ldr	r5, [pc, #52]	@ (800d804 <__libc_init_array+0x38>)
 800d7d0:	4c0d      	ldr	r4, [pc, #52]	@ (800d808 <__libc_init_array+0x3c>)
 800d7d2:	1b64      	subs	r4, r4, r5
 800d7d4:	10a4      	asrs	r4, r4, #2
 800d7d6:	2600      	movs	r6, #0
 800d7d8:	42a6      	cmp	r6, r4
 800d7da:	d109      	bne.n	800d7f0 <__libc_init_array+0x24>
 800d7dc:	4d0b      	ldr	r5, [pc, #44]	@ (800d80c <__libc_init_array+0x40>)
 800d7de:	4c0c      	ldr	r4, [pc, #48]	@ (800d810 <__libc_init_array+0x44>)
 800d7e0:	f003 fabc 	bl	8010d5c <_init>
 800d7e4:	1b64      	subs	r4, r4, r5
 800d7e6:	10a4      	asrs	r4, r4, #2
 800d7e8:	2600      	movs	r6, #0
 800d7ea:	42a6      	cmp	r6, r4
 800d7ec:	d105      	bne.n	800d7fa <__libc_init_array+0x2e>
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}
 800d7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7f4:	4798      	blx	r3
 800d7f6:	3601      	adds	r6, #1
 800d7f8:	e7ee      	b.n	800d7d8 <__libc_init_array+0xc>
 800d7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7fe:	4798      	blx	r3
 800d800:	3601      	adds	r6, #1
 800d802:	e7f2      	b.n	800d7ea <__libc_init_array+0x1e>
 800d804:	0801241c 	.word	0x0801241c
 800d808:	0801241c 	.word	0x0801241c
 800d80c:	0801241c 	.word	0x0801241c
 800d810:	08012420 	.word	0x08012420

0800d814 <__retarget_lock_init_recursive>:
 800d814:	4770      	bx	lr

0800d816 <__retarget_lock_acquire_recursive>:
 800d816:	4770      	bx	lr

0800d818 <__retarget_lock_release_recursive>:
 800d818:	4770      	bx	lr

0800d81a <strcpy>:
 800d81a:	4603      	mov	r3, r0
 800d81c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d820:	f803 2b01 	strb.w	r2, [r3], #1
 800d824:	2a00      	cmp	r2, #0
 800d826:	d1f9      	bne.n	800d81c <strcpy+0x2>
 800d828:	4770      	bx	lr

0800d82a <memcpy>:
 800d82a:	440a      	add	r2, r1
 800d82c:	4291      	cmp	r1, r2
 800d82e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d832:	d100      	bne.n	800d836 <memcpy+0xc>
 800d834:	4770      	bx	lr
 800d836:	b510      	push	{r4, lr}
 800d838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d840:	4291      	cmp	r1, r2
 800d842:	d1f9      	bne.n	800d838 <memcpy+0xe>
 800d844:	bd10      	pop	{r4, pc}
	...

0800d848 <nanf>:
 800d848:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d850 <nanf+0x8>
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	7fc00000 	.word	0x7fc00000

0800d854 <_free_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4605      	mov	r5, r0
 800d858:	2900      	cmp	r1, #0
 800d85a:	d041      	beq.n	800d8e0 <_free_r+0x8c>
 800d85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d860:	1f0c      	subs	r4, r1, #4
 800d862:	2b00      	cmp	r3, #0
 800d864:	bfb8      	it	lt
 800d866:	18e4      	addlt	r4, r4, r3
 800d868:	f000 f8e0 	bl	800da2c <__malloc_lock>
 800d86c:	4a1d      	ldr	r2, [pc, #116]	@ (800d8e4 <_free_r+0x90>)
 800d86e:	6813      	ldr	r3, [r2, #0]
 800d870:	b933      	cbnz	r3, 800d880 <_free_r+0x2c>
 800d872:	6063      	str	r3, [r4, #4]
 800d874:	6014      	str	r4, [r2, #0]
 800d876:	4628      	mov	r0, r5
 800d878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d87c:	f000 b8dc 	b.w	800da38 <__malloc_unlock>
 800d880:	42a3      	cmp	r3, r4
 800d882:	d908      	bls.n	800d896 <_free_r+0x42>
 800d884:	6820      	ldr	r0, [r4, #0]
 800d886:	1821      	adds	r1, r4, r0
 800d888:	428b      	cmp	r3, r1
 800d88a:	bf01      	itttt	eq
 800d88c:	6819      	ldreq	r1, [r3, #0]
 800d88e:	685b      	ldreq	r3, [r3, #4]
 800d890:	1809      	addeq	r1, r1, r0
 800d892:	6021      	streq	r1, [r4, #0]
 800d894:	e7ed      	b.n	800d872 <_free_r+0x1e>
 800d896:	461a      	mov	r2, r3
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	b10b      	cbz	r3, 800d8a0 <_free_r+0x4c>
 800d89c:	42a3      	cmp	r3, r4
 800d89e:	d9fa      	bls.n	800d896 <_free_r+0x42>
 800d8a0:	6811      	ldr	r1, [r2, #0]
 800d8a2:	1850      	adds	r0, r2, r1
 800d8a4:	42a0      	cmp	r0, r4
 800d8a6:	d10b      	bne.n	800d8c0 <_free_r+0x6c>
 800d8a8:	6820      	ldr	r0, [r4, #0]
 800d8aa:	4401      	add	r1, r0
 800d8ac:	1850      	adds	r0, r2, r1
 800d8ae:	4283      	cmp	r3, r0
 800d8b0:	6011      	str	r1, [r2, #0]
 800d8b2:	d1e0      	bne.n	800d876 <_free_r+0x22>
 800d8b4:	6818      	ldr	r0, [r3, #0]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	6053      	str	r3, [r2, #4]
 800d8ba:	4408      	add	r0, r1
 800d8bc:	6010      	str	r0, [r2, #0]
 800d8be:	e7da      	b.n	800d876 <_free_r+0x22>
 800d8c0:	d902      	bls.n	800d8c8 <_free_r+0x74>
 800d8c2:	230c      	movs	r3, #12
 800d8c4:	602b      	str	r3, [r5, #0]
 800d8c6:	e7d6      	b.n	800d876 <_free_r+0x22>
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	1821      	adds	r1, r4, r0
 800d8cc:	428b      	cmp	r3, r1
 800d8ce:	bf04      	itt	eq
 800d8d0:	6819      	ldreq	r1, [r3, #0]
 800d8d2:	685b      	ldreq	r3, [r3, #4]
 800d8d4:	6063      	str	r3, [r4, #4]
 800d8d6:	bf04      	itt	eq
 800d8d8:	1809      	addeq	r1, r1, r0
 800d8da:	6021      	streq	r1, [r4, #0]
 800d8dc:	6054      	str	r4, [r2, #4]
 800d8de:	e7ca      	b.n	800d876 <_free_r+0x22>
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20003aac 	.word	0x20003aac

0800d8e8 <sbrk_aligned>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	4e0f      	ldr	r6, [pc, #60]	@ (800d928 <sbrk_aligned+0x40>)
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	6831      	ldr	r1, [r6, #0]
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	b911      	cbnz	r1, 800d8fa <sbrk_aligned+0x12>
 800d8f4:	f002 f84c 	bl	800f990 <_sbrk_r>
 800d8f8:	6030      	str	r0, [r6, #0]
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f002 f847 	bl	800f990 <_sbrk_r>
 800d902:	1c43      	adds	r3, r0, #1
 800d904:	d103      	bne.n	800d90e <sbrk_aligned+0x26>
 800d906:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d90a:	4620      	mov	r0, r4
 800d90c:	bd70      	pop	{r4, r5, r6, pc}
 800d90e:	1cc4      	adds	r4, r0, #3
 800d910:	f024 0403 	bic.w	r4, r4, #3
 800d914:	42a0      	cmp	r0, r4
 800d916:	d0f8      	beq.n	800d90a <sbrk_aligned+0x22>
 800d918:	1a21      	subs	r1, r4, r0
 800d91a:	4628      	mov	r0, r5
 800d91c:	f002 f838 	bl	800f990 <_sbrk_r>
 800d920:	3001      	adds	r0, #1
 800d922:	d1f2      	bne.n	800d90a <sbrk_aligned+0x22>
 800d924:	e7ef      	b.n	800d906 <sbrk_aligned+0x1e>
 800d926:	bf00      	nop
 800d928:	20003aa8 	.word	0x20003aa8

0800d92c <_malloc_r>:
 800d92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d930:	1ccd      	adds	r5, r1, #3
 800d932:	f025 0503 	bic.w	r5, r5, #3
 800d936:	3508      	adds	r5, #8
 800d938:	2d0c      	cmp	r5, #12
 800d93a:	bf38      	it	cc
 800d93c:	250c      	movcc	r5, #12
 800d93e:	2d00      	cmp	r5, #0
 800d940:	4606      	mov	r6, r0
 800d942:	db01      	blt.n	800d948 <_malloc_r+0x1c>
 800d944:	42a9      	cmp	r1, r5
 800d946:	d904      	bls.n	800d952 <_malloc_r+0x26>
 800d948:	230c      	movs	r3, #12
 800d94a:	6033      	str	r3, [r6, #0]
 800d94c:	2000      	movs	r0, #0
 800d94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da28 <_malloc_r+0xfc>
 800d956:	f000 f869 	bl	800da2c <__malloc_lock>
 800d95a:	f8d8 3000 	ldr.w	r3, [r8]
 800d95e:	461c      	mov	r4, r3
 800d960:	bb44      	cbnz	r4, 800d9b4 <_malloc_r+0x88>
 800d962:	4629      	mov	r1, r5
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff ffbf 	bl	800d8e8 <sbrk_aligned>
 800d96a:	1c43      	adds	r3, r0, #1
 800d96c:	4604      	mov	r4, r0
 800d96e:	d158      	bne.n	800da22 <_malloc_r+0xf6>
 800d970:	f8d8 4000 	ldr.w	r4, [r8]
 800d974:	4627      	mov	r7, r4
 800d976:	2f00      	cmp	r7, #0
 800d978:	d143      	bne.n	800da02 <_malloc_r+0xd6>
 800d97a:	2c00      	cmp	r4, #0
 800d97c:	d04b      	beq.n	800da16 <_malloc_r+0xea>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	4639      	mov	r1, r7
 800d982:	4630      	mov	r0, r6
 800d984:	eb04 0903 	add.w	r9, r4, r3
 800d988:	f002 f802 	bl	800f990 <_sbrk_r>
 800d98c:	4581      	cmp	r9, r0
 800d98e:	d142      	bne.n	800da16 <_malloc_r+0xea>
 800d990:	6821      	ldr	r1, [r4, #0]
 800d992:	1a6d      	subs	r5, r5, r1
 800d994:	4629      	mov	r1, r5
 800d996:	4630      	mov	r0, r6
 800d998:	f7ff ffa6 	bl	800d8e8 <sbrk_aligned>
 800d99c:	3001      	adds	r0, #1
 800d99e:	d03a      	beq.n	800da16 <_malloc_r+0xea>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	442b      	add	r3, r5
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	bb62      	cbnz	r2, 800da08 <_malloc_r+0xdc>
 800d9ae:	f8c8 7000 	str.w	r7, [r8]
 800d9b2:	e00f      	b.n	800d9d4 <_malloc_r+0xa8>
 800d9b4:	6822      	ldr	r2, [r4, #0]
 800d9b6:	1b52      	subs	r2, r2, r5
 800d9b8:	d420      	bmi.n	800d9fc <_malloc_r+0xd0>
 800d9ba:	2a0b      	cmp	r2, #11
 800d9bc:	d917      	bls.n	800d9ee <_malloc_r+0xc2>
 800d9be:	1961      	adds	r1, r4, r5
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	6025      	str	r5, [r4, #0]
 800d9c4:	bf18      	it	ne
 800d9c6:	6059      	strne	r1, [r3, #4]
 800d9c8:	6863      	ldr	r3, [r4, #4]
 800d9ca:	bf08      	it	eq
 800d9cc:	f8c8 1000 	streq.w	r1, [r8]
 800d9d0:	5162      	str	r2, [r4, r5]
 800d9d2:	604b      	str	r3, [r1, #4]
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f000 f82f 	bl	800da38 <__malloc_unlock>
 800d9da:	f104 000b 	add.w	r0, r4, #11
 800d9de:	1d23      	adds	r3, r4, #4
 800d9e0:	f020 0007 	bic.w	r0, r0, #7
 800d9e4:	1ac2      	subs	r2, r0, r3
 800d9e6:	bf1c      	itt	ne
 800d9e8:	1a1b      	subne	r3, r3, r0
 800d9ea:	50a3      	strne	r3, [r4, r2]
 800d9ec:	e7af      	b.n	800d94e <_malloc_r+0x22>
 800d9ee:	6862      	ldr	r2, [r4, #4]
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	bf0c      	ite	eq
 800d9f4:	f8c8 2000 	streq.w	r2, [r8]
 800d9f8:	605a      	strne	r2, [r3, #4]
 800d9fa:	e7eb      	b.n	800d9d4 <_malloc_r+0xa8>
 800d9fc:	4623      	mov	r3, r4
 800d9fe:	6864      	ldr	r4, [r4, #4]
 800da00:	e7ae      	b.n	800d960 <_malloc_r+0x34>
 800da02:	463c      	mov	r4, r7
 800da04:	687f      	ldr	r7, [r7, #4]
 800da06:	e7b6      	b.n	800d976 <_malloc_r+0x4a>
 800da08:	461a      	mov	r2, r3
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	42a3      	cmp	r3, r4
 800da0e:	d1fb      	bne.n	800da08 <_malloc_r+0xdc>
 800da10:	2300      	movs	r3, #0
 800da12:	6053      	str	r3, [r2, #4]
 800da14:	e7de      	b.n	800d9d4 <_malloc_r+0xa8>
 800da16:	230c      	movs	r3, #12
 800da18:	6033      	str	r3, [r6, #0]
 800da1a:	4630      	mov	r0, r6
 800da1c:	f000 f80c 	bl	800da38 <__malloc_unlock>
 800da20:	e794      	b.n	800d94c <_malloc_r+0x20>
 800da22:	6005      	str	r5, [r0, #0]
 800da24:	e7d6      	b.n	800d9d4 <_malloc_r+0xa8>
 800da26:	bf00      	nop
 800da28:	20003aac 	.word	0x20003aac

0800da2c <__malloc_lock>:
 800da2c:	4801      	ldr	r0, [pc, #4]	@ (800da34 <__malloc_lock+0x8>)
 800da2e:	f7ff bef2 	b.w	800d816 <__retarget_lock_acquire_recursive>
 800da32:	bf00      	nop
 800da34:	20003aa4 	.word	0x20003aa4

0800da38 <__malloc_unlock>:
 800da38:	4801      	ldr	r0, [pc, #4]	@ (800da40 <__malloc_unlock+0x8>)
 800da3a:	f7ff beed 	b.w	800d818 <__retarget_lock_release_recursive>
 800da3e:	bf00      	nop
 800da40:	20003aa4 	.word	0x20003aa4

0800da44 <sulp>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	4604      	mov	r4, r0
 800da48:	460d      	mov	r5, r1
 800da4a:	ec45 4b10 	vmov	d0, r4, r5
 800da4e:	4616      	mov	r6, r2
 800da50:	f002 fe76 	bl	8010740 <__ulp>
 800da54:	ec51 0b10 	vmov	r0, r1, d0
 800da58:	b17e      	cbz	r6, 800da7a <sulp+0x36>
 800da5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da62:	2b00      	cmp	r3, #0
 800da64:	dd09      	ble.n	800da7a <sulp+0x36>
 800da66:	051b      	lsls	r3, r3, #20
 800da68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da6c:	2400      	movs	r4, #0
 800da6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800da72:	4622      	mov	r2, r4
 800da74:	462b      	mov	r3, r5
 800da76:	f7f2 fdc7 	bl	8000608 <__aeabi_dmul>
 800da7a:	ec41 0b10 	vmov	d0, r0, r1
 800da7e:	bd70      	pop	{r4, r5, r6, pc}

0800da80 <_strtod_l>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	b09f      	sub	sp, #124	@ 0x7c
 800da86:	460c      	mov	r4, r1
 800da88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800da8a:	2200      	movs	r2, #0
 800da8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800da8e:	9005      	str	r0, [sp, #20]
 800da90:	f04f 0a00 	mov.w	sl, #0
 800da94:	f04f 0b00 	mov.w	fp, #0
 800da98:	460a      	mov	r2, r1
 800da9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da9c:	7811      	ldrb	r1, [r2, #0]
 800da9e:	292b      	cmp	r1, #43	@ 0x2b
 800daa0:	d04a      	beq.n	800db38 <_strtod_l+0xb8>
 800daa2:	d838      	bhi.n	800db16 <_strtod_l+0x96>
 800daa4:	290d      	cmp	r1, #13
 800daa6:	d832      	bhi.n	800db0e <_strtod_l+0x8e>
 800daa8:	2908      	cmp	r1, #8
 800daaa:	d832      	bhi.n	800db12 <_strtod_l+0x92>
 800daac:	2900      	cmp	r1, #0
 800daae:	d03b      	beq.n	800db28 <_strtod_l+0xa8>
 800dab0:	2200      	movs	r2, #0
 800dab2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dab4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dab6:	782a      	ldrb	r2, [r5, #0]
 800dab8:	2a30      	cmp	r2, #48	@ 0x30
 800daba:	f040 80b3 	bne.w	800dc24 <_strtod_l+0x1a4>
 800dabe:	786a      	ldrb	r2, [r5, #1]
 800dac0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dac4:	2a58      	cmp	r2, #88	@ 0x58
 800dac6:	d16e      	bne.n	800dba6 <_strtod_l+0x126>
 800dac8:	9302      	str	r3, [sp, #8]
 800daca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	ab1a      	add	r3, sp, #104	@ 0x68
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	4a8e      	ldr	r2, [pc, #568]	@ (800dd0c <_strtod_l+0x28c>)
 800dad4:	9805      	ldr	r0, [sp, #20]
 800dad6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dad8:	a919      	add	r1, sp, #100	@ 0x64
 800dada:	f001 ffd9 	bl	800fa90 <__gethex>
 800dade:	f010 060f 	ands.w	r6, r0, #15
 800dae2:	4604      	mov	r4, r0
 800dae4:	d005      	beq.n	800daf2 <_strtod_l+0x72>
 800dae6:	2e06      	cmp	r6, #6
 800dae8:	d128      	bne.n	800db3c <_strtod_l+0xbc>
 800daea:	3501      	adds	r5, #1
 800daec:	2300      	movs	r3, #0
 800daee:	9519      	str	r5, [sp, #100]	@ 0x64
 800daf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f040 858e 	bne.w	800e616 <_strtod_l+0xb96>
 800dafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dafc:	b1cb      	cbz	r3, 800db32 <_strtod_l+0xb2>
 800dafe:	4652      	mov	r2, sl
 800db00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800db04:	ec43 2b10 	vmov	d0, r2, r3
 800db08:	b01f      	add	sp, #124	@ 0x7c
 800db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0e:	2920      	cmp	r1, #32
 800db10:	d1ce      	bne.n	800dab0 <_strtod_l+0x30>
 800db12:	3201      	adds	r2, #1
 800db14:	e7c1      	b.n	800da9a <_strtod_l+0x1a>
 800db16:	292d      	cmp	r1, #45	@ 0x2d
 800db18:	d1ca      	bne.n	800dab0 <_strtod_l+0x30>
 800db1a:	2101      	movs	r1, #1
 800db1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800db1e:	1c51      	adds	r1, r2, #1
 800db20:	9119      	str	r1, [sp, #100]	@ 0x64
 800db22:	7852      	ldrb	r2, [r2, #1]
 800db24:	2a00      	cmp	r2, #0
 800db26:	d1c5      	bne.n	800dab4 <_strtod_l+0x34>
 800db28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f040 8570 	bne.w	800e612 <_strtod_l+0xb92>
 800db32:	4652      	mov	r2, sl
 800db34:	465b      	mov	r3, fp
 800db36:	e7e5      	b.n	800db04 <_strtod_l+0x84>
 800db38:	2100      	movs	r1, #0
 800db3a:	e7ef      	b.n	800db1c <_strtod_l+0x9c>
 800db3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db3e:	b13a      	cbz	r2, 800db50 <_strtod_l+0xd0>
 800db40:	2135      	movs	r1, #53	@ 0x35
 800db42:	a81c      	add	r0, sp, #112	@ 0x70
 800db44:	f002 fef6 	bl	8010934 <__copybits>
 800db48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db4a:	9805      	ldr	r0, [sp, #20]
 800db4c:	f002 fac4 	bl	80100d8 <_Bfree>
 800db50:	3e01      	subs	r6, #1
 800db52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db54:	2e04      	cmp	r6, #4
 800db56:	d806      	bhi.n	800db66 <_strtod_l+0xe6>
 800db58:	e8df f006 	tbb	[pc, r6]
 800db5c:	201d0314 	.word	0x201d0314
 800db60:	14          	.byte	0x14
 800db61:	00          	.byte	0x00
 800db62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db66:	05e1      	lsls	r1, r4, #23
 800db68:	bf48      	it	mi
 800db6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db72:	0d1b      	lsrs	r3, r3, #20
 800db74:	051b      	lsls	r3, r3, #20
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1bb      	bne.n	800daf2 <_strtod_l+0x72>
 800db7a:	f7ff fe21 	bl	800d7c0 <__errno>
 800db7e:	2322      	movs	r3, #34	@ 0x22
 800db80:	6003      	str	r3, [r0, #0]
 800db82:	e7b6      	b.n	800daf2 <_strtod_l+0x72>
 800db84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800db88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db94:	e7e7      	b.n	800db66 <_strtod_l+0xe6>
 800db96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dd14 <_strtod_l+0x294>
 800db9a:	e7e4      	b.n	800db66 <_strtod_l+0xe6>
 800db9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dba0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dba4:	e7df      	b.n	800db66 <_strtod_l+0xe6>
 800dba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbac:	785b      	ldrb	r3, [r3, #1]
 800dbae:	2b30      	cmp	r3, #48	@ 0x30
 800dbb0:	d0f9      	beq.n	800dba6 <_strtod_l+0x126>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d09d      	beq.n	800daf2 <_strtod_l+0x72>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	9308      	str	r3, [sp, #32]
 800dbc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbc4:	461f      	mov	r7, r3
 800dbc6:	220a      	movs	r2, #10
 800dbc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dbca:	7805      	ldrb	r5, [r0, #0]
 800dbcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dbd0:	b2d9      	uxtb	r1, r3
 800dbd2:	2909      	cmp	r1, #9
 800dbd4:	d928      	bls.n	800dc28 <_strtod_l+0x1a8>
 800dbd6:	494e      	ldr	r1, [pc, #312]	@ (800dd10 <_strtod_l+0x290>)
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f001 fec7 	bl	800f96c <strncmp>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d032      	beq.n	800dc48 <_strtod_l+0x1c8>
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	462a      	mov	r2, r5
 800dbe6:	4681      	mov	r9, r0
 800dbe8:	463d      	mov	r5, r7
 800dbea:	4603      	mov	r3, r0
 800dbec:	2a65      	cmp	r2, #101	@ 0x65
 800dbee:	d001      	beq.n	800dbf4 <_strtod_l+0x174>
 800dbf0:	2a45      	cmp	r2, #69	@ 0x45
 800dbf2:	d114      	bne.n	800dc1e <_strtod_l+0x19e>
 800dbf4:	b91d      	cbnz	r5, 800dbfe <_strtod_l+0x17e>
 800dbf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbf8:	4302      	orrs	r2, r0
 800dbfa:	d095      	beq.n	800db28 <_strtod_l+0xa8>
 800dbfc:	2500      	movs	r5, #0
 800dbfe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dc00:	1c62      	adds	r2, r4, #1
 800dc02:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc04:	7862      	ldrb	r2, [r4, #1]
 800dc06:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc08:	d077      	beq.n	800dcfa <_strtod_l+0x27a>
 800dc0a:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc0c:	d07b      	beq.n	800dd06 <_strtod_l+0x286>
 800dc0e:	f04f 0c00 	mov.w	ip, #0
 800dc12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc16:	2909      	cmp	r1, #9
 800dc18:	f240 8082 	bls.w	800dd20 <_strtod_l+0x2a0>
 800dc1c:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc1e:	f04f 0800 	mov.w	r8, #0
 800dc22:	e0a2      	b.n	800dd6a <_strtod_l+0x2ea>
 800dc24:	2300      	movs	r3, #0
 800dc26:	e7c7      	b.n	800dbb8 <_strtod_l+0x138>
 800dc28:	2f08      	cmp	r7, #8
 800dc2a:	bfd5      	itete	le
 800dc2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dc2e:	9908      	ldrgt	r1, [sp, #32]
 800dc30:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc34:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc38:	f100 0001 	add.w	r0, r0, #1
 800dc3c:	bfd4      	ite	le
 800dc3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dc40:	9308      	strgt	r3, [sp, #32]
 800dc42:	3701      	adds	r7, #1
 800dc44:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc46:	e7bf      	b.n	800dbc8 <_strtod_l+0x148>
 800dc48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc4e:	785a      	ldrb	r2, [r3, #1]
 800dc50:	b37f      	cbz	r7, 800dcb2 <_strtod_l+0x232>
 800dc52:	4681      	mov	r9, r0
 800dc54:	463d      	mov	r5, r7
 800dc56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc5a:	2b09      	cmp	r3, #9
 800dc5c:	d912      	bls.n	800dc84 <_strtod_l+0x204>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e7c4      	b.n	800dbec <_strtod_l+0x16c>
 800dc62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc68:	785a      	ldrb	r2, [r3, #1]
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	2a30      	cmp	r2, #48	@ 0x30
 800dc6e:	d0f8      	beq.n	800dc62 <_strtod_l+0x1e2>
 800dc70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	f200 84d3 	bhi.w	800e620 <_strtod_l+0xba0>
 800dc7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc7e:	4681      	mov	r9, r0
 800dc80:	2000      	movs	r0, #0
 800dc82:	4605      	mov	r5, r0
 800dc84:	3a30      	subs	r2, #48	@ 0x30
 800dc86:	f100 0301 	add.w	r3, r0, #1
 800dc8a:	d02a      	beq.n	800dce2 <_strtod_l+0x262>
 800dc8c:	4499      	add	r9, r3
 800dc8e:	eb00 0c05 	add.w	ip, r0, r5
 800dc92:	462b      	mov	r3, r5
 800dc94:	210a      	movs	r1, #10
 800dc96:	4563      	cmp	r3, ip
 800dc98:	d10d      	bne.n	800dcb6 <_strtod_l+0x236>
 800dc9a:	1c69      	adds	r1, r5, #1
 800dc9c:	4401      	add	r1, r0
 800dc9e:	4428      	add	r0, r5
 800dca0:	2808      	cmp	r0, #8
 800dca2:	dc16      	bgt.n	800dcd2 <_strtod_l+0x252>
 800dca4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dca6:	230a      	movs	r3, #10
 800dca8:	fb03 2300 	mla	r3, r3, r0, r2
 800dcac:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e018      	b.n	800dce4 <_strtod_l+0x264>
 800dcb2:	4638      	mov	r0, r7
 800dcb4:	e7da      	b.n	800dc6c <_strtod_l+0x1ec>
 800dcb6:	2b08      	cmp	r3, #8
 800dcb8:	f103 0301 	add.w	r3, r3, #1
 800dcbc:	dc03      	bgt.n	800dcc6 <_strtod_l+0x246>
 800dcbe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dcc0:	434e      	muls	r6, r1
 800dcc2:	960a      	str	r6, [sp, #40]	@ 0x28
 800dcc4:	e7e7      	b.n	800dc96 <_strtod_l+0x216>
 800dcc6:	2b10      	cmp	r3, #16
 800dcc8:	bfde      	ittt	le
 800dcca:	9e08      	ldrle	r6, [sp, #32]
 800dccc:	434e      	mulle	r6, r1
 800dcce:	9608      	strle	r6, [sp, #32]
 800dcd0:	e7e1      	b.n	800dc96 <_strtod_l+0x216>
 800dcd2:	280f      	cmp	r0, #15
 800dcd4:	dceb      	bgt.n	800dcae <_strtod_l+0x22e>
 800dcd6:	9808      	ldr	r0, [sp, #32]
 800dcd8:	230a      	movs	r3, #10
 800dcda:	fb03 2300 	mla	r3, r3, r0, r2
 800dcde:	9308      	str	r3, [sp, #32]
 800dce0:	e7e5      	b.n	800dcae <_strtod_l+0x22e>
 800dce2:	4629      	mov	r1, r5
 800dce4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dce6:	1c50      	adds	r0, r2, #1
 800dce8:	9019      	str	r0, [sp, #100]	@ 0x64
 800dcea:	7852      	ldrb	r2, [r2, #1]
 800dcec:	4618      	mov	r0, r3
 800dcee:	460d      	mov	r5, r1
 800dcf0:	e7b1      	b.n	800dc56 <_strtod_l+0x1d6>
 800dcf2:	f04f 0900 	mov.w	r9, #0
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e77d      	b.n	800dbf6 <_strtod_l+0x176>
 800dcfa:	f04f 0c00 	mov.w	ip, #0
 800dcfe:	1ca2      	adds	r2, r4, #2
 800dd00:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd02:	78a2      	ldrb	r2, [r4, #2]
 800dd04:	e785      	b.n	800dc12 <_strtod_l+0x192>
 800dd06:	f04f 0c01 	mov.w	ip, #1
 800dd0a:	e7f8      	b.n	800dcfe <_strtod_l+0x27e>
 800dd0c:	08012060 	.word	0x08012060
 800dd10:	0801203d 	.word	0x0801203d
 800dd14:	7ff00000 	.word	0x7ff00000
 800dd18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd1a:	1c51      	adds	r1, r2, #1
 800dd1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd1e:	7852      	ldrb	r2, [r2, #1]
 800dd20:	2a30      	cmp	r2, #48	@ 0x30
 800dd22:	d0f9      	beq.n	800dd18 <_strtod_l+0x298>
 800dd24:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd28:	2908      	cmp	r1, #8
 800dd2a:	f63f af78 	bhi.w	800dc1e <_strtod_l+0x19e>
 800dd2e:	3a30      	subs	r2, #48	@ 0x30
 800dd30:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd34:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd36:	f04f 080a 	mov.w	r8, #10
 800dd3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd3c:	1c56      	adds	r6, r2, #1
 800dd3e:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd40:	7852      	ldrb	r2, [r2, #1]
 800dd42:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd46:	f1be 0f09 	cmp.w	lr, #9
 800dd4a:	d939      	bls.n	800ddc0 <_strtod_l+0x340>
 800dd4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd4e:	1a76      	subs	r6, r6, r1
 800dd50:	2e08      	cmp	r6, #8
 800dd52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd56:	dc03      	bgt.n	800dd60 <_strtod_l+0x2e0>
 800dd58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd5a:	4588      	cmp	r8, r1
 800dd5c:	bfa8      	it	ge
 800dd5e:	4688      	movge	r8, r1
 800dd60:	f1bc 0f00 	cmp.w	ip, #0
 800dd64:	d001      	beq.n	800dd6a <_strtod_l+0x2ea>
 800dd66:	f1c8 0800 	rsb	r8, r8, #0
 800dd6a:	2d00      	cmp	r5, #0
 800dd6c:	d14e      	bne.n	800de0c <_strtod_l+0x38c>
 800dd6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd70:	4308      	orrs	r0, r1
 800dd72:	f47f aebe 	bne.w	800daf2 <_strtod_l+0x72>
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f47f aed6 	bne.w	800db28 <_strtod_l+0xa8>
 800dd7c:	2a69      	cmp	r2, #105	@ 0x69
 800dd7e:	d028      	beq.n	800ddd2 <_strtod_l+0x352>
 800dd80:	dc25      	bgt.n	800ddce <_strtod_l+0x34e>
 800dd82:	2a49      	cmp	r2, #73	@ 0x49
 800dd84:	d025      	beq.n	800ddd2 <_strtod_l+0x352>
 800dd86:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd88:	f47f aece 	bne.w	800db28 <_strtod_l+0xa8>
 800dd8c:	499b      	ldr	r1, [pc, #620]	@ (800dffc <_strtod_l+0x57c>)
 800dd8e:	a819      	add	r0, sp, #100	@ 0x64
 800dd90:	f002 f8a0 	bl	800fed4 <__match>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	f43f aec7 	beq.w	800db28 <_strtod_l+0xa8>
 800dd9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b28      	cmp	r3, #40	@ 0x28
 800dda0:	d12e      	bne.n	800de00 <_strtod_l+0x380>
 800dda2:	4997      	ldr	r1, [pc, #604]	@ (800e000 <_strtod_l+0x580>)
 800dda4:	aa1c      	add	r2, sp, #112	@ 0x70
 800dda6:	a819      	add	r0, sp, #100	@ 0x64
 800dda8:	f002 f8a8 	bl	800fefc <__hexnan>
 800ddac:	2805      	cmp	r0, #5
 800ddae:	d127      	bne.n	800de00 <_strtod_l+0x380>
 800ddb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddb2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ddb6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ddba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ddbe:	e698      	b.n	800daf2 <_strtod_l+0x72>
 800ddc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ddc2:	fb08 2101 	mla	r1, r8, r1, r2
 800ddc6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ddca:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddcc:	e7b5      	b.n	800dd3a <_strtod_l+0x2ba>
 800ddce:	2a6e      	cmp	r2, #110	@ 0x6e
 800ddd0:	e7da      	b.n	800dd88 <_strtod_l+0x308>
 800ddd2:	498c      	ldr	r1, [pc, #560]	@ (800e004 <_strtod_l+0x584>)
 800ddd4:	a819      	add	r0, sp, #100	@ 0x64
 800ddd6:	f002 f87d 	bl	800fed4 <__match>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	f43f aea4 	beq.w	800db28 <_strtod_l+0xa8>
 800dde0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dde2:	4989      	ldr	r1, [pc, #548]	@ (800e008 <_strtod_l+0x588>)
 800dde4:	3b01      	subs	r3, #1
 800dde6:	a819      	add	r0, sp, #100	@ 0x64
 800dde8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddea:	f002 f873 	bl	800fed4 <__match>
 800ddee:	b910      	cbnz	r0, 800ddf6 <_strtod_l+0x376>
 800ddf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddf6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e018 <_strtod_l+0x598>
 800ddfa:	f04f 0a00 	mov.w	sl, #0
 800ddfe:	e678      	b.n	800daf2 <_strtod_l+0x72>
 800de00:	4882      	ldr	r0, [pc, #520]	@ (800e00c <_strtod_l+0x58c>)
 800de02:	f001 fdd5 	bl	800f9b0 <nan>
 800de06:	ec5b ab10 	vmov	sl, fp, d0
 800de0a:	e672      	b.n	800daf2 <_strtod_l+0x72>
 800de0c:	eba8 0309 	sub.w	r3, r8, r9
 800de10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de12:	9309      	str	r3, [sp, #36]	@ 0x24
 800de14:	2f00      	cmp	r7, #0
 800de16:	bf08      	it	eq
 800de18:	462f      	moveq	r7, r5
 800de1a:	2d10      	cmp	r5, #16
 800de1c:	462c      	mov	r4, r5
 800de1e:	bfa8      	it	ge
 800de20:	2410      	movge	r4, #16
 800de22:	f7f2 fb77 	bl	8000514 <__aeabi_ui2d>
 800de26:	2d09      	cmp	r5, #9
 800de28:	4682      	mov	sl, r0
 800de2a:	468b      	mov	fp, r1
 800de2c:	dc13      	bgt.n	800de56 <_strtod_l+0x3d6>
 800de2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de30:	2b00      	cmp	r3, #0
 800de32:	f43f ae5e 	beq.w	800daf2 <_strtod_l+0x72>
 800de36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de38:	dd78      	ble.n	800df2c <_strtod_l+0x4ac>
 800de3a:	2b16      	cmp	r3, #22
 800de3c:	dc5f      	bgt.n	800defe <_strtod_l+0x47e>
 800de3e:	4974      	ldr	r1, [pc, #464]	@ (800e010 <_strtod_l+0x590>)
 800de40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de48:	4652      	mov	r2, sl
 800de4a:	465b      	mov	r3, fp
 800de4c:	f7f2 fbdc 	bl	8000608 <__aeabi_dmul>
 800de50:	4682      	mov	sl, r0
 800de52:	468b      	mov	fp, r1
 800de54:	e64d      	b.n	800daf2 <_strtod_l+0x72>
 800de56:	4b6e      	ldr	r3, [pc, #440]	@ (800e010 <_strtod_l+0x590>)
 800de58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de60:	f7f2 fbd2 	bl	8000608 <__aeabi_dmul>
 800de64:	4682      	mov	sl, r0
 800de66:	9808      	ldr	r0, [sp, #32]
 800de68:	468b      	mov	fp, r1
 800de6a:	f7f2 fb53 	bl	8000514 <__aeabi_ui2d>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4650      	mov	r0, sl
 800de74:	4659      	mov	r1, fp
 800de76:	f7f2 fa11 	bl	800029c <__adddf3>
 800de7a:	2d0f      	cmp	r5, #15
 800de7c:	4682      	mov	sl, r0
 800de7e:	468b      	mov	fp, r1
 800de80:	ddd5      	ble.n	800de2e <_strtod_l+0x3ae>
 800de82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de84:	1b2c      	subs	r4, r5, r4
 800de86:	441c      	add	r4, r3
 800de88:	2c00      	cmp	r4, #0
 800de8a:	f340 8096 	ble.w	800dfba <_strtod_l+0x53a>
 800de8e:	f014 030f 	ands.w	r3, r4, #15
 800de92:	d00a      	beq.n	800deaa <_strtod_l+0x42a>
 800de94:	495e      	ldr	r1, [pc, #376]	@ (800e010 <_strtod_l+0x590>)
 800de96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de9a:	4652      	mov	r2, sl
 800de9c:	465b      	mov	r3, fp
 800de9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dea2:	f7f2 fbb1 	bl	8000608 <__aeabi_dmul>
 800dea6:	4682      	mov	sl, r0
 800dea8:	468b      	mov	fp, r1
 800deaa:	f034 040f 	bics.w	r4, r4, #15
 800deae:	d073      	beq.n	800df98 <_strtod_l+0x518>
 800deb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800deb4:	dd48      	ble.n	800df48 <_strtod_l+0x4c8>
 800deb6:	2400      	movs	r4, #0
 800deb8:	46a0      	mov	r8, r4
 800deba:	940a      	str	r4, [sp, #40]	@ 0x28
 800debc:	46a1      	mov	r9, r4
 800debe:	9a05      	ldr	r2, [sp, #20]
 800dec0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e018 <_strtod_l+0x598>
 800dec4:	2322      	movs	r3, #34	@ 0x22
 800dec6:	6013      	str	r3, [r2, #0]
 800dec8:	f04f 0a00 	mov.w	sl, #0
 800decc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f43f ae0f 	beq.w	800daf2 <_strtod_l+0x72>
 800ded4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ded6:	9805      	ldr	r0, [sp, #20]
 800ded8:	f002 f8fe 	bl	80100d8 <_Bfree>
 800dedc:	9805      	ldr	r0, [sp, #20]
 800dede:	4649      	mov	r1, r9
 800dee0:	f002 f8fa 	bl	80100d8 <_Bfree>
 800dee4:	9805      	ldr	r0, [sp, #20]
 800dee6:	4641      	mov	r1, r8
 800dee8:	f002 f8f6 	bl	80100d8 <_Bfree>
 800deec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deee:	9805      	ldr	r0, [sp, #20]
 800def0:	f002 f8f2 	bl	80100d8 <_Bfree>
 800def4:	9805      	ldr	r0, [sp, #20]
 800def6:	4621      	mov	r1, r4
 800def8:	f002 f8ee 	bl	80100d8 <_Bfree>
 800defc:	e5f9      	b.n	800daf2 <_strtod_l+0x72>
 800defe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800df04:	4293      	cmp	r3, r2
 800df06:	dbbc      	blt.n	800de82 <_strtod_l+0x402>
 800df08:	4c41      	ldr	r4, [pc, #260]	@ (800e010 <_strtod_l+0x590>)
 800df0a:	f1c5 050f 	rsb	r5, r5, #15
 800df0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df12:	4652      	mov	r2, sl
 800df14:	465b      	mov	r3, fp
 800df16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df1a:	f7f2 fb75 	bl	8000608 <__aeabi_dmul>
 800df1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df20:	1b5d      	subs	r5, r3, r5
 800df22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df2a:	e78f      	b.n	800de4c <_strtod_l+0x3cc>
 800df2c:	3316      	adds	r3, #22
 800df2e:	dba8      	blt.n	800de82 <_strtod_l+0x402>
 800df30:	4b37      	ldr	r3, [pc, #220]	@ (800e010 <_strtod_l+0x590>)
 800df32:	eba9 0808 	sub.w	r8, r9, r8
 800df36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df3e:	4650      	mov	r0, sl
 800df40:	4659      	mov	r1, fp
 800df42:	f7f2 fc8b 	bl	800085c <__aeabi_ddiv>
 800df46:	e783      	b.n	800de50 <_strtod_l+0x3d0>
 800df48:	4b32      	ldr	r3, [pc, #200]	@ (800e014 <_strtod_l+0x594>)
 800df4a:	9308      	str	r3, [sp, #32]
 800df4c:	2300      	movs	r3, #0
 800df4e:	1124      	asrs	r4, r4, #4
 800df50:	4650      	mov	r0, sl
 800df52:	4659      	mov	r1, fp
 800df54:	461e      	mov	r6, r3
 800df56:	2c01      	cmp	r4, #1
 800df58:	dc21      	bgt.n	800df9e <_strtod_l+0x51e>
 800df5a:	b10b      	cbz	r3, 800df60 <_strtod_l+0x4e0>
 800df5c:	4682      	mov	sl, r0
 800df5e:	468b      	mov	fp, r1
 800df60:	492c      	ldr	r1, [pc, #176]	@ (800e014 <_strtod_l+0x594>)
 800df62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df6a:	4652      	mov	r2, sl
 800df6c:	465b      	mov	r3, fp
 800df6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df72:	f7f2 fb49 	bl	8000608 <__aeabi_dmul>
 800df76:	4b28      	ldr	r3, [pc, #160]	@ (800e018 <_strtod_l+0x598>)
 800df78:	460a      	mov	r2, r1
 800df7a:	400b      	ands	r3, r1
 800df7c:	4927      	ldr	r1, [pc, #156]	@ (800e01c <_strtod_l+0x59c>)
 800df7e:	428b      	cmp	r3, r1
 800df80:	4682      	mov	sl, r0
 800df82:	d898      	bhi.n	800deb6 <_strtod_l+0x436>
 800df84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800df88:	428b      	cmp	r3, r1
 800df8a:	bf86      	itte	hi
 800df8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e020 <_strtod_l+0x5a0>
 800df90:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800df94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800df98:	2300      	movs	r3, #0
 800df9a:	9308      	str	r3, [sp, #32]
 800df9c:	e07a      	b.n	800e094 <_strtod_l+0x614>
 800df9e:	07e2      	lsls	r2, r4, #31
 800dfa0:	d505      	bpl.n	800dfae <_strtod_l+0x52e>
 800dfa2:	9b08      	ldr	r3, [sp, #32]
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	f7f2 fb2e 	bl	8000608 <__aeabi_dmul>
 800dfac:	2301      	movs	r3, #1
 800dfae:	9a08      	ldr	r2, [sp, #32]
 800dfb0:	3208      	adds	r2, #8
 800dfb2:	3601      	adds	r6, #1
 800dfb4:	1064      	asrs	r4, r4, #1
 800dfb6:	9208      	str	r2, [sp, #32]
 800dfb8:	e7cd      	b.n	800df56 <_strtod_l+0x4d6>
 800dfba:	d0ed      	beq.n	800df98 <_strtod_l+0x518>
 800dfbc:	4264      	negs	r4, r4
 800dfbe:	f014 020f 	ands.w	r2, r4, #15
 800dfc2:	d00a      	beq.n	800dfda <_strtod_l+0x55a>
 800dfc4:	4b12      	ldr	r3, [pc, #72]	@ (800e010 <_strtod_l+0x590>)
 800dfc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfca:	4650      	mov	r0, sl
 800dfcc:	4659      	mov	r1, fp
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	f7f2 fc43 	bl	800085c <__aeabi_ddiv>
 800dfd6:	4682      	mov	sl, r0
 800dfd8:	468b      	mov	fp, r1
 800dfda:	1124      	asrs	r4, r4, #4
 800dfdc:	d0dc      	beq.n	800df98 <_strtod_l+0x518>
 800dfde:	2c1f      	cmp	r4, #31
 800dfe0:	dd20      	ble.n	800e024 <_strtod_l+0x5a4>
 800dfe2:	2400      	movs	r4, #0
 800dfe4:	46a0      	mov	r8, r4
 800dfe6:	940a      	str	r4, [sp, #40]	@ 0x28
 800dfe8:	46a1      	mov	r9, r4
 800dfea:	9a05      	ldr	r2, [sp, #20]
 800dfec:	2322      	movs	r3, #34	@ 0x22
 800dfee:	f04f 0a00 	mov.w	sl, #0
 800dff2:	f04f 0b00 	mov.w	fp, #0
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	e768      	b.n	800decc <_strtod_l+0x44c>
 800dffa:	bf00      	nop
 800dffc:	08012048 	.word	0x08012048
 800e000:	0801204c 	.word	0x0801204c
 800e004:	0801203f 	.word	0x0801203f
 800e008:	08012042 	.word	0x08012042
 800e00c:	08012413 	.word	0x08012413
 800e010:	08012310 	.word	0x08012310
 800e014:	080122e8 	.word	0x080122e8
 800e018:	7ff00000 	.word	0x7ff00000
 800e01c:	7ca00000 	.word	0x7ca00000
 800e020:	7fefffff 	.word	0x7fefffff
 800e024:	f014 0310 	ands.w	r3, r4, #16
 800e028:	bf18      	it	ne
 800e02a:	236a      	movne	r3, #106	@ 0x6a
 800e02c:	4ea9      	ldr	r6, [pc, #676]	@ (800e2d4 <_strtod_l+0x854>)
 800e02e:	9308      	str	r3, [sp, #32]
 800e030:	4650      	mov	r0, sl
 800e032:	4659      	mov	r1, fp
 800e034:	2300      	movs	r3, #0
 800e036:	07e2      	lsls	r2, r4, #31
 800e038:	d504      	bpl.n	800e044 <_strtod_l+0x5c4>
 800e03a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e03e:	f7f2 fae3 	bl	8000608 <__aeabi_dmul>
 800e042:	2301      	movs	r3, #1
 800e044:	1064      	asrs	r4, r4, #1
 800e046:	f106 0608 	add.w	r6, r6, #8
 800e04a:	d1f4      	bne.n	800e036 <_strtod_l+0x5b6>
 800e04c:	b10b      	cbz	r3, 800e052 <_strtod_l+0x5d2>
 800e04e:	4682      	mov	sl, r0
 800e050:	468b      	mov	fp, r1
 800e052:	9b08      	ldr	r3, [sp, #32]
 800e054:	b1b3      	cbz	r3, 800e084 <_strtod_l+0x604>
 800e056:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e05a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e05e:	2b00      	cmp	r3, #0
 800e060:	4659      	mov	r1, fp
 800e062:	dd0f      	ble.n	800e084 <_strtod_l+0x604>
 800e064:	2b1f      	cmp	r3, #31
 800e066:	dd55      	ble.n	800e114 <_strtod_l+0x694>
 800e068:	2b34      	cmp	r3, #52	@ 0x34
 800e06a:	bfde      	ittt	le
 800e06c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800e070:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e074:	4093      	lslle	r3, r2
 800e076:	f04f 0a00 	mov.w	sl, #0
 800e07a:	bfcc      	ite	gt
 800e07c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e080:	ea03 0b01 	andle.w	fp, r3, r1
 800e084:	2200      	movs	r2, #0
 800e086:	2300      	movs	r3, #0
 800e088:	4650      	mov	r0, sl
 800e08a:	4659      	mov	r1, fp
 800e08c:	f7f2 fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 800e090:	2800      	cmp	r0, #0
 800e092:	d1a6      	bne.n	800dfe2 <_strtod_l+0x562>
 800e094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e09a:	9805      	ldr	r0, [sp, #20]
 800e09c:	462b      	mov	r3, r5
 800e09e:	463a      	mov	r2, r7
 800e0a0:	f002 f882 	bl	80101a8 <__s2b>
 800e0a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f43f af05 	beq.w	800deb6 <_strtod_l+0x436>
 800e0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	eba9 0308 	sub.w	r3, r9, r8
 800e0b4:	bfa8      	it	ge
 800e0b6:	2300      	movge	r3, #0
 800e0b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0ba:	2400      	movs	r4, #0
 800e0bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e0c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800e0c2:	46a0      	mov	r8, r4
 800e0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0c6:	9805      	ldr	r0, [sp, #20]
 800e0c8:	6859      	ldr	r1, [r3, #4]
 800e0ca:	f001 ffc5 	bl	8010058 <_Balloc>
 800e0ce:	4681      	mov	r9, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	f43f aef4 	beq.w	800debe <_strtod_l+0x43e>
 800e0d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0d8:	691a      	ldr	r2, [r3, #16]
 800e0da:	3202      	adds	r2, #2
 800e0dc:	f103 010c 	add.w	r1, r3, #12
 800e0e0:	0092      	lsls	r2, r2, #2
 800e0e2:	300c      	adds	r0, #12
 800e0e4:	f7ff fba1 	bl	800d82a <memcpy>
 800e0e8:	ec4b ab10 	vmov	d0, sl, fp
 800e0ec:	9805      	ldr	r0, [sp, #20]
 800e0ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e0f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e0f6:	f002 fb93 	bl	8010820 <__d2b>
 800e0fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	f43f aede 	beq.w	800debe <_strtod_l+0x43e>
 800e102:	9805      	ldr	r0, [sp, #20]
 800e104:	2101      	movs	r1, #1
 800e106:	f002 f8e5 	bl	80102d4 <__i2b>
 800e10a:	4680      	mov	r8, r0
 800e10c:	b948      	cbnz	r0, 800e122 <_strtod_l+0x6a2>
 800e10e:	f04f 0800 	mov.w	r8, #0
 800e112:	e6d4      	b.n	800debe <_strtod_l+0x43e>
 800e114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e118:	fa02 f303 	lsl.w	r3, r2, r3
 800e11c:	ea03 0a0a 	and.w	sl, r3, sl
 800e120:	e7b0      	b.n	800e084 <_strtod_l+0x604>
 800e122:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e124:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e126:	2d00      	cmp	r5, #0
 800e128:	bfab      	itete	ge
 800e12a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e12c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e12e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e130:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e132:	bfac      	ite	ge
 800e134:	18ef      	addge	r7, r5, r3
 800e136:	1b5e      	sublt	r6, r3, r5
 800e138:	9b08      	ldr	r3, [sp, #32]
 800e13a:	1aed      	subs	r5, r5, r3
 800e13c:	4415      	add	r5, r2
 800e13e:	4b66      	ldr	r3, [pc, #408]	@ (800e2d8 <_strtod_l+0x858>)
 800e140:	3d01      	subs	r5, #1
 800e142:	429d      	cmp	r5, r3
 800e144:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e148:	da50      	bge.n	800e1ec <_strtod_l+0x76c>
 800e14a:	1b5b      	subs	r3, r3, r5
 800e14c:	2b1f      	cmp	r3, #31
 800e14e:	eba2 0203 	sub.w	r2, r2, r3
 800e152:	f04f 0101 	mov.w	r1, #1
 800e156:	dc3d      	bgt.n	800e1d4 <_strtod_l+0x754>
 800e158:	fa01 f303 	lsl.w	r3, r1, r3
 800e15c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e15e:	2300      	movs	r3, #0
 800e160:	9310      	str	r3, [sp, #64]	@ 0x40
 800e162:	18bd      	adds	r5, r7, r2
 800e164:	9b08      	ldr	r3, [sp, #32]
 800e166:	42af      	cmp	r7, r5
 800e168:	4416      	add	r6, r2
 800e16a:	441e      	add	r6, r3
 800e16c:	463b      	mov	r3, r7
 800e16e:	bfa8      	it	ge
 800e170:	462b      	movge	r3, r5
 800e172:	42b3      	cmp	r3, r6
 800e174:	bfa8      	it	ge
 800e176:	4633      	movge	r3, r6
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bfc2      	ittt	gt
 800e17c:	1aed      	subgt	r5, r5, r3
 800e17e:	1af6      	subgt	r6, r6, r3
 800e180:	1aff      	subgt	r7, r7, r3
 800e182:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e184:	2b00      	cmp	r3, #0
 800e186:	dd16      	ble.n	800e1b6 <_strtod_l+0x736>
 800e188:	4641      	mov	r1, r8
 800e18a:	9805      	ldr	r0, [sp, #20]
 800e18c:	461a      	mov	r2, r3
 800e18e:	f002 f961 	bl	8010454 <__pow5mult>
 800e192:	4680      	mov	r8, r0
 800e194:	2800      	cmp	r0, #0
 800e196:	d0ba      	beq.n	800e10e <_strtod_l+0x68e>
 800e198:	4601      	mov	r1, r0
 800e19a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e19c:	9805      	ldr	r0, [sp, #20]
 800e19e:	f002 f8af 	bl	8010300 <__multiply>
 800e1a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	f43f ae8a 	beq.w	800debe <_strtod_l+0x43e>
 800e1aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1ac:	9805      	ldr	r0, [sp, #20]
 800e1ae:	f001 ff93 	bl	80100d8 <_Bfree>
 800e1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1b6:	2d00      	cmp	r5, #0
 800e1b8:	dc1d      	bgt.n	800e1f6 <_strtod_l+0x776>
 800e1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dd23      	ble.n	800e208 <_strtod_l+0x788>
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1c4:	9805      	ldr	r0, [sp, #20]
 800e1c6:	f002 f945 	bl	8010454 <__pow5mult>
 800e1ca:	4681      	mov	r9, r0
 800e1cc:	b9e0      	cbnz	r0, 800e208 <_strtod_l+0x788>
 800e1ce:	f04f 0900 	mov.w	r9, #0
 800e1d2:	e674      	b.n	800debe <_strtod_l+0x43e>
 800e1d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e1d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e1dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e1e0:	35e2      	adds	r5, #226	@ 0xe2
 800e1e2:	fa01 f305 	lsl.w	r3, r1, r5
 800e1e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e1ea:	e7ba      	b.n	800e162 <_strtod_l+0x6e2>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1f4:	e7b5      	b.n	800e162 <_strtod_l+0x6e2>
 800e1f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1f8:	9805      	ldr	r0, [sp, #20]
 800e1fa:	462a      	mov	r2, r5
 800e1fc:	f002 f984 	bl	8010508 <__lshift>
 800e200:	901a      	str	r0, [sp, #104]	@ 0x68
 800e202:	2800      	cmp	r0, #0
 800e204:	d1d9      	bne.n	800e1ba <_strtod_l+0x73a>
 800e206:	e65a      	b.n	800debe <_strtod_l+0x43e>
 800e208:	2e00      	cmp	r6, #0
 800e20a:	dd07      	ble.n	800e21c <_strtod_l+0x79c>
 800e20c:	4649      	mov	r1, r9
 800e20e:	9805      	ldr	r0, [sp, #20]
 800e210:	4632      	mov	r2, r6
 800e212:	f002 f979 	bl	8010508 <__lshift>
 800e216:	4681      	mov	r9, r0
 800e218:	2800      	cmp	r0, #0
 800e21a:	d0d8      	beq.n	800e1ce <_strtod_l+0x74e>
 800e21c:	2f00      	cmp	r7, #0
 800e21e:	dd08      	ble.n	800e232 <_strtod_l+0x7b2>
 800e220:	4641      	mov	r1, r8
 800e222:	9805      	ldr	r0, [sp, #20]
 800e224:	463a      	mov	r2, r7
 800e226:	f002 f96f 	bl	8010508 <__lshift>
 800e22a:	4680      	mov	r8, r0
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f43f ae46 	beq.w	800debe <_strtod_l+0x43e>
 800e232:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e234:	9805      	ldr	r0, [sp, #20]
 800e236:	464a      	mov	r2, r9
 800e238:	f002 f9ee 	bl	8010618 <__mdiff>
 800e23c:	4604      	mov	r4, r0
 800e23e:	2800      	cmp	r0, #0
 800e240:	f43f ae3d 	beq.w	800debe <_strtod_l+0x43e>
 800e244:	68c3      	ldr	r3, [r0, #12]
 800e246:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e248:	2300      	movs	r3, #0
 800e24a:	60c3      	str	r3, [r0, #12]
 800e24c:	4641      	mov	r1, r8
 800e24e:	f002 f9c7 	bl	80105e0 <__mcmp>
 800e252:	2800      	cmp	r0, #0
 800e254:	da46      	bge.n	800e2e4 <_strtod_l+0x864>
 800e256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e258:	ea53 030a 	orrs.w	r3, r3, sl
 800e25c:	d16c      	bne.n	800e338 <_strtod_l+0x8b8>
 800e25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e262:	2b00      	cmp	r3, #0
 800e264:	d168      	bne.n	800e338 <_strtod_l+0x8b8>
 800e266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e26a:	0d1b      	lsrs	r3, r3, #20
 800e26c:	051b      	lsls	r3, r3, #20
 800e26e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e272:	d961      	bls.n	800e338 <_strtod_l+0x8b8>
 800e274:	6963      	ldr	r3, [r4, #20]
 800e276:	b913      	cbnz	r3, 800e27e <_strtod_l+0x7fe>
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	dd5c      	ble.n	800e338 <_strtod_l+0x8b8>
 800e27e:	4621      	mov	r1, r4
 800e280:	2201      	movs	r2, #1
 800e282:	9805      	ldr	r0, [sp, #20]
 800e284:	f002 f940 	bl	8010508 <__lshift>
 800e288:	4641      	mov	r1, r8
 800e28a:	4604      	mov	r4, r0
 800e28c:	f002 f9a8 	bl	80105e0 <__mcmp>
 800e290:	2800      	cmp	r0, #0
 800e292:	dd51      	ble.n	800e338 <_strtod_l+0x8b8>
 800e294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e298:	9a08      	ldr	r2, [sp, #32]
 800e29a:	0d1b      	lsrs	r3, r3, #20
 800e29c:	051b      	lsls	r3, r3, #20
 800e29e:	2a00      	cmp	r2, #0
 800e2a0:	d06b      	beq.n	800e37a <_strtod_l+0x8fa>
 800e2a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2a6:	d868      	bhi.n	800e37a <_strtod_l+0x8fa>
 800e2a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e2ac:	f67f ae9d 	bls.w	800dfea <_strtod_l+0x56a>
 800e2b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e2dc <_strtod_l+0x85c>)
 800e2b2:	4650      	mov	r0, sl
 800e2b4:	4659      	mov	r1, fp
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f7f2 f9a6 	bl	8000608 <__aeabi_dmul>
 800e2bc:	4b08      	ldr	r3, [pc, #32]	@ (800e2e0 <_strtod_l+0x860>)
 800e2be:	400b      	ands	r3, r1
 800e2c0:	4682      	mov	sl, r0
 800e2c2:	468b      	mov	fp, r1
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f47f ae05 	bne.w	800ded4 <_strtod_l+0x454>
 800e2ca:	9a05      	ldr	r2, [sp, #20]
 800e2cc:	2322      	movs	r3, #34	@ 0x22
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	e600      	b.n	800ded4 <_strtod_l+0x454>
 800e2d2:	bf00      	nop
 800e2d4:	08012078 	.word	0x08012078
 800e2d8:	fffffc02 	.word	0xfffffc02
 800e2dc:	39500000 	.word	0x39500000
 800e2e0:	7ff00000 	.word	0x7ff00000
 800e2e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e2e8:	d165      	bne.n	800e3b6 <_strtod_l+0x936>
 800e2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2f0:	b35a      	cbz	r2, 800e34a <_strtod_l+0x8ca>
 800e2f2:	4a9f      	ldr	r2, [pc, #636]	@ (800e570 <_strtod_l+0xaf0>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d12b      	bne.n	800e350 <_strtod_l+0x8d0>
 800e2f8:	9b08      	ldr	r3, [sp, #32]
 800e2fa:	4651      	mov	r1, sl
 800e2fc:	b303      	cbz	r3, 800e340 <_strtod_l+0x8c0>
 800e2fe:	4b9d      	ldr	r3, [pc, #628]	@ (800e574 <_strtod_l+0xaf4>)
 800e300:	465a      	mov	r2, fp
 800e302:	4013      	ands	r3, r2
 800e304:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e30c:	d81b      	bhi.n	800e346 <_strtod_l+0x8c6>
 800e30e:	0d1b      	lsrs	r3, r3, #20
 800e310:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e314:	fa02 f303 	lsl.w	r3, r2, r3
 800e318:	4299      	cmp	r1, r3
 800e31a:	d119      	bne.n	800e350 <_strtod_l+0x8d0>
 800e31c:	4b96      	ldr	r3, [pc, #600]	@ (800e578 <_strtod_l+0xaf8>)
 800e31e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e320:	429a      	cmp	r2, r3
 800e322:	d102      	bne.n	800e32a <_strtod_l+0x8aa>
 800e324:	3101      	adds	r1, #1
 800e326:	f43f adca 	beq.w	800debe <_strtod_l+0x43e>
 800e32a:	4b92      	ldr	r3, [pc, #584]	@ (800e574 <_strtod_l+0xaf4>)
 800e32c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e32e:	401a      	ands	r2, r3
 800e330:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e334:	f04f 0a00 	mov.w	sl, #0
 800e338:	9b08      	ldr	r3, [sp, #32]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1b8      	bne.n	800e2b0 <_strtod_l+0x830>
 800e33e:	e5c9      	b.n	800ded4 <_strtod_l+0x454>
 800e340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e344:	e7e8      	b.n	800e318 <_strtod_l+0x898>
 800e346:	4613      	mov	r3, r2
 800e348:	e7e6      	b.n	800e318 <_strtod_l+0x898>
 800e34a:	ea53 030a 	orrs.w	r3, r3, sl
 800e34e:	d0a1      	beq.n	800e294 <_strtod_l+0x814>
 800e350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e352:	b1db      	cbz	r3, 800e38c <_strtod_l+0x90c>
 800e354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e356:	4213      	tst	r3, r2
 800e358:	d0ee      	beq.n	800e338 <_strtod_l+0x8b8>
 800e35a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e35c:	9a08      	ldr	r2, [sp, #32]
 800e35e:	4650      	mov	r0, sl
 800e360:	4659      	mov	r1, fp
 800e362:	b1bb      	cbz	r3, 800e394 <_strtod_l+0x914>
 800e364:	f7ff fb6e 	bl	800da44 <sulp>
 800e368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e36c:	ec53 2b10 	vmov	r2, r3, d0
 800e370:	f7f1 ff94 	bl	800029c <__adddf3>
 800e374:	4682      	mov	sl, r0
 800e376:	468b      	mov	fp, r1
 800e378:	e7de      	b.n	800e338 <_strtod_l+0x8b8>
 800e37a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e37e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e382:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e386:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e38a:	e7d5      	b.n	800e338 <_strtod_l+0x8b8>
 800e38c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e38e:	ea13 0f0a 	tst.w	r3, sl
 800e392:	e7e1      	b.n	800e358 <_strtod_l+0x8d8>
 800e394:	f7ff fb56 	bl	800da44 <sulp>
 800e398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e39c:	ec53 2b10 	vmov	r2, r3, d0
 800e3a0:	f7f1 ff7a 	bl	8000298 <__aeabi_dsub>
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	4682      	mov	sl, r0
 800e3aa:	468b      	mov	fp, r1
 800e3ac:	f7f2 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d0c1      	beq.n	800e338 <_strtod_l+0x8b8>
 800e3b4:	e619      	b.n	800dfea <_strtod_l+0x56a>
 800e3b6:	4641      	mov	r1, r8
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f002 fa89 	bl	80108d0 <__ratio>
 800e3be:	ec57 6b10 	vmov	r6, r7, d0
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	4639      	mov	r1, r7
 800e3cc:	f7f2 fb98 	bl	8000b00 <__aeabi_dcmple>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d06f      	beq.n	800e4b4 <_strtod_l+0xa34>
 800e3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d17a      	bne.n	800e4d0 <_strtod_l+0xa50>
 800e3da:	f1ba 0f00 	cmp.w	sl, #0
 800e3de:	d158      	bne.n	800e492 <_strtod_l+0xa12>
 800e3e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d15a      	bne.n	800e4a0 <_strtod_l+0xa20>
 800e3ea:	4b64      	ldr	r3, [pc, #400]	@ (800e57c <_strtod_l+0xafc>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	f7f2 fb7b 	bl	8000aec <__aeabi_dcmplt>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d159      	bne.n	800e4ae <_strtod_l+0xa2e>
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	4b60      	ldr	r3, [pc, #384]	@ (800e580 <_strtod_l+0xb00>)
 800e400:	2200      	movs	r2, #0
 800e402:	f7f2 f901 	bl	8000608 <__aeabi_dmul>
 800e406:	4606      	mov	r6, r0
 800e408:	460f      	mov	r7, r1
 800e40a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e40e:	9606      	str	r6, [sp, #24]
 800e410:	9307      	str	r3, [sp, #28]
 800e412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e416:	4d57      	ldr	r5, [pc, #348]	@ (800e574 <_strtod_l+0xaf4>)
 800e418:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e41e:	401d      	ands	r5, r3
 800e420:	4b58      	ldr	r3, [pc, #352]	@ (800e584 <_strtod_l+0xb04>)
 800e422:	429d      	cmp	r5, r3
 800e424:	f040 80b2 	bne.w	800e58c <_strtod_l+0xb0c>
 800e428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e42a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e42e:	ec4b ab10 	vmov	d0, sl, fp
 800e432:	f002 f985 	bl	8010740 <__ulp>
 800e436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e43a:	ec51 0b10 	vmov	r0, r1, d0
 800e43e:	f7f2 f8e3 	bl	8000608 <__aeabi_dmul>
 800e442:	4652      	mov	r2, sl
 800e444:	465b      	mov	r3, fp
 800e446:	f7f1 ff29 	bl	800029c <__adddf3>
 800e44a:	460b      	mov	r3, r1
 800e44c:	4949      	ldr	r1, [pc, #292]	@ (800e574 <_strtod_l+0xaf4>)
 800e44e:	4a4e      	ldr	r2, [pc, #312]	@ (800e588 <_strtod_l+0xb08>)
 800e450:	4019      	ands	r1, r3
 800e452:	4291      	cmp	r1, r2
 800e454:	4682      	mov	sl, r0
 800e456:	d942      	bls.n	800e4de <_strtod_l+0xa5e>
 800e458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e45a:	4b47      	ldr	r3, [pc, #284]	@ (800e578 <_strtod_l+0xaf8>)
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d103      	bne.n	800e468 <_strtod_l+0x9e8>
 800e460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e462:	3301      	adds	r3, #1
 800e464:	f43f ad2b 	beq.w	800debe <_strtod_l+0x43e>
 800e468:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e578 <_strtod_l+0xaf8>
 800e46c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e472:	9805      	ldr	r0, [sp, #20]
 800e474:	f001 fe30 	bl	80100d8 <_Bfree>
 800e478:	9805      	ldr	r0, [sp, #20]
 800e47a:	4649      	mov	r1, r9
 800e47c:	f001 fe2c 	bl	80100d8 <_Bfree>
 800e480:	9805      	ldr	r0, [sp, #20]
 800e482:	4641      	mov	r1, r8
 800e484:	f001 fe28 	bl	80100d8 <_Bfree>
 800e488:	9805      	ldr	r0, [sp, #20]
 800e48a:	4621      	mov	r1, r4
 800e48c:	f001 fe24 	bl	80100d8 <_Bfree>
 800e490:	e618      	b.n	800e0c4 <_strtod_l+0x644>
 800e492:	f1ba 0f01 	cmp.w	sl, #1
 800e496:	d103      	bne.n	800e4a0 <_strtod_l+0xa20>
 800e498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f43f ada5 	beq.w	800dfea <_strtod_l+0x56a>
 800e4a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e550 <_strtod_l+0xad0>
 800e4a4:	4f35      	ldr	r7, [pc, #212]	@ (800e57c <_strtod_l+0xafc>)
 800e4a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4aa:	2600      	movs	r6, #0
 800e4ac:	e7b1      	b.n	800e412 <_strtod_l+0x992>
 800e4ae:	4f34      	ldr	r7, [pc, #208]	@ (800e580 <_strtod_l+0xb00>)
 800e4b0:	2600      	movs	r6, #0
 800e4b2:	e7aa      	b.n	800e40a <_strtod_l+0x98a>
 800e4b4:	4b32      	ldr	r3, [pc, #200]	@ (800e580 <_strtod_l+0xb00>)
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f7f2 f8a4 	bl	8000608 <__aeabi_dmul>
 800e4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	460f      	mov	r7, r1
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d09f      	beq.n	800e40a <_strtod_l+0x98a>
 800e4ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4ce:	e7a0      	b.n	800e412 <_strtod_l+0x992>
 800e4d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e558 <_strtod_l+0xad8>
 800e4d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4d8:	ec57 6b17 	vmov	r6, r7, d7
 800e4dc:	e799      	b.n	800e412 <_strtod_l+0x992>
 800e4de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e4e2:	9b08      	ldr	r3, [sp, #32]
 800e4e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1c1      	bne.n	800e470 <_strtod_l+0x9f0>
 800e4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4f0:	0d1b      	lsrs	r3, r3, #20
 800e4f2:	051b      	lsls	r3, r3, #20
 800e4f4:	429d      	cmp	r5, r3
 800e4f6:	d1bb      	bne.n	800e470 <_strtod_l+0x9f0>
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	4639      	mov	r1, r7
 800e4fc:	f7f2 fbbc 	bl	8000c78 <__aeabi_d2lz>
 800e500:	f7f2 f854 	bl	80005ac <__aeabi_l2d>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	4630      	mov	r0, r6
 800e50a:	4639      	mov	r1, r7
 800e50c:	f7f1 fec4 	bl	8000298 <__aeabi_dsub>
 800e510:	460b      	mov	r3, r1
 800e512:	4602      	mov	r2, r0
 800e514:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e518:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e51e:	ea46 060a 	orr.w	r6, r6, sl
 800e522:	431e      	orrs	r6, r3
 800e524:	d06f      	beq.n	800e606 <_strtod_l+0xb86>
 800e526:	a30e      	add	r3, pc, #56	@ (adr r3, 800e560 <_strtod_l+0xae0>)
 800e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52c:	f7f2 fade 	bl	8000aec <__aeabi_dcmplt>
 800e530:	2800      	cmp	r0, #0
 800e532:	f47f accf 	bne.w	800ded4 <_strtod_l+0x454>
 800e536:	a30c      	add	r3, pc, #48	@ (adr r3, 800e568 <_strtod_l+0xae8>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e540:	f7f2 faf2 	bl	8000b28 <__aeabi_dcmpgt>
 800e544:	2800      	cmp	r0, #0
 800e546:	d093      	beq.n	800e470 <_strtod_l+0x9f0>
 800e548:	e4c4      	b.n	800ded4 <_strtod_l+0x454>
 800e54a:	bf00      	nop
 800e54c:	f3af 8000 	nop.w
 800e550:	00000000 	.word	0x00000000
 800e554:	bff00000 	.word	0xbff00000
 800e558:	00000000 	.word	0x00000000
 800e55c:	3ff00000 	.word	0x3ff00000
 800e560:	94a03595 	.word	0x94a03595
 800e564:	3fdfffff 	.word	0x3fdfffff
 800e568:	35afe535 	.word	0x35afe535
 800e56c:	3fe00000 	.word	0x3fe00000
 800e570:	000fffff 	.word	0x000fffff
 800e574:	7ff00000 	.word	0x7ff00000
 800e578:	7fefffff 	.word	0x7fefffff
 800e57c:	3ff00000 	.word	0x3ff00000
 800e580:	3fe00000 	.word	0x3fe00000
 800e584:	7fe00000 	.word	0x7fe00000
 800e588:	7c9fffff 	.word	0x7c9fffff
 800e58c:	9b08      	ldr	r3, [sp, #32]
 800e58e:	b323      	cbz	r3, 800e5da <_strtod_l+0xb5a>
 800e590:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e594:	d821      	bhi.n	800e5da <_strtod_l+0xb5a>
 800e596:	a328      	add	r3, pc, #160	@ (adr r3, 800e638 <_strtod_l+0xbb8>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	4630      	mov	r0, r6
 800e59e:	4639      	mov	r1, r7
 800e5a0:	f7f2 faae 	bl	8000b00 <__aeabi_dcmple>
 800e5a4:	b1a0      	cbz	r0, 800e5d0 <_strtod_l+0xb50>
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	f7f2 fadd 	bl	8000b68 <__aeabi_d2uiz>
 800e5ae:	2801      	cmp	r0, #1
 800e5b0:	bf38      	it	cc
 800e5b2:	2001      	movcc	r0, #1
 800e5b4:	f7f1 ffae 	bl	8000514 <__aeabi_ui2d>
 800e5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	460f      	mov	r7, r1
 800e5be:	b9fb      	cbnz	r3, 800e600 <_strtod_l+0xb80>
 800e5c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e5c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800e5c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800e5c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e5cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e5d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e5d6:	1b5b      	subs	r3, r3, r5
 800e5d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e5da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e5de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e5e2:	f002 f8ad 	bl	8010740 <__ulp>
 800e5e6:	4650      	mov	r0, sl
 800e5e8:	ec53 2b10 	vmov	r2, r3, d0
 800e5ec:	4659      	mov	r1, fp
 800e5ee:	f7f2 f80b 	bl	8000608 <__aeabi_dmul>
 800e5f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e5f6:	f7f1 fe51 	bl	800029c <__adddf3>
 800e5fa:	4682      	mov	sl, r0
 800e5fc:	468b      	mov	fp, r1
 800e5fe:	e770      	b.n	800e4e2 <_strtod_l+0xa62>
 800e600:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e604:	e7e0      	b.n	800e5c8 <_strtod_l+0xb48>
 800e606:	a30e      	add	r3, pc, #56	@ (adr r3, 800e640 <_strtod_l+0xbc0>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	f7f2 fa6e 	bl	8000aec <__aeabi_dcmplt>
 800e610:	e798      	b.n	800e544 <_strtod_l+0xac4>
 800e612:	2300      	movs	r3, #0
 800e614:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e616:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e61a:	6013      	str	r3, [r2, #0]
 800e61c:	f7ff ba6d 	b.w	800dafa <_strtod_l+0x7a>
 800e620:	2a65      	cmp	r2, #101	@ 0x65
 800e622:	f43f ab66 	beq.w	800dcf2 <_strtod_l+0x272>
 800e626:	2a45      	cmp	r2, #69	@ 0x45
 800e628:	f43f ab63 	beq.w	800dcf2 <_strtod_l+0x272>
 800e62c:	2301      	movs	r3, #1
 800e62e:	f7ff bb9e 	b.w	800dd6e <_strtod_l+0x2ee>
 800e632:	bf00      	nop
 800e634:	f3af 8000 	nop.w
 800e638:	ffc00000 	.word	0xffc00000
 800e63c:	41dfffff 	.word	0x41dfffff
 800e640:	94a03595 	.word	0x94a03595
 800e644:	3fcfffff 	.word	0x3fcfffff

0800e648 <_strtod_r>:
 800e648:	4b01      	ldr	r3, [pc, #4]	@ (800e650 <_strtod_r+0x8>)
 800e64a:	f7ff ba19 	b.w	800da80 <_strtod_l>
 800e64e:	bf00      	nop
 800e650:	20000284 	.word	0x20000284

0800e654 <_strtol_l.constprop.0>:
 800e654:	2b24      	cmp	r3, #36	@ 0x24
 800e656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e65a:	4686      	mov	lr, r0
 800e65c:	4690      	mov	r8, r2
 800e65e:	d801      	bhi.n	800e664 <_strtol_l.constprop.0+0x10>
 800e660:	2b01      	cmp	r3, #1
 800e662:	d106      	bne.n	800e672 <_strtol_l.constprop.0+0x1e>
 800e664:	f7ff f8ac 	bl	800d7c0 <__errno>
 800e668:	2316      	movs	r3, #22
 800e66a:	6003      	str	r3, [r0, #0]
 800e66c:	2000      	movs	r0, #0
 800e66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e672:	4834      	ldr	r0, [pc, #208]	@ (800e744 <_strtol_l.constprop.0+0xf0>)
 800e674:	460d      	mov	r5, r1
 800e676:	462a      	mov	r2, r5
 800e678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e67c:	5d06      	ldrb	r6, [r0, r4]
 800e67e:	f016 0608 	ands.w	r6, r6, #8
 800e682:	d1f8      	bne.n	800e676 <_strtol_l.constprop.0+0x22>
 800e684:	2c2d      	cmp	r4, #45	@ 0x2d
 800e686:	d12d      	bne.n	800e6e4 <_strtol_l.constprop.0+0x90>
 800e688:	782c      	ldrb	r4, [r5, #0]
 800e68a:	2601      	movs	r6, #1
 800e68c:	1c95      	adds	r5, r2, #2
 800e68e:	f033 0210 	bics.w	r2, r3, #16
 800e692:	d109      	bne.n	800e6a8 <_strtol_l.constprop.0+0x54>
 800e694:	2c30      	cmp	r4, #48	@ 0x30
 800e696:	d12a      	bne.n	800e6ee <_strtol_l.constprop.0+0x9a>
 800e698:	782a      	ldrb	r2, [r5, #0]
 800e69a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e69e:	2a58      	cmp	r2, #88	@ 0x58
 800e6a0:	d125      	bne.n	800e6ee <_strtol_l.constprop.0+0x9a>
 800e6a2:	786c      	ldrb	r4, [r5, #1]
 800e6a4:	2310      	movs	r3, #16
 800e6a6:	3502      	adds	r5, #2
 800e6a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e6ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	fbbc f9f3 	udiv	r9, ip, r3
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800e6bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e6c0:	2f09      	cmp	r7, #9
 800e6c2:	d81b      	bhi.n	800e6fc <_strtol_l.constprop.0+0xa8>
 800e6c4:	463c      	mov	r4, r7
 800e6c6:	42a3      	cmp	r3, r4
 800e6c8:	dd27      	ble.n	800e71a <_strtol_l.constprop.0+0xc6>
 800e6ca:	1c57      	adds	r7, r2, #1
 800e6cc:	d007      	beq.n	800e6de <_strtol_l.constprop.0+0x8a>
 800e6ce:	4581      	cmp	r9, r0
 800e6d0:	d320      	bcc.n	800e714 <_strtol_l.constprop.0+0xc0>
 800e6d2:	d101      	bne.n	800e6d8 <_strtol_l.constprop.0+0x84>
 800e6d4:	45a2      	cmp	sl, r4
 800e6d6:	db1d      	blt.n	800e714 <_strtol_l.constprop.0+0xc0>
 800e6d8:	fb00 4003 	mla	r0, r0, r3, r4
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6e2:	e7eb      	b.n	800e6bc <_strtol_l.constprop.0+0x68>
 800e6e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e6e6:	bf04      	itt	eq
 800e6e8:	782c      	ldrbeq	r4, [r5, #0]
 800e6ea:	1c95      	addeq	r5, r2, #2
 800e6ec:	e7cf      	b.n	800e68e <_strtol_l.constprop.0+0x3a>
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1da      	bne.n	800e6a8 <_strtol_l.constprop.0+0x54>
 800e6f2:	2c30      	cmp	r4, #48	@ 0x30
 800e6f4:	bf0c      	ite	eq
 800e6f6:	2308      	moveq	r3, #8
 800e6f8:	230a      	movne	r3, #10
 800e6fa:	e7d5      	b.n	800e6a8 <_strtol_l.constprop.0+0x54>
 800e6fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e700:	2f19      	cmp	r7, #25
 800e702:	d801      	bhi.n	800e708 <_strtol_l.constprop.0+0xb4>
 800e704:	3c37      	subs	r4, #55	@ 0x37
 800e706:	e7de      	b.n	800e6c6 <_strtol_l.constprop.0+0x72>
 800e708:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e70c:	2f19      	cmp	r7, #25
 800e70e:	d804      	bhi.n	800e71a <_strtol_l.constprop.0+0xc6>
 800e710:	3c57      	subs	r4, #87	@ 0x57
 800e712:	e7d8      	b.n	800e6c6 <_strtol_l.constprop.0+0x72>
 800e714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e718:	e7e1      	b.n	800e6de <_strtol_l.constprop.0+0x8a>
 800e71a:	1c53      	adds	r3, r2, #1
 800e71c:	d108      	bne.n	800e730 <_strtol_l.constprop.0+0xdc>
 800e71e:	2322      	movs	r3, #34	@ 0x22
 800e720:	f8ce 3000 	str.w	r3, [lr]
 800e724:	4660      	mov	r0, ip
 800e726:	f1b8 0f00 	cmp.w	r8, #0
 800e72a:	d0a0      	beq.n	800e66e <_strtol_l.constprop.0+0x1a>
 800e72c:	1e69      	subs	r1, r5, #1
 800e72e:	e006      	b.n	800e73e <_strtol_l.constprop.0+0xea>
 800e730:	b106      	cbz	r6, 800e734 <_strtol_l.constprop.0+0xe0>
 800e732:	4240      	negs	r0, r0
 800e734:	f1b8 0f00 	cmp.w	r8, #0
 800e738:	d099      	beq.n	800e66e <_strtol_l.constprop.0+0x1a>
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	d1f6      	bne.n	800e72c <_strtol_l.constprop.0+0xd8>
 800e73e:	f8c8 1000 	str.w	r1, [r8]
 800e742:	e794      	b.n	800e66e <_strtol_l.constprop.0+0x1a>
 800e744:	080120a1 	.word	0x080120a1

0800e748 <_strtol_r>:
 800e748:	f7ff bf84 	b.w	800e654 <_strtol_l.constprop.0>

0800e74c <__ssputs_r>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	688e      	ldr	r6, [r1, #8]
 800e752:	461f      	mov	r7, r3
 800e754:	42be      	cmp	r6, r7
 800e756:	680b      	ldr	r3, [r1, #0]
 800e758:	4682      	mov	sl, r0
 800e75a:	460c      	mov	r4, r1
 800e75c:	4690      	mov	r8, r2
 800e75e:	d82d      	bhi.n	800e7bc <__ssputs_r+0x70>
 800e760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e768:	d026      	beq.n	800e7b8 <__ssputs_r+0x6c>
 800e76a:	6965      	ldr	r5, [r4, #20]
 800e76c:	6909      	ldr	r1, [r1, #16]
 800e76e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e772:	eba3 0901 	sub.w	r9, r3, r1
 800e776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e77a:	1c7b      	adds	r3, r7, #1
 800e77c:	444b      	add	r3, r9
 800e77e:	106d      	asrs	r5, r5, #1
 800e780:	429d      	cmp	r5, r3
 800e782:	bf38      	it	cc
 800e784:	461d      	movcc	r5, r3
 800e786:	0553      	lsls	r3, r2, #21
 800e788:	d527      	bpl.n	800e7da <__ssputs_r+0x8e>
 800e78a:	4629      	mov	r1, r5
 800e78c:	f7ff f8ce 	bl	800d92c <_malloc_r>
 800e790:	4606      	mov	r6, r0
 800e792:	b360      	cbz	r0, 800e7ee <__ssputs_r+0xa2>
 800e794:	6921      	ldr	r1, [r4, #16]
 800e796:	464a      	mov	r2, r9
 800e798:	f7ff f847 	bl	800d82a <memcpy>
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7a6:	81a3      	strh	r3, [r4, #12]
 800e7a8:	6126      	str	r6, [r4, #16]
 800e7aa:	6165      	str	r5, [r4, #20]
 800e7ac:	444e      	add	r6, r9
 800e7ae:	eba5 0509 	sub.w	r5, r5, r9
 800e7b2:	6026      	str	r6, [r4, #0]
 800e7b4:	60a5      	str	r5, [r4, #8]
 800e7b6:	463e      	mov	r6, r7
 800e7b8:	42be      	cmp	r6, r7
 800e7ba:	d900      	bls.n	800e7be <__ssputs_r+0x72>
 800e7bc:	463e      	mov	r6, r7
 800e7be:	6820      	ldr	r0, [r4, #0]
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	4641      	mov	r1, r8
 800e7c4:	f001 f8b8 	bl	800f938 <memmove>
 800e7c8:	68a3      	ldr	r3, [r4, #8]
 800e7ca:	1b9b      	subs	r3, r3, r6
 800e7cc:	60a3      	str	r3, [r4, #8]
 800e7ce:	6823      	ldr	r3, [r4, #0]
 800e7d0:	4433      	add	r3, r6
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7da:	462a      	mov	r2, r5
 800e7dc:	f002 f8ee 	bl	80109bc <_realloc_r>
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d1e0      	bne.n	800e7a8 <__ssputs_r+0x5c>
 800e7e6:	6921      	ldr	r1, [r4, #16]
 800e7e8:	4650      	mov	r0, sl
 800e7ea:	f7ff f833 	bl	800d854 <_free_r>
 800e7ee:	230c      	movs	r3, #12
 800e7f0:	f8ca 3000 	str.w	r3, [sl]
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e800:	e7e9      	b.n	800e7d6 <__ssputs_r+0x8a>
	...

0800e804 <_svfiprintf_r>:
 800e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e808:	4698      	mov	r8, r3
 800e80a:	898b      	ldrh	r3, [r1, #12]
 800e80c:	061b      	lsls	r3, r3, #24
 800e80e:	b09d      	sub	sp, #116	@ 0x74
 800e810:	4607      	mov	r7, r0
 800e812:	460d      	mov	r5, r1
 800e814:	4614      	mov	r4, r2
 800e816:	d510      	bpl.n	800e83a <_svfiprintf_r+0x36>
 800e818:	690b      	ldr	r3, [r1, #16]
 800e81a:	b973      	cbnz	r3, 800e83a <_svfiprintf_r+0x36>
 800e81c:	2140      	movs	r1, #64	@ 0x40
 800e81e:	f7ff f885 	bl	800d92c <_malloc_r>
 800e822:	6028      	str	r0, [r5, #0]
 800e824:	6128      	str	r0, [r5, #16]
 800e826:	b930      	cbnz	r0, 800e836 <_svfiprintf_r+0x32>
 800e828:	230c      	movs	r3, #12
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e830:	b01d      	add	sp, #116	@ 0x74
 800e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e836:	2340      	movs	r3, #64	@ 0x40
 800e838:	616b      	str	r3, [r5, #20]
 800e83a:	2300      	movs	r3, #0
 800e83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e83e:	2320      	movs	r3, #32
 800e840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e844:	f8cd 800c 	str.w	r8, [sp, #12]
 800e848:	2330      	movs	r3, #48	@ 0x30
 800e84a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9e8 <_svfiprintf_r+0x1e4>
 800e84e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e852:	f04f 0901 	mov.w	r9, #1
 800e856:	4623      	mov	r3, r4
 800e858:	469a      	mov	sl, r3
 800e85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e85e:	b10a      	cbz	r2, 800e864 <_svfiprintf_r+0x60>
 800e860:	2a25      	cmp	r2, #37	@ 0x25
 800e862:	d1f9      	bne.n	800e858 <_svfiprintf_r+0x54>
 800e864:	ebba 0b04 	subs.w	fp, sl, r4
 800e868:	d00b      	beq.n	800e882 <_svfiprintf_r+0x7e>
 800e86a:	465b      	mov	r3, fp
 800e86c:	4622      	mov	r2, r4
 800e86e:	4629      	mov	r1, r5
 800e870:	4638      	mov	r0, r7
 800e872:	f7ff ff6b 	bl	800e74c <__ssputs_r>
 800e876:	3001      	adds	r0, #1
 800e878:	f000 80a7 	beq.w	800e9ca <_svfiprintf_r+0x1c6>
 800e87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e87e:	445a      	add	r2, fp
 800e880:	9209      	str	r2, [sp, #36]	@ 0x24
 800e882:	f89a 3000 	ldrb.w	r3, [sl]
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 809f 	beq.w	800e9ca <_svfiprintf_r+0x1c6>
 800e88c:	2300      	movs	r3, #0
 800e88e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e896:	f10a 0a01 	add.w	sl, sl, #1
 800e89a:	9304      	str	r3, [sp, #16]
 800e89c:	9307      	str	r3, [sp, #28]
 800e89e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8a4:	4654      	mov	r4, sl
 800e8a6:	2205      	movs	r2, #5
 800e8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ac:	484e      	ldr	r0, [pc, #312]	@ (800e9e8 <_svfiprintf_r+0x1e4>)
 800e8ae:	f7f1 fc9f 	bl	80001f0 <memchr>
 800e8b2:	9a04      	ldr	r2, [sp, #16]
 800e8b4:	b9d8      	cbnz	r0, 800e8ee <_svfiprintf_r+0xea>
 800e8b6:	06d0      	lsls	r0, r2, #27
 800e8b8:	bf44      	itt	mi
 800e8ba:	2320      	movmi	r3, #32
 800e8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8c0:	0711      	lsls	r1, r2, #28
 800e8c2:	bf44      	itt	mi
 800e8c4:	232b      	movmi	r3, #43	@ 0x2b
 800e8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8d0:	d015      	beq.n	800e8fe <_svfiprintf_r+0xfa>
 800e8d2:	9a07      	ldr	r2, [sp, #28]
 800e8d4:	4654      	mov	r4, sl
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	f04f 0c0a 	mov.w	ip, #10
 800e8dc:	4621      	mov	r1, r4
 800e8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8e2:	3b30      	subs	r3, #48	@ 0x30
 800e8e4:	2b09      	cmp	r3, #9
 800e8e6:	d94b      	bls.n	800e980 <_svfiprintf_r+0x17c>
 800e8e8:	b1b0      	cbz	r0, 800e918 <_svfiprintf_r+0x114>
 800e8ea:	9207      	str	r2, [sp, #28]
 800e8ec:	e014      	b.n	800e918 <_svfiprintf_r+0x114>
 800e8ee:	eba0 0308 	sub.w	r3, r0, r8
 800e8f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	46a2      	mov	sl, r4
 800e8fc:	e7d2      	b.n	800e8a4 <_svfiprintf_r+0xa0>
 800e8fe:	9b03      	ldr	r3, [sp, #12]
 800e900:	1d19      	adds	r1, r3, #4
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	9103      	str	r1, [sp, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	bfbb      	ittet	lt
 800e90a:	425b      	neglt	r3, r3
 800e90c:	f042 0202 	orrlt.w	r2, r2, #2
 800e910:	9307      	strge	r3, [sp, #28]
 800e912:	9307      	strlt	r3, [sp, #28]
 800e914:	bfb8      	it	lt
 800e916:	9204      	strlt	r2, [sp, #16]
 800e918:	7823      	ldrb	r3, [r4, #0]
 800e91a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e91c:	d10a      	bne.n	800e934 <_svfiprintf_r+0x130>
 800e91e:	7863      	ldrb	r3, [r4, #1]
 800e920:	2b2a      	cmp	r3, #42	@ 0x2a
 800e922:	d132      	bne.n	800e98a <_svfiprintf_r+0x186>
 800e924:	9b03      	ldr	r3, [sp, #12]
 800e926:	1d1a      	adds	r2, r3, #4
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	9203      	str	r2, [sp, #12]
 800e92c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e930:	3402      	adds	r4, #2
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9f8 <_svfiprintf_r+0x1f4>
 800e938:	7821      	ldrb	r1, [r4, #0]
 800e93a:	2203      	movs	r2, #3
 800e93c:	4650      	mov	r0, sl
 800e93e:	f7f1 fc57 	bl	80001f0 <memchr>
 800e942:	b138      	cbz	r0, 800e954 <_svfiprintf_r+0x150>
 800e944:	9b04      	ldr	r3, [sp, #16]
 800e946:	eba0 000a 	sub.w	r0, r0, sl
 800e94a:	2240      	movs	r2, #64	@ 0x40
 800e94c:	4082      	lsls	r2, r0
 800e94e:	4313      	orrs	r3, r2
 800e950:	3401      	adds	r4, #1
 800e952:	9304      	str	r3, [sp, #16]
 800e954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e958:	4824      	ldr	r0, [pc, #144]	@ (800e9ec <_svfiprintf_r+0x1e8>)
 800e95a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e95e:	2206      	movs	r2, #6
 800e960:	f7f1 fc46 	bl	80001f0 <memchr>
 800e964:	2800      	cmp	r0, #0
 800e966:	d036      	beq.n	800e9d6 <_svfiprintf_r+0x1d2>
 800e968:	4b21      	ldr	r3, [pc, #132]	@ (800e9f0 <_svfiprintf_r+0x1ec>)
 800e96a:	bb1b      	cbnz	r3, 800e9b4 <_svfiprintf_r+0x1b0>
 800e96c:	9b03      	ldr	r3, [sp, #12]
 800e96e:	3307      	adds	r3, #7
 800e970:	f023 0307 	bic.w	r3, r3, #7
 800e974:	3308      	adds	r3, #8
 800e976:	9303      	str	r3, [sp, #12]
 800e978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e97a:	4433      	add	r3, r6
 800e97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e97e:	e76a      	b.n	800e856 <_svfiprintf_r+0x52>
 800e980:	fb0c 3202 	mla	r2, ip, r2, r3
 800e984:	460c      	mov	r4, r1
 800e986:	2001      	movs	r0, #1
 800e988:	e7a8      	b.n	800e8dc <_svfiprintf_r+0xd8>
 800e98a:	2300      	movs	r3, #0
 800e98c:	3401      	adds	r4, #1
 800e98e:	9305      	str	r3, [sp, #20]
 800e990:	4619      	mov	r1, r3
 800e992:	f04f 0c0a 	mov.w	ip, #10
 800e996:	4620      	mov	r0, r4
 800e998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e99c:	3a30      	subs	r2, #48	@ 0x30
 800e99e:	2a09      	cmp	r2, #9
 800e9a0:	d903      	bls.n	800e9aa <_svfiprintf_r+0x1a6>
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d0c6      	beq.n	800e934 <_svfiprintf_r+0x130>
 800e9a6:	9105      	str	r1, [sp, #20]
 800e9a8:	e7c4      	b.n	800e934 <_svfiprintf_r+0x130>
 800e9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e7f0      	b.n	800e996 <_svfiprintf_r+0x192>
 800e9b4:	ab03      	add	r3, sp, #12
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	462a      	mov	r2, r5
 800e9ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e9f4 <_svfiprintf_r+0x1f0>)
 800e9bc:	a904      	add	r1, sp, #16
 800e9be:	4638      	mov	r0, r7
 800e9c0:	f3af 8000 	nop.w
 800e9c4:	1c42      	adds	r2, r0, #1
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	d1d6      	bne.n	800e978 <_svfiprintf_r+0x174>
 800e9ca:	89ab      	ldrh	r3, [r5, #12]
 800e9cc:	065b      	lsls	r3, r3, #25
 800e9ce:	f53f af2d 	bmi.w	800e82c <_svfiprintf_r+0x28>
 800e9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9d4:	e72c      	b.n	800e830 <_svfiprintf_r+0x2c>
 800e9d6:	ab03      	add	r3, sp, #12
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	462a      	mov	r2, r5
 800e9dc:	4b05      	ldr	r3, [pc, #20]	@ (800e9f4 <_svfiprintf_r+0x1f0>)
 800e9de:	a904      	add	r1, sp, #16
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f000 fb87 	bl	800f0f4 <_printf_i>
 800e9e6:	e7ed      	b.n	800e9c4 <_svfiprintf_r+0x1c0>
 800e9e8:	080121a1 	.word	0x080121a1
 800e9ec:	080121ab 	.word	0x080121ab
 800e9f0:	00000000 	.word	0x00000000
 800e9f4:	0800e74d 	.word	0x0800e74d
 800e9f8:	080121a7 	.word	0x080121a7

0800e9fc <_sungetc_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	1c4b      	adds	r3, r1, #1
 800ea00:	4614      	mov	r4, r2
 800ea02:	d103      	bne.n	800ea0c <_sungetc_r+0x10>
 800ea04:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ea08:	4628      	mov	r0, r5
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	8993      	ldrh	r3, [r2, #12]
 800ea0e:	f023 0320 	bic.w	r3, r3, #32
 800ea12:	8193      	strh	r3, [r2, #12]
 800ea14:	6853      	ldr	r3, [r2, #4]
 800ea16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ea18:	b2cd      	uxtb	r5, r1
 800ea1a:	b18a      	cbz	r2, 800ea40 <_sungetc_r+0x44>
 800ea1c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	dd08      	ble.n	800ea34 <_sungetc_r+0x38>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	1e5a      	subs	r2, r3, #1
 800ea26:	6022      	str	r2, [r4, #0]
 800ea28:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ea2c:	6863      	ldr	r3, [r4, #4]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	6063      	str	r3, [r4, #4]
 800ea32:	e7e9      	b.n	800ea08 <_sungetc_r+0xc>
 800ea34:	4621      	mov	r1, r4
 800ea36:	f000 feb0 	bl	800f79a <__submore>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d0f1      	beq.n	800ea22 <_sungetc_r+0x26>
 800ea3e:	e7e1      	b.n	800ea04 <_sungetc_r+0x8>
 800ea40:	6921      	ldr	r1, [r4, #16]
 800ea42:	6822      	ldr	r2, [r4, #0]
 800ea44:	b141      	cbz	r1, 800ea58 <_sungetc_r+0x5c>
 800ea46:	4291      	cmp	r1, r2
 800ea48:	d206      	bcs.n	800ea58 <_sungetc_r+0x5c>
 800ea4a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ea4e:	42a9      	cmp	r1, r5
 800ea50:	d102      	bne.n	800ea58 <_sungetc_r+0x5c>
 800ea52:	3a01      	subs	r2, #1
 800ea54:	6022      	str	r2, [r4, #0]
 800ea56:	e7ea      	b.n	800ea2e <_sungetc_r+0x32>
 800ea58:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ea5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea60:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea62:	2303      	movs	r3, #3
 800ea64:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ea66:	4623      	mov	r3, r4
 800ea68:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e7de      	b.n	800ea30 <_sungetc_r+0x34>

0800ea72 <__ssrefill_r>:
 800ea72:	b510      	push	{r4, lr}
 800ea74:	460c      	mov	r4, r1
 800ea76:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ea78:	b169      	cbz	r1, 800ea96 <__ssrefill_r+0x24>
 800ea7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea7e:	4299      	cmp	r1, r3
 800ea80:	d001      	beq.n	800ea86 <__ssrefill_r+0x14>
 800ea82:	f7fe fee7 	bl	800d854 <_free_r>
 800ea86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea88:	6063      	str	r3, [r4, #4]
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	6360      	str	r0, [r4, #52]	@ 0x34
 800ea8e:	b113      	cbz	r3, 800ea96 <__ssrefill_r+0x24>
 800ea90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ea92:	6023      	str	r3, [r4, #0]
 800ea94:	bd10      	pop	{r4, pc}
 800ea96:	6923      	ldr	r3, [r4, #16]
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	6063      	str	r3, [r4, #4]
 800ea9e:	89a3      	ldrh	r3, [r4, #12]
 800eaa0:	f043 0320 	orr.w	r3, r3, #32
 800eaa4:	81a3      	strh	r3, [r4, #12]
 800eaa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eaaa:	e7f3      	b.n	800ea94 <__ssrefill_r+0x22>

0800eaac <__ssvfiscanf_r>:
 800eaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab0:	460c      	mov	r4, r1
 800eab2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800eab6:	2100      	movs	r1, #0
 800eab8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800eabc:	49a5      	ldr	r1, [pc, #660]	@ (800ed54 <__ssvfiscanf_r+0x2a8>)
 800eabe:	91a0      	str	r1, [sp, #640]	@ 0x280
 800eac0:	f10d 0804 	add.w	r8, sp, #4
 800eac4:	49a4      	ldr	r1, [pc, #656]	@ (800ed58 <__ssvfiscanf_r+0x2ac>)
 800eac6:	4fa5      	ldr	r7, [pc, #660]	@ (800ed5c <__ssvfiscanf_r+0x2b0>)
 800eac8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800eacc:	4606      	mov	r6, r0
 800eace:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	7813      	ldrb	r3, [r2, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 8158 	beq.w	800ed8a <__ssvfiscanf_r+0x2de>
 800eada:	5cf9      	ldrb	r1, [r7, r3]
 800eadc:	f011 0108 	ands.w	r1, r1, #8
 800eae0:	f102 0501 	add.w	r5, r2, #1
 800eae4:	d019      	beq.n	800eb1a <__ssvfiscanf_r+0x6e>
 800eae6:	6863      	ldr	r3, [r4, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	dd0f      	ble.n	800eb0c <__ssvfiscanf_r+0x60>
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	781a      	ldrb	r2, [r3, #0]
 800eaf0:	5cba      	ldrb	r2, [r7, r2]
 800eaf2:	0712      	lsls	r2, r2, #28
 800eaf4:	d401      	bmi.n	800eafa <__ssvfiscanf_r+0x4e>
 800eaf6:	462a      	mov	r2, r5
 800eaf8:	e7eb      	b.n	800ead2 <__ssvfiscanf_r+0x26>
 800eafa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eafc:	3201      	adds	r2, #1
 800eafe:	9245      	str	r2, [sp, #276]	@ 0x114
 800eb00:	6862      	ldr	r2, [r4, #4]
 800eb02:	3301      	adds	r3, #1
 800eb04:	3a01      	subs	r2, #1
 800eb06:	6062      	str	r2, [r4, #4]
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	e7ec      	b.n	800eae6 <__ssvfiscanf_r+0x3a>
 800eb0c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eb0e:	4621      	mov	r1, r4
 800eb10:	4630      	mov	r0, r6
 800eb12:	4798      	blx	r3
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d0e9      	beq.n	800eaec <__ssvfiscanf_r+0x40>
 800eb18:	e7ed      	b.n	800eaf6 <__ssvfiscanf_r+0x4a>
 800eb1a:	2b25      	cmp	r3, #37	@ 0x25
 800eb1c:	d012      	beq.n	800eb44 <__ssvfiscanf_r+0x98>
 800eb1e:	4699      	mov	r9, r3
 800eb20:	6863      	ldr	r3, [r4, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f340 8093 	ble.w	800ec4e <__ssvfiscanf_r+0x1a2>
 800eb28:	6822      	ldr	r2, [r4, #0]
 800eb2a:	7813      	ldrb	r3, [r2, #0]
 800eb2c:	454b      	cmp	r3, r9
 800eb2e:	f040 812c 	bne.w	800ed8a <__ssvfiscanf_r+0x2de>
 800eb32:	6863      	ldr	r3, [r4, #4]
 800eb34:	3b01      	subs	r3, #1
 800eb36:	6063      	str	r3, [r4, #4]
 800eb38:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800eb3a:	3201      	adds	r2, #1
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	6022      	str	r2, [r4, #0]
 800eb40:	9345      	str	r3, [sp, #276]	@ 0x114
 800eb42:	e7d8      	b.n	800eaf6 <__ssvfiscanf_r+0x4a>
 800eb44:	9141      	str	r1, [sp, #260]	@ 0x104
 800eb46:	9143      	str	r1, [sp, #268]	@ 0x10c
 800eb48:	7853      	ldrb	r3, [r2, #1]
 800eb4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb4c:	bf02      	ittt	eq
 800eb4e:	2310      	moveq	r3, #16
 800eb50:	1c95      	addeq	r5, r2, #2
 800eb52:	9341      	streq	r3, [sp, #260]	@ 0x104
 800eb54:	220a      	movs	r2, #10
 800eb56:	46a9      	mov	r9, r5
 800eb58:	f819 1b01 	ldrb.w	r1, [r9], #1
 800eb5c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800eb60:	2b09      	cmp	r3, #9
 800eb62:	d91e      	bls.n	800eba2 <__ssvfiscanf_r+0xf6>
 800eb64:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ed60 <__ssvfiscanf_r+0x2b4>
 800eb68:	2203      	movs	r2, #3
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	f7f1 fb40 	bl	80001f0 <memchr>
 800eb70:	b138      	cbz	r0, 800eb82 <__ssvfiscanf_r+0xd6>
 800eb72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800eb74:	eba0 000a 	sub.w	r0, r0, sl
 800eb78:	2301      	movs	r3, #1
 800eb7a:	4083      	lsls	r3, r0
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	9341      	str	r3, [sp, #260]	@ 0x104
 800eb80:	464d      	mov	r5, r9
 800eb82:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb86:	2b78      	cmp	r3, #120	@ 0x78
 800eb88:	d806      	bhi.n	800eb98 <__ssvfiscanf_r+0xec>
 800eb8a:	2b57      	cmp	r3, #87	@ 0x57
 800eb8c:	d810      	bhi.n	800ebb0 <__ssvfiscanf_r+0x104>
 800eb8e:	2b25      	cmp	r3, #37	@ 0x25
 800eb90:	d0c5      	beq.n	800eb1e <__ssvfiscanf_r+0x72>
 800eb92:	d857      	bhi.n	800ec44 <__ssvfiscanf_r+0x198>
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d065      	beq.n	800ec64 <__ssvfiscanf_r+0x1b8>
 800eb98:	2303      	movs	r3, #3
 800eb9a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800eb9c:	230a      	movs	r3, #10
 800eb9e:	9342      	str	r3, [sp, #264]	@ 0x108
 800eba0:	e078      	b.n	800ec94 <__ssvfiscanf_r+0x1e8>
 800eba2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800eba4:	fb02 1103 	mla	r1, r2, r3, r1
 800eba8:	3930      	subs	r1, #48	@ 0x30
 800ebaa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ebac:	464d      	mov	r5, r9
 800ebae:	e7d2      	b.n	800eb56 <__ssvfiscanf_r+0xaa>
 800ebb0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ebb4:	2a20      	cmp	r2, #32
 800ebb6:	d8ef      	bhi.n	800eb98 <__ssvfiscanf_r+0xec>
 800ebb8:	a101      	add	r1, pc, #4	@ (adr r1, 800ebc0 <__ssvfiscanf_r+0x114>)
 800ebba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ebbe:	bf00      	nop
 800ebc0:	0800ec73 	.word	0x0800ec73
 800ebc4:	0800eb99 	.word	0x0800eb99
 800ebc8:	0800eb99 	.word	0x0800eb99
 800ebcc:	0800eccd 	.word	0x0800eccd
 800ebd0:	0800eb99 	.word	0x0800eb99
 800ebd4:	0800eb99 	.word	0x0800eb99
 800ebd8:	0800eb99 	.word	0x0800eb99
 800ebdc:	0800eb99 	.word	0x0800eb99
 800ebe0:	0800eb99 	.word	0x0800eb99
 800ebe4:	0800eb99 	.word	0x0800eb99
 800ebe8:	0800eb99 	.word	0x0800eb99
 800ebec:	0800ece3 	.word	0x0800ece3
 800ebf0:	0800ecc9 	.word	0x0800ecc9
 800ebf4:	0800ec4b 	.word	0x0800ec4b
 800ebf8:	0800ec4b 	.word	0x0800ec4b
 800ebfc:	0800ec4b 	.word	0x0800ec4b
 800ec00:	0800eb99 	.word	0x0800eb99
 800ec04:	0800ec85 	.word	0x0800ec85
 800ec08:	0800eb99 	.word	0x0800eb99
 800ec0c:	0800eb99 	.word	0x0800eb99
 800ec10:	0800eb99 	.word	0x0800eb99
 800ec14:	0800eb99 	.word	0x0800eb99
 800ec18:	0800ecf3 	.word	0x0800ecf3
 800ec1c:	0800ec8d 	.word	0x0800ec8d
 800ec20:	0800ec6b 	.word	0x0800ec6b
 800ec24:	0800eb99 	.word	0x0800eb99
 800ec28:	0800eb99 	.word	0x0800eb99
 800ec2c:	0800ecef 	.word	0x0800ecef
 800ec30:	0800eb99 	.word	0x0800eb99
 800ec34:	0800ecc9 	.word	0x0800ecc9
 800ec38:	0800eb99 	.word	0x0800eb99
 800ec3c:	0800eb99 	.word	0x0800eb99
 800ec40:	0800ec73 	.word	0x0800ec73
 800ec44:	3b45      	subs	r3, #69	@ 0x45
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d8a6      	bhi.n	800eb98 <__ssvfiscanf_r+0xec>
 800ec4a:	2305      	movs	r3, #5
 800ec4c:	e021      	b.n	800ec92 <__ssvfiscanf_r+0x1e6>
 800ec4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ec50:	4621      	mov	r1, r4
 800ec52:	4630      	mov	r0, r6
 800ec54:	4798      	blx	r3
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f43f af66 	beq.w	800eb28 <__ssvfiscanf_r+0x7c>
 800ec5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	f040 808b 	bne.w	800ed7a <__ssvfiscanf_r+0x2ce>
 800ec64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec68:	e08b      	b.n	800ed82 <__ssvfiscanf_r+0x2d6>
 800ec6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ec6c:	f042 0220 	orr.w	r2, r2, #32
 800ec70:	9241      	str	r2, [sp, #260]	@ 0x104
 800ec72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ec74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ec78:	9241      	str	r2, [sp, #260]	@ 0x104
 800ec7a:	2210      	movs	r2, #16
 800ec7c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ec7e:	9242      	str	r2, [sp, #264]	@ 0x108
 800ec80:	d902      	bls.n	800ec88 <__ssvfiscanf_r+0x1dc>
 800ec82:	e005      	b.n	800ec90 <__ssvfiscanf_r+0x1e4>
 800ec84:	2300      	movs	r3, #0
 800ec86:	9342      	str	r3, [sp, #264]	@ 0x108
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e002      	b.n	800ec92 <__ssvfiscanf_r+0x1e6>
 800ec8c:	2308      	movs	r3, #8
 800ec8e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ec90:	2304      	movs	r3, #4
 800ec92:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ec94:	6863      	ldr	r3, [r4, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	dd39      	ble.n	800ed0e <__ssvfiscanf_r+0x262>
 800ec9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ec9c:	0659      	lsls	r1, r3, #25
 800ec9e:	d404      	bmi.n	800ecaa <__ssvfiscanf_r+0x1fe>
 800eca0:	6823      	ldr	r3, [r4, #0]
 800eca2:	781a      	ldrb	r2, [r3, #0]
 800eca4:	5cba      	ldrb	r2, [r7, r2]
 800eca6:	0712      	lsls	r2, r2, #28
 800eca8:	d438      	bmi.n	800ed1c <__ssvfiscanf_r+0x270>
 800ecaa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	dc47      	bgt.n	800ed40 <__ssvfiscanf_r+0x294>
 800ecb0:	466b      	mov	r3, sp
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	a941      	add	r1, sp, #260	@ 0x104
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f000 fb3c 	bl	800f334 <_scanf_chars>
 800ecbc:	2801      	cmp	r0, #1
 800ecbe:	d064      	beq.n	800ed8a <__ssvfiscanf_r+0x2de>
 800ecc0:	2802      	cmp	r0, #2
 800ecc2:	f47f af18 	bne.w	800eaf6 <__ssvfiscanf_r+0x4a>
 800ecc6:	e7c9      	b.n	800ec5c <__ssvfiscanf_r+0x1b0>
 800ecc8:	220a      	movs	r2, #10
 800ecca:	e7d7      	b.n	800ec7c <__ssvfiscanf_r+0x1d0>
 800eccc:	4629      	mov	r1, r5
 800ecce:	4640      	mov	r0, r8
 800ecd0:	f000 fd2a 	bl	800f728 <__sccl>
 800ecd4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ecd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecda:	9341      	str	r3, [sp, #260]	@ 0x104
 800ecdc:	4605      	mov	r5, r0
 800ecde:	2301      	movs	r3, #1
 800ece0:	e7d7      	b.n	800ec92 <__ssvfiscanf_r+0x1e6>
 800ece2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ece4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ece8:	9341      	str	r3, [sp, #260]	@ 0x104
 800ecea:	2300      	movs	r3, #0
 800ecec:	e7d1      	b.n	800ec92 <__ssvfiscanf_r+0x1e6>
 800ecee:	2302      	movs	r3, #2
 800ecf0:	e7cf      	b.n	800ec92 <__ssvfiscanf_r+0x1e6>
 800ecf2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ecf4:	06c3      	lsls	r3, r0, #27
 800ecf6:	f53f aefe 	bmi.w	800eaf6 <__ssvfiscanf_r+0x4a>
 800ecfa:	9b00      	ldr	r3, [sp, #0]
 800ecfc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ecfe:	1d19      	adds	r1, r3, #4
 800ed00:	9100      	str	r1, [sp, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	07c0      	lsls	r0, r0, #31
 800ed06:	bf4c      	ite	mi
 800ed08:	801a      	strhmi	r2, [r3, #0]
 800ed0a:	601a      	strpl	r2, [r3, #0]
 800ed0c:	e6f3      	b.n	800eaf6 <__ssvfiscanf_r+0x4a>
 800ed0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ed10:	4621      	mov	r1, r4
 800ed12:	4630      	mov	r0, r6
 800ed14:	4798      	blx	r3
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d0bf      	beq.n	800ec9a <__ssvfiscanf_r+0x1ee>
 800ed1a:	e79f      	b.n	800ec5c <__ssvfiscanf_r+0x1b0>
 800ed1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ed1e:	3201      	adds	r2, #1
 800ed20:	9245      	str	r2, [sp, #276]	@ 0x114
 800ed22:	6862      	ldr	r2, [r4, #4]
 800ed24:	3a01      	subs	r2, #1
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	6062      	str	r2, [r4, #4]
 800ed2a:	dd02      	ble.n	800ed32 <__ssvfiscanf_r+0x286>
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	6023      	str	r3, [r4, #0]
 800ed30:	e7b6      	b.n	800eca0 <__ssvfiscanf_r+0x1f4>
 800ed32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ed34:	4621      	mov	r1, r4
 800ed36:	4630      	mov	r0, r6
 800ed38:	4798      	blx	r3
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d0b0      	beq.n	800eca0 <__ssvfiscanf_r+0x1f4>
 800ed3e:	e78d      	b.n	800ec5c <__ssvfiscanf_r+0x1b0>
 800ed40:	2b04      	cmp	r3, #4
 800ed42:	dc0f      	bgt.n	800ed64 <__ssvfiscanf_r+0x2b8>
 800ed44:	466b      	mov	r3, sp
 800ed46:	4622      	mov	r2, r4
 800ed48:	a941      	add	r1, sp, #260	@ 0x104
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f000 fb4c 	bl	800f3e8 <_scanf_i>
 800ed50:	e7b4      	b.n	800ecbc <__ssvfiscanf_r+0x210>
 800ed52:	bf00      	nop
 800ed54:	0800e9fd 	.word	0x0800e9fd
 800ed58:	0800ea73 	.word	0x0800ea73
 800ed5c:	080120a1 	.word	0x080120a1
 800ed60:	080121a7 	.word	0x080121a7
 800ed64:	4b0a      	ldr	r3, [pc, #40]	@ (800ed90 <__ssvfiscanf_r+0x2e4>)
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	f43f aec5 	beq.w	800eaf6 <__ssvfiscanf_r+0x4a>
 800ed6c:	466b      	mov	r3, sp
 800ed6e:	4622      	mov	r2, r4
 800ed70:	a941      	add	r1, sp, #260	@ 0x104
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7fe f906 	bl	800cf84 <_scanf_float>
 800ed78:	e7a0      	b.n	800ecbc <__ssvfiscanf_r+0x210>
 800ed7a:	89a3      	ldrh	r3, [r4, #12]
 800ed7c:	065b      	lsls	r3, r3, #25
 800ed7e:	f53f af71 	bmi.w	800ec64 <__ssvfiscanf_r+0x1b8>
 800ed82:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ed86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed8a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ed8c:	e7f9      	b.n	800ed82 <__ssvfiscanf_r+0x2d6>
 800ed8e:	bf00      	nop
 800ed90:	0800cf85 	.word	0x0800cf85

0800ed94 <__sfputc_r>:
 800ed94:	6893      	ldr	r3, [r2, #8]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	b410      	push	{r4}
 800ed9c:	6093      	str	r3, [r2, #8]
 800ed9e:	da08      	bge.n	800edb2 <__sfputc_r+0x1e>
 800eda0:	6994      	ldr	r4, [r2, #24]
 800eda2:	42a3      	cmp	r3, r4
 800eda4:	db01      	blt.n	800edaa <__sfputc_r+0x16>
 800eda6:	290a      	cmp	r1, #10
 800eda8:	d103      	bne.n	800edb2 <__sfputc_r+0x1e>
 800edaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edae:	f000 bd2e 	b.w	800f80e <__swbuf_r>
 800edb2:	6813      	ldr	r3, [r2, #0]
 800edb4:	1c58      	adds	r0, r3, #1
 800edb6:	6010      	str	r0, [r2, #0]
 800edb8:	7019      	strb	r1, [r3, #0]
 800edba:	4608      	mov	r0, r1
 800edbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc0:	4770      	bx	lr

0800edc2 <__sfputs_r>:
 800edc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	4614      	mov	r4, r2
 800edca:	18d5      	adds	r5, r2, r3
 800edcc:	42ac      	cmp	r4, r5
 800edce:	d101      	bne.n	800edd4 <__sfputs_r+0x12>
 800edd0:	2000      	movs	r0, #0
 800edd2:	e007      	b.n	800ede4 <__sfputs_r+0x22>
 800edd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd8:	463a      	mov	r2, r7
 800edda:	4630      	mov	r0, r6
 800eddc:	f7ff ffda 	bl	800ed94 <__sfputc_r>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d1f3      	bne.n	800edcc <__sfputs_r+0xa>
 800ede4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ede8 <_vfiprintf_r>:
 800ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	460d      	mov	r5, r1
 800edee:	b09d      	sub	sp, #116	@ 0x74
 800edf0:	4614      	mov	r4, r2
 800edf2:	4698      	mov	r8, r3
 800edf4:	4606      	mov	r6, r0
 800edf6:	b118      	cbz	r0, 800ee00 <_vfiprintf_r+0x18>
 800edf8:	6a03      	ldr	r3, [r0, #32]
 800edfa:	b90b      	cbnz	r3, 800ee00 <_vfiprintf_r+0x18>
 800edfc:	f7fe fb62 	bl	800d4c4 <__sinit>
 800ee00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee02:	07d9      	lsls	r1, r3, #31
 800ee04:	d405      	bmi.n	800ee12 <_vfiprintf_r+0x2a>
 800ee06:	89ab      	ldrh	r3, [r5, #12]
 800ee08:	059a      	lsls	r2, r3, #22
 800ee0a:	d402      	bmi.n	800ee12 <_vfiprintf_r+0x2a>
 800ee0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee0e:	f7fe fd02 	bl	800d816 <__retarget_lock_acquire_recursive>
 800ee12:	89ab      	ldrh	r3, [r5, #12]
 800ee14:	071b      	lsls	r3, r3, #28
 800ee16:	d501      	bpl.n	800ee1c <_vfiprintf_r+0x34>
 800ee18:	692b      	ldr	r3, [r5, #16]
 800ee1a:	b99b      	cbnz	r3, 800ee44 <_vfiprintf_r+0x5c>
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f000 fd34 	bl	800f88c <__swsetup_r>
 800ee24:	b170      	cbz	r0, 800ee44 <_vfiprintf_r+0x5c>
 800ee26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee28:	07dc      	lsls	r4, r3, #31
 800ee2a:	d504      	bpl.n	800ee36 <_vfiprintf_r+0x4e>
 800ee2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee30:	b01d      	add	sp, #116	@ 0x74
 800ee32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee36:	89ab      	ldrh	r3, [r5, #12]
 800ee38:	0598      	lsls	r0, r3, #22
 800ee3a:	d4f7      	bmi.n	800ee2c <_vfiprintf_r+0x44>
 800ee3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee3e:	f7fe fceb 	bl	800d818 <__retarget_lock_release_recursive>
 800ee42:	e7f3      	b.n	800ee2c <_vfiprintf_r+0x44>
 800ee44:	2300      	movs	r3, #0
 800ee46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee48:	2320      	movs	r3, #32
 800ee4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee52:	2330      	movs	r3, #48	@ 0x30
 800ee54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f004 <_vfiprintf_r+0x21c>
 800ee58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee5c:	f04f 0901 	mov.w	r9, #1
 800ee60:	4623      	mov	r3, r4
 800ee62:	469a      	mov	sl, r3
 800ee64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee68:	b10a      	cbz	r2, 800ee6e <_vfiprintf_r+0x86>
 800ee6a:	2a25      	cmp	r2, #37	@ 0x25
 800ee6c:	d1f9      	bne.n	800ee62 <_vfiprintf_r+0x7a>
 800ee6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee72:	d00b      	beq.n	800ee8c <_vfiprintf_r+0xa4>
 800ee74:	465b      	mov	r3, fp
 800ee76:	4622      	mov	r2, r4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f7ff ffa1 	bl	800edc2 <__sfputs_r>
 800ee80:	3001      	adds	r0, #1
 800ee82:	f000 80a7 	beq.w	800efd4 <_vfiprintf_r+0x1ec>
 800ee86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee88:	445a      	add	r2, fp
 800ee8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 809f 	beq.w	800efd4 <_vfiprintf_r+0x1ec>
 800ee96:	2300      	movs	r3, #0
 800ee98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea0:	f10a 0a01 	add.w	sl, sl, #1
 800eea4:	9304      	str	r3, [sp, #16]
 800eea6:	9307      	str	r3, [sp, #28]
 800eea8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeac:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeae:	4654      	mov	r4, sl
 800eeb0:	2205      	movs	r2, #5
 800eeb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb6:	4853      	ldr	r0, [pc, #332]	@ (800f004 <_vfiprintf_r+0x21c>)
 800eeb8:	f7f1 f99a 	bl	80001f0 <memchr>
 800eebc:	9a04      	ldr	r2, [sp, #16]
 800eebe:	b9d8      	cbnz	r0, 800eef8 <_vfiprintf_r+0x110>
 800eec0:	06d1      	lsls	r1, r2, #27
 800eec2:	bf44      	itt	mi
 800eec4:	2320      	movmi	r3, #32
 800eec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeca:	0713      	lsls	r3, r2, #28
 800eecc:	bf44      	itt	mi
 800eece:	232b      	movmi	r3, #43	@ 0x2b
 800eed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed4:	f89a 3000 	ldrb.w	r3, [sl]
 800eed8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeda:	d015      	beq.n	800ef08 <_vfiprintf_r+0x120>
 800eedc:	9a07      	ldr	r2, [sp, #28]
 800eede:	4654      	mov	r4, sl
 800eee0:	2000      	movs	r0, #0
 800eee2:	f04f 0c0a 	mov.w	ip, #10
 800eee6:	4621      	mov	r1, r4
 800eee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeec:	3b30      	subs	r3, #48	@ 0x30
 800eeee:	2b09      	cmp	r3, #9
 800eef0:	d94b      	bls.n	800ef8a <_vfiprintf_r+0x1a2>
 800eef2:	b1b0      	cbz	r0, 800ef22 <_vfiprintf_r+0x13a>
 800eef4:	9207      	str	r2, [sp, #28]
 800eef6:	e014      	b.n	800ef22 <_vfiprintf_r+0x13a>
 800eef8:	eba0 0308 	sub.w	r3, r0, r8
 800eefc:	fa09 f303 	lsl.w	r3, r9, r3
 800ef00:	4313      	orrs	r3, r2
 800ef02:	9304      	str	r3, [sp, #16]
 800ef04:	46a2      	mov	sl, r4
 800ef06:	e7d2      	b.n	800eeae <_vfiprintf_r+0xc6>
 800ef08:	9b03      	ldr	r3, [sp, #12]
 800ef0a:	1d19      	adds	r1, r3, #4
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	9103      	str	r1, [sp, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	bfbb      	ittet	lt
 800ef14:	425b      	neglt	r3, r3
 800ef16:	f042 0202 	orrlt.w	r2, r2, #2
 800ef1a:	9307      	strge	r3, [sp, #28]
 800ef1c:	9307      	strlt	r3, [sp, #28]
 800ef1e:	bfb8      	it	lt
 800ef20:	9204      	strlt	r2, [sp, #16]
 800ef22:	7823      	ldrb	r3, [r4, #0]
 800ef24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef26:	d10a      	bne.n	800ef3e <_vfiprintf_r+0x156>
 800ef28:	7863      	ldrb	r3, [r4, #1]
 800ef2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef2c:	d132      	bne.n	800ef94 <_vfiprintf_r+0x1ac>
 800ef2e:	9b03      	ldr	r3, [sp, #12]
 800ef30:	1d1a      	adds	r2, r3, #4
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	9203      	str	r2, [sp, #12]
 800ef36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef3a:	3402      	adds	r4, #2
 800ef3c:	9305      	str	r3, [sp, #20]
 800ef3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f014 <_vfiprintf_r+0x22c>
 800ef42:	7821      	ldrb	r1, [r4, #0]
 800ef44:	2203      	movs	r2, #3
 800ef46:	4650      	mov	r0, sl
 800ef48:	f7f1 f952 	bl	80001f0 <memchr>
 800ef4c:	b138      	cbz	r0, 800ef5e <_vfiprintf_r+0x176>
 800ef4e:	9b04      	ldr	r3, [sp, #16]
 800ef50:	eba0 000a 	sub.w	r0, r0, sl
 800ef54:	2240      	movs	r2, #64	@ 0x40
 800ef56:	4082      	lsls	r2, r0
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	3401      	adds	r4, #1
 800ef5c:	9304      	str	r3, [sp, #16]
 800ef5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef62:	4829      	ldr	r0, [pc, #164]	@ (800f008 <_vfiprintf_r+0x220>)
 800ef64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef68:	2206      	movs	r2, #6
 800ef6a:	f7f1 f941 	bl	80001f0 <memchr>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	d03f      	beq.n	800eff2 <_vfiprintf_r+0x20a>
 800ef72:	4b26      	ldr	r3, [pc, #152]	@ (800f00c <_vfiprintf_r+0x224>)
 800ef74:	bb1b      	cbnz	r3, 800efbe <_vfiprintf_r+0x1d6>
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	3307      	adds	r3, #7
 800ef7a:	f023 0307 	bic.w	r3, r3, #7
 800ef7e:	3308      	adds	r3, #8
 800ef80:	9303      	str	r3, [sp, #12]
 800ef82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef84:	443b      	add	r3, r7
 800ef86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef88:	e76a      	b.n	800ee60 <_vfiprintf_r+0x78>
 800ef8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef8e:	460c      	mov	r4, r1
 800ef90:	2001      	movs	r0, #1
 800ef92:	e7a8      	b.n	800eee6 <_vfiprintf_r+0xfe>
 800ef94:	2300      	movs	r3, #0
 800ef96:	3401      	adds	r4, #1
 800ef98:	9305      	str	r3, [sp, #20]
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	f04f 0c0a 	mov.w	ip, #10
 800efa0:	4620      	mov	r0, r4
 800efa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa6:	3a30      	subs	r2, #48	@ 0x30
 800efa8:	2a09      	cmp	r2, #9
 800efaa:	d903      	bls.n	800efb4 <_vfiprintf_r+0x1cc>
 800efac:	2b00      	cmp	r3, #0
 800efae:	d0c6      	beq.n	800ef3e <_vfiprintf_r+0x156>
 800efb0:	9105      	str	r1, [sp, #20]
 800efb2:	e7c4      	b.n	800ef3e <_vfiprintf_r+0x156>
 800efb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800efb8:	4604      	mov	r4, r0
 800efba:	2301      	movs	r3, #1
 800efbc:	e7f0      	b.n	800efa0 <_vfiprintf_r+0x1b8>
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	462a      	mov	r2, r5
 800efc4:	4b12      	ldr	r3, [pc, #72]	@ (800f010 <_vfiprintf_r+0x228>)
 800efc6:	a904      	add	r1, sp, #16
 800efc8:	4630      	mov	r0, r6
 800efca:	f3af 8000 	nop.w
 800efce:	4607      	mov	r7, r0
 800efd0:	1c78      	adds	r0, r7, #1
 800efd2:	d1d6      	bne.n	800ef82 <_vfiprintf_r+0x19a>
 800efd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efd6:	07d9      	lsls	r1, r3, #31
 800efd8:	d405      	bmi.n	800efe6 <_vfiprintf_r+0x1fe>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	059a      	lsls	r2, r3, #22
 800efde:	d402      	bmi.n	800efe6 <_vfiprintf_r+0x1fe>
 800efe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efe2:	f7fe fc19 	bl	800d818 <__retarget_lock_release_recursive>
 800efe6:	89ab      	ldrh	r3, [r5, #12]
 800efe8:	065b      	lsls	r3, r3, #25
 800efea:	f53f af1f 	bmi.w	800ee2c <_vfiprintf_r+0x44>
 800efee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eff0:	e71e      	b.n	800ee30 <_vfiprintf_r+0x48>
 800eff2:	ab03      	add	r3, sp, #12
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	462a      	mov	r2, r5
 800eff8:	4b05      	ldr	r3, [pc, #20]	@ (800f010 <_vfiprintf_r+0x228>)
 800effa:	a904      	add	r1, sp, #16
 800effc:	4630      	mov	r0, r6
 800effe:	f000 f879 	bl	800f0f4 <_printf_i>
 800f002:	e7e4      	b.n	800efce <_vfiprintf_r+0x1e6>
 800f004:	080121a1 	.word	0x080121a1
 800f008:	080121ab 	.word	0x080121ab
 800f00c:	00000000 	.word	0x00000000
 800f010:	0800edc3 	.word	0x0800edc3
 800f014:	080121a7 	.word	0x080121a7

0800f018 <_printf_common>:
 800f018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f01c:	4616      	mov	r6, r2
 800f01e:	4698      	mov	r8, r3
 800f020:	688a      	ldr	r2, [r1, #8]
 800f022:	690b      	ldr	r3, [r1, #16]
 800f024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f028:	4293      	cmp	r3, r2
 800f02a:	bfb8      	it	lt
 800f02c:	4613      	movlt	r3, r2
 800f02e:	6033      	str	r3, [r6, #0]
 800f030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f034:	4607      	mov	r7, r0
 800f036:	460c      	mov	r4, r1
 800f038:	b10a      	cbz	r2, 800f03e <_printf_common+0x26>
 800f03a:	3301      	adds	r3, #1
 800f03c:	6033      	str	r3, [r6, #0]
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	0699      	lsls	r1, r3, #26
 800f042:	bf42      	ittt	mi
 800f044:	6833      	ldrmi	r3, [r6, #0]
 800f046:	3302      	addmi	r3, #2
 800f048:	6033      	strmi	r3, [r6, #0]
 800f04a:	6825      	ldr	r5, [r4, #0]
 800f04c:	f015 0506 	ands.w	r5, r5, #6
 800f050:	d106      	bne.n	800f060 <_printf_common+0x48>
 800f052:	f104 0a19 	add.w	sl, r4, #25
 800f056:	68e3      	ldr	r3, [r4, #12]
 800f058:	6832      	ldr	r2, [r6, #0]
 800f05a:	1a9b      	subs	r3, r3, r2
 800f05c:	42ab      	cmp	r3, r5
 800f05e:	dc26      	bgt.n	800f0ae <_printf_common+0x96>
 800f060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f064:	6822      	ldr	r2, [r4, #0]
 800f066:	3b00      	subs	r3, #0
 800f068:	bf18      	it	ne
 800f06a:	2301      	movne	r3, #1
 800f06c:	0692      	lsls	r2, r2, #26
 800f06e:	d42b      	bmi.n	800f0c8 <_printf_common+0xb0>
 800f070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f074:	4641      	mov	r1, r8
 800f076:	4638      	mov	r0, r7
 800f078:	47c8      	blx	r9
 800f07a:	3001      	adds	r0, #1
 800f07c:	d01e      	beq.n	800f0bc <_printf_common+0xa4>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	6922      	ldr	r2, [r4, #16]
 800f082:	f003 0306 	and.w	r3, r3, #6
 800f086:	2b04      	cmp	r3, #4
 800f088:	bf02      	ittt	eq
 800f08a:	68e5      	ldreq	r5, [r4, #12]
 800f08c:	6833      	ldreq	r3, [r6, #0]
 800f08e:	1aed      	subeq	r5, r5, r3
 800f090:	68a3      	ldr	r3, [r4, #8]
 800f092:	bf0c      	ite	eq
 800f094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f098:	2500      	movne	r5, #0
 800f09a:	4293      	cmp	r3, r2
 800f09c:	bfc4      	itt	gt
 800f09e:	1a9b      	subgt	r3, r3, r2
 800f0a0:	18ed      	addgt	r5, r5, r3
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	341a      	adds	r4, #26
 800f0a6:	42b5      	cmp	r5, r6
 800f0a8:	d11a      	bne.n	800f0e0 <_printf_common+0xc8>
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	e008      	b.n	800f0c0 <_printf_common+0xa8>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	4652      	mov	r2, sl
 800f0b2:	4641      	mov	r1, r8
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	47c8      	blx	r9
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d103      	bne.n	800f0c4 <_printf_common+0xac>
 800f0bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c4:	3501      	adds	r5, #1
 800f0c6:	e7c6      	b.n	800f056 <_printf_common+0x3e>
 800f0c8:	18e1      	adds	r1, r4, r3
 800f0ca:	1c5a      	adds	r2, r3, #1
 800f0cc:	2030      	movs	r0, #48	@ 0x30
 800f0ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0d2:	4422      	add	r2, r4
 800f0d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0dc:	3302      	adds	r3, #2
 800f0de:	e7c7      	b.n	800f070 <_printf_common+0x58>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	4641      	mov	r1, r8
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	47c8      	blx	r9
 800f0ea:	3001      	adds	r0, #1
 800f0ec:	d0e6      	beq.n	800f0bc <_printf_common+0xa4>
 800f0ee:	3601      	adds	r6, #1
 800f0f0:	e7d9      	b.n	800f0a6 <_printf_common+0x8e>
	...

0800f0f4 <_printf_i>:
 800f0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f8:	7e0f      	ldrb	r7, [r1, #24]
 800f0fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0fc:	2f78      	cmp	r7, #120	@ 0x78
 800f0fe:	4691      	mov	r9, r2
 800f100:	4680      	mov	r8, r0
 800f102:	460c      	mov	r4, r1
 800f104:	469a      	mov	sl, r3
 800f106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f10a:	d807      	bhi.n	800f11c <_printf_i+0x28>
 800f10c:	2f62      	cmp	r7, #98	@ 0x62
 800f10e:	d80a      	bhi.n	800f126 <_printf_i+0x32>
 800f110:	2f00      	cmp	r7, #0
 800f112:	f000 80d2 	beq.w	800f2ba <_printf_i+0x1c6>
 800f116:	2f58      	cmp	r7, #88	@ 0x58
 800f118:	f000 80b9 	beq.w	800f28e <_printf_i+0x19a>
 800f11c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f124:	e03a      	b.n	800f19c <_printf_i+0xa8>
 800f126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f12a:	2b15      	cmp	r3, #21
 800f12c:	d8f6      	bhi.n	800f11c <_printf_i+0x28>
 800f12e:	a101      	add	r1, pc, #4	@ (adr r1, 800f134 <_printf_i+0x40>)
 800f130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f134:	0800f18d 	.word	0x0800f18d
 800f138:	0800f1a1 	.word	0x0800f1a1
 800f13c:	0800f11d 	.word	0x0800f11d
 800f140:	0800f11d 	.word	0x0800f11d
 800f144:	0800f11d 	.word	0x0800f11d
 800f148:	0800f11d 	.word	0x0800f11d
 800f14c:	0800f1a1 	.word	0x0800f1a1
 800f150:	0800f11d 	.word	0x0800f11d
 800f154:	0800f11d 	.word	0x0800f11d
 800f158:	0800f11d 	.word	0x0800f11d
 800f15c:	0800f11d 	.word	0x0800f11d
 800f160:	0800f2a1 	.word	0x0800f2a1
 800f164:	0800f1cb 	.word	0x0800f1cb
 800f168:	0800f25b 	.word	0x0800f25b
 800f16c:	0800f11d 	.word	0x0800f11d
 800f170:	0800f11d 	.word	0x0800f11d
 800f174:	0800f2c3 	.word	0x0800f2c3
 800f178:	0800f11d 	.word	0x0800f11d
 800f17c:	0800f1cb 	.word	0x0800f1cb
 800f180:	0800f11d 	.word	0x0800f11d
 800f184:	0800f11d 	.word	0x0800f11d
 800f188:	0800f263 	.word	0x0800f263
 800f18c:	6833      	ldr	r3, [r6, #0]
 800f18e:	1d1a      	adds	r2, r3, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	6032      	str	r2, [r6, #0]
 800f194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f19c:	2301      	movs	r3, #1
 800f19e:	e09d      	b.n	800f2dc <_printf_i+0x1e8>
 800f1a0:	6833      	ldr	r3, [r6, #0]
 800f1a2:	6820      	ldr	r0, [r4, #0]
 800f1a4:	1d19      	adds	r1, r3, #4
 800f1a6:	6031      	str	r1, [r6, #0]
 800f1a8:	0606      	lsls	r6, r0, #24
 800f1aa:	d501      	bpl.n	800f1b0 <_printf_i+0xbc>
 800f1ac:	681d      	ldr	r5, [r3, #0]
 800f1ae:	e003      	b.n	800f1b8 <_printf_i+0xc4>
 800f1b0:	0645      	lsls	r5, r0, #25
 800f1b2:	d5fb      	bpl.n	800f1ac <_printf_i+0xb8>
 800f1b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	da03      	bge.n	800f1c4 <_printf_i+0xd0>
 800f1bc:	232d      	movs	r3, #45	@ 0x2d
 800f1be:	426d      	negs	r5, r5
 800f1c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1c4:	4859      	ldr	r0, [pc, #356]	@ (800f32c <_printf_i+0x238>)
 800f1c6:	230a      	movs	r3, #10
 800f1c8:	e011      	b.n	800f1ee <_printf_i+0xfa>
 800f1ca:	6821      	ldr	r1, [r4, #0]
 800f1cc:	6833      	ldr	r3, [r6, #0]
 800f1ce:	0608      	lsls	r0, r1, #24
 800f1d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1d4:	d402      	bmi.n	800f1dc <_printf_i+0xe8>
 800f1d6:	0649      	lsls	r1, r1, #25
 800f1d8:	bf48      	it	mi
 800f1da:	b2ad      	uxthmi	r5, r5
 800f1dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1de:	4853      	ldr	r0, [pc, #332]	@ (800f32c <_printf_i+0x238>)
 800f1e0:	6033      	str	r3, [r6, #0]
 800f1e2:	bf14      	ite	ne
 800f1e4:	230a      	movne	r3, #10
 800f1e6:	2308      	moveq	r3, #8
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1ee:	6866      	ldr	r6, [r4, #4]
 800f1f0:	60a6      	str	r6, [r4, #8]
 800f1f2:	2e00      	cmp	r6, #0
 800f1f4:	bfa2      	ittt	ge
 800f1f6:	6821      	ldrge	r1, [r4, #0]
 800f1f8:	f021 0104 	bicge.w	r1, r1, #4
 800f1fc:	6021      	strge	r1, [r4, #0]
 800f1fe:	b90d      	cbnz	r5, 800f204 <_printf_i+0x110>
 800f200:	2e00      	cmp	r6, #0
 800f202:	d04b      	beq.n	800f29c <_printf_i+0x1a8>
 800f204:	4616      	mov	r6, r2
 800f206:	fbb5 f1f3 	udiv	r1, r5, r3
 800f20a:	fb03 5711 	mls	r7, r3, r1, r5
 800f20e:	5dc7      	ldrb	r7, [r0, r7]
 800f210:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f214:	462f      	mov	r7, r5
 800f216:	42bb      	cmp	r3, r7
 800f218:	460d      	mov	r5, r1
 800f21a:	d9f4      	bls.n	800f206 <_printf_i+0x112>
 800f21c:	2b08      	cmp	r3, #8
 800f21e:	d10b      	bne.n	800f238 <_printf_i+0x144>
 800f220:	6823      	ldr	r3, [r4, #0]
 800f222:	07df      	lsls	r7, r3, #31
 800f224:	d508      	bpl.n	800f238 <_printf_i+0x144>
 800f226:	6923      	ldr	r3, [r4, #16]
 800f228:	6861      	ldr	r1, [r4, #4]
 800f22a:	4299      	cmp	r1, r3
 800f22c:	bfde      	ittt	le
 800f22e:	2330      	movle	r3, #48	@ 0x30
 800f230:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f234:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f238:	1b92      	subs	r2, r2, r6
 800f23a:	6122      	str	r2, [r4, #16]
 800f23c:	f8cd a000 	str.w	sl, [sp]
 800f240:	464b      	mov	r3, r9
 800f242:	aa03      	add	r2, sp, #12
 800f244:	4621      	mov	r1, r4
 800f246:	4640      	mov	r0, r8
 800f248:	f7ff fee6 	bl	800f018 <_printf_common>
 800f24c:	3001      	adds	r0, #1
 800f24e:	d14a      	bne.n	800f2e6 <_printf_i+0x1f2>
 800f250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f254:	b004      	add	sp, #16
 800f256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	f043 0320 	orr.w	r3, r3, #32
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	4833      	ldr	r0, [pc, #204]	@ (800f330 <_printf_i+0x23c>)
 800f264:	2778      	movs	r7, #120	@ 0x78
 800f266:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	6831      	ldr	r1, [r6, #0]
 800f26e:	061f      	lsls	r7, r3, #24
 800f270:	f851 5b04 	ldr.w	r5, [r1], #4
 800f274:	d402      	bmi.n	800f27c <_printf_i+0x188>
 800f276:	065f      	lsls	r7, r3, #25
 800f278:	bf48      	it	mi
 800f27a:	b2ad      	uxthmi	r5, r5
 800f27c:	6031      	str	r1, [r6, #0]
 800f27e:	07d9      	lsls	r1, r3, #31
 800f280:	bf44      	itt	mi
 800f282:	f043 0320 	orrmi.w	r3, r3, #32
 800f286:	6023      	strmi	r3, [r4, #0]
 800f288:	b11d      	cbz	r5, 800f292 <_printf_i+0x19e>
 800f28a:	2310      	movs	r3, #16
 800f28c:	e7ac      	b.n	800f1e8 <_printf_i+0xf4>
 800f28e:	4827      	ldr	r0, [pc, #156]	@ (800f32c <_printf_i+0x238>)
 800f290:	e7e9      	b.n	800f266 <_printf_i+0x172>
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	f023 0320 	bic.w	r3, r3, #32
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	e7f6      	b.n	800f28a <_printf_i+0x196>
 800f29c:	4616      	mov	r6, r2
 800f29e:	e7bd      	b.n	800f21c <_printf_i+0x128>
 800f2a0:	6833      	ldr	r3, [r6, #0]
 800f2a2:	6825      	ldr	r5, [r4, #0]
 800f2a4:	6961      	ldr	r1, [r4, #20]
 800f2a6:	1d18      	adds	r0, r3, #4
 800f2a8:	6030      	str	r0, [r6, #0]
 800f2aa:	062e      	lsls	r6, r5, #24
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	d501      	bpl.n	800f2b4 <_printf_i+0x1c0>
 800f2b0:	6019      	str	r1, [r3, #0]
 800f2b2:	e002      	b.n	800f2ba <_printf_i+0x1c6>
 800f2b4:	0668      	lsls	r0, r5, #25
 800f2b6:	d5fb      	bpl.n	800f2b0 <_printf_i+0x1bc>
 800f2b8:	8019      	strh	r1, [r3, #0]
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	4616      	mov	r6, r2
 800f2c0:	e7bc      	b.n	800f23c <_printf_i+0x148>
 800f2c2:	6833      	ldr	r3, [r6, #0]
 800f2c4:	1d1a      	adds	r2, r3, #4
 800f2c6:	6032      	str	r2, [r6, #0]
 800f2c8:	681e      	ldr	r6, [r3, #0]
 800f2ca:	6862      	ldr	r2, [r4, #4]
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f7f0 ff8e 	bl	80001f0 <memchr>
 800f2d4:	b108      	cbz	r0, 800f2da <_printf_i+0x1e6>
 800f2d6:	1b80      	subs	r0, r0, r6
 800f2d8:	6060      	str	r0, [r4, #4]
 800f2da:	6863      	ldr	r3, [r4, #4]
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2e4:	e7aa      	b.n	800f23c <_printf_i+0x148>
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	4632      	mov	r2, r6
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	47d0      	blx	sl
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d0ad      	beq.n	800f250 <_printf_i+0x15c>
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	079b      	lsls	r3, r3, #30
 800f2f8:	d413      	bmi.n	800f322 <_printf_i+0x22e>
 800f2fa:	68e0      	ldr	r0, [r4, #12]
 800f2fc:	9b03      	ldr	r3, [sp, #12]
 800f2fe:	4298      	cmp	r0, r3
 800f300:	bfb8      	it	lt
 800f302:	4618      	movlt	r0, r3
 800f304:	e7a6      	b.n	800f254 <_printf_i+0x160>
 800f306:	2301      	movs	r3, #1
 800f308:	4632      	mov	r2, r6
 800f30a:	4649      	mov	r1, r9
 800f30c:	4640      	mov	r0, r8
 800f30e:	47d0      	blx	sl
 800f310:	3001      	adds	r0, #1
 800f312:	d09d      	beq.n	800f250 <_printf_i+0x15c>
 800f314:	3501      	adds	r5, #1
 800f316:	68e3      	ldr	r3, [r4, #12]
 800f318:	9903      	ldr	r1, [sp, #12]
 800f31a:	1a5b      	subs	r3, r3, r1
 800f31c:	42ab      	cmp	r3, r5
 800f31e:	dcf2      	bgt.n	800f306 <_printf_i+0x212>
 800f320:	e7eb      	b.n	800f2fa <_printf_i+0x206>
 800f322:	2500      	movs	r5, #0
 800f324:	f104 0619 	add.w	r6, r4, #25
 800f328:	e7f5      	b.n	800f316 <_printf_i+0x222>
 800f32a:	bf00      	nop
 800f32c:	080121b2 	.word	0x080121b2
 800f330:	080121c3 	.word	0x080121c3

0800f334 <_scanf_chars>:
 800f334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f338:	4615      	mov	r5, r2
 800f33a:	688a      	ldr	r2, [r1, #8]
 800f33c:	4680      	mov	r8, r0
 800f33e:	460c      	mov	r4, r1
 800f340:	b932      	cbnz	r2, 800f350 <_scanf_chars+0x1c>
 800f342:	698a      	ldr	r2, [r1, #24]
 800f344:	2a00      	cmp	r2, #0
 800f346:	bf14      	ite	ne
 800f348:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800f34c:	2201      	moveq	r2, #1
 800f34e:	608a      	str	r2, [r1, #8]
 800f350:	6822      	ldr	r2, [r4, #0]
 800f352:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f3e4 <_scanf_chars+0xb0>
 800f356:	06d1      	lsls	r1, r2, #27
 800f358:	bf5f      	itttt	pl
 800f35a:	681a      	ldrpl	r2, [r3, #0]
 800f35c:	1d11      	addpl	r1, r2, #4
 800f35e:	6019      	strpl	r1, [r3, #0]
 800f360:	6816      	ldrpl	r6, [r2, #0]
 800f362:	2700      	movs	r7, #0
 800f364:	69a0      	ldr	r0, [r4, #24]
 800f366:	b188      	cbz	r0, 800f38c <_scanf_chars+0x58>
 800f368:	2801      	cmp	r0, #1
 800f36a:	d107      	bne.n	800f37c <_scanf_chars+0x48>
 800f36c:	682b      	ldr	r3, [r5, #0]
 800f36e:	781a      	ldrb	r2, [r3, #0]
 800f370:	6963      	ldr	r3, [r4, #20]
 800f372:	5c9b      	ldrb	r3, [r3, r2]
 800f374:	b953      	cbnz	r3, 800f38c <_scanf_chars+0x58>
 800f376:	2f00      	cmp	r7, #0
 800f378:	d031      	beq.n	800f3de <_scanf_chars+0xaa>
 800f37a:	e022      	b.n	800f3c2 <_scanf_chars+0x8e>
 800f37c:	2802      	cmp	r0, #2
 800f37e:	d120      	bne.n	800f3c2 <_scanf_chars+0x8e>
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f388:	071b      	lsls	r3, r3, #28
 800f38a:	d41a      	bmi.n	800f3c2 <_scanf_chars+0x8e>
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	06da      	lsls	r2, r3, #27
 800f390:	bf5e      	ittt	pl
 800f392:	682b      	ldrpl	r3, [r5, #0]
 800f394:	781b      	ldrbpl	r3, [r3, #0]
 800f396:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f39a:	682a      	ldr	r2, [r5, #0]
 800f39c:	686b      	ldr	r3, [r5, #4]
 800f39e:	3201      	adds	r2, #1
 800f3a0:	602a      	str	r2, [r5, #0]
 800f3a2:	68a2      	ldr	r2, [r4, #8]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	3a01      	subs	r2, #1
 800f3a8:	606b      	str	r3, [r5, #4]
 800f3aa:	3701      	adds	r7, #1
 800f3ac:	60a2      	str	r2, [r4, #8]
 800f3ae:	b142      	cbz	r2, 800f3c2 <_scanf_chars+0x8e>
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	dcd7      	bgt.n	800f364 <_scanf_chars+0x30>
 800f3b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	4640      	mov	r0, r8
 800f3bc:	4798      	blx	r3
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d0d0      	beq.n	800f364 <_scanf_chars+0x30>
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	f013 0310 	ands.w	r3, r3, #16
 800f3c8:	d105      	bne.n	800f3d6 <_scanf_chars+0xa2>
 800f3ca:	68e2      	ldr	r2, [r4, #12]
 800f3cc:	3201      	adds	r2, #1
 800f3ce:	60e2      	str	r2, [r4, #12]
 800f3d0:	69a2      	ldr	r2, [r4, #24]
 800f3d2:	b102      	cbz	r2, 800f3d6 <_scanf_chars+0xa2>
 800f3d4:	7033      	strb	r3, [r6, #0]
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	443b      	add	r3, r7
 800f3da:	6123      	str	r3, [r4, #16]
 800f3dc:	2000      	movs	r0, #0
 800f3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e2:	bf00      	nop
 800f3e4:	080120a1 	.word	0x080120a1

0800f3e8 <_scanf_i>:
 800f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ec:	4698      	mov	r8, r3
 800f3ee:	4b74      	ldr	r3, [pc, #464]	@ (800f5c0 <_scanf_i+0x1d8>)
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	4682      	mov	sl, r0
 800f3f4:	4616      	mov	r6, r2
 800f3f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	ab03      	add	r3, sp, #12
 800f3fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f402:	4b70      	ldr	r3, [pc, #448]	@ (800f5c4 <_scanf_i+0x1dc>)
 800f404:	69a1      	ldr	r1, [r4, #24]
 800f406:	4a70      	ldr	r2, [pc, #448]	@ (800f5c8 <_scanf_i+0x1e0>)
 800f408:	2903      	cmp	r1, #3
 800f40a:	bf08      	it	eq
 800f40c:	461a      	moveq	r2, r3
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	9201      	str	r2, [sp, #4]
 800f412:	1e5a      	subs	r2, r3, #1
 800f414:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f418:	bf88      	it	hi
 800f41a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f41e:	4627      	mov	r7, r4
 800f420:	bf82      	ittt	hi
 800f422:	eb03 0905 	addhi.w	r9, r3, r5
 800f426:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f42a:	60a3      	strhi	r3, [r4, #8]
 800f42c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f430:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f434:	bf98      	it	ls
 800f436:	f04f 0900 	movls.w	r9, #0
 800f43a:	6023      	str	r3, [r4, #0]
 800f43c:	463d      	mov	r5, r7
 800f43e:	f04f 0b00 	mov.w	fp, #0
 800f442:	6831      	ldr	r1, [r6, #0]
 800f444:	ab03      	add	r3, sp, #12
 800f446:	7809      	ldrb	r1, [r1, #0]
 800f448:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f44c:	2202      	movs	r2, #2
 800f44e:	f7f0 fecf 	bl	80001f0 <memchr>
 800f452:	b328      	cbz	r0, 800f4a0 <_scanf_i+0xb8>
 800f454:	f1bb 0f01 	cmp.w	fp, #1
 800f458:	d159      	bne.n	800f50e <_scanf_i+0x126>
 800f45a:	6862      	ldr	r2, [r4, #4]
 800f45c:	b92a      	cbnz	r2, 800f46a <_scanf_i+0x82>
 800f45e:	6822      	ldr	r2, [r4, #0]
 800f460:	2108      	movs	r1, #8
 800f462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f466:	6061      	str	r1, [r4, #4]
 800f468:	6022      	str	r2, [r4, #0]
 800f46a:	6822      	ldr	r2, [r4, #0]
 800f46c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f470:	6022      	str	r2, [r4, #0]
 800f472:	68a2      	ldr	r2, [r4, #8]
 800f474:	1e51      	subs	r1, r2, #1
 800f476:	60a1      	str	r1, [r4, #8]
 800f478:	b192      	cbz	r2, 800f4a0 <_scanf_i+0xb8>
 800f47a:	6832      	ldr	r2, [r6, #0]
 800f47c:	1c51      	adds	r1, r2, #1
 800f47e:	6031      	str	r1, [r6, #0]
 800f480:	7812      	ldrb	r2, [r2, #0]
 800f482:	f805 2b01 	strb.w	r2, [r5], #1
 800f486:	6872      	ldr	r2, [r6, #4]
 800f488:	3a01      	subs	r2, #1
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	6072      	str	r2, [r6, #4]
 800f48e:	dc07      	bgt.n	800f4a0 <_scanf_i+0xb8>
 800f490:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f494:	4631      	mov	r1, r6
 800f496:	4650      	mov	r0, sl
 800f498:	4790      	blx	r2
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f040 8085 	bne.w	800f5aa <_scanf_i+0x1c2>
 800f4a0:	f10b 0b01 	add.w	fp, fp, #1
 800f4a4:	f1bb 0f03 	cmp.w	fp, #3
 800f4a8:	d1cb      	bne.n	800f442 <_scanf_i+0x5a>
 800f4aa:	6863      	ldr	r3, [r4, #4]
 800f4ac:	b90b      	cbnz	r3, 800f4b2 <_scanf_i+0xca>
 800f4ae:	230a      	movs	r3, #10
 800f4b0:	6063      	str	r3, [r4, #4]
 800f4b2:	6863      	ldr	r3, [r4, #4]
 800f4b4:	4945      	ldr	r1, [pc, #276]	@ (800f5cc <_scanf_i+0x1e4>)
 800f4b6:	6960      	ldr	r0, [r4, #20]
 800f4b8:	1ac9      	subs	r1, r1, r3
 800f4ba:	f000 f935 	bl	800f728 <__sccl>
 800f4be:	f04f 0b00 	mov.w	fp, #0
 800f4c2:	68a3      	ldr	r3, [r4, #8]
 800f4c4:	6822      	ldr	r2, [r4, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d03d      	beq.n	800f546 <_scanf_i+0x15e>
 800f4ca:	6831      	ldr	r1, [r6, #0]
 800f4cc:	6960      	ldr	r0, [r4, #20]
 800f4ce:	f891 c000 	ldrb.w	ip, [r1]
 800f4d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d035      	beq.n	800f546 <_scanf_i+0x15e>
 800f4da:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f4de:	d124      	bne.n	800f52a <_scanf_i+0x142>
 800f4e0:	0510      	lsls	r0, r2, #20
 800f4e2:	d522      	bpl.n	800f52a <_scanf_i+0x142>
 800f4e4:	f10b 0b01 	add.w	fp, fp, #1
 800f4e8:	f1b9 0f00 	cmp.w	r9, #0
 800f4ec:	d003      	beq.n	800f4f6 <_scanf_i+0x10e>
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800f4f4:	60a3      	str	r3, [r4, #8]
 800f4f6:	6873      	ldr	r3, [r6, #4]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	6073      	str	r3, [r6, #4]
 800f4fe:	dd1b      	ble.n	800f538 <_scanf_i+0x150>
 800f500:	6833      	ldr	r3, [r6, #0]
 800f502:	3301      	adds	r3, #1
 800f504:	6033      	str	r3, [r6, #0]
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	3b01      	subs	r3, #1
 800f50a:	60a3      	str	r3, [r4, #8]
 800f50c:	e7d9      	b.n	800f4c2 <_scanf_i+0xda>
 800f50e:	f1bb 0f02 	cmp.w	fp, #2
 800f512:	d1ae      	bne.n	800f472 <_scanf_i+0x8a>
 800f514:	6822      	ldr	r2, [r4, #0]
 800f516:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f51a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f51e:	d1bf      	bne.n	800f4a0 <_scanf_i+0xb8>
 800f520:	2110      	movs	r1, #16
 800f522:	6061      	str	r1, [r4, #4]
 800f524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f528:	e7a2      	b.n	800f470 <_scanf_i+0x88>
 800f52a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f52e:	6022      	str	r2, [r4, #0]
 800f530:	780b      	ldrb	r3, [r1, #0]
 800f532:	f805 3b01 	strb.w	r3, [r5], #1
 800f536:	e7de      	b.n	800f4f6 <_scanf_i+0x10e>
 800f538:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f53c:	4631      	mov	r1, r6
 800f53e:	4650      	mov	r0, sl
 800f540:	4798      	blx	r3
 800f542:	2800      	cmp	r0, #0
 800f544:	d0df      	beq.n	800f506 <_scanf_i+0x11e>
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	05d9      	lsls	r1, r3, #23
 800f54a:	d50d      	bpl.n	800f568 <_scanf_i+0x180>
 800f54c:	42bd      	cmp	r5, r7
 800f54e:	d909      	bls.n	800f564 <_scanf_i+0x17c>
 800f550:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f554:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f558:	4632      	mov	r2, r6
 800f55a:	4650      	mov	r0, sl
 800f55c:	4798      	blx	r3
 800f55e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800f562:	464d      	mov	r5, r9
 800f564:	42bd      	cmp	r5, r7
 800f566:	d028      	beq.n	800f5ba <_scanf_i+0x1d2>
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	f012 0210 	ands.w	r2, r2, #16
 800f56e:	d113      	bne.n	800f598 <_scanf_i+0x1b0>
 800f570:	702a      	strb	r2, [r5, #0]
 800f572:	6863      	ldr	r3, [r4, #4]
 800f574:	9e01      	ldr	r6, [sp, #4]
 800f576:	4639      	mov	r1, r7
 800f578:	4650      	mov	r0, sl
 800f57a:	47b0      	blx	r6
 800f57c:	f8d8 3000 	ldr.w	r3, [r8]
 800f580:	6821      	ldr	r1, [r4, #0]
 800f582:	1d1a      	adds	r2, r3, #4
 800f584:	f8c8 2000 	str.w	r2, [r8]
 800f588:	f011 0f20 	tst.w	r1, #32
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	d00f      	beq.n	800f5b0 <_scanf_i+0x1c8>
 800f590:	6018      	str	r0, [r3, #0]
 800f592:	68e3      	ldr	r3, [r4, #12]
 800f594:	3301      	adds	r3, #1
 800f596:	60e3      	str	r3, [r4, #12]
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	1bed      	subs	r5, r5, r7
 800f59c:	445d      	add	r5, fp
 800f59e:	442b      	add	r3, r5
 800f5a0:	6123      	str	r3, [r4, #16]
 800f5a2:	2000      	movs	r0, #0
 800f5a4:	b007      	add	sp, #28
 800f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5aa:	f04f 0b00 	mov.w	fp, #0
 800f5ae:	e7ca      	b.n	800f546 <_scanf_i+0x15e>
 800f5b0:	07ca      	lsls	r2, r1, #31
 800f5b2:	bf4c      	ite	mi
 800f5b4:	8018      	strhmi	r0, [r3, #0]
 800f5b6:	6018      	strpl	r0, [r3, #0]
 800f5b8:	e7eb      	b.n	800f592 <_scanf_i+0x1aa>
 800f5ba:	2001      	movs	r0, #1
 800f5bc:	e7f2      	b.n	800f5a4 <_scanf_i+0x1bc>
 800f5be:	bf00      	nop
 800f5c0:	08010e7c 	.word	0x08010e7c
 800f5c4:	0800e749 	.word	0x0800e749
 800f5c8:	08010af5 	.word	0x08010af5
 800f5cc:	080121e4 	.word	0x080121e4

0800f5d0 <__sflush_r>:
 800f5d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d8:	0716      	lsls	r6, r2, #28
 800f5da:	4605      	mov	r5, r0
 800f5dc:	460c      	mov	r4, r1
 800f5de:	d454      	bmi.n	800f68a <__sflush_r+0xba>
 800f5e0:	684b      	ldr	r3, [r1, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	dc02      	bgt.n	800f5ec <__sflush_r+0x1c>
 800f5e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dd48      	ble.n	800f67e <__sflush_r+0xae>
 800f5ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5ee:	2e00      	cmp	r6, #0
 800f5f0:	d045      	beq.n	800f67e <__sflush_r+0xae>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5f8:	682f      	ldr	r7, [r5, #0]
 800f5fa:	6a21      	ldr	r1, [r4, #32]
 800f5fc:	602b      	str	r3, [r5, #0]
 800f5fe:	d030      	beq.n	800f662 <__sflush_r+0x92>
 800f600:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f602:	89a3      	ldrh	r3, [r4, #12]
 800f604:	0759      	lsls	r1, r3, #29
 800f606:	d505      	bpl.n	800f614 <__sflush_r+0x44>
 800f608:	6863      	ldr	r3, [r4, #4]
 800f60a:	1ad2      	subs	r2, r2, r3
 800f60c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f60e:	b10b      	cbz	r3, 800f614 <__sflush_r+0x44>
 800f610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f612:	1ad2      	subs	r2, r2, r3
 800f614:	2300      	movs	r3, #0
 800f616:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f618:	6a21      	ldr	r1, [r4, #32]
 800f61a:	4628      	mov	r0, r5
 800f61c:	47b0      	blx	r6
 800f61e:	1c43      	adds	r3, r0, #1
 800f620:	89a3      	ldrh	r3, [r4, #12]
 800f622:	d106      	bne.n	800f632 <__sflush_r+0x62>
 800f624:	6829      	ldr	r1, [r5, #0]
 800f626:	291d      	cmp	r1, #29
 800f628:	d82b      	bhi.n	800f682 <__sflush_r+0xb2>
 800f62a:	4a2a      	ldr	r2, [pc, #168]	@ (800f6d4 <__sflush_r+0x104>)
 800f62c:	410a      	asrs	r2, r1
 800f62e:	07d6      	lsls	r6, r2, #31
 800f630:	d427      	bmi.n	800f682 <__sflush_r+0xb2>
 800f632:	2200      	movs	r2, #0
 800f634:	6062      	str	r2, [r4, #4]
 800f636:	04d9      	lsls	r1, r3, #19
 800f638:	6922      	ldr	r2, [r4, #16]
 800f63a:	6022      	str	r2, [r4, #0]
 800f63c:	d504      	bpl.n	800f648 <__sflush_r+0x78>
 800f63e:	1c42      	adds	r2, r0, #1
 800f640:	d101      	bne.n	800f646 <__sflush_r+0x76>
 800f642:	682b      	ldr	r3, [r5, #0]
 800f644:	b903      	cbnz	r3, 800f648 <__sflush_r+0x78>
 800f646:	6560      	str	r0, [r4, #84]	@ 0x54
 800f648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f64a:	602f      	str	r7, [r5, #0]
 800f64c:	b1b9      	cbz	r1, 800f67e <__sflush_r+0xae>
 800f64e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f652:	4299      	cmp	r1, r3
 800f654:	d002      	beq.n	800f65c <__sflush_r+0x8c>
 800f656:	4628      	mov	r0, r5
 800f658:	f7fe f8fc 	bl	800d854 <_free_r>
 800f65c:	2300      	movs	r3, #0
 800f65e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f660:	e00d      	b.n	800f67e <__sflush_r+0xae>
 800f662:	2301      	movs	r3, #1
 800f664:	4628      	mov	r0, r5
 800f666:	47b0      	blx	r6
 800f668:	4602      	mov	r2, r0
 800f66a:	1c50      	adds	r0, r2, #1
 800f66c:	d1c9      	bne.n	800f602 <__sflush_r+0x32>
 800f66e:	682b      	ldr	r3, [r5, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d0c6      	beq.n	800f602 <__sflush_r+0x32>
 800f674:	2b1d      	cmp	r3, #29
 800f676:	d001      	beq.n	800f67c <__sflush_r+0xac>
 800f678:	2b16      	cmp	r3, #22
 800f67a:	d11e      	bne.n	800f6ba <__sflush_r+0xea>
 800f67c:	602f      	str	r7, [r5, #0]
 800f67e:	2000      	movs	r0, #0
 800f680:	e022      	b.n	800f6c8 <__sflush_r+0xf8>
 800f682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f686:	b21b      	sxth	r3, r3
 800f688:	e01b      	b.n	800f6c2 <__sflush_r+0xf2>
 800f68a:	690f      	ldr	r7, [r1, #16]
 800f68c:	2f00      	cmp	r7, #0
 800f68e:	d0f6      	beq.n	800f67e <__sflush_r+0xae>
 800f690:	0793      	lsls	r3, r2, #30
 800f692:	680e      	ldr	r6, [r1, #0]
 800f694:	bf08      	it	eq
 800f696:	694b      	ldreq	r3, [r1, #20]
 800f698:	600f      	str	r7, [r1, #0]
 800f69a:	bf18      	it	ne
 800f69c:	2300      	movne	r3, #0
 800f69e:	eba6 0807 	sub.w	r8, r6, r7
 800f6a2:	608b      	str	r3, [r1, #8]
 800f6a4:	f1b8 0f00 	cmp.w	r8, #0
 800f6a8:	dde9      	ble.n	800f67e <__sflush_r+0xae>
 800f6aa:	6a21      	ldr	r1, [r4, #32]
 800f6ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f6ae:	4643      	mov	r3, r8
 800f6b0:	463a      	mov	r2, r7
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	47b0      	blx	r6
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	dc08      	bgt.n	800f6cc <__sflush_r+0xfc>
 800f6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6c2:	81a3      	strh	r3, [r4, #12]
 800f6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6cc:	4407      	add	r7, r0
 800f6ce:	eba8 0800 	sub.w	r8, r8, r0
 800f6d2:	e7e7      	b.n	800f6a4 <__sflush_r+0xd4>
 800f6d4:	dfbffffe 	.word	0xdfbffffe

0800f6d8 <_fflush_r>:
 800f6d8:	b538      	push	{r3, r4, r5, lr}
 800f6da:	690b      	ldr	r3, [r1, #16]
 800f6dc:	4605      	mov	r5, r0
 800f6de:	460c      	mov	r4, r1
 800f6e0:	b913      	cbnz	r3, 800f6e8 <_fflush_r+0x10>
 800f6e2:	2500      	movs	r5, #0
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	bd38      	pop	{r3, r4, r5, pc}
 800f6e8:	b118      	cbz	r0, 800f6f2 <_fflush_r+0x1a>
 800f6ea:	6a03      	ldr	r3, [r0, #32]
 800f6ec:	b90b      	cbnz	r3, 800f6f2 <_fflush_r+0x1a>
 800f6ee:	f7fd fee9 	bl	800d4c4 <__sinit>
 800f6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d0f3      	beq.n	800f6e2 <_fflush_r+0xa>
 800f6fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6fc:	07d0      	lsls	r0, r2, #31
 800f6fe:	d404      	bmi.n	800f70a <_fflush_r+0x32>
 800f700:	0599      	lsls	r1, r3, #22
 800f702:	d402      	bmi.n	800f70a <_fflush_r+0x32>
 800f704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f706:	f7fe f886 	bl	800d816 <__retarget_lock_acquire_recursive>
 800f70a:	4628      	mov	r0, r5
 800f70c:	4621      	mov	r1, r4
 800f70e:	f7ff ff5f 	bl	800f5d0 <__sflush_r>
 800f712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f714:	07da      	lsls	r2, r3, #31
 800f716:	4605      	mov	r5, r0
 800f718:	d4e4      	bmi.n	800f6e4 <_fflush_r+0xc>
 800f71a:	89a3      	ldrh	r3, [r4, #12]
 800f71c:	059b      	lsls	r3, r3, #22
 800f71e:	d4e1      	bmi.n	800f6e4 <_fflush_r+0xc>
 800f720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f722:	f7fe f879 	bl	800d818 <__retarget_lock_release_recursive>
 800f726:	e7dd      	b.n	800f6e4 <_fflush_r+0xc>

0800f728 <__sccl>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	780b      	ldrb	r3, [r1, #0]
 800f72c:	4604      	mov	r4, r0
 800f72e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f730:	bf0b      	itete	eq
 800f732:	784b      	ldrbeq	r3, [r1, #1]
 800f734:	1c4a      	addne	r2, r1, #1
 800f736:	1c8a      	addeq	r2, r1, #2
 800f738:	2100      	movne	r1, #0
 800f73a:	bf08      	it	eq
 800f73c:	2101      	moveq	r1, #1
 800f73e:	3801      	subs	r0, #1
 800f740:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f744:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f748:	42a8      	cmp	r0, r5
 800f74a:	d1fb      	bne.n	800f744 <__sccl+0x1c>
 800f74c:	b90b      	cbnz	r3, 800f752 <__sccl+0x2a>
 800f74e:	1e50      	subs	r0, r2, #1
 800f750:	bd70      	pop	{r4, r5, r6, pc}
 800f752:	f081 0101 	eor.w	r1, r1, #1
 800f756:	54e1      	strb	r1, [r4, r3]
 800f758:	4610      	mov	r0, r2
 800f75a:	4602      	mov	r2, r0
 800f75c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f760:	2d2d      	cmp	r5, #45	@ 0x2d
 800f762:	d005      	beq.n	800f770 <__sccl+0x48>
 800f764:	2d5d      	cmp	r5, #93	@ 0x5d
 800f766:	d016      	beq.n	800f796 <__sccl+0x6e>
 800f768:	2d00      	cmp	r5, #0
 800f76a:	d0f1      	beq.n	800f750 <__sccl+0x28>
 800f76c:	462b      	mov	r3, r5
 800f76e:	e7f2      	b.n	800f756 <__sccl+0x2e>
 800f770:	7846      	ldrb	r6, [r0, #1]
 800f772:	2e5d      	cmp	r6, #93	@ 0x5d
 800f774:	d0fa      	beq.n	800f76c <__sccl+0x44>
 800f776:	42b3      	cmp	r3, r6
 800f778:	dcf8      	bgt.n	800f76c <__sccl+0x44>
 800f77a:	3002      	adds	r0, #2
 800f77c:	461a      	mov	r2, r3
 800f77e:	3201      	adds	r2, #1
 800f780:	4296      	cmp	r6, r2
 800f782:	54a1      	strb	r1, [r4, r2]
 800f784:	dcfb      	bgt.n	800f77e <__sccl+0x56>
 800f786:	1af2      	subs	r2, r6, r3
 800f788:	3a01      	subs	r2, #1
 800f78a:	1c5d      	adds	r5, r3, #1
 800f78c:	42b3      	cmp	r3, r6
 800f78e:	bfa8      	it	ge
 800f790:	2200      	movge	r2, #0
 800f792:	18ab      	adds	r3, r5, r2
 800f794:	e7e1      	b.n	800f75a <__sccl+0x32>
 800f796:	4610      	mov	r0, r2
 800f798:	e7da      	b.n	800f750 <__sccl+0x28>

0800f79a <__submore>:
 800f79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f79e:	460c      	mov	r4, r1
 800f7a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f7a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7a6:	4299      	cmp	r1, r3
 800f7a8:	d11d      	bne.n	800f7e6 <__submore+0x4c>
 800f7aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f7ae:	f7fe f8bd 	bl	800d92c <_malloc_r>
 800f7b2:	b918      	cbnz	r0, 800f7bc <__submore+0x22>
 800f7b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f7c2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f7c6:	6360      	str	r0, [r4, #52]	@ 0x34
 800f7c8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f7cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f7d0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f7d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f7d8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f7dc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f7e0:	6020      	str	r0, [r4, #0]
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	e7e8      	b.n	800f7b8 <__submore+0x1e>
 800f7e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f7e8:	0077      	lsls	r7, r6, #1
 800f7ea:	463a      	mov	r2, r7
 800f7ec:	f001 f8e6 	bl	80109bc <_realloc_r>
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d0de      	beq.n	800f7b4 <__submore+0x1a>
 800f7f6:	eb00 0806 	add.w	r8, r0, r6
 800f7fa:	4601      	mov	r1, r0
 800f7fc:	4632      	mov	r2, r6
 800f7fe:	4640      	mov	r0, r8
 800f800:	f7fe f813 	bl	800d82a <memcpy>
 800f804:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f808:	f8c4 8000 	str.w	r8, [r4]
 800f80c:	e7e9      	b.n	800f7e2 <__submore+0x48>

0800f80e <__swbuf_r>:
 800f80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f810:	460e      	mov	r6, r1
 800f812:	4614      	mov	r4, r2
 800f814:	4605      	mov	r5, r0
 800f816:	b118      	cbz	r0, 800f820 <__swbuf_r+0x12>
 800f818:	6a03      	ldr	r3, [r0, #32]
 800f81a:	b90b      	cbnz	r3, 800f820 <__swbuf_r+0x12>
 800f81c:	f7fd fe52 	bl	800d4c4 <__sinit>
 800f820:	69a3      	ldr	r3, [r4, #24]
 800f822:	60a3      	str	r3, [r4, #8]
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	071a      	lsls	r2, r3, #28
 800f828:	d501      	bpl.n	800f82e <__swbuf_r+0x20>
 800f82a:	6923      	ldr	r3, [r4, #16]
 800f82c:	b943      	cbnz	r3, 800f840 <__swbuf_r+0x32>
 800f82e:	4621      	mov	r1, r4
 800f830:	4628      	mov	r0, r5
 800f832:	f000 f82b 	bl	800f88c <__swsetup_r>
 800f836:	b118      	cbz	r0, 800f840 <__swbuf_r+0x32>
 800f838:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f83c:	4638      	mov	r0, r7
 800f83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	6922      	ldr	r2, [r4, #16]
 800f844:	1a98      	subs	r0, r3, r2
 800f846:	6963      	ldr	r3, [r4, #20]
 800f848:	b2f6      	uxtb	r6, r6
 800f84a:	4283      	cmp	r3, r0
 800f84c:	4637      	mov	r7, r6
 800f84e:	dc05      	bgt.n	800f85c <__swbuf_r+0x4e>
 800f850:	4621      	mov	r1, r4
 800f852:	4628      	mov	r0, r5
 800f854:	f7ff ff40 	bl	800f6d8 <_fflush_r>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d1ed      	bne.n	800f838 <__swbuf_r+0x2a>
 800f85c:	68a3      	ldr	r3, [r4, #8]
 800f85e:	3b01      	subs	r3, #1
 800f860:	60a3      	str	r3, [r4, #8]
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	1c5a      	adds	r2, r3, #1
 800f866:	6022      	str	r2, [r4, #0]
 800f868:	701e      	strb	r6, [r3, #0]
 800f86a:	6962      	ldr	r2, [r4, #20]
 800f86c:	1c43      	adds	r3, r0, #1
 800f86e:	429a      	cmp	r2, r3
 800f870:	d004      	beq.n	800f87c <__swbuf_r+0x6e>
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	07db      	lsls	r3, r3, #31
 800f876:	d5e1      	bpl.n	800f83c <__swbuf_r+0x2e>
 800f878:	2e0a      	cmp	r6, #10
 800f87a:	d1df      	bne.n	800f83c <__swbuf_r+0x2e>
 800f87c:	4621      	mov	r1, r4
 800f87e:	4628      	mov	r0, r5
 800f880:	f7ff ff2a 	bl	800f6d8 <_fflush_r>
 800f884:	2800      	cmp	r0, #0
 800f886:	d0d9      	beq.n	800f83c <__swbuf_r+0x2e>
 800f888:	e7d6      	b.n	800f838 <__swbuf_r+0x2a>
	...

0800f88c <__swsetup_r>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	4b29      	ldr	r3, [pc, #164]	@ (800f934 <__swsetup_r+0xa8>)
 800f890:	4605      	mov	r5, r0
 800f892:	6818      	ldr	r0, [r3, #0]
 800f894:	460c      	mov	r4, r1
 800f896:	b118      	cbz	r0, 800f8a0 <__swsetup_r+0x14>
 800f898:	6a03      	ldr	r3, [r0, #32]
 800f89a:	b90b      	cbnz	r3, 800f8a0 <__swsetup_r+0x14>
 800f89c:	f7fd fe12 	bl	800d4c4 <__sinit>
 800f8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8a4:	0719      	lsls	r1, r3, #28
 800f8a6:	d422      	bmi.n	800f8ee <__swsetup_r+0x62>
 800f8a8:	06da      	lsls	r2, r3, #27
 800f8aa:	d407      	bmi.n	800f8bc <__swsetup_r+0x30>
 800f8ac:	2209      	movs	r2, #9
 800f8ae:	602a      	str	r2, [r5, #0]
 800f8b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8b4:	81a3      	strh	r3, [r4, #12]
 800f8b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8ba:	e033      	b.n	800f924 <__swsetup_r+0x98>
 800f8bc:	0758      	lsls	r0, r3, #29
 800f8be:	d512      	bpl.n	800f8e6 <__swsetup_r+0x5a>
 800f8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8c2:	b141      	cbz	r1, 800f8d6 <__swsetup_r+0x4a>
 800f8c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8c8:	4299      	cmp	r1, r3
 800f8ca:	d002      	beq.n	800f8d2 <__swsetup_r+0x46>
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f7fd ffc1 	bl	800d854 <_free_r>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8d6:	89a3      	ldrh	r3, [r4, #12]
 800f8d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8dc:	81a3      	strh	r3, [r4, #12]
 800f8de:	2300      	movs	r3, #0
 800f8e0:	6063      	str	r3, [r4, #4]
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	89a3      	ldrh	r3, [r4, #12]
 800f8e8:	f043 0308 	orr.w	r3, r3, #8
 800f8ec:	81a3      	strh	r3, [r4, #12]
 800f8ee:	6923      	ldr	r3, [r4, #16]
 800f8f0:	b94b      	cbnz	r3, 800f906 <__swsetup_r+0x7a>
 800f8f2:	89a3      	ldrh	r3, [r4, #12]
 800f8f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8fc:	d003      	beq.n	800f906 <__swsetup_r+0x7a>
 800f8fe:	4621      	mov	r1, r4
 800f900:	4628      	mov	r0, r5
 800f902:	f001 f92c 	bl	8010b5e <__smakebuf_r>
 800f906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f90a:	f013 0201 	ands.w	r2, r3, #1
 800f90e:	d00a      	beq.n	800f926 <__swsetup_r+0x9a>
 800f910:	2200      	movs	r2, #0
 800f912:	60a2      	str	r2, [r4, #8]
 800f914:	6962      	ldr	r2, [r4, #20]
 800f916:	4252      	negs	r2, r2
 800f918:	61a2      	str	r2, [r4, #24]
 800f91a:	6922      	ldr	r2, [r4, #16]
 800f91c:	b942      	cbnz	r2, 800f930 <__swsetup_r+0xa4>
 800f91e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f922:	d1c5      	bne.n	800f8b0 <__swsetup_r+0x24>
 800f924:	bd38      	pop	{r3, r4, r5, pc}
 800f926:	0799      	lsls	r1, r3, #30
 800f928:	bf58      	it	pl
 800f92a:	6962      	ldrpl	r2, [r4, #20]
 800f92c:	60a2      	str	r2, [r4, #8]
 800f92e:	e7f4      	b.n	800f91a <__swsetup_r+0x8e>
 800f930:	2000      	movs	r0, #0
 800f932:	e7f7      	b.n	800f924 <__swsetup_r+0x98>
 800f934:	20000234 	.word	0x20000234

0800f938 <memmove>:
 800f938:	4288      	cmp	r0, r1
 800f93a:	b510      	push	{r4, lr}
 800f93c:	eb01 0402 	add.w	r4, r1, r2
 800f940:	d902      	bls.n	800f948 <memmove+0x10>
 800f942:	4284      	cmp	r4, r0
 800f944:	4623      	mov	r3, r4
 800f946:	d807      	bhi.n	800f958 <memmove+0x20>
 800f948:	1e43      	subs	r3, r0, #1
 800f94a:	42a1      	cmp	r1, r4
 800f94c:	d008      	beq.n	800f960 <memmove+0x28>
 800f94e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f952:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f956:	e7f8      	b.n	800f94a <memmove+0x12>
 800f958:	4402      	add	r2, r0
 800f95a:	4601      	mov	r1, r0
 800f95c:	428a      	cmp	r2, r1
 800f95e:	d100      	bne.n	800f962 <memmove+0x2a>
 800f960:	bd10      	pop	{r4, pc}
 800f962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f96a:	e7f7      	b.n	800f95c <memmove+0x24>

0800f96c <strncmp>:
 800f96c:	b510      	push	{r4, lr}
 800f96e:	b16a      	cbz	r2, 800f98c <strncmp+0x20>
 800f970:	3901      	subs	r1, #1
 800f972:	1884      	adds	r4, r0, r2
 800f974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f978:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d103      	bne.n	800f988 <strncmp+0x1c>
 800f980:	42a0      	cmp	r0, r4
 800f982:	d001      	beq.n	800f988 <strncmp+0x1c>
 800f984:	2a00      	cmp	r2, #0
 800f986:	d1f5      	bne.n	800f974 <strncmp+0x8>
 800f988:	1ad0      	subs	r0, r2, r3
 800f98a:	bd10      	pop	{r4, pc}
 800f98c:	4610      	mov	r0, r2
 800f98e:	e7fc      	b.n	800f98a <strncmp+0x1e>

0800f990 <_sbrk_r>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4d06      	ldr	r5, [pc, #24]	@ (800f9ac <_sbrk_r+0x1c>)
 800f994:	2300      	movs	r3, #0
 800f996:	4604      	mov	r4, r0
 800f998:	4608      	mov	r0, r1
 800f99a:	602b      	str	r3, [r5, #0]
 800f99c:	f7f4 f83c 	bl	8003a18 <_sbrk>
 800f9a0:	1c43      	adds	r3, r0, #1
 800f9a2:	d102      	bne.n	800f9aa <_sbrk_r+0x1a>
 800f9a4:	682b      	ldr	r3, [r5, #0]
 800f9a6:	b103      	cbz	r3, 800f9aa <_sbrk_r+0x1a>
 800f9a8:	6023      	str	r3, [r4, #0]
 800f9aa:	bd38      	pop	{r3, r4, r5, pc}
 800f9ac:	20003aa0 	.word	0x20003aa0

0800f9b0 <nan>:
 800f9b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9b8 <nan+0x8>
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	00000000 	.word	0x00000000
 800f9bc:	7ff80000 	.word	0x7ff80000

0800f9c0 <rshift>:
 800f9c0:	6903      	ldr	r3, [r0, #16]
 800f9c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f9c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f9ce:	f100 0414 	add.w	r4, r0, #20
 800f9d2:	dd45      	ble.n	800fa60 <rshift+0xa0>
 800f9d4:	f011 011f 	ands.w	r1, r1, #31
 800f9d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f9dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f9e0:	d10c      	bne.n	800f9fc <rshift+0x3c>
 800f9e2:	f100 0710 	add.w	r7, r0, #16
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	42b1      	cmp	r1, r6
 800f9ea:	d334      	bcc.n	800fa56 <rshift+0x96>
 800f9ec:	1a9b      	subs	r3, r3, r2
 800f9ee:	009b      	lsls	r3, r3, #2
 800f9f0:	1eea      	subs	r2, r5, #3
 800f9f2:	4296      	cmp	r6, r2
 800f9f4:	bf38      	it	cc
 800f9f6:	2300      	movcc	r3, #0
 800f9f8:	4423      	add	r3, r4
 800f9fa:	e015      	b.n	800fa28 <rshift+0x68>
 800f9fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa00:	f1c1 0820 	rsb	r8, r1, #32
 800fa04:	40cf      	lsrs	r7, r1
 800fa06:	f105 0e04 	add.w	lr, r5, #4
 800fa0a:	46a1      	mov	r9, r4
 800fa0c:	4576      	cmp	r6, lr
 800fa0e:	46f4      	mov	ip, lr
 800fa10:	d815      	bhi.n	800fa3e <rshift+0x7e>
 800fa12:	1a9a      	subs	r2, r3, r2
 800fa14:	0092      	lsls	r2, r2, #2
 800fa16:	3a04      	subs	r2, #4
 800fa18:	3501      	adds	r5, #1
 800fa1a:	42ae      	cmp	r6, r5
 800fa1c:	bf38      	it	cc
 800fa1e:	2200      	movcc	r2, #0
 800fa20:	18a3      	adds	r3, r4, r2
 800fa22:	50a7      	str	r7, [r4, r2]
 800fa24:	b107      	cbz	r7, 800fa28 <rshift+0x68>
 800fa26:	3304      	adds	r3, #4
 800fa28:	1b1a      	subs	r2, r3, r4
 800fa2a:	42a3      	cmp	r3, r4
 800fa2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa30:	bf08      	it	eq
 800fa32:	2300      	moveq	r3, #0
 800fa34:	6102      	str	r2, [r0, #16]
 800fa36:	bf08      	it	eq
 800fa38:	6143      	streq	r3, [r0, #20]
 800fa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa3e:	f8dc c000 	ldr.w	ip, [ip]
 800fa42:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa46:	ea4c 0707 	orr.w	r7, ip, r7
 800fa4a:	f849 7b04 	str.w	r7, [r9], #4
 800fa4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa52:	40cf      	lsrs	r7, r1
 800fa54:	e7da      	b.n	800fa0c <rshift+0x4c>
 800fa56:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa5a:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa5e:	e7c3      	b.n	800f9e8 <rshift+0x28>
 800fa60:	4623      	mov	r3, r4
 800fa62:	e7e1      	b.n	800fa28 <rshift+0x68>

0800fa64 <__hexdig_fun>:
 800fa64:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fa68:	2b09      	cmp	r3, #9
 800fa6a:	d802      	bhi.n	800fa72 <__hexdig_fun+0xe>
 800fa6c:	3820      	subs	r0, #32
 800fa6e:	b2c0      	uxtb	r0, r0
 800fa70:	4770      	bx	lr
 800fa72:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fa76:	2b05      	cmp	r3, #5
 800fa78:	d801      	bhi.n	800fa7e <__hexdig_fun+0x1a>
 800fa7a:	3847      	subs	r0, #71	@ 0x47
 800fa7c:	e7f7      	b.n	800fa6e <__hexdig_fun+0xa>
 800fa7e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fa82:	2b05      	cmp	r3, #5
 800fa84:	d801      	bhi.n	800fa8a <__hexdig_fun+0x26>
 800fa86:	3827      	subs	r0, #39	@ 0x27
 800fa88:	e7f1      	b.n	800fa6e <__hexdig_fun+0xa>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	4770      	bx	lr
	...

0800fa90 <__gethex>:
 800fa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa94:	b085      	sub	sp, #20
 800fa96:	468a      	mov	sl, r1
 800fa98:	9302      	str	r3, [sp, #8]
 800fa9a:	680b      	ldr	r3, [r1, #0]
 800fa9c:	9001      	str	r0, [sp, #4]
 800fa9e:	4690      	mov	r8, r2
 800faa0:	1c9c      	adds	r4, r3, #2
 800faa2:	46a1      	mov	r9, r4
 800faa4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800faa8:	2830      	cmp	r0, #48	@ 0x30
 800faaa:	d0fa      	beq.n	800faa2 <__gethex+0x12>
 800faac:	eba9 0303 	sub.w	r3, r9, r3
 800fab0:	f1a3 0b02 	sub.w	fp, r3, #2
 800fab4:	f7ff ffd6 	bl	800fa64 <__hexdig_fun>
 800fab8:	4605      	mov	r5, r0
 800faba:	2800      	cmp	r0, #0
 800fabc:	d168      	bne.n	800fb90 <__gethex+0x100>
 800fabe:	49a0      	ldr	r1, [pc, #640]	@ (800fd40 <__gethex+0x2b0>)
 800fac0:	2201      	movs	r2, #1
 800fac2:	4648      	mov	r0, r9
 800fac4:	f7ff ff52 	bl	800f96c <strncmp>
 800fac8:	4607      	mov	r7, r0
 800faca:	2800      	cmp	r0, #0
 800facc:	d167      	bne.n	800fb9e <__gethex+0x10e>
 800face:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fad2:	4626      	mov	r6, r4
 800fad4:	f7ff ffc6 	bl	800fa64 <__hexdig_fun>
 800fad8:	2800      	cmp	r0, #0
 800fada:	d062      	beq.n	800fba2 <__gethex+0x112>
 800fadc:	4623      	mov	r3, r4
 800fade:	7818      	ldrb	r0, [r3, #0]
 800fae0:	2830      	cmp	r0, #48	@ 0x30
 800fae2:	4699      	mov	r9, r3
 800fae4:	f103 0301 	add.w	r3, r3, #1
 800fae8:	d0f9      	beq.n	800fade <__gethex+0x4e>
 800faea:	f7ff ffbb 	bl	800fa64 <__hexdig_fun>
 800faee:	fab0 f580 	clz	r5, r0
 800faf2:	096d      	lsrs	r5, r5, #5
 800faf4:	f04f 0b01 	mov.w	fp, #1
 800faf8:	464a      	mov	r2, r9
 800fafa:	4616      	mov	r6, r2
 800fafc:	3201      	adds	r2, #1
 800fafe:	7830      	ldrb	r0, [r6, #0]
 800fb00:	f7ff ffb0 	bl	800fa64 <__hexdig_fun>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d1f8      	bne.n	800fafa <__gethex+0x6a>
 800fb08:	498d      	ldr	r1, [pc, #564]	@ (800fd40 <__gethex+0x2b0>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	f7ff ff2d 	bl	800f96c <strncmp>
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d13f      	bne.n	800fb96 <__gethex+0x106>
 800fb16:	b944      	cbnz	r4, 800fb2a <__gethex+0x9a>
 800fb18:	1c74      	adds	r4, r6, #1
 800fb1a:	4622      	mov	r2, r4
 800fb1c:	4616      	mov	r6, r2
 800fb1e:	3201      	adds	r2, #1
 800fb20:	7830      	ldrb	r0, [r6, #0]
 800fb22:	f7ff ff9f 	bl	800fa64 <__hexdig_fun>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	d1f8      	bne.n	800fb1c <__gethex+0x8c>
 800fb2a:	1ba4      	subs	r4, r4, r6
 800fb2c:	00a7      	lsls	r7, r4, #2
 800fb2e:	7833      	ldrb	r3, [r6, #0]
 800fb30:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fb34:	2b50      	cmp	r3, #80	@ 0x50
 800fb36:	d13e      	bne.n	800fbb6 <__gethex+0x126>
 800fb38:	7873      	ldrb	r3, [r6, #1]
 800fb3a:	2b2b      	cmp	r3, #43	@ 0x2b
 800fb3c:	d033      	beq.n	800fba6 <__gethex+0x116>
 800fb3e:	2b2d      	cmp	r3, #45	@ 0x2d
 800fb40:	d034      	beq.n	800fbac <__gethex+0x11c>
 800fb42:	1c71      	adds	r1, r6, #1
 800fb44:	2400      	movs	r4, #0
 800fb46:	7808      	ldrb	r0, [r1, #0]
 800fb48:	f7ff ff8c 	bl	800fa64 <__hexdig_fun>
 800fb4c:	1e43      	subs	r3, r0, #1
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b18      	cmp	r3, #24
 800fb52:	d830      	bhi.n	800fbb6 <__gethex+0x126>
 800fb54:	f1a0 0210 	sub.w	r2, r0, #16
 800fb58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb5c:	f7ff ff82 	bl	800fa64 <__hexdig_fun>
 800fb60:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800fb64:	fa5f fc8c 	uxtb.w	ip, ip
 800fb68:	f1bc 0f18 	cmp.w	ip, #24
 800fb6c:	f04f 030a 	mov.w	r3, #10
 800fb70:	d91e      	bls.n	800fbb0 <__gethex+0x120>
 800fb72:	b104      	cbz	r4, 800fb76 <__gethex+0xe6>
 800fb74:	4252      	negs	r2, r2
 800fb76:	4417      	add	r7, r2
 800fb78:	f8ca 1000 	str.w	r1, [sl]
 800fb7c:	b1ed      	cbz	r5, 800fbba <__gethex+0x12a>
 800fb7e:	f1bb 0f00 	cmp.w	fp, #0
 800fb82:	bf0c      	ite	eq
 800fb84:	2506      	moveq	r5, #6
 800fb86:	2500      	movne	r5, #0
 800fb88:	4628      	mov	r0, r5
 800fb8a:	b005      	add	sp, #20
 800fb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb90:	2500      	movs	r5, #0
 800fb92:	462c      	mov	r4, r5
 800fb94:	e7b0      	b.n	800faf8 <__gethex+0x68>
 800fb96:	2c00      	cmp	r4, #0
 800fb98:	d1c7      	bne.n	800fb2a <__gethex+0x9a>
 800fb9a:	4627      	mov	r7, r4
 800fb9c:	e7c7      	b.n	800fb2e <__gethex+0x9e>
 800fb9e:	464e      	mov	r6, r9
 800fba0:	462f      	mov	r7, r5
 800fba2:	2501      	movs	r5, #1
 800fba4:	e7c3      	b.n	800fb2e <__gethex+0x9e>
 800fba6:	2400      	movs	r4, #0
 800fba8:	1cb1      	adds	r1, r6, #2
 800fbaa:	e7cc      	b.n	800fb46 <__gethex+0xb6>
 800fbac:	2401      	movs	r4, #1
 800fbae:	e7fb      	b.n	800fba8 <__gethex+0x118>
 800fbb0:	fb03 0002 	mla	r0, r3, r2, r0
 800fbb4:	e7ce      	b.n	800fb54 <__gethex+0xc4>
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	e7de      	b.n	800fb78 <__gethex+0xe8>
 800fbba:	eba6 0309 	sub.w	r3, r6, r9
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	2b07      	cmp	r3, #7
 800fbc4:	dc0a      	bgt.n	800fbdc <__gethex+0x14c>
 800fbc6:	9801      	ldr	r0, [sp, #4]
 800fbc8:	f000 fa46 	bl	8010058 <_Balloc>
 800fbcc:	4604      	mov	r4, r0
 800fbce:	b940      	cbnz	r0, 800fbe2 <__gethex+0x152>
 800fbd0:	4b5c      	ldr	r3, [pc, #368]	@ (800fd44 <__gethex+0x2b4>)
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	21e4      	movs	r1, #228	@ 0xe4
 800fbd6:	485c      	ldr	r0, [pc, #368]	@ (800fd48 <__gethex+0x2b8>)
 800fbd8:	f001 f820 	bl	8010c1c <__assert_func>
 800fbdc:	3101      	adds	r1, #1
 800fbde:	105b      	asrs	r3, r3, #1
 800fbe0:	e7ef      	b.n	800fbc2 <__gethex+0x132>
 800fbe2:	f100 0a14 	add.w	sl, r0, #20
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	4655      	mov	r5, sl
 800fbea:	469b      	mov	fp, r3
 800fbec:	45b1      	cmp	r9, r6
 800fbee:	d337      	bcc.n	800fc60 <__gethex+0x1d0>
 800fbf0:	f845 bb04 	str.w	fp, [r5], #4
 800fbf4:	eba5 050a 	sub.w	r5, r5, sl
 800fbf8:	10ad      	asrs	r5, r5, #2
 800fbfa:	6125      	str	r5, [r4, #16]
 800fbfc:	4658      	mov	r0, fp
 800fbfe:	f000 fb1d 	bl	801023c <__hi0bits>
 800fc02:	016d      	lsls	r5, r5, #5
 800fc04:	f8d8 6000 	ldr.w	r6, [r8]
 800fc08:	1a2d      	subs	r5, r5, r0
 800fc0a:	42b5      	cmp	r5, r6
 800fc0c:	dd54      	ble.n	800fcb8 <__gethex+0x228>
 800fc0e:	1bad      	subs	r5, r5, r6
 800fc10:	4629      	mov	r1, r5
 800fc12:	4620      	mov	r0, r4
 800fc14:	f000 feb1 	bl	801097a <__any_on>
 800fc18:	4681      	mov	r9, r0
 800fc1a:	b178      	cbz	r0, 800fc3c <__gethex+0x1ac>
 800fc1c:	1e6b      	subs	r3, r5, #1
 800fc1e:	1159      	asrs	r1, r3, #5
 800fc20:	f003 021f 	and.w	r2, r3, #31
 800fc24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fc28:	f04f 0901 	mov.w	r9, #1
 800fc2c:	fa09 f202 	lsl.w	r2, r9, r2
 800fc30:	420a      	tst	r2, r1
 800fc32:	d003      	beq.n	800fc3c <__gethex+0x1ac>
 800fc34:	454b      	cmp	r3, r9
 800fc36:	dc36      	bgt.n	800fca6 <__gethex+0x216>
 800fc38:	f04f 0902 	mov.w	r9, #2
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f7ff febe 	bl	800f9c0 <rshift>
 800fc44:	442f      	add	r7, r5
 800fc46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc4a:	42bb      	cmp	r3, r7
 800fc4c:	da42      	bge.n	800fcd4 <__gethex+0x244>
 800fc4e:	9801      	ldr	r0, [sp, #4]
 800fc50:	4621      	mov	r1, r4
 800fc52:	f000 fa41 	bl	80100d8 <_Bfree>
 800fc56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc58:	2300      	movs	r3, #0
 800fc5a:	6013      	str	r3, [r2, #0]
 800fc5c:	25a3      	movs	r5, #163	@ 0xa3
 800fc5e:	e793      	b.n	800fb88 <__gethex+0xf8>
 800fc60:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fc64:	2a2e      	cmp	r2, #46	@ 0x2e
 800fc66:	d012      	beq.n	800fc8e <__gethex+0x1fe>
 800fc68:	2b20      	cmp	r3, #32
 800fc6a:	d104      	bne.n	800fc76 <__gethex+0x1e6>
 800fc6c:	f845 bb04 	str.w	fp, [r5], #4
 800fc70:	f04f 0b00 	mov.w	fp, #0
 800fc74:	465b      	mov	r3, fp
 800fc76:	7830      	ldrb	r0, [r6, #0]
 800fc78:	9303      	str	r3, [sp, #12]
 800fc7a:	f7ff fef3 	bl	800fa64 <__hexdig_fun>
 800fc7e:	9b03      	ldr	r3, [sp, #12]
 800fc80:	f000 000f 	and.w	r0, r0, #15
 800fc84:	4098      	lsls	r0, r3
 800fc86:	ea4b 0b00 	orr.w	fp, fp, r0
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	e7ae      	b.n	800fbec <__gethex+0x15c>
 800fc8e:	45b1      	cmp	r9, r6
 800fc90:	d8ea      	bhi.n	800fc68 <__gethex+0x1d8>
 800fc92:	492b      	ldr	r1, [pc, #172]	@ (800fd40 <__gethex+0x2b0>)
 800fc94:	9303      	str	r3, [sp, #12]
 800fc96:	2201      	movs	r2, #1
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f7ff fe67 	bl	800f96c <strncmp>
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d1e1      	bne.n	800fc68 <__gethex+0x1d8>
 800fca4:	e7a2      	b.n	800fbec <__gethex+0x15c>
 800fca6:	1ea9      	subs	r1, r5, #2
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f000 fe66 	bl	801097a <__any_on>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d0c2      	beq.n	800fc38 <__gethex+0x1a8>
 800fcb2:	f04f 0903 	mov.w	r9, #3
 800fcb6:	e7c1      	b.n	800fc3c <__gethex+0x1ac>
 800fcb8:	da09      	bge.n	800fcce <__gethex+0x23e>
 800fcba:	1b75      	subs	r5, r6, r5
 800fcbc:	4621      	mov	r1, r4
 800fcbe:	9801      	ldr	r0, [sp, #4]
 800fcc0:	462a      	mov	r2, r5
 800fcc2:	f000 fc21 	bl	8010508 <__lshift>
 800fcc6:	1b7f      	subs	r7, r7, r5
 800fcc8:	4604      	mov	r4, r0
 800fcca:	f100 0a14 	add.w	sl, r0, #20
 800fcce:	f04f 0900 	mov.w	r9, #0
 800fcd2:	e7b8      	b.n	800fc46 <__gethex+0x1b6>
 800fcd4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fcd8:	42bd      	cmp	r5, r7
 800fcda:	dd6f      	ble.n	800fdbc <__gethex+0x32c>
 800fcdc:	1bed      	subs	r5, r5, r7
 800fcde:	42ae      	cmp	r6, r5
 800fce0:	dc34      	bgt.n	800fd4c <__gethex+0x2bc>
 800fce2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	d022      	beq.n	800fd30 <__gethex+0x2a0>
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d024      	beq.n	800fd38 <__gethex+0x2a8>
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d115      	bne.n	800fd1e <__gethex+0x28e>
 800fcf2:	42ae      	cmp	r6, r5
 800fcf4:	d113      	bne.n	800fd1e <__gethex+0x28e>
 800fcf6:	2e01      	cmp	r6, #1
 800fcf8:	d10b      	bne.n	800fd12 <__gethex+0x282>
 800fcfa:	9a02      	ldr	r2, [sp, #8]
 800fcfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd00:	6013      	str	r3, [r2, #0]
 800fd02:	2301      	movs	r3, #1
 800fd04:	6123      	str	r3, [r4, #16]
 800fd06:	f8ca 3000 	str.w	r3, [sl]
 800fd0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd0c:	2562      	movs	r5, #98	@ 0x62
 800fd0e:	601c      	str	r4, [r3, #0]
 800fd10:	e73a      	b.n	800fb88 <__gethex+0xf8>
 800fd12:	1e71      	subs	r1, r6, #1
 800fd14:	4620      	mov	r0, r4
 800fd16:	f000 fe30 	bl	801097a <__any_on>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d1ed      	bne.n	800fcfa <__gethex+0x26a>
 800fd1e:	9801      	ldr	r0, [sp, #4]
 800fd20:	4621      	mov	r1, r4
 800fd22:	f000 f9d9 	bl	80100d8 <_Bfree>
 800fd26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd28:	2300      	movs	r3, #0
 800fd2a:	6013      	str	r3, [r2, #0]
 800fd2c:	2550      	movs	r5, #80	@ 0x50
 800fd2e:	e72b      	b.n	800fb88 <__gethex+0xf8>
 800fd30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1f3      	bne.n	800fd1e <__gethex+0x28e>
 800fd36:	e7e0      	b.n	800fcfa <__gethex+0x26a>
 800fd38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1dd      	bne.n	800fcfa <__gethex+0x26a>
 800fd3e:	e7ee      	b.n	800fd1e <__gethex+0x28e>
 800fd40:	0801203d 	.word	0x0801203d
 800fd44:	080121f7 	.word	0x080121f7
 800fd48:	08012208 	.word	0x08012208
 800fd4c:	1e6f      	subs	r7, r5, #1
 800fd4e:	f1b9 0f00 	cmp.w	r9, #0
 800fd52:	d130      	bne.n	800fdb6 <__gethex+0x326>
 800fd54:	b127      	cbz	r7, 800fd60 <__gethex+0x2d0>
 800fd56:	4639      	mov	r1, r7
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f000 fe0e 	bl	801097a <__any_on>
 800fd5e:	4681      	mov	r9, r0
 800fd60:	117a      	asrs	r2, r7, #5
 800fd62:	2301      	movs	r3, #1
 800fd64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fd68:	f007 071f 	and.w	r7, r7, #31
 800fd6c:	40bb      	lsls	r3, r7
 800fd6e:	4213      	tst	r3, r2
 800fd70:	4629      	mov	r1, r5
 800fd72:	4620      	mov	r0, r4
 800fd74:	bf18      	it	ne
 800fd76:	f049 0902 	orrne.w	r9, r9, #2
 800fd7a:	f7ff fe21 	bl	800f9c0 <rshift>
 800fd7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fd82:	1b76      	subs	r6, r6, r5
 800fd84:	2502      	movs	r5, #2
 800fd86:	f1b9 0f00 	cmp.w	r9, #0
 800fd8a:	d047      	beq.n	800fe1c <__gethex+0x38c>
 800fd8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd90:	2b02      	cmp	r3, #2
 800fd92:	d015      	beq.n	800fdc0 <__gethex+0x330>
 800fd94:	2b03      	cmp	r3, #3
 800fd96:	d017      	beq.n	800fdc8 <__gethex+0x338>
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d109      	bne.n	800fdb0 <__gethex+0x320>
 800fd9c:	f019 0f02 	tst.w	r9, #2
 800fda0:	d006      	beq.n	800fdb0 <__gethex+0x320>
 800fda2:	f8da 3000 	ldr.w	r3, [sl]
 800fda6:	ea49 0903 	orr.w	r9, r9, r3
 800fdaa:	f019 0f01 	tst.w	r9, #1
 800fdae:	d10e      	bne.n	800fdce <__gethex+0x33e>
 800fdb0:	f045 0510 	orr.w	r5, r5, #16
 800fdb4:	e032      	b.n	800fe1c <__gethex+0x38c>
 800fdb6:	f04f 0901 	mov.w	r9, #1
 800fdba:	e7d1      	b.n	800fd60 <__gethex+0x2d0>
 800fdbc:	2501      	movs	r5, #1
 800fdbe:	e7e2      	b.n	800fd86 <__gethex+0x2f6>
 800fdc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdc2:	f1c3 0301 	rsb	r3, r3, #1
 800fdc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fdc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d0f0      	beq.n	800fdb0 <__gethex+0x320>
 800fdce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fdd2:	f104 0314 	add.w	r3, r4, #20
 800fdd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fdda:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fdde:	f04f 0c00 	mov.w	ip, #0
 800fde2:	4618      	mov	r0, r3
 800fde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800fdec:	d01b      	beq.n	800fe26 <__gethex+0x396>
 800fdee:	3201      	adds	r2, #1
 800fdf0:	6002      	str	r2, [r0, #0]
 800fdf2:	2d02      	cmp	r5, #2
 800fdf4:	f104 0314 	add.w	r3, r4, #20
 800fdf8:	d13c      	bne.n	800fe74 <__gethex+0x3e4>
 800fdfa:	f8d8 2000 	ldr.w	r2, [r8]
 800fdfe:	3a01      	subs	r2, #1
 800fe00:	42b2      	cmp	r2, r6
 800fe02:	d109      	bne.n	800fe18 <__gethex+0x388>
 800fe04:	1171      	asrs	r1, r6, #5
 800fe06:	2201      	movs	r2, #1
 800fe08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe0c:	f006 061f 	and.w	r6, r6, #31
 800fe10:	fa02 f606 	lsl.w	r6, r2, r6
 800fe14:	421e      	tst	r6, r3
 800fe16:	d13a      	bne.n	800fe8e <__gethex+0x3fe>
 800fe18:	f045 0520 	orr.w	r5, r5, #32
 800fe1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe1e:	601c      	str	r4, [r3, #0]
 800fe20:	9b02      	ldr	r3, [sp, #8]
 800fe22:	601f      	str	r7, [r3, #0]
 800fe24:	e6b0      	b.n	800fb88 <__gethex+0xf8>
 800fe26:	4299      	cmp	r1, r3
 800fe28:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe2c:	d8d9      	bhi.n	800fde2 <__gethex+0x352>
 800fe2e:	68a3      	ldr	r3, [r4, #8]
 800fe30:	459b      	cmp	fp, r3
 800fe32:	db17      	blt.n	800fe64 <__gethex+0x3d4>
 800fe34:	6861      	ldr	r1, [r4, #4]
 800fe36:	9801      	ldr	r0, [sp, #4]
 800fe38:	3101      	adds	r1, #1
 800fe3a:	f000 f90d 	bl	8010058 <_Balloc>
 800fe3e:	4681      	mov	r9, r0
 800fe40:	b918      	cbnz	r0, 800fe4a <__gethex+0x3ba>
 800fe42:	4b1a      	ldr	r3, [pc, #104]	@ (800feac <__gethex+0x41c>)
 800fe44:	4602      	mov	r2, r0
 800fe46:	2184      	movs	r1, #132	@ 0x84
 800fe48:	e6c5      	b.n	800fbd6 <__gethex+0x146>
 800fe4a:	6922      	ldr	r2, [r4, #16]
 800fe4c:	3202      	adds	r2, #2
 800fe4e:	f104 010c 	add.w	r1, r4, #12
 800fe52:	0092      	lsls	r2, r2, #2
 800fe54:	300c      	adds	r0, #12
 800fe56:	f7fd fce8 	bl	800d82a <memcpy>
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	9801      	ldr	r0, [sp, #4]
 800fe5e:	f000 f93b 	bl	80100d8 <_Bfree>
 800fe62:	464c      	mov	r4, r9
 800fe64:	6923      	ldr	r3, [r4, #16]
 800fe66:	1c5a      	adds	r2, r3, #1
 800fe68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe6c:	6122      	str	r2, [r4, #16]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	615a      	str	r2, [r3, #20]
 800fe72:	e7be      	b.n	800fdf2 <__gethex+0x362>
 800fe74:	6922      	ldr	r2, [r4, #16]
 800fe76:	455a      	cmp	r2, fp
 800fe78:	dd0b      	ble.n	800fe92 <__gethex+0x402>
 800fe7a:	2101      	movs	r1, #1
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f7ff fd9f 	bl	800f9c0 <rshift>
 800fe82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe86:	3701      	adds	r7, #1
 800fe88:	42bb      	cmp	r3, r7
 800fe8a:	f6ff aee0 	blt.w	800fc4e <__gethex+0x1be>
 800fe8e:	2501      	movs	r5, #1
 800fe90:	e7c2      	b.n	800fe18 <__gethex+0x388>
 800fe92:	f016 061f 	ands.w	r6, r6, #31
 800fe96:	d0fa      	beq.n	800fe8e <__gethex+0x3fe>
 800fe98:	4453      	add	r3, sl
 800fe9a:	f1c6 0620 	rsb	r6, r6, #32
 800fe9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fea2:	f000 f9cb 	bl	801023c <__hi0bits>
 800fea6:	42b0      	cmp	r0, r6
 800fea8:	dbe7      	blt.n	800fe7a <__gethex+0x3ea>
 800feaa:	e7f0      	b.n	800fe8e <__gethex+0x3fe>
 800feac:	080121f7 	.word	0x080121f7

0800feb0 <L_shift>:
 800feb0:	f1c2 0208 	rsb	r2, r2, #8
 800feb4:	0092      	lsls	r2, r2, #2
 800feb6:	b570      	push	{r4, r5, r6, lr}
 800feb8:	f1c2 0620 	rsb	r6, r2, #32
 800febc:	6843      	ldr	r3, [r0, #4]
 800febe:	6804      	ldr	r4, [r0, #0]
 800fec0:	fa03 f506 	lsl.w	r5, r3, r6
 800fec4:	432c      	orrs	r4, r5
 800fec6:	40d3      	lsrs	r3, r2
 800fec8:	6004      	str	r4, [r0, #0]
 800feca:	f840 3f04 	str.w	r3, [r0, #4]!
 800fece:	4288      	cmp	r0, r1
 800fed0:	d3f4      	bcc.n	800febc <L_shift+0xc>
 800fed2:	bd70      	pop	{r4, r5, r6, pc}

0800fed4 <__match>:
 800fed4:	b530      	push	{r4, r5, lr}
 800fed6:	6803      	ldr	r3, [r0, #0]
 800fed8:	3301      	adds	r3, #1
 800feda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fede:	b914      	cbnz	r4, 800fee6 <__match+0x12>
 800fee0:	6003      	str	r3, [r0, #0]
 800fee2:	2001      	movs	r0, #1
 800fee4:	bd30      	pop	{r4, r5, pc}
 800fee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800feea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800feee:	2d19      	cmp	r5, #25
 800fef0:	bf98      	it	ls
 800fef2:	3220      	addls	r2, #32
 800fef4:	42a2      	cmp	r2, r4
 800fef6:	d0f0      	beq.n	800feda <__match+0x6>
 800fef8:	2000      	movs	r0, #0
 800fefa:	e7f3      	b.n	800fee4 <__match+0x10>

0800fefc <__hexnan>:
 800fefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff00:	680b      	ldr	r3, [r1, #0]
 800ff02:	6801      	ldr	r1, [r0, #0]
 800ff04:	115e      	asrs	r6, r3, #5
 800ff06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff0a:	f013 031f 	ands.w	r3, r3, #31
 800ff0e:	b087      	sub	sp, #28
 800ff10:	bf18      	it	ne
 800ff12:	3604      	addne	r6, #4
 800ff14:	2500      	movs	r5, #0
 800ff16:	1f37      	subs	r7, r6, #4
 800ff18:	4682      	mov	sl, r0
 800ff1a:	4690      	mov	r8, r2
 800ff1c:	9301      	str	r3, [sp, #4]
 800ff1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff22:	46b9      	mov	r9, r7
 800ff24:	463c      	mov	r4, r7
 800ff26:	9502      	str	r5, [sp, #8]
 800ff28:	46ab      	mov	fp, r5
 800ff2a:	784a      	ldrb	r2, [r1, #1]
 800ff2c:	1c4b      	adds	r3, r1, #1
 800ff2e:	9303      	str	r3, [sp, #12]
 800ff30:	b342      	cbz	r2, 800ff84 <__hexnan+0x88>
 800ff32:	4610      	mov	r0, r2
 800ff34:	9105      	str	r1, [sp, #20]
 800ff36:	9204      	str	r2, [sp, #16]
 800ff38:	f7ff fd94 	bl	800fa64 <__hexdig_fun>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d151      	bne.n	800ffe4 <__hexnan+0xe8>
 800ff40:	9a04      	ldr	r2, [sp, #16]
 800ff42:	9905      	ldr	r1, [sp, #20]
 800ff44:	2a20      	cmp	r2, #32
 800ff46:	d818      	bhi.n	800ff7a <__hexnan+0x7e>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	459b      	cmp	fp, r3
 800ff4c:	dd13      	ble.n	800ff76 <__hexnan+0x7a>
 800ff4e:	454c      	cmp	r4, r9
 800ff50:	d206      	bcs.n	800ff60 <__hexnan+0x64>
 800ff52:	2d07      	cmp	r5, #7
 800ff54:	dc04      	bgt.n	800ff60 <__hexnan+0x64>
 800ff56:	462a      	mov	r2, r5
 800ff58:	4649      	mov	r1, r9
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f7ff ffa8 	bl	800feb0 <L_shift>
 800ff60:	4544      	cmp	r4, r8
 800ff62:	d952      	bls.n	801000a <__hexnan+0x10e>
 800ff64:	2300      	movs	r3, #0
 800ff66:	f1a4 0904 	sub.w	r9, r4, #4
 800ff6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ff72:	464c      	mov	r4, r9
 800ff74:	461d      	mov	r5, r3
 800ff76:	9903      	ldr	r1, [sp, #12]
 800ff78:	e7d7      	b.n	800ff2a <__hexnan+0x2e>
 800ff7a:	2a29      	cmp	r2, #41	@ 0x29
 800ff7c:	d157      	bne.n	801002e <__hexnan+0x132>
 800ff7e:	3102      	adds	r1, #2
 800ff80:	f8ca 1000 	str.w	r1, [sl]
 800ff84:	f1bb 0f00 	cmp.w	fp, #0
 800ff88:	d051      	beq.n	801002e <__hexnan+0x132>
 800ff8a:	454c      	cmp	r4, r9
 800ff8c:	d206      	bcs.n	800ff9c <__hexnan+0xa0>
 800ff8e:	2d07      	cmp	r5, #7
 800ff90:	dc04      	bgt.n	800ff9c <__hexnan+0xa0>
 800ff92:	462a      	mov	r2, r5
 800ff94:	4649      	mov	r1, r9
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7ff ff8a 	bl	800feb0 <L_shift>
 800ff9c:	4544      	cmp	r4, r8
 800ff9e:	d936      	bls.n	801000e <__hexnan+0x112>
 800ffa0:	f1a8 0204 	sub.w	r2, r8, #4
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ffaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800ffae:	429f      	cmp	r7, r3
 800ffb0:	d2f9      	bcs.n	800ffa6 <__hexnan+0xaa>
 800ffb2:	1b3b      	subs	r3, r7, r4
 800ffb4:	f023 0303 	bic.w	r3, r3, #3
 800ffb8:	3304      	adds	r3, #4
 800ffba:	3401      	adds	r4, #1
 800ffbc:	3e03      	subs	r6, #3
 800ffbe:	42b4      	cmp	r4, r6
 800ffc0:	bf88      	it	hi
 800ffc2:	2304      	movhi	r3, #4
 800ffc4:	4443      	add	r3, r8
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f843 2b04 	str.w	r2, [r3], #4
 800ffcc:	429f      	cmp	r7, r3
 800ffce:	d2fb      	bcs.n	800ffc8 <__hexnan+0xcc>
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	b91b      	cbnz	r3, 800ffdc <__hexnan+0xe0>
 800ffd4:	4547      	cmp	r7, r8
 800ffd6:	d128      	bne.n	801002a <__hexnan+0x12e>
 800ffd8:	2301      	movs	r3, #1
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	2005      	movs	r0, #5
 800ffde:	b007      	add	sp, #28
 800ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe4:	3501      	adds	r5, #1
 800ffe6:	2d08      	cmp	r5, #8
 800ffe8:	f10b 0b01 	add.w	fp, fp, #1
 800ffec:	dd06      	ble.n	800fffc <__hexnan+0x100>
 800ffee:	4544      	cmp	r4, r8
 800fff0:	d9c1      	bls.n	800ff76 <__hexnan+0x7a>
 800fff2:	2300      	movs	r3, #0
 800fff4:	f844 3c04 	str.w	r3, [r4, #-4]
 800fff8:	2501      	movs	r5, #1
 800fffa:	3c04      	subs	r4, #4
 800fffc:	6822      	ldr	r2, [r4, #0]
 800fffe:	f000 000f 	and.w	r0, r0, #15
 8010002:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010006:	6020      	str	r0, [r4, #0]
 8010008:	e7b5      	b.n	800ff76 <__hexnan+0x7a>
 801000a:	2508      	movs	r5, #8
 801000c:	e7b3      	b.n	800ff76 <__hexnan+0x7a>
 801000e:	9b01      	ldr	r3, [sp, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d0dd      	beq.n	800ffd0 <__hexnan+0xd4>
 8010014:	f1c3 0320 	rsb	r3, r3, #32
 8010018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801001c:	40da      	lsrs	r2, r3
 801001e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010022:	4013      	ands	r3, r2
 8010024:	f846 3c04 	str.w	r3, [r6, #-4]
 8010028:	e7d2      	b.n	800ffd0 <__hexnan+0xd4>
 801002a:	3f04      	subs	r7, #4
 801002c:	e7d0      	b.n	800ffd0 <__hexnan+0xd4>
 801002e:	2004      	movs	r0, #4
 8010030:	e7d5      	b.n	800ffde <__hexnan+0xe2>

08010032 <__ascii_mbtowc>:
 8010032:	b082      	sub	sp, #8
 8010034:	b901      	cbnz	r1, 8010038 <__ascii_mbtowc+0x6>
 8010036:	a901      	add	r1, sp, #4
 8010038:	b142      	cbz	r2, 801004c <__ascii_mbtowc+0x1a>
 801003a:	b14b      	cbz	r3, 8010050 <__ascii_mbtowc+0x1e>
 801003c:	7813      	ldrb	r3, [r2, #0]
 801003e:	600b      	str	r3, [r1, #0]
 8010040:	7812      	ldrb	r2, [r2, #0]
 8010042:	1e10      	subs	r0, r2, #0
 8010044:	bf18      	it	ne
 8010046:	2001      	movne	r0, #1
 8010048:	b002      	add	sp, #8
 801004a:	4770      	bx	lr
 801004c:	4610      	mov	r0, r2
 801004e:	e7fb      	b.n	8010048 <__ascii_mbtowc+0x16>
 8010050:	f06f 0001 	mvn.w	r0, #1
 8010054:	e7f8      	b.n	8010048 <__ascii_mbtowc+0x16>
	...

08010058 <_Balloc>:
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	69c6      	ldr	r6, [r0, #28]
 801005c:	4604      	mov	r4, r0
 801005e:	460d      	mov	r5, r1
 8010060:	b976      	cbnz	r6, 8010080 <_Balloc+0x28>
 8010062:	2010      	movs	r0, #16
 8010064:	f000 fe0c 	bl	8010c80 <malloc>
 8010068:	4602      	mov	r2, r0
 801006a:	61e0      	str	r0, [r4, #28]
 801006c:	b920      	cbnz	r0, 8010078 <_Balloc+0x20>
 801006e:	4b18      	ldr	r3, [pc, #96]	@ (80100d0 <_Balloc+0x78>)
 8010070:	4818      	ldr	r0, [pc, #96]	@ (80100d4 <_Balloc+0x7c>)
 8010072:	216b      	movs	r1, #107	@ 0x6b
 8010074:	f000 fdd2 	bl	8010c1c <__assert_func>
 8010078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801007c:	6006      	str	r6, [r0, #0]
 801007e:	60c6      	str	r6, [r0, #12]
 8010080:	69e6      	ldr	r6, [r4, #28]
 8010082:	68f3      	ldr	r3, [r6, #12]
 8010084:	b183      	cbz	r3, 80100a8 <_Balloc+0x50>
 8010086:	69e3      	ldr	r3, [r4, #28]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801008e:	b9b8      	cbnz	r0, 80100c0 <_Balloc+0x68>
 8010090:	2101      	movs	r1, #1
 8010092:	fa01 f605 	lsl.w	r6, r1, r5
 8010096:	1d72      	adds	r2, r6, #5
 8010098:	0092      	lsls	r2, r2, #2
 801009a:	4620      	mov	r0, r4
 801009c:	f000 fddc 	bl	8010c58 <_calloc_r>
 80100a0:	b160      	cbz	r0, 80100bc <_Balloc+0x64>
 80100a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100a6:	e00e      	b.n	80100c6 <_Balloc+0x6e>
 80100a8:	2221      	movs	r2, #33	@ 0x21
 80100aa:	2104      	movs	r1, #4
 80100ac:	4620      	mov	r0, r4
 80100ae:	f000 fdd3 	bl	8010c58 <_calloc_r>
 80100b2:	69e3      	ldr	r3, [r4, #28]
 80100b4:	60f0      	str	r0, [r6, #12]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1e4      	bne.n	8010086 <_Balloc+0x2e>
 80100bc:	2000      	movs	r0, #0
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	6802      	ldr	r2, [r0, #0]
 80100c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100c6:	2300      	movs	r3, #0
 80100c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100cc:	e7f7      	b.n	80100be <_Balloc+0x66>
 80100ce:	bf00      	nop
 80100d0:	08012268 	.word	0x08012268
 80100d4:	0801227f 	.word	0x0801227f

080100d8 <_Bfree>:
 80100d8:	b570      	push	{r4, r5, r6, lr}
 80100da:	69c6      	ldr	r6, [r0, #28]
 80100dc:	4605      	mov	r5, r0
 80100de:	460c      	mov	r4, r1
 80100e0:	b976      	cbnz	r6, 8010100 <_Bfree+0x28>
 80100e2:	2010      	movs	r0, #16
 80100e4:	f000 fdcc 	bl	8010c80 <malloc>
 80100e8:	4602      	mov	r2, r0
 80100ea:	61e8      	str	r0, [r5, #28]
 80100ec:	b920      	cbnz	r0, 80100f8 <_Bfree+0x20>
 80100ee:	4b09      	ldr	r3, [pc, #36]	@ (8010114 <_Bfree+0x3c>)
 80100f0:	4809      	ldr	r0, [pc, #36]	@ (8010118 <_Bfree+0x40>)
 80100f2:	218f      	movs	r1, #143	@ 0x8f
 80100f4:	f000 fd92 	bl	8010c1c <__assert_func>
 80100f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100fc:	6006      	str	r6, [r0, #0]
 80100fe:	60c6      	str	r6, [r0, #12]
 8010100:	b13c      	cbz	r4, 8010112 <_Bfree+0x3a>
 8010102:	69eb      	ldr	r3, [r5, #28]
 8010104:	6862      	ldr	r2, [r4, #4]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801010c:	6021      	str	r1, [r4, #0]
 801010e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010112:	bd70      	pop	{r4, r5, r6, pc}
 8010114:	08012268 	.word	0x08012268
 8010118:	0801227f 	.word	0x0801227f

0801011c <__multadd>:
 801011c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010120:	690d      	ldr	r5, [r1, #16]
 8010122:	4607      	mov	r7, r0
 8010124:	460c      	mov	r4, r1
 8010126:	461e      	mov	r6, r3
 8010128:	f101 0c14 	add.w	ip, r1, #20
 801012c:	2000      	movs	r0, #0
 801012e:	f8dc 3000 	ldr.w	r3, [ip]
 8010132:	b299      	uxth	r1, r3
 8010134:	fb02 6101 	mla	r1, r2, r1, r6
 8010138:	0c1e      	lsrs	r6, r3, #16
 801013a:	0c0b      	lsrs	r3, r1, #16
 801013c:	fb02 3306 	mla	r3, r2, r6, r3
 8010140:	b289      	uxth	r1, r1
 8010142:	3001      	adds	r0, #1
 8010144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010148:	4285      	cmp	r5, r0
 801014a:	f84c 1b04 	str.w	r1, [ip], #4
 801014e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010152:	dcec      	bgt.n	801012e <__multadd+0x12>
 8010154:	b30e      	cbz	r6, 801019a <__multadd+0x7e>
 8010156:	68a3      	ldr	r3, [r4, #8]
 8010158:	42ab      	cmp	r3, r5
 801015a:	dc19      	bgt.n	8010190 <__multadd+0x74>
 801015c:	6861      	ldr	r1, [r4, #4]
 801015e:	4638      	mov	r0, r7
 8010160:	3101      	adds	r1, #1
 8010162:	f7ff ff79 	bl	8010058 <_Balloc>
 8010166:	4680      	mov	r8, r0
 8010168:	b928      	cbnz	r0, 8010176 <__multadd+0x5a>
 801016a:	4602      	mov	r2, r0
 801016c:	4b0c      	ldr	r3, [pc, #48]	@ (80101a0 <__multadd+0x84>)
 801016e:	480d      	ldr	r0, [pc, #52]	@ (80101a4 <__multadd+0x88>)
 8010170:	21ba      	movs	r1, #186	@ 0xba
 8010172:	f000 fd53 	bl	8010c1c <__assert_func>
 8010176:	6922      	ldr	r2, [r4, #16]
 8010178:	3202      	adds	r2, #2
 801017a:	f104 010c 	add.w	r1, r4, #12
 801017e:	0092      	lsls	r2, r2, #2
 8010180:	300c      	adds	r0, #12
 8010182:	f7fd fb52 	bl	800d82a <memcpy>
 8010186:	4621      	mov	r1, r4
 8010188:	4638      	mov	r0, r7
 801018a:	f7ff ffa5 	bl	80100d8 <_Bfree>
 801018e:	4644      	mov	r4, r8
 8010190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010194:	3501      	adds	r5, #1
 8010196:	615e      	str	r6, [r3, #20]
 8010198:	6125      	str	r5, [r4, #16]
 801019a:	4620      	mov	r0, r4
 801019c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a0:	080121f7 	.word	0x080121f7
 80101a4:	0801227f 	.word	0x0801227f

080101a8 <__s2b>:
 80101a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ac:	460c      	mov	r4, r1
 80101ae:	4615      	mov	r5, r2
 80101b0:	461f      	mov	r7, r3
 80101b2:	2209      	movs	r2, #9
 80101b4:	3308      	adds	r3, #8
 80101b6:	4606      	mov	r6, r0
 80101b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80101bc:	2100      	movs	r1, #0
 80101be:	2201      	movs	r2, #1
 80101c0:	429a      	cmp	r2, r3
 80101c2:	db09      	blt.n	80101d8 <__s2b+0x30>
 80101c4:	4630      	mov	r0, r6
 80101c6:	f7ff ff47 	bl	8010058 <_Balloc>
 80101ca:	b940      	cbnz	r0, 80101de <__s2b+0x36>
 80101cc:	4602      	mov	r2, r0
 80101ce:	4b19      	ldr	r3, [pc, #100]	@ (8010234 <__s2b+0x8c>)
 80101d0:	4819      	ldr	r0, [pc, #100]	@ (8010238 <__s2b+0x90>)
 80101d2:	21d3      	movs	r1, #211	@ 0xd3
 80101d4:	f000 fd22 	bl	8010c1c <__assert_func>
 80101d8:	0052      	lsls	r2, r2, #1
 80101da:	3101      	adds	r1, #1
 80101dc:	e7f0      	b.n	80101c0 <__s2b+0x18>
 80101de:	9b08      	ldr	r3, [sp, #32]
 80101e0:	6143      	str	r3, [r0, #20]
 80101e2:	2d09      	cmp	r5, #9
 80101e4:	f04f 0301 	mov.w	r3, #1
 80101e8:	6103      	str	r3, [r0, #16]
 80101ea:	dd16      	ble.n	801021a <__s2b+0x72>
 80101ec:	f104 0909 	add.w	r9, r4, #9
 80101f0:	46c8      	mov	r8, r9
 80101f2:	442c      	add	r4, r5
 80101f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80101f8:	4601      	mov	r1, r0
 80101fa:	3b30      	subs	r3, #48	@ 0x30
 80101fc:	220a      	movs	r2, #10
 80101fe:	4630      	mov	r0, r6
 8010200:	f7ff ff8c 	bl	801011c <__multadd>
 8010204:	45a0      	cmp	r8, r4
 8010206:	d1f5      	bne.n	80101f4 <__s2b+0x4c>
 8010208:	f1a5 0408 	sub.w	r4, r5, #8
 801020c:	444c      	add	r4, r9
 801020e:	1b2d      	subs	r5, r5, r4
 8010210:	1963      	adds	r3, r4, r5
 8010212:	42bb      	cmp	r3, r7
 8010214:	db04      	blt.n	8010220 <__s2b+0x78>
 8010216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801021a:	340a      	adds	r4, #10
 801021c:	2509      	movs	r5, #9
 801021e:	e7f6      	b.n	801020e <__s2b+0x66>
 8010220:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010224:	4601      	mov	r1, r0
 8010226:	3b30      	subs	r3, #48	@ 0x30
 8010228:	220a      	movs	r2, #10
 801022a:	4630      	mov	r0, r6
 801022c:	f7ff ff76 	bl	801011c <__multadd>
 8010230:	e7ee      	b.n	8010210 <__s2b+0x68>
 8010232:	bf00      	nop
 8010234:	080121f7 	.word	0x080121f7
 8010238:	0801227f 	.word	0x0801227f

0801023c <__hi0bits>:
 801023c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010240:	4603      	mov	r3, r0
 8010242:	bf36      	itet	cc
 8010244:	0403      	lslcc	r3, r0, #16
 8010246:	2000      	movcs	r0, #0
 8010248:	2010      	movcc	r0, #16
 801024a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801024e:	bf3c      	itt	cc
 8010250:	021b      	lslcc	r3, r3, #8
 8010252:	3008      	addcc	r0, #8
 8010254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010258:	bf3c      	itt	cc
 801025a:	011b      	lslcc	r3, r3, #4
 801025c:	3004      	addcc	r0, #4
 801025e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010262:	bf3c      	itt	cc
 8010264:	009b      	lslcc	r3, r3, #2
 8010266:	3002      	addcc	r0, #2
 8010268:	2b00      	cmp	r3, #0
 801026a:	db05      	blt.n	8010278 <__hi0bits+0x3c>
 801026c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010270:	f100 0001 	add.w	r0, r0, #1
 8010274:	bf08      	it	eq
 8010276:	2020      	moveq	r0, #32
 8010278:	4770      	bx	lr

0801027a <__lo0bits>:
 801027a:	6803      	ldr	r3, [r0, #0]
 801027c:	4602      	mov	r2, r0
 801027e:	f013 0007 	ands.w	r0, r3, #7
 8010282:	d00b      	beq.n	801029c <__lo0bits+0x22>
 8010284:	07d9      	lsls	r1, r3, #31
 8010286:	d421      	bmi.n	80102cc <__lo0bits+0x52>
 8010288:	0798      	lsls	r0, r3, #30
 801028a:	bf49      	itett	mi
 801028c:	085b      	lsrmi	r3, r3, #1
 801028e:	089b      	lsrpl	r3, r3, #2
 8010290:	2001      	movmi	r0, #1
 8010292:	6013      	strmi	r3, [r2, #0]
 8010294:	bf5c      	itt	pl
 8010296:	6013      	strpl	r3, [r2, #0]
 8010298:	2002      	movpl	r0, #2
 801029a:	4770      	bx	lr
 801029c:	b299      	uxth	r1, r3
 801029e:	b909      	cbnz	r1, 80102a4 <__lo0bits+0x2a>
 80102a0:	0c1b      	lsrs	r3, r3, #16
 80102a2:	2010      	movs	r0, #16
 80102a4:	b2d9      	uxtb	r1, r3
 80102a6:	b909      	cbnz	r1, 80102ac <__lo0bits+0x32>
 80102a8:	3008      	adds	r0, #8
 80102aa:	0a1b      	lsrs	r3, r3, #8
 80102ac:	0719      	lsls	r1, r3, #28
 80102ae:	bf04      	itt	eq
 80102b0:	091b      	lsreq	r3, r3, #4
 80102b2:	3004      	addeq	r0, #4
 80102b4:	0799      	lsls	r1, r3, #30
 80102b6:	bf04      	itt	eq
 80102b8:	089b      	lsreq	r3, r3, #2
 80102ba:	3002      	addeq	r0, #2
 80102bc:	07d9      	lsls	r1, r3, #31
 80102be:	d403      	bmi.n	80102c8 <__lo0bits+0x4e>
 80102c0:	085b      	lsrs	r3, r3, #1
 80102c2:	f100 0001 	add.w	r0, r0, #1
 80102c6:	d003      	beq.n	80102d0 <__lo0bits+0x56>
 80102c8:	6013      	str	r3, [r2, #0]
 80102ca:	4770      	bx	lr
 80102cc:	2000      	movs	r0, #0
 80102ce:	4770      	bx	lr
 80102d0:	2020      	movs	r0, #32
 80102d2:	4770      	bx	lr

080102d4 <__i2b>:
 80102d4:	b510      	push	{r4, lr}
 80102d6:	460c      	mov	r4, r1
 80102d8:	2101      	movs	r1, #1
 80102da:	f7ff febd 	bl	8010058 <_Balloc>
 80102de:	4602      	mov	r2, r0
 80102e0:	b928      	cbnz	r0, 80102ee <__i2b+0x1a>
 80102e2:	4b05      	ldr	r3, [pc, #20]	@ (80102f8 <__i2b+0x24>)
 80102e4:	4805      	ldr	r0, [pc, #20]	@ (80102fc <__i2b+0x28>)
 80102e6:	f240 1145 	movw	r1, #325	@ 0x145
 80102ea:	f000 fc97 	bl	8010c1c <__assert_func>
 80102ee:	2301      	movs	r3, #1
 80102f0:	6144      	str	r4, [r0, #20]
 80102f2:	6103      	str	r3, [r0, #16]
 80102f4:	bd10      	pop	{r4, pc}
 80102f6:	bf00      	nop
 80102f8:	080121f7 	.word	0x080121f7
 80102fc:	0801227f 	.word	0x0801227f

08010300 <__multiply>:
 8010300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010304:	4614      	mov	r4, r2
 8010306:	690a      	ldr	r2, [r1, #16]
 8010308:	6923      	ldr	r3, [r4, #16]
 801030a:	429a      	cmp	r2, r3
 801030c:	bfa8      	it	ge
 801030e:	4623      	movge	r3, r4
 8010310:	460f      	mov	r7, r1
 8010312:	bfa4      	itt	ge
 8010314:	460c      	movge	r4, r1
 8010316:	461f      	movge	r7, r3
 8010318:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801031c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010320:	68a3      	ldr	r3, [r4, #8]
 8010322:	6861      	ldr	r1, [r4, #4]
 8010324:	eb0a 0609 	add.w	r6, sl, r9
 8010328:	42b3      	cmp	r3, r6
 801032a:	b085      	sub	sp, #20
 801032c:	bfb8      	it	lt
 801032e:	3101      	addlt	r1, #1
 8010330:	f7ff fe92 	bl	8010058 <_Balloc>
 8010334:	b930      	cbnz	r0, 8010344 <__multiply+0x44>
 8010336:	4602      	mov	r2, r0
 8010338:	4b44      	ldr	r3, [pc, #272]	@ (801044c <__multiply+0x14c>)
 801033a:	4845      	ldr	r0, [pc, #276]	@ (8010450 <__multiply+0x150>)
 801033c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010340:	f000 fc6c 	bl	8010c1c <__assert_func>
 8010344:	f100 0514 	add.w	r5, r0, #20
 8010348:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801034c:	462b      	mov	r3, r5
 801034e:	2200      	movs	r2, #0
 8010350:	4543      	cmp	r3, r8
 8010352:	d321      	bcc.n	8010398 <__multiply+0x98>
 8010354:	f107 0114 	add.w	r1, r7, #20
 8010358:	f104 0214 	add.w	r2, r4, #20
 801035c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010360:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010364:	9302      	str	r3, [sp, #8]
 8010366:	1b13      	subs	r3, r2, r4
 8010368:	3b15      	subs	r3, #21
 801036a:	f023 0303 	bic.w	r3, r3, #3
 801036e:	3304      	adds	r3, #4
 8010370:	f104 0715 	add.w	r7, r4, #21
 8010374:	42ba      	cmp	r2, r7
 8010376:	bf38      	it	cc
 8010378:	2304      	movcc	r3, #4
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	9b02      	ldr	r3, [sp, #8]
 801037e:	9103      	str	r1, [sp, #12]
 8010380:	428b      	cmp	r3, r1
 8010382:	d80c      	bhi.n	801039e <__multiply+0x9e>
 8010384:	2e00      	cmp	r6, #0
 8010386:	dd03      	ble.n	8010390 <__multiply+0x90>
 8010388:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801038c:	2b00      	cmp	r3, #0
 801038e:	d05b      	beq.n	8010448 <__multiply+0x148>
 8010390:	6106      	str	r6, [r0, #16]
 8010392:	b005      	add	sp, #20
 8010394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010398:	f843 2b04 	str.w	r2, [r3], #4
 801039c:	e7d8      	b.n	8010350 <__multiply+0x50>
 801039e:	f8b1 a000 	ldrh.w	sl, [r1]
 80103a2:	f1ba 0f00 	cmp.w	sl, #0
 80103a6:	d024      	beq.n	80103f2 <__multiply+0xf2>
 80103a8:	f104 0e14 	add.w	lr, r4, #20
 80103ac:	46a9      	mov	r9, r5
 80103ae:	f04f 0c00 	mov.w	ip, #0
 80103b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80103b6:	f8d9 3000 	ldr.w	r3, [r9]
 80103ba:	fa1f fb87 	uxth.w	fp, r7
 80103be:	b29b      	uxth	r3, r3
 80103c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80103c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80103c8:	f8d9 7000 	ldr.w	r7, [r9]
 80103cc:	4463      	add	r3, ip
 80103ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80103d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80103d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80103da:	b29b      	uxth	r3, r3
 80103dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80103e0:	4572      	cmp	r2, lr
 80103e2:	f849 3b04 	str.w	r3, [r9], #4
 80103e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80103ea:	d8e2      	bhi.n	80103b2 <__multiply+0xb2>
 80103ec:	9b01      	ldr	r3, [sp, #4]
 80103ee:	f845 c003 	str.w	ip, [r5, r3]
 80103f2:	9b03      	ldr	r3, [sp, #12]
 80103f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80103f8:	3104      	adds	r1, #4
 80103fa:	f1b9 0f00 	cmp.w	r9, #0
 80103fe:	d021      	beq.n	8010444 <__multiply+0x144>
 8010400:	682b      	ldr	r3, [r5, #0]
 8010402:	f104 0c14 	add.w	ip, r4, #20
 8010406:	46ae      	mov	lr, r5
 8010408:	f04f 0a00 	mov.w	sl, #0
 801040c:	f8bc b000 	ldrh.w	fp, [ip]
 8010410:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010414:	fb09 770b 	mla	r7, r9, fp, r7
 8010418:	4457      	add	r7, sl
 801041a:	b29b      	uxth	r3, r3
 801041c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010420:	f84e 3b04 	str.w	r3, [lr], #4
 8010424:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010428:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801042c:	f8be 3000 	ldrh.w	r3, [lr]
 8010430:	fb09 330a 	mla	r3, r9, sl, r3
 8010434:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010438:	4562      	cmp	r2, ip
 801043a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801043e:	d8e5      	bhi.n	801040c <__multiply+0x10c>
 8010440:	9f01      	ldr	r7, [sp, #4]
 8010442:	51eb      	str	r3, [r5, r7]
 8010444:	3504      	adds	r5, #4
 8010446:	e799      	b.n	801037c <__multiply+0x7c>
 8010448:	3e01      	subs	r6, #1
 801044a:	e79b      	b.n	8010384 <__multiply+0x84>
 801044c:	080121f7 	.word	0x080121f7
 8010450:	0801227f 	.word	0x0801227f

08010454 <__pow5mult>:
 8010454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010458:	4615      	mov	r5, r2
 801045a:	f012 0203 	ands.w	r2, r2, #3
 801045e:	4607      	mov	r7, r0
 8010460:	460e      	mov	r6, r1
 8010462:	d007      	beq.n	8010474 <__pow5mult+0x20>
 8010464:	4c25      	ldr	r4, [pc, #148]	@ (80104fc <__pow5mult+0xa8>)
 8010466:	3a01      	subs	r2, #1
 8010468:	2300      	movs	r3, #0
 801046a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801046e:	f7ff fe55 	bl	801011c <__multadd>
 8010472:	4606      	mov	r6, r0
 8010474:	10ad      	asrs	r5, r5, #2
 8010476:	d03d      	beq.n	80104f4 <__pow5mult+0xa0>
 8010478:	69fc      	ldr	r4, [r7, #28]
 801047a:	b97c      	cbnz	r4, 801049c <__pow5mult+0x48>
 801047c:	2010      	movs	r0, #16
 801047e:	f000 fbff 	bl	8010c80 <malloc>
 8010482:	4602      	mov	r2, r0
 8010484:	61f8      	str	r0, [r7, #28]
 8010486:	b928      	cbnz	r0, 8010494 <__pow5mult+0x40>
 8010488:	4b1d      	ldr	r3, [pc, #116]	@ (8010500 <__pow5mult+0xac>)
 801048a:	481e      	ldr	r0, [pc, #120]	@ (8010504 <__pow5mult+0xb0>)
 801048c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010490:	f000 fbc4 	bl	8010c1c <__assert_func>
 8010494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010498:	6004      	str	r4, [r0, #0]
 801049a:	60c4      	str	r4, [r0, #12]
 801049c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80104a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104a4:	b94c      	cbnz	r4, 80104ba <__pow5mult+0x66>
 80104a6:	f240 2171 	movw	r1, #625	@ 0x271
 80104aa:	4638      	mov	r0, r7
 80104ac:	f7ff ff12 	bl	80102d4 <__i2b>
 80104b0:	2300      	movs	r3, #0
 80104b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80104b6:	4604      	mov	r4, r0
 80104b8:	6003      	str	r3, [r0, #0]
 80104ba:	f04f 0900 	mov.w	r9, #0
 80104be:	07eb      	lsls	r3, r5, #31
 80104c0:	d50a      	bpl.n	80104d8 <__pow5mult+0x84>
 80104c2:	4631      	mov	r1, r6
 80104c4:	4622      	mov	r2, r4
 80104c6:	4638      	mov	r0, r7
 80104c8:	f7ff ff1a 	bl	8010300 <__multiply>
 80104cc:	4631      	mov	r1, r6
 80104ce:	4680      	mov	r8, r0
 80104d0:	4638      	mov	r0, r7
 80104d2:	f7ff fe01 	bl	80100d8 <_Bfree>
 80104d6:	4646      	mov	r6, r8
 80104d8:	106d      	asrs	r5, r5, #1
 80104da:	d00b      	beq.n	80104f4 <__pow5mult+0xa0>
 80104dc:	6820      	ldr	r0, [r4, #0]
 80104de:	b938      	cbnz	r0, 80104f0 <__pow5mult+0x9c>
 80104e0:	4622      	mov	r2, r4
 80104e2:	4621      	mov	r1, r4
 80104e4:	4638      	mov	r0, r7
 80104e6:	f7ff ff0b 	bl	8010300 <__multiply>
 80104ea:	6020      	str	r0, [r4, #0]
 80104ec:	f8c0 9000 	str.w	r9, [r0]
 80104f0:	4604      	mov	r4, r0
 80104f2:	e7e4      	b.n	80104be <__pow5mult+0x6a>
 80104f4:	4630      	mov	r0, r6
 80104f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fa:	bf00      	nop
 80104fc:	080122d8 	.word	0x080122d8
 8010500:	08012268 	.word	0x08012268
 8010504:	0801227f 	.word	0x0801227f

08010508 <__lshift>:
 8010508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801050c:	460c      	mov	r4, r1
 801050e:	6849      	ldr	r1, [r1, #4]
 8010510:	6923      	ldr	r3, [r4, #16]
 8010512:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010516:	68a3      	ldr	r3, [r4, #8]
 8010518:	4607      	mov	r7, r0
 801051a:	4691      	mov	r9, r2
 801051c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010520:	f108 0601 	add.w	r6, r8, #1
 8010524:	42b3      	cmp	r3, r6
 8010526:	db0b      	blt.n	8010540 <__lshift+0x38>
 8010528:	4638      	mov	r0, r7
 801052a:	f7ff fd95 	bl	8010058 <_Balloc>
 801052e:	4605      	mov	r5, r0
 8010530:	b948      	cbnz	r0, 8010546 <__lshift+0x3e>
 8010532:	4602      	mov	r2, r0
 8010534:	4b28      	ldr	r3, [pc, #160]	@ (80105d8 <__lshift+0xd0>)
 8010536:	4829      	ldr	r0, [pc, #164]	@ (80105dc <__lshift+0xd4>)
 8010538:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801053c:	f000 fb6e 	bl	8010c1c <__assert_func>
 8010540:	3101      	adds	r1, #1
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	e7ee      	b.n	8010524 <__lshift+0x1c>
 8010546:	2300      	movs	r3, #0
 8010548:	f100 0114 	add.w	r1, r0, #20
 801054c:	f100 0210 	add.w	r2, r0, #16
 8010550:	4618      	mov	r0, r3
 8010552:	4553      	cmp	r3, sl
 8010554:	db33      	blt.n	80105be <__lshift+0xb6>
 8010556:	6920      	ldr	r0, [r4, #16]
 8010558:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801055c:	f104 0314 	add.w	r3, r4, #20
 8010560:	f019 091f 	ands.w	r9, r9, #31
 8010564:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010568:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801056c:	d02b      	beq.n	80105c6 <__lshift+0xbe>
 801056e:	f1c9 0e20 	rsb	lr, r9, #32
 8010572:	468a      	mov	sl, r1
 8010574:	2200      	movs	r2, #0
 8010576:	6818      	ldr	r0, [r3, #0]
 8010578:	fa00 f009 	lsl.w	r0, r0, r9
 801057c:	4310      	orrs	r0, r2
 801057e:	f84a 0b04 	str.w	r0, [sl], #4
 8010582:	f853 2b04 	ldr.w	r2, [r3], #4
 8010586:	459c      	cmp	ip, r3
 8010588:	fa22 f20e 	lsr.w	r2, r2, lr
 801058c:	d8f3      	bhi.n	8010576 <__lshift+0x6e>
 801058e:	ebac 0304 	sub.w	r3, ip, r4
 8010592:	3b15      	subs	r3, #21
 8010594:	f023 0303 	bic.w	r3, r3, #3
 8010598:	3304      	adds	r3, #4
 801059a:	f104 0015 	add.w	r0, r4, #21
 801059e:	4584      	cmp	ip, r0
 80105a0:	bf38      	it	cc
 80105a2:	2304      	movcc	r3, #4
 80105a4:	50ca      	str	r2, [r1, r3]
 80105a6:	b10a      	cbz	r2, 80105ac <__lshift+0xa4>
 80105a8:	f108 0602 	add.w	r6, r8, #2
 80105ac:	3e01      	subs	r6, #1
 80105ae:	4638      	mov	r0, r7
 80105b0:	612e      	str	r6, [r5, #16]
 80105b2:	4621      	mov	r1, r4
 80105b4:	f7ff fd90 	bl	80100d8 <_Bfree>
 80105b8:	4628      	mov	r0, r5
 80105ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105be:	f842 0f04 	str.w	r0, [r2, #4]!
 80105c2:	3301      	adds	r3, #1
 80105c4:	e7c5      	b.n	8010552 <__lshift+0x4a>
 80105c6:	3904      	subs	r1, #4
 80105c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80105cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80105d0:	459c      	cmp	ip, r3
 80105d2:	d8f9      	bhi.n	80105c8 <__lshift+0xc0>
 80105d4:	e7ea      	b.n	80105ac <__lshift+0xa4>
 80105d6:	bf00      	nop
 80105d8:	080121f7 	.word	0x080121f7
 80105dc:	0801227f 	.word	0x0801227f

080105e0 <__mcmp>:
 80105e0:	690a      	ldr	r2, [r1, #16]
 80105e2:	4603      	mov	r3, r0
 80105e4:	6900      	ldr	r0, [r0, #16]
 80105e6:	1a80      	subs	r0, r0, r2
 80105e8:	b530      	push	{r4, r5, lr}
 80105ea:	d10e      	bne.n	801060a <__mcmp+0x2a>
 80105ec:	3314      	adds	r3, #20
 80105ee:	3114      	adds	r1, #20
 80105f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80105f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80105f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80105fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010600:	4295      	cmp	r5, r2
 8010602:	d003      	beq.n	801060c <__mcmp+0x2c>
 8010604:	d205      	bcs.n	8010612 <__mcmp+0x32>
 8010606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801060a:	bd30      	pop	{r4, r5, pc}
 801060c:	42a3      	cmp	r3, r4
 801060e:	d3f3      	bcc.n	80105f8 <__mcmp+0x18>
 8010610:	e7fb      	b.n	801060a <__mcmp+0x2a>
 8010612:	2001      	movs	r0, #1
 8010614:	e7f9      	b.n	801060a <__mcmp+0x2a>
	...

08010618 <__mdiff>:
 8010618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801061c:	4689      	mov	r9, r1
 801061e:	4606      	mov	r6, r0
 8010620:	4611      	mov	r1, r2
 8010622:	4648      	mov	r0, r9
 8010624:	4614      	mov	r4, r2
 8010626:	f7ff ffdb 	bl	80105e0 <__mcmp>
 801062a:	1e05      	subs	r5, r0, #0
 801062c:	d112      	bne.n	8010654 <__mdiff+0x3c>
 801062e:	4629      	mov	r1, r5
 8010630:	4630      	mov	r0, r6
 8010632:	f7ff fd11 	bl	8010058 <_Balloc>
 8010636:	4602      	mov	r2, r0
 8010638:	b928      	cbnz	r0, 8010646 <__mdiff+0x2e>
 801063a:	4b3f      	ldr	r3, [pc, #252]	@ (8010738 <__mdiff+0x120>)
 801063c:	f240 2137 	movw	r1, #567	@ 0x237
 8010640:	483e      	ldr	r0, [pc, #248]	@ (801073c <__mdiff+0x124>)
 8010642:	f000 faeb 	bl	8010c1c <__assert_func>
 8010646:	2301      	movs	r3, #1
 8010648:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801064c:	4610      	mov	r0, r2
 801064e:	b003      	add	sp, #12
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	bfbc      	itt	lt
 8010656:	464b      	movlt	r3, r9
 8010658:	46a1      	movlt	r9, r4
 801065a:	4630      	mov	r0, r6
 801065c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010660:	bfba      	itte	lt
 8010662:	461c      	movlt	r4, r3
 8010664:	2501      	movlt	r5, #1
 8010666:	2500      	movge	r5, #0
 8010668:	f7ff fcf6 	bl	8010058 <_Balloc>
 801066c:	4602      	mov	r2, r0
 801066e:	b918      	cbnz	r0, 8010678 <__mdiff+0x60>
 8010670:	4b31      	ldr	r3, [pc, #196]	@ (8010738 <__mdiff+0x120>)
 8010672:	f240 2145 	movw	r1, #581	@ 0x245
 8010676:	e7e3      	b.n	8010640 <__mdiff+0x28>
 8010678:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801067c:	6926      	ldr	r6, [r4, #16]
 801067e:	60c5      	str	r5, [r0, #12]
 8010680:	f109 0310 	add.w	r3, r9, #16
 8010684:	f109 0514 	add.w	r5, r9, #20
 8010688:	f104 0e14 	add.w	lr, r4, #20
 801068c:	f100 0b14 	add.w	fp, r0, #20
 8010690:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010694:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010698:	9301      	str	r3, [sp, #4]
 801069a:	46d9      	mov	r9, fp
 801069c:	f04f 0c00 	mov.w	ip, #0
 80106a0:	9b01      	ldr	r3, [sp, #4]
 80106a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80106a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80106aa:	9301      	str	r3, [sp, #4]
 80106ac:	fa1f f38a 	uxth.w	r3, sl
 80106b0:	4619      	mov	r1, r3
 80106b2:	b283      	uxth	r3, r0
 80106b4:	1acb      	subs	r3, r1, r3
 80106b6:	0c00      	lsrs	r0, r0, #16
 80106b8:	4463      	add	r3, ip
 80106ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80106be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80106c8:	4576      	cmp	r6, lr
 80106ca:	f849 3b04 	str.w	r3, [r9], #4
 80106ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80106d2:	d8e5      	bhi.n	80106a0 <__mdiff+0x88>
 80106d4:	1b33      	subs	r3, r6, r4
 80106d6:	3b15      	subs	r3, #21
 80106d8:	f023 0303 	bic.w	r3, r3, #3
 80106dc:	3415      	adds	r4, #21
 80106de:	3304      	adds	r3, #4
 80106e0:	42a6      	cmp	r6, r4
 80106e2:	bf38      	it	cc
 80106e4:	2304      	movcc	r3, #4
 80106e6:	441d      	add	r5, r3
 80106e8:	445b      	add	r3, fp
 80106ea:	461e      	mov	r6, r3
 80106ec:	462c      	mov	r4, r5
 80106ee:	4544      	cmp	r4, r8
 80106f0:	d30e      	bcc.n	8010710 <__mdiff+0xf8>
 80106f2:	f108 0103 	add.w	r1, r8, #3
 80106f6:	1b49      	subs	r1, r1, r5
 80106f8:	f021 0103 	bic.w	r1, r1, #3
 80106fc:	3d03      	subs	r5, #3
 80106fe:	45a8      	cmp	r8, r5
 8010700:	bf38      	it	cc
 8010702:	2100      	movcc	r1, #0
 8010704:	440b      	add	r3, r1
 8010706:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801070a:	b191      	cbz	r1, 8010732 <__mdiff+0x11a>
 801070c:	6117      	str	r7, [r2, #16]
 801070e:	e79d      	b.n	801064c <__mdiff+0x34>
 8010710:	f854 1b04 	ldr.w	r1, [r4], #4
 8010714:	46e6      	mov	lr, ip
 8010716:	0c08      	lsrs	r0, r1, #16
 8010718:	fa1c fc81 	uxtah	ip, ip, r1
 801071c:	4471      	add	r1, lr
 801071e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010722:	b289      	uxth	r1, r1
 8010724:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010728:	f846 1b04 	str.w	r1, [r6], #4
 801072c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010730:	e7dd      	b.n	80106ee <__mdiff+0xd6>
 8010732:	3f01      	subs	r7, #1
 8010734:	e7e7      	b.n	8010706 <__mdiff+0xee>
 8010736:	bf00      	nop
 8010738:	080121f7 	.word	0x080121f7
 801073c:	0801227f 	.word	0x0801227f

08010740 <__ulp>:
 8010740:	b082      	sub	sp, #8
 8010742:	ed8d 0b00 	vstr	d0, [sp]
 8010746:	9a01      	ldr	r2, [sp, #4]
 8010748:	4b0f      	ldr	r3, [pc, #60]	@ (8010788 <__ulp+0x48>)
 801074a:	4013      	ands	r3, r2
 801074c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010750:	2b00      	cmp	r3, #0
 8010752:	dc08      	bgt.n	8010766 <__ulp+0x26>
 8010754:	425b      	negs	r3, r3
 8010756:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801075a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801075e:	da04      	bge.n	801076a <__ulp+0x2a>
 8010760:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010764:	4113      	asrs	r3, r2
 8010766:	2200      	movs	r2, #0
 8010768:	e008      	b.n	801077c <__ulp+0x3c>
 801076a:	f1a2 0314 	sub.w	r3, r2, #20
 801076e:	2b1e      	cmp	r3, #30
 8010770:	bfda      	itte	le
 8010772:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010776:	40da      	lsrle	r2, r3
 8010778:	2201      	movgt	r2, #1
 801077a:	2300      	movs	r3, #0
 801077c:	4619      	mov	r1, r3
 801077e:	4610      	mov	r0, r2
 8010780:	ec41 0b10 	vmov	d0, r0, r1
 8010784:	b002      	add	sp, #8
 8010786:	4770      	bx	lr
 8010788:	7ff00000 	.word	0x7ff00000

0801078c <__b2d>:
 801078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010790:	6906      	ldr	r6, [r0, #16]
 8010792:	f100 0814 	add.w	r8, r0, #20
 8010796:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801079a:	1f37      	subs	r7, r6, #4
 801079c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80107a0:	4610      	mov	r0, r2
 80107a2:	f7ff fd4b 	bl	801023c <__hi0bits>
 80107a6:	f1c0 0320 	rsb	r3, r0, #32
 80107aa:	280a      	cmp	r0, #10
 80107ac:	600b      	str	r3, [r1, #0]
 80107ae:	491b      	ldr	r1, [pc, #108]	@ (801081c <__b2d+0x90>)
 80107b0:	dc15      	bgt.n	80107de <__b2d+0x52>
 80107b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80107b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80107ba:	45b8      	cmp	r8, r7
 80107bc:	ea43 0501 	orr.w	r5, r3, r1
 80107c0:	bf34      	ite	cc
 80107c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80107c6:	2300      	movcs	r3, #0
 80107c8:	3015      	adds	r0, #21
 80107ca:	fa02 f000 	lsl.w	r0, r2, r0
 80107ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80107d2:	4303      	orrs	r3, r0
 80107d4:	461c      	mov	r4, r3
 80107d6:	ec45 4b10 	vmov	d0, r4, r5
 80107da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107de:	45b8      	cmp	r8, r7
 80107e0:	bf3a      	itte	cc
 80107e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80107e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80107ea:	2300      	movcs	r3, #0
 80107ec:	380b      	subs	r0, #11
 80107ee:	d012      	beq.n	8010816 <__b2d+0x8a>
 80107f0:	f1c0 0120 	rsb	r1, r0, #32
 80107f4:	fa23 f401 	lsr.w	r4, r3, r1
 80107f8:	4082      	lsls	r2, r0
 80107fa:	4322      	orrs	r2, r4
 80107fc:	4547      	cmp	r7, r8
 80107fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010802:	bf8c      	ite	hi
 8010804:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010808:	2200      	movls	r2, #0
 801080a:	4083      	lsls	r3, r0
 801080c:	40ca      	lsrs	r2, r1
 801080e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010812:	4313      	orrs	r3, r2
 8010814:	e7de      	b.n	80107d4 <__b2d+0x48>
 8010816:	ea42 0501 	orr.w	r5, r2, r1
 801081a:	e7db      	b.n	80107d4 <__b2d+0x48>
 801081c:	3ff00000 	.word	0x3ff00000

08010820 <__d2b>:
 8010820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010824:	460f      	mov	r7, r1
 8010826:	2101      	movs	r1, #1
 8010828:	ec59 8b10 	vmov	r8, r9, d0
 801082c:	4616      	mov	r6, r2
 801082e:	f7ff fc13 	bl	8010058 <_Balloc>
 8010832:	4604      	mov	r4, r0
 8010834:	b930      	cbnz	r0, 8010844 <__d2b+0x24>
 8010836:	4602      	mov	r2, r0
 8010838:	4b23      	ldr	r3, [pc, #140]	@ (80108c8 <__d2b+0xa8>)
 801083a:	4824      	ldr	r0, [pc, #144]	@ (80108cc <__d2b+0xac>)
 801083c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010840:	f000 f9ec 	bl	8010c1c <__assert_func>
 8010844:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801084c:	b10d      	cbz	r5, 8010852 <__d2b+0x32>
 801084e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	f1b8 0300 	subs.w	r3, r8, #0
 8010858:	d023      	beq.n	80108a2 <__d2b+0x82>
 801085a:	4668      	mov	r0, sp
 801085c:	9300      	str	r3, [sp, #0]
 801085e:	f7ff fd0c 	bl	801027a <__lo0bits>
 8010862:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010866:	b1d0      	cbz	r0, 801089e <__d2b+0x7e>
 8010868:	f1c0 0320 	rsb	r3, r0, #32
 801086c:	fa02 f303 	lsl.w	r3, r2, r3
 8010870:	430b      	orrs	r3, r1
 8010872:	40c2      	lsrs	r2, r0
 8010874:	6163      	str	r3, [r4, #20]
 8010876:	9201      	str	r2, [sp, #4]
 8010878:	9b01      	ldr	r3, [sp, #4]
 801087a:	61a3      	str	r3, [r4, #24]
 801087c:	2b00      	cmp	r3, #0
 801087e:	bf0c      	ite	eq
 8010880:	2201      	moveq	r2, #1
 8010882:	2202      	movne	r2, #2
 8010884:	6122      	str	r2, [r4, #16]
 8010886:	b1a5      	cbz	r5, 80108b2 <__d2b+0x92>
 8010888:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801088c:	4405      	add	r5, r0
 801088e:	603d      	str	r5, [r7, #0]
 8010890:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010894:	6030      	str	r0, [r6, #0]
 8010896:	4620      	mov	r0, r4
 8010898:	b003      	add	sp, #12
 801089a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801089e:	6161      	str	r1, [r4, #20]
 80108a0:	e7ea      	b.n	8010878 <__d2b+0x58>
 80108a2:	a801      	add	r0, sp, #4
 80108a4:	f7ff fce9 	bl	801027a <__lo0bits>
 80108a8:	9b01      	ldr	r3, [sp, #4]
 80108aa:	6163      	str	r3, [r4, #20]
 80108ac:	3020      	adds	r0, #32
 80108ae:	2201      	movs	r2, #1
 80108b0:	e7e8      	b.n	8010884 <__d2b+0x64>
 80108b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108ba:	6038      	str	r0, [r7, #0]
 80108bc:	6918      	ldr	r0, [r3, #16]
 80108be:	f7ff fcbd 	bl	801023c <__hi0bits>
 80108c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108c6:	e7e5      	b.n	8010894 <__d2b+0x74>
 80108c8:	080121f7 	.word	0x080121f7
 80108cc:	0801227f 	.word	0x0801227f

080108d0 <__ratio>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	b085      	sub	sp, #20
 80108d6:	e9cd 1000 	strd	r1, r0, [sp]
 80108da:	a902      	add	r1, sp, #8
 80108dc:	f7ff ff56 	bl	801078c <__b2d>
 80108e0:	9800      	ldr	r0, [sp, #0]
 80108e2:	a903      	add	r1, sp, #12
 80108e4:	ec55 4b10 	vmov	r4, r5, d0
 80108e8:	f7ff ff50 	bl	801078c <__b2d>
 80108ec:	9b01      	ldr	r3, [sp, #4]
 80108ee:	6919      	ldr	r1, [r3, #16]
 80108f0:	9b00      	ldr	r3, [sp, #0]
 80108f2:	691b      	ldr	r3, [r3, #16]
 80108f4:	1ac9      	subs	r1, r1, r3
 80108f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80108fa:	1a9b      	subs	r3, r3, r2
 80108fc:	ec5b ab10 	vmov	sl, fp, d0
 8010900:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010904:	2b00      	cmp	r3, #0
 8010906:	bfce      	itee	gt
 8010908:	462a      	movgt	r2, r5
 801090a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801090e:	465a      	movle	r2, fp
 8010910:	462f      	mov	r7, r5
 8010912:	46d9      	mov	r9, fp
 8010914:	bfcc      	ite	gt
 8010916:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801091a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801091e:	464b      	mov	r3, r9
 8010920:	4652      	mov	r2, sl
 8010922:	4620      	mov	r0, r4
 8010924:	4639      	mov	r1, r7
 8010926:	f7ef ff99 	bl	800085c <__aeabi_ddiv>
 801092a:	ec41 0b10 	vmov	d0, r0, r1
 801092e:	b005      	add	sp, #20
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010934 <__copybits>:
 8010934:	3901      	subs	r1, #1
 8010936:	b570      	push	{r4, r5, r6, lr}
 8010938:	1149      	asrs	r1, r1, #5
 801093a:	6914      	ldr	r4, [r2, #16]
 801093c:	3101      	adds	r1, #1
 801093e:	f102 0314 	add.w	r3, r2, #20
 8010942:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010946:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801094a:	1f05      	subs	r5, r0, #4
 801094c:	42a3      	cmp	r3, r4
 801094e:	d30c      	bcc.n	801096a <__copybits+0x36>
 8010950:	1aa3      	subs	r3, r4, r2
 8010952:	3b11      	subs	r3, #17
 8010954:	f023 0303 	bic.w	r3, r3, #3
 8010958:	3211      	adds	r2, #17
 801095a:	42a2      	cmp	r2, r4
 801095c:	bf88      	it	hi
 801095e:	2300      	movhi	r3, #0
 8010960:	4418      	add	r0, r3
 8010962:	2300      	movs	r3, #0
 8010964:	4288      	cmp	r0, r1
 8010966:	d305      	bcc.n	8010974 <__copybits+0x40>
 8010968:	bd70      	pop	{r4, r5, r6, pc}
 801096a:	f853 6b04 	ldr.w	r6, [r3], #4
 801096e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010972:	e7eb      	b.n	801094c <__copybits+0x18>
 8010974:	f840 3b04 	str.w	r3, [r0], #4
 8010978:	e7f4      	b.n	8010964 <__copybits+0x30>

0801097a <__any_on>:
 801097a:	f100 0214 	add.w	r2, r0, #20
 801097e:	6900      	ldr	r0, [r0, #16]
 8010980:	114b      	asrs	r3, r1, #5
 8010982:	4298      	cmp	r0, r3
 8010984:	b510      	push	{r4, lr}
 8010986:	db11      	blt.n	80109ac <__any_on+0x32>
 8010988:	dd0a      	ble.n	80109a0 <__any_on+0x26>
 801098a:	f011 011f 	ands.w	r1, r1, #31
 801098e:	d007      	beq.n	80109a0 <__any_on+0x26>
 8010990:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010994:	fa24 f001 	lsr.w	r0, r4, r1
 8010998:	fa00 f101 	lsl.w	r1, r0, r1
 801099c:	428c      	cmp	r4, r1
 801099e:	d10b      	bne.n	80109b8 <__any_on+0x3e>
 80109a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d803      	bhi.n	80109b0 <__any_on+0x36>
 80109a8:	2000      	movs	r0, #0
 80109aa:	bd10      	pop	{r4, pc}
 80109ac:	4603      	mov	r3, r0
 80109ae:	e7f7      	b.n	80109a0 <__any_on+0x26>
 80109b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109b4:	2900      	cmp	r1, #0
 80109b6:	d0f5      	beq.n	80109a4 <__any_on+0x2a>
 80109b8:	2001      	movs	r0, #1
 80109ba:	e7f6      	b.n	80109aa <__any_on+0x30>

080109bc <_realloc_r>:
 80109bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c0:	4680      	mov	r8, r0
 80109c2:	4615      	mov	r5, r2
 80109c4:	460c      	mov	r4, r1
 80109c6:	b921      	cbnz	r1, 80109d2 <_realloc_r+0x16>
 80109c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109cc:	4611      	mov	r1, r2
 80109ce:	f7fc bfad 	b.w	800d92c <_malloc_r>
 80109d2:	b92a      	cbnz	r2, 80109e0 <_realloc_r+0x24>
 80109d4:	f7fc ff3e 	bl	800d854 <_free_r>
 80109d8:	2400      	movs	r4, #0
 80109da:	4620      	mov	r0, r4
 80109dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e0:	f000 f956 	bl	8010c90 <_malloc_usable_size_r>
 80109e4:	4285      	cmp	r5, r0
 80109e6:	4606      	mov	r6, r0
 80109e8:	d802      	bhi.n	80109f0 <_realloc_r+0x34>
 80109ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80109ee:	d8f4      	bhi.n	80109da <_realloc_r+0x1e>
 80109f0:	4629      	mov	r1, r5
 80109f2:	4640      	mov	r0, r8
 80109f4:	f7fc ff9a 	bl	800d92c <_malloc_r>
 80109f8:	4607      	mov	r7, r0
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d0ec      	beq.n	80109d8 <_realloc_r+0x1c>
 80109fe:	42b5      	cmp	r5, r6
 8010a00:	462a      	mov	r2, r5
 8010a02:	4621      	mov	r1, r4
 8010a04:	bf28      	it	cs
 8010a06:	4632      	movcs	r2, r6
 8010a08:	f7fc ff0f 	bl	800d82a <memcpy>
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4640      	mov	r0, r8
 8010a10:	f7fc ff20 	bl	800d854 <_free_r>
 8010a14:	463c      	mov	r4, r7
 8010a16:	e7e0      	b.n	80109da <_realloc_r+0x1e>

08010a18 <_strtoul_l.constprop.0>:
 8010a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a1c:	4e34      	ldr	r6, [pc, #208]	@ (8010af0 <_strtoul_l.constprop.0+0xd8>)
 8010a1e:	4686      	mov	lr, r0
 8010a20:	460d      	mov	r5, r1
 8010a22:	4628      	mov	r0, r5
 8010a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a28:	5d37      	ldrb	r7, [r6, r4]
 8010a2a:	f017 0708 	ands.w	r7, r7, #8
 8010a2e:	d1f8      	bne.n	8010a22 <_strtoul_l.constprop.0+0xa>
 8010a30:	2c2d      	cmp	r4, #45	@ 0x2d
 8010a32:	d12f      	bne.n	8010a94 <_strtoul_l.constprop.0+0x7c>
 8010a34:	782c      	ldrb	r4, [r5, #0]
 8010a36:	2701      	movs	r7, #1
 8010a38:	1c85      	adds	r5, r0, #2
 8010a3a:	f033 0010 	bics.w	r0, r3, #16
 8010a3e:	d109      	bne.n	8010a54 <_strtoul_l.constprop.0+0x3c>
 8010a40:	2c30      	cmp	r4, #48	@ 0x30
 8010a42:	d12c      	bne.n	8010a9e <_strtoul_l.constprop.0+0x86>
 8010a44:	7828      	ldrb	r0, [r5, #0]
 8010a46:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010a4a:	2858      	cmp	r0, #88	@ 0x58
 8010a4c:	d127      	bne.n	8010a9e <_strtoul_l.constprop.0+0x86>
 8010a4e:	786c      	ldrb	r4, [r5, #1]
 8010a50:	2310      	movs	r3, #16
 8010a52:	3502      	adds	r5, #2
 8010a54:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010a58:	2600      	movs	r6, #0
 8010a5a:	fbb8 f8f3 	udiv	r8, r8, r3
 8010a5e:	fb03 f908 	mul.w	r9, r3, r8
 8010a62:	ea6f 0909 	mvn.w	r9, r9
 8010a66:	4630      	mov	r0, r6
 8010a68:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010a6c:	f1bc 0f09 	cmp.w	ip, #9
 8010a70:	d81c      	bhi.n	8010aac <_strtoul_l.constprop.0+0x94>
 8010a72:	4664      	mov	r4, ip
 8010a74:	42a3      	cmp	r3, r4
 8010a76:	dd2a      	ble.n	8010ace <_strtoul_l.constprop.0+0xb6>
 8010a78:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8010a7c:	d007      	beq.n	8010a8e <_strtoul_l.constprop.0+0x76>
 8010a7e:	4580      	cmp	r8, r0
 8010a80:	d322      	bcc.n	8010ac8 <_strtoul_l.constprop.0+0xb0>
 8010a82:	d101      	bne.n	8010a88 <_strtoul_l.constprop.0+0x70>
 8010a84:	45a1      	cmp	r9, r4
 8010a86:	db1f      	blt.n	8010ac8 <_strtoul_l.constprop.0+0xb0>
 8010a88:	fb00 4003 	mla	r0, r0, r3, r4
 8010a8c:	2601      	movs	r6, #1
 8010a8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a92:	e7e9      	b.n	8010a68 <_strtoul_l.constprop.0+0x50>
 8010a94:	2c2b      	cmp	r4, #43	@ 0x2b
 8010a96:	bf04      	itt	eq
 8010a98:	782c      	ldrbeq	r4, [r5, #0]
 8010a9a:	1c85      	addeq	r5, r0, #2
 8010a9c:	e7cd      	b.n	8010a3a <_strtoul_l.constprop.0+0x22>
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1d8      	bne.n	8010a54 <_strtoul_l.constprop.0+0x3c>
 8010aa2:	2c30      	cmp	r4, #48	@ 0x30
 8010aa4:	bf0c      	ite	eq
 8010aa6:	2308      	moveq	r3, #8
 8010aa8:	230a      	movne	r3, #10
 8010aaa:	e7d3      	b.n	8010a54 <_strtoul_l.constprop.0+0x3c>
 8010aac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010ab0:	f1bc 0f19 	cmp.w	ip, #25
 8010ab4:	d801      	bhi.n	8010aba <_strtoul_l.constprop.0+0xa2>
 8010ab6:	3c37      	subs	r4, #55	@ 0x37
 8010ab8:	e7dc      	b.n	8010a74 <_strtoul_l.constprop.0+0x5c>
 8010aba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010abe:	f1bc 0f19 	cmp.w	ip, #25
 8010ac2:	d804      	bhi.n	8010ace <_strtoul_l.constprop.0+0xb6>
 8010ac4:	3c57      	subs	r4, #87	@ 0x57
 8010ac6:	e7d5      	b.n	8010a74 <_strtoul_l.constprop.0+0x5c>
 8010ac8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010acc:	e7df      	b.n	8010a8e <_strtoul_l.constprop.0+0x76>
 8010ace:	1c73      	adds	r3, r6, #1
 8010ad0:	d106      	bne.n	8010ae0 <_strtoul_l.constprop.0+0xc8>
 8010ad2:	2322      	movs	r3, #34	@ 0x22
 8010ad4:	f8ce 3000 	str.w	r3, [lr]
 8010ad8:	4630      	mov	r0, r6
 8010ada:	b932      	cbnz	r2, 8010aea <_strtoul_l.constprop.0+0xd2>
 8010adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ae0:	b107      	cbz	r7, 8010ae4 <_strtoul_l.constprop.0+0xcc>
 8010ae2:	4240      	negs	r0, r0
 8010ae4:	2a00      	cmp	r2, #0
 8010ae6:	d0f9      	beq.n	8010adc <_strtoul_l.constprop.0+0xc4>
 8010ae8:	b106      	cbz	r6, 8010aec <_strtoul_l.constprop.0+0xd4>
 8010aea:	1e69      	subs	r1, r5, #1
 8010aec:	6011      	str	r1, [r2, #0]
 8010aee:	e7f5      	b.n	8010adc <_strtoul_l.constprop.0+0xc4>
 8010af0:	080120a1 	.word	0x080120a1

08010af4 <_strtoul_r>:
 8010af4:	f7ff bf90 	b.w	8010a18 <_strtoul_l.constprop.0>

08010af8 <__ascii_wctomb>:
 8010af8:	4603      	mov	r3, r0
 8010afa:	4608      	mov	r0, r1
 8010afc:	b141      	cbz	r1, 8010b10 <__ascii_wctomb+0x18>
 8010afe:	2aff      	cmp	r2, #255	@ 0xff
 8010b00:	d904      	bls.n	8010b0c <__ascii_wctomb+0x14>
 8010b02:	228a      	movs	r2, #138	@ 0x8a
 8010b04:	601a      	str	r2, [r3, #0]
 8010b06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b0a:	4770      	bx	lr
 8010b0c:	700a      	strb	r2, [r1, #0]
 8010b0e:	2001      	movs	r0, #1
 8010b10:	4770      	bx	lr

08010b12 <__swhatbuf_r>:
 8010b12:	b570      	push	{r4, r5, r6, lr}
 8010b14:	460c      	mov	r4, r1
 8010b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b1a:	2900      	cmp	r1, #0
 8010b1c:	b096      	sub	sp, #88	@ 0x58
 8010b1e:	4615      	mov	r5, r2
 8010b20:	461e      	mov	r6, r3
 8010b22:	da0d      	bge.n	8010b40 <__swhatbuf_r+0x2e>
 8010b24:	89a3      	ldrh	r3, [r4, #12]
 8010b26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b2a:	f04f 0100 	mov.w	r1, #0
 8010b2e:	bf14      	ite	ne
 8010b30:	2340      	movne	r3, #64	@ 0x40
 8010b32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b36:	2000      	movs	r0, #0
 8010b38:	6031      	str	r1, [r6, #0]
 8010b3a:	602b      	str	r3, [r5, #0]
 8010b3c:	b016      	add	sp, #88	@ 0x58
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}
 8010b40:	466a      	mov	r2, sp
 8010b42:	f000 f849 	bl	8010bd8 <_fstat_r>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	dbec      	blt.n	8010b24 <__swhatbuf_r+0x12>
 8010b4a:	9901      	ldr	r1, [sp, #4]
 8010b4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b54:	4259      	negs	r1, r3
 8010b56:	4159      	adcs	r1, r3
 8010b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b5c:	e7eb      	b.n	8010b36 <__swhatbuf_r+0x24>

08010b5e <__smakebuf_r>:
 8010b5e:	898b      	ldrh	r3, [r1, #12]
 8010b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b62:	079d      	lsls	r5, r3, #30
 8010b64:	4606      	mov	r6, r0
 8010b66:	460c      	mov	r4, r1
 8010b68:	d507      	bpl.n	8010b7a <__smakebuf_r+0x1c>
 8010b6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b6e:	6023      	str	r3, [r4, #0]
 8010b70:	6123      	str	r3, [r4, #16]
 8010b72:	2301      	movs	r3, #1
 8010b74:	6163      	str	r3, [r4, #20]
 8010b76:	b003      	add	sp, #12
 8010b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b7a:	ab01      	add	r3, sp, #4
 8010b7c:	466a      	mov	r2, sp
 8010b7e:	f7ff ffc8 	bl	8010b12 <__swhatbuf_r>
 8010b82:	9f00      	ldr	r7, [sp, #0]
 8010b84:	4605      	mov	r5, r0
 8010b86:	4639      	mov	r1, r7
 8010b88:	4630      	mov	r0, r6
 8010b8a:	f7fc fecf 	bl	800d92c <_malloc_r>
 8010b8e:	b948      	cbnz	r0, 8010ba4 <__smakebuf_r+0x46>
 8010b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b94:	059a      	lsls	r2, r3, #22
 8010b96:	d4ee      	bmi.n	8010b76 <__smakebuf_r+0x18>
 8010b98:	f023 0303 	bic.w	r3, r3, #3
 8010b9c:	f043 0302 	orr.w	r3, r3, #2
 8010ba0:	81a3      	strh	r3, [r4, #12]
 8010ba2:	e7e2      	b.n	8010b6a <__smakebuf_r+0xc>
 8010ba4:	89a3      	ldrh	r3, [r4, #12]
 8010ba6:	6020      	str	r0, [r4, #0]
 8010ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bac:	81a3      	strh	r3, [r4, #12]
 8010bae:	9b01      	ldr	r3, [sp, #4]
 8010bb0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010bb4:	b15b      	cbz	r3, 8010bce <__smakebuf_r+0x70>
 8010bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f000 f81e 	bl	8010bfc <_isatty_r>
 8010bc0:	b128      	cbz	r0, 8010bce <__smakebuf_r+0x70>
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	f023 0303 	bic.w	r3, r3, #3
 8010bc8:	f043 0301 	orr.w	r3, r3, #1
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	89a3      	ldrh	r3, [r4, #12]
 8010bd0:	431d      	orrs	r5, r3
 8010bd2:	81a5      	strh	r5, [r4, #12]
 8010bd4:	e7cf      	b.n	8010b76 <__smakebuf_r+0x18>
	...

08010bd8 <_fstat_r>:
 8010bd8:	b538      	push	{r3, r4, r5, lr}
 8010bda:	4d07      	ldr	r5, [pc, #28]	@ (8010bf8 <_fstat_r+0x20>)
 8010bdc:	2300      	movs	r3, #0
 8010bde:	4604      	mov	r4, r0
 8010be0:	4608      	mov	r0, r1
 8010be2:	4611      	mov	r1, r2
 8010be4:	602b      	str	r3, [r5, #0]
 8010be6:	f7f2 feef 	bl	80039c8 <_fstat>
 8010bea:	1c43      	adds	r3, r0, #1
 8010bec:	d102      	bne.n	8010bf4 <_fstat_r+0x1c>
 8010bee:	682b      	ldr	r3, [r5, #0]
 8010bf0:	b103      	cbz	r3, 8010bf4 <_fstat_r+0x1c>
 8010bf2:	6023      	str	r3, [r4, #0]
 8010bf4:	bd38      	pop	{r3, r4, r5, pc}
 8010bf6:	bf00      	nop
 8010bf8:	20003aa0 	.word	0x20003aa0

08010bfc <_isatty_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	4d06      	ldr	r5, [pc, #24]	@ (8010c18 <_isatty_r+0x1c>)
 8010c00:	2300      	movs	r3, #0
 8010c02:	4604      	mov	r4, r0
 8010c04:	4608      	mov	r0, r1
 8010c06:	602b      	str	r3, [r5, #0]
 8010c08:	f7f2 feee 	bl	80039e8 <_isatty>
 8010c0c:	1c43      	adds	r3, r0, #1
 8010c0e:	d102      	bne.n	8010c16 <_isatty_r+0x1a>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	b103      	cbz	r3, 8010c16 <_isatty_r+0x1a>
 8010c14:	6023      	str	r3, [r4, #0]
 8010c16:	bd38      	pop	{r3, r4, r5, pc}
 8010c18:	20003aa0 	.word	0x20003aa0

08010c1c <__assert_func>:
 8010c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c1e:	4614      	mov	r4, r2
 8010c20:	461a      	mov	r2, r3
 8010c22:	4b09      	ldr	r3, [pc, #36]	@ (8010c48 <__assert_func+0x2c>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4605      	mov	r5, r0
 8010c28:	68d8      	ldr	r0, [r3, #12]
 8010c2a:	b954      	cbnz	r4, 8010c42 <__assert_func+0x26>
 8010c2c:	4b07      	ldr	r3, [pc, #28]	@ (8010c4c <__assert_func+0x30>)
 8010c2e:	461c      	mov	r4, r3
 8010c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c34:	9100      	str	r1, [sp, #0]
 8010c36:	462b      	mov	r3, r5
 8010c38:	4905      	ldr	r1, [pc, #20]	@ (8010c50 <__assert_func+0x34>)
 8010c3a:	f000 f831 	bl	8010ca0 <fiprintf>
 8010c3e:	f000 f841 	bl	8010cc4 <abort>
 8010c42:	4b04      	ldr	r3, [pc, #16]	@ (8010c54 <__assert_func+0x38>)
 8010c44:	e7f4      	b.n	8010c30 <__assert_func+0x14>
 8010c46:	bf00      	nop
 8010c48:	20000234 	.word	0x20000234
 8010c4c:	08012413 	.word	0x08012413
 8010c50:	080123e5 	.word	0x080123e5
 8010c54:	080123d8 	.word	0x080123d8

08010c58 <_calloc_r>:
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	fba1 5402 	umull	r5, r4, r1, r2
 8010c5e:	b93c      	cbnz	r4, 8010c70 <_calloc_r+0x18>
 8010c60:	4629      	mov	r1, r5
 8010c62:	f7fc fe63 	bl	800d92c <_malloc_r>
 8010c66:	4606      	mov	r6, r0
 8010c68:	b928      	cbnz	r0, 8010c76 <_calloc_r+0x1e>
 8010c6a:	2600      	movs	r6, #0
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}
 8010c70:	220c      	movs	r2, #12
 8010c72:	6002      	str	r2, [r0, #0]
 8010c74:	e7f9      	b.n	8010c6a <_calloc_r+0x12>
 8010c76:	462a      	mov	r2, r5
 8010c78:	4621      	mov	r1, r4
 8010c7a:	f7fc fd31 	bl	800d6e0 <memset>
 8010c7e:	e7f5      	b.n	8010c6c <_calloc_r+0x14>

08010c80 <malloc>:
 8010c80:	4b02      	ldr	r3, [pc, #8]	@ (8010c8c <malloc+0xc>)
 8010c82:	4601      	mov	r1, r0
 8010c84:	6818      	ldr	r0, [r3, #0]
 8010c86:	f7fc be51 	b.w	800d92c <_malloc_r>
 8010c8a:	bf00      	nop
 8010c8c:	20000234 	.word	0x20000234

08010c90 <_malloc_usable_size_r>:
 8010c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c94:	1f18      	subs	r0, r3, #4
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	bfbc      	itt	lt
 8010c9a:	580b      	ldrlt	r3, [r1, r0]
 8010c9c:	18c0      	addlt	r0, r0, r3
 8010c9e:	4770      	bx	lr

08010ca0 <fiprintf>:
 8010ca0:	b40e      	push	{r1, r2, r3}
 8010ca2:	b503      	push	{r0, r1, lr}
 8010ca4:	4601      	mov	r1, r0
 8010ca6:	ab03      	add	r3, sp, #12
 8010ca8:	4805      	ldr	r0, [pc, #20]	@ (8010cc0 <fiprintf+0x20>)
 8010caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cae:	6800      	ldr	r0, [r0, #0]
 8010cb0:	9301      	str	r3, [sp, #4]
 8010cb2:	f7fe f899 	bl	800ede8 <_vfiprintf_r>
 8010cb6:	b002      	add	sp, #8
 8010cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cbc:	b003      	add	sp, #12
 8010cbe:	4770      	bx	lr
 8010cc0:	20000234 	.word	0x20000234

08010cc4 <abort>:
 8010cc4:	b508      	push	{r3, lr}
 8010cc6:	2006      	movs	r0, #6
 8010cc8:	f000 f82c 	bl	8010d24 <raise>
 8010ccc:	2001      	movs	r0, #1
 8010cce:	f7f2 fe2b 	bl	8003928 <_exit>

08010cd2 <_raise_r>:
 8010cd2:	291f      	cmp	r1, #31
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	460c      	mov	r4, r1
 8010cda:	d904      	bls.n	8010ce6 <_raise_r+0x14>
 8010cdc:	2316      	movs	r3, #22
 8010cde:	6003      	str	r3, [r0, #0]
 8010ce0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ce4:	bd38      	pop	{r3, r4, r5, pc}
 8010ce6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ce8:	b112      	cbz	r2, 8010cf0 <_raise_r+0x1e>
 8010cea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cee:	b94b      	cbnz	r3, 8010d04 <_raise_r+0x32>
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f000 f831 	bl	8010d58 <_getpid_r>
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	4601      	mov	r1, r0
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d00:	f000 b818 	b.w	8010d34 <_kill_r>
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d00a      	beq.n	8010d1e <_raise_r+0x4c>
 8010d08:	1c59      	adds	r1, r3, #1
 8010d0a:	d103      	bne.n	8010d14 <_raise_r+0x42>
 8010d0c:	2316      	movs	r3, #22
 8010d0e:	6003      	str	r3, [r0, #0]
 8010d10:	2001      	movs	r0, #1
 8010d12:	e7e7      	b.n	8010ce4 <_raise_r+0x12>
 8010d14:	2100      	movs	r1, #0
 8010d16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	4798      	blx	r3
 8010d1e:	2000      	movs	r0, #0
 8010d20:	e7e0      	b.n	8010ce4 <_raise_r+0x12>
	...

08010d24 <raise>:
 8010d24:	4b02      	ldr	r3, [pc, #8]	@ (8010d30 <raise+0xc>)
 8010d26:	4601      	mov	r1, r0
 8010d28:	6818      	ldr	r0, [r3, #0]
 8010d2a:	f7ff bfd2 	b.w	8010cd2 <_raise_r>
 8010d2e:	bf00      	nop
 8010d30:	20000234 	.word	0x20000234

08010d34 <_kill_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4d07      	ldr	r5, [pc, #28]	@ (8010d54 <_kill_r+0x20>)
 8010d38:	2300      	movs	r3, #0
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	4608      	mov	r0, r1
 8010d3e:	4611      	mov	r1, r2
 8010d40:	602b      	str	r3, [r5, #0]
 8010d42:	f7f2 fde1 	bl	8003908 <_kill>
 8010d46:	1c43      	adds	r3, r0, #1
 8010d48:	d102      	bne.n	8010d50 <_kill_r+0x1c>
 8010d4a:	682b      	ldr	r3, [r5, #0]
 8010d4c:	b103      	cbz	r3, 8010d50 <_kill_r+0x1c>
 8010d4e:	6023      	str	r3, [r4, #0]
 8010d50:	bd38      	pop	{r3, r4, r5, pc}
 8010d52:	bf00      	nop
 8010d54:	20003aa0 	.word	0x20003aa0

08010d58 <_getpid_r>:
 8010d58:	f7f2 bdce 	b.w	80038f8 <_getpid>

08010d5c <_init>:
 8010d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5e:	bf00      	nop
 8010d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d62:	bc08      	pop	{r3}
 8010d64:	469e      	mov	lr, r3
 8010d66:	4770      	bx	lr

08010d68 <_fini>:
 8010d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d6a:	bf00      	nop
 8010d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d6e:	bc08      	pop	{r3}
 8010d70:	469e      	mov	lr, r3
 8010d72:	4770      	bx	lr
