
w5500_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001410  0800d864  0800d864  0001d864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec74  0800ec74  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec74  0800ec74  0001ec74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec7c  0800ec7c  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec80  0800ec80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800ec84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036bc  20000270  0800eef4  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000392c  0800eef4  0002392c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bff0  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fde  00000000  00000000  0003c2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b20  00000000  00000000  000412b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b6  00000000  00000000  00042dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b899  00000000  00000000  0004428e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000202a3  00000000  00000000  0005fb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4137  00000000  00000000  0007fdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007abc  00000000  00000000  00123f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d84c 	.word	0x0800d84c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	0800d84c 	.word	0x0800d84c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	f003 0307 	and.w	r3, r3, #7
}
 800059a:	4618      	mov	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db0b      	blt.n	80005d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 021f 	and.w	r2, r3, #31
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <__NVIC_EnableIRQ+0x38>)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	095b      	lsrs	r3, r3, #5
 80005c8:	2001      	movs	r0, #1
 80005ca:	fa00 f202 	lsl.w	r2, r0, r2
 80005ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e100 	.word	0xe000e100

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	f1c3 0307 	rsb	r3, r3, #7
 8000652:	2b04      	cmp	r3, #4
 8000654:	bf28      	it	cs
 8000656:	2304      	movcs	r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3304      	adds	r3, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d902      	bls.n	8000668 <NVIC_EncodePriority+0x30>
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3b03      	subs	r3, #3
 8000666:	e000      	b.n	800066a <NVIC_EncodePriority+0x32>
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 32ff 	mov.w	r2, #4294967295
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43da      	mvns	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43d9      	mvns	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4313      	orrs	r3, r2
         );
}
 8000692:	4618      	mov	r0, r3
 8000694:	3724      	adds	r7, #36	; 0x24
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f043 0201 	orr.w	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f043 0201 	orr.w	r2, r3, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60da      	str	r2, [r3, #12]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60da      	str	r2, [r3, #12]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	615a      	str	r2, [r3, #20]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800074a:	b480      	push	{r7}
 800074c:	b089      	sub	sp, #36	; 0x24
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	330c      	adds	r3, #12
 8000756:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	e853 3f00 	ldrex	r3, [r3]
 800075e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	330c      	adds	r3, #12
 800076c:	69fa      	ldr	r2, [r7, #28]
 800076e:	61ba      	str	r2, [r7, #24]
 8000770:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000772:	6979      	ldr	r1, [r7, #20]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	e841 2300 	strex	r3, r2, [r1]
 800077a:	613b      	str	r3, [r7, #16]
   return(result);
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1e7      	bne.n	8000752 <LL_USART_EnableIT_RXNE+0x8>
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3724      	adds	r7, #36	; 0x24
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	619a      	str	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	041a      	lsls	r2, r3, #16
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	619a      	str	r2, [r3, #24]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	4907      	ldr	r1, [pc, #28]	; (80007f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4013      	ands	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <LL_APB2_GRP1_EnableClock+0x2c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4013      	ands	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800

0800082c <send_ip_to_uart>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void send_ip_to_uart(){
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af02      	add	r7, sp, #8
	char ip1=ip2=ip3=ip4=0;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <send_ip_to_uart+0x88>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <send_ip_to_uart+0x88>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <send_ip_to_uart+0x8c>)
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <send_ip_to_uart+0x8c>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <send_ip_to_uart+0x90>)
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <send_ip_to_uart+0x90>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	75fb      	strb	r3, [r7, #23]
	char out[17];
	ip1 = ReadFromEEPROM(EEPROM_ADRESS_START);
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <send_ip_to_uart+0x94>)
 8000850:	f000 ffa0 	bl	8001794 <ReadFromEEPROM>
 8000854:	4603      	mov	r3, r0
 8000856:	75fb      	strb	r3, [r7, #23]
	ip2 = ReadFromEEPROM(EEPROM_ADRESS_START+4);
 8000858:	481a      	ldr	r0, [pc, #104]	; (80008c4 <send_ip_to_uart+0x98>)
 800085a:	f000 ff9b 	bl	8001794 <ReadFromEEPROM>
 800085e:	4603      	mov	r3, r0
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <send_ip_to_uart+0x90>)
 8000864:	701a      	strb	r2, [r3, #0]
	ip3 = ReadFromEEPROM(EEPROM_ADRESS_START+8);
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <send_ip_to_uart+0x9c>)
 8000868:	f000 ff94 	bl	8001794 <ReadFromEEPROM>
 800086c:	4603      	mov	r3, r0
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <send_ip_to_uart+0x8c>)
 8000872:	701a      	strb	r2, [r3, #0]
	ip4 = ReadFromEEPROM(EEPROM_ADRESS_START+12);
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <send_ip_to_uart+0xa0>)
 8000876:	f000 ff8d 	bl	8001794 <ReadFromEEPROM>
 800087a:	4603      	mov	r3, r0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <send_ip_to_uart+0x88>)
 8000880:	701a      	strb	r2, [r3, #0]
	sprintf(out, "%d.%d.%d.%d\n\r",ip1,ip2,ip3,ip4);
 8000882:	7dfa      	ldrb	r2, [r7, #23]
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <send_ip_to_uart+0x90>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461c      	mov	r4, r3
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <send_ip_to_uart+0x8c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <send_ip_to_uart+0x88>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	1d38      	adds	r0, r7, #4
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	9100      	str	r1, [sp, #0]
 800089a:	4623      	mov	r3, r4
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <send_ip_to_uart+0xa4>)
 800089e:	f00b fe03 	bl	800c4a8 <siprintf>
	USART1_Send_String(out);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fe7f 	bl	80015a8 <USART1_Send_String>
}
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200002d9 	.word	0x200002d9
 80008b8:	200002d8 	.word	0x200002d8
 80008bc:	200002d7 	.word	0x200002d7
 80008c0:	08030000 	.word	0x08030000
 80008c4:	08030004 	.word	0x08030004
 80008c8:	08030008 	.word	0x08030008
 80008cc:	0803000c 	.word	0x0803000c
 80008d0:	0800d864 	.word	0x0800d864

080008d4 <receive_ip_from_uart>:

void receive_ip_from_uart(){
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af04      	add	r7, sp, #16
	int ip1=ip2=ip3=ip4=0;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <receive_ip_from_uart+0xa0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <receive_ip_from_uart+0xa0>)
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <receive_ip_from_uart+0xa4>)
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <receive_ip_from_uart+0xa4>)
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <receive_ip_from_uart+0xa8>)
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <receive_ip_from_uart+0xa8>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	607b      	str	r3, [r7, #4]
	sscanf(str_rx2,"SET%d.%d.%d.%d\r", &ip1, &ip2, &ip3, &ip4);
 80008f6:	1d3a      	adds	r2, r7, #4
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <receive_ip_from_uart+0xa0>)
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <receive_ip_from_uart+0xa4>)
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <receive_ip_from_uart+0xa8>)
 8000902:	491f      	ldr	r1, [pc, #124]	; (8000980 <receive_ip_from_uart+0xac>)
 8000904:	481f      	ldr	r0, [pc, #124]	; (8000984 <receive_ip_from_uart+0xb0>)
 8000906:	f00b fdef 	bl	800c4e8 <siscanf>
	gWIZNETINFO.ip[0] = gWIZNETINFO.gw[0] = ip1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000910:	739a      	strb	r2, [r3, #14]
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000914:	7b9a      	ldrb	r2, [r3, #14]
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000918:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1] = gWIZNETINFO.gw[1] = ip2;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <receive_ip_from_uart+0xa8>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000920:	73da      	strb	r2, [r3, #15]
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000924:	7bda      	ldrb	r2, [r3, #15]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000928:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[3] = gWIZNETINFO.gw[2] = ip3;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <receive_ip_from_uart+0xa4>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000930:	741a      	strb	r2, [r3, #16]
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000934:	7c1a      	ldrb	r2, [r3, #16]
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000938:	725a      	strb	r2, [r3, #9]
	gWIZNETINFO.ip[3] = ip4;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <receive_ip_from_uart+0xa0>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000940:	725a      	strb	r2, [r3, #9]
	gWIZNETINFO.gw[3] = 1;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <receive_ip_from_uart+0xb4>)
 8000944:	2201      	movs	r2, #1
 8000946:	745a      	strb	r2, [r3, #17]
	WriteToEEPROM(EEPROM_ADRESS_START, gWIZNETINFO);
 8000948:	4c0f      	ldr	r4, [pc, #60]	; (8000988 <receive_ip_from_uart+0xb4>)
 800094a:	466b      	mov	r3, sp
 800094c:	f104 020c 	add.w	r2, r4, #12
 8000950:	ca07      	ldmia	r2, {r0, r1, r2}
 8000952:	c303      	stmia	r3!, {r0, r1}
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	3302      	adds	r3, #2
 8000958:	0c12      	lsrs	r2, r2, #16
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <receive_ip_from_uart+0xb8>)
 8000962:	f000 fe3d 	bl	80015e0 <WriteToEEPROM>
	HAL_Delay(200);
 8000966:	20c8      	movs	r0, #200	; 0xc8
 8000968:	f003 f91e 	bl	8003ba8 <HAL_Delay>

}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	200002d9 	.word	0x200002d9
 8000978:	200002d8 	.word	0x200002d8
 800097c:	200002d7 	.word	0x200002d7
 8000980:	0800d874 	.word	0x0800d874
 8000984:	2000028c 	.word	0x2000028c
 8000988:	20000000 	.word	0x20000000
 800098c:	08030000 	.word	0x08030000

08000990 <Set_outputs>:


void Set_outputs (char* str_rx1)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '1')) out1[0] = 1;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b41      	cmp	r3, #65	; 0x41
 800099e:	d111      	bne.n	80009c4 <Set_outputs+0x34>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b4d      	cmp	r3, #77	; 0x4d
 80009a8:	d10c      	bne.n	80009c4 <Set_outputs+0x34>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3302      	adds	r3, #2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b31      	cmp	r3, #49	; 0x31
 80009b2:	d107      	bne.n	80009c4 <Set_outputs+0x34>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3303      	adds	r3, #3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b31      	cmp	r3, #49	; 0x31
 80009bc:	d102      	bne.n	80009c4 <Set_outputs+0x34>
 80009be:	4b86      	ldr	r3, [pc, #536]	; (8000bd8 <Set_outputs+0x248>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[3] == '0')) out1[0] = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b41      	cmp	r3, #65	; 0x41
 80009ca:	d111      	bne.n	80009f0 <Set_outputs+0x60>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3301      	adds	r3, #1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b4d      	cmp	r3, #77	; 0x4d
 80009d4:	d10c      	bne.n	80009f0 <Set_outputs+0x60>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3302      	adds	r3, #2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b31      	cmp	r3, #49	; 0x31
 80009de:	d107      	bne.n	80009f0 <Set_outputs+0x60>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3303      	adds	r3, #3
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b30      	cmp	r3, #48	; 0x30
 80009e8:	d102      	bne.n	80009f0 <Set_outputs+0x60>
 80009ea:	4b7b      	ldr	r3, [pc, #492]	; (8000bd8 <Set_outputs+0x248>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '1')) out1[1] = 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b41      	cmp	r3, #65	; 0x41
 80009f6:	d111      	bne.n	8000a1c <Set_outputs+0x8c>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b4d      	cmp	r3, #77	; 0x4d
 8000a00:	d10c      	bne.n	8000a1c <Set_outputs+0x8c>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3302      	adds	r3, #2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b31      	cmp	r3, #49	; 0x31
 8000a0a:	d107      	bne.n	8000a1c <Set_outputs+0x8c>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b31      	cmp	r3, #49	; 0x31
 8000a14:	d102      	bne.n	8000a1c <Set_outputs+0x8c>
 8000a16:	4b70      	ldr	r3, [pc, #448]	; (8000bd8 <Set_outputs+0x248>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[4] == '0')) out1[1] = 0;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b41      	cmp	r3, #65	; 0x41
 8000a22:	d111      	bne.n	8000a48 <Set_outputs+0xb8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b4d      	cmp	r3, #77	; 0x4d
 8000a2c:	d10c      	bne.n	8000a48 <Set_outputs+0xb8>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3302      	adds	r3, #2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b31      	cmp	r3, #49	; 0x31
 8000a36:	d107      	bne.n	8000a48 <Set_outputs+0xb8>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b30      	cmp	r3, #48	; 0x30
 8000a40:	d102      	bne.n	8000a48 <Set_outputs+0xb8>
 8000a42:	4b65      	ldr	r3, [pc, #404]	; (8000bd8 <Set_outputs+0x248>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '1')) out1[2] = 1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b41      	cmp	r3, #65	; 0x41
 8000a4e:	d111      	bne.n	8000a74 <Set_outputs+0xe4>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b4d      	cmp	r3, #77	; 0x4d
 8000a58:	d10c      	bne.n	8000a74 <Set_outputs+0xe4>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b31      	cmp	r3, #49	; 0x31
 8000a62:	d107      	bne.n	8000a74 <Set_outputs+0xe4>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3305      	adds	r3, #5
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b31      	cmp	r3, #49	; 0x31
 8000a6c:	d102      	bne.n	8000a74 <Set_outputs+0xe4>
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <Set_outputs+0x248>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[5] == '0')) out1[2] = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b41      	cmp	r3, #65	; 0x41
 8000a7a:	d111      	bne.n	8000aa0 <Set_outputs+0x110>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b4d      	cmp	r3, #77	; 0x4d
 8000a84:	d10c      	bne.n	8000aa0 <Set_outputs+0x110>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3302      	adds	r3, #2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b31      	cmp	r3, #49	; 0x31
 8000a8e:	d107      	bne.n	8000aa0 <Set_outputs+0x110>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3305      	adds	r3, #5
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b30      	cmp	r3, #48	; 0x30
 8000a98:	d102      	bne.n	8000aa0 <Set_outputs+0x110>
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <Set_outputs+0x248>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '1')) out1[3] = 1;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b41      	cmp	r3, #65	; 0x41
 8000aa6:	d111      	bne.n	8000acc <Set_outputs+0x13c>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b4d      	cmp	r3, #77	; 0x4d
 8000ab0:	d10c      	bne.n	8000acc <Set_outputs+0x13c>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b31      	cmp	r3, #49	; 0x31
 8000aba:	d107      	bne.n	8000acc <Set_outputs+0x13c>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3306      	adds	r3, #6
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b31      	cmp	r3, #49	; 0x31
 8000ac4:	d102      	bne.n	8000acc <Set_outputs+0x13c>
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <Set_outputs+0x248>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[6] == '0')) out1[3] = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b41      	cmp	r3, #65	; 0x41
 8000ad2:	d111      	bne.n	8000af8 <Set_outputs+0x168>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b4d      	cmp	r3, #77	; 0x4d
 8000adc:	d10c      	bne.n	8000af8 <Set_outputs+0x168>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b31      	cmp	r3, #49	; 0x31
 8000ae6:	d107      	bne.n	8000af8 <Set_outputs+0x168>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3306      	adds	r3, #6
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b30      	cmp	r3, #48	; 0x30
 8000af0:	d102      	bne.n	8000af8 <Set_outputs+0x168>
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <Set_outputs+0x248>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '1')) out1[4] = 1;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b41      	cmp	r3, #65	; 0x41
 8000afe:	d111      	bne.n	8000b24 <Set_outputs+0x194>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3301      	adds	r3, #1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b4d      	cmp	r3, #77	; 0x4d
 8000b08:	d10c      	bne.n	8000b24 <Set_outputs+0x194>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b31      	cmp	r3, #49	; 0x31
 8000b12:	d107      	bne.n	8000b24 <Set_outputs+0x194>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3307      	adds	r3, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b31      	cmp	r3, #49	; 0x31
 8000b1c:	d102      	bne.n	8000b24 <Set_outputs+0x194>
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <Set_outputs+0x248>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[7] == '0')) out1[4] = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b41      	cmp	r3, #65	; 0x41
 8000b2a:	d111      	bne.n	8000b50 <Set_outputs+0x1c0>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b4d      	cmp	r3, #77	; 0x4d
 8000b34:	d10c      	bne.n	8000b50 <Set_outputs+0x1c0>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3302      	adds	r3, #2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b31      	cmp	r3, #49	; 0x31
 8000b3e:	d107      	bne.n	8000b50 <Set_outputs+0x1c0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3307      	adds	r3, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b30      	cmp	r3, #48	; 0x30
 8000b48:	d102      	bne.n	8000b50 <Set_outputs+0x1c0>
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <Set_outputs+0x248>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	711a      	strb	r2, [r3, #4]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '1')) out1[5] = 1;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b41      	cmp	r3, #65	; 0x41
 8000b56:	d111      	bne.n	8000b7c <Set_outputs+0x1ec>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b4d      	cmp	r3, #77	; 0x4d
 8000b60:	d10c      	bne.n	8000b7c <Set_outputs+0x1ec>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3302      	adds	r3, #2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b31      	cmp	r3, #49	; 0x31
 8000b6a:	d107      	bne.n	8000b7c <Set_outputs+0x1ec>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b31      	cmp	r3, #49	; 0x31
 8000b74:	d102      	bne.n	8000b7c <Set_outputs+0x1ec>
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <Set_outputs+0x248>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[8] == '0')) out1[5] = 0;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b41      	cmp	r3, #65	; 0x41
 8000b82:	d111      	bne.n	8000ba8 <Set_outputs+0x218>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b4d      	cmp	r3, #77	; 0x4d
 8000b8c:	d10c      	bne.n	8000ba8 <Set_outputs+0x218>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3302      	adds	r3, #2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b31      	cmp	r3, #49	; 0x31
 8000b96:	d107      	bne.n	8000ba8 <Set_outputs+0x218>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b30      	cmp	r3, #48	; 0x30
 8000ba0:	d102      	bne.n	8000ba8 <Set_outputs+0x218>
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <Set_outputs+0x248>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '1')) out1[6] = 1;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b41      	cmp	r3, #65	; 0x41
 8000bae:	d115      	bne.n	8000bdc <Set_outputs+0x24c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b4d      	cmp	r3, #77	; 0x4d
 8000bb8:	d110      	bne.n	8000bdc <Set_outputs+0x24c>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b31      	cmp	r3, #49	; 0x31
 8000bc2:	d10b      	bne.n	8000bdc <Set_outputs+0x24c>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3309      	adds	r3, #9
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b31      	cmp	r3, #49	; 0x31
 8000bcc:	d106      	bne.n	8000bdc <Set_outputs+0x24c>
 8000bce:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <Set_outputs+0x248>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	719a      	strb	r2, [r3, #6]
 8000bd4:	e002      	b.n	8000bdc <Set_outputs+0x24c>
 8000bd6:	bf00      	nop
 8000bd8:	200002a8 	.word	0x200002a8
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[9] == '0')) out1[6] = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b41      	cmp	r3, #65	; 0x41
 8000be2:	d111      	bne.n	8000c08 <Set_outputs+0x278>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b4d      	cmp	r3, #77	; 0x4d
 8000bec:	d10c      	bne.n	8000c08 <Set_outputs+0x278>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b31      	cmp	r3, #49	; 0x31
 8000bf6:	d107      	bne.n	8000c08 <Set_outputs+0x278>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3309      	adds	r3, #9
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b30      	cmp	r3, #48	; 0x30
 8000c00:	d102      	bne.n	8000c08 <Set_outputs+0x278>
 8000c02:	4b86      	ldr	r3, [pc, #536]	; (8000e1c <Set_outputs+0x48c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '1')) out1[7] = 1;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b41      	cmp	r3, #65	; 0x41
 8000c0e:	d111      	bne.n	8000c34 <Set_outputs+0x2a4>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b4d      	cmp	r3, #77	; 0x4d
 8000c18:	d10c      	bne.n	8000c34 <Set_outputs+0x2a4>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b31      	cmp	r3, #49	; 0x31
 8000c22:	d107      	bne.n	8000c34 <Set_outputs+0x2a4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	330a      	adds	r3, #10
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b31      	cmp	r3, #49	; 0x31
 8000c2c:	d102      	bne.n	8000c34 <Set_outputs+0x2a4>
 8000c2e:	4b7b      	ldr	r3, [pc, #492]	; (8000e1c <Set_outputs+0x48c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[10] == '0')) out1[7] = 0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b41      	cmp	r3, #65	; 0x41
 8000c3a:	d111      	bne.n	8000c60 <Set_outputs+0x2d0>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b4d      	cmp	r3, #77	; 0x4d
 8000c44:	d10c      	bne.n	8000c60 <Set_outputs+0x2d0>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b31      	cmp	r3, #49	; 0x31
 8000c4e:	d107      	bne.n	8000c60 <Set_outputs+0x2d0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	330a      	adds	r3, #10
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b30      	cmp	r3, #48	; 0x30
 8000c58:	d102      	bne.n	8000c60 <Set_outputs+0x2d0>
 8000c5a:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <Set_outputs+0x48c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '1')) out2[0] = 1;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b41      	cmp	r3, #65	; 0x41
 8000c66:	d111      	bne.n	8000c8c <Set_outputs+0x2fc>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b4d      	cmp	r3, #77	; 0x4d
 8000c70:	d10c      	bne.n	8000c8c <Set_outputs+0x2fc>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3302      	adds	r3, #2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b31      	cmp	r3, #49	; 0x31
 8000c7a:	d107      	bne.n	8000c8c <Set_outputs+0x2fc>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	330b      	adds	r3, #11
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b31      	cmp	r3, #49	; 0x31
 8000c84:	d102      	bne.n	8000c8c <Set_outputs+0x2fc>
 8000c86:	4b66      	ldr	r3, [pc, #408]	; (8000e20 <Set_outputs+0x490>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[11] == '0')) out2[0] = 0;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b41      	cmp	r3, #65	; 0x41
 8000c92:	d111      	bne.n	8000cb8 <Set_outputs+0x328>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b4d      	cmp	r3, #77	; 0x4d
 8000c9c:	d10c      	bne.n	8000cb8 <Set_outputs+0x328>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b31      	cmp	r3, #49	; 0x31
 8000ca6:	d107      	bne.n	8000cb8 <Set_outputs+0x328>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	330b      	adds	r3, #11
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b30      	cmp	r3, #48	; 0x30
 8000cb0:	d102      	bne.n	8000cb8 <Set_outputs+0x328>
 8000cb2:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <Set_outputs+0x490>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '1')) out2[1] = 1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b41      	cmp	r3, #65	; 0x41
 8000cbe:	d111      	bne.n	8000ce4 <Set_outputs+0x354>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b4d      	cmp	r3, #77	; 0x4d
 8000cc8:	d10c      	bne.n	8000ce4 <Set_outputs+0x354>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b31      	cmp	r3, #49	; 0x31
 8000cd2:	d107      	bne.n	8000ce4 <Set_outputs+0x354>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	330c      	adds	r3, #12
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b31      	cmp	r3, #49	; 0x31
 8000cdc:	d102      	bne.n	8000ce4 <Set_outputs+0x354>
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <Set_outputs+0x490>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	705a      	strb	r2, [r3, #1]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[12] == '0')) out2[1] = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b41      	cmp	r3, #65	; 0x41
 8000cea:	d111      	bne.n	8000d10 <Set_outputs+0x380>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b4d      	cmp	r3, #77	; 0x4d
 8000cf4:	d10c      	bne.n	8000d10 <Set_outputs+0x380>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b31      	cmp	r3, #49	; 0x31
 8000cfe:	d107      	bne.n	8000d10 <Set_outputs+0x380>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	330c      	adds	r3, #12
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b30      	cmp	r3, #48	; 0x30
 8000d08:	d102      	bne.n	8000d10 <Set_outputs+0x380>
 8000d0a:	4b45      	ldr	r3, [pc, #276]	; (8000e20 <Set_outputs+0x490>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	705a      	strb	r2, [r3, #1]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '1')) out2[2] = 1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b41      	cmp	r3, #65	; 0x41
 8000d16:	d111      	bne.n	8000d3c <Set_outputs+0x3ac>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b4d      	cmp	r3, #77	; 0x4d
 8000d20:	d10c      	bne.n	8000d3c <Set_outputs+0x3ac>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3302      	adds	r3, #2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b31      	cmp	r3, #49	; 0x31
 8000d2a:	d107      	bne.n	8000d3c <Set_outputs+0x3ac>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	330d      	adds	r3, #13
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b31      	cmp	r3, #49	; 0x31
 8000d34:	d102      	bne.n	8000d3c <Set_outputs+0x3ac>
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <Set_outputs+0x490>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	709a      	strb	r2, [r3, #2]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[13] == '0')) out2[2] = 0;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b41      	cmp	r3, #65	; 0x41
 8000d42:	d111      	bne.n	8000d68 <Set_outputs+0x3d8>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3301      	adds	r3, #1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b4d      	cmp	r3, #77	; 0x4d
 8000d4c:	d10c      	bne.n	8000d68 <Set_outputs+0x3d8>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3302      	adds	r3, #2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b31      	cmp	r3, #49	; 0x31
 8000d56:	d107      	bne.n	8000d68 <Set_outputs+0x3d8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	330d      	adds	r3, #13
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b30      	cmp	r3, #48	; 0x30
 8000d60:	d102      	bne.n	8000d68 <Set_outputs+0x3d8>
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <Set_outputs+0x490>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	709a      	strb	r2, [r3, #2]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '1')) out2[3] = 1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b41      	cmp	r3, #65	; 0x41
 8000d6e:	d111      	bne.n	8000d94 <Set_outputs+0x404>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b4d      	cmp	r3, #77	; 0x4d
 8000d78:	d10c      	bne.n	8000d94 <Set_outputs+0x404>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b31      	cmp	r3, #49	; 0x31
 8000d82:	d107      	bne.n	8000d94 <Set_outputs+0x404>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	330e      	adds	r3, #14
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b31      	cmp	r3, #49	; 0x31
 8000d8c:	d102      	bne.n	8000d94 <Set_outputs+0x404>
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <Set_outputs+0x490>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	70da      	strb	r2, [r3, #3]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[14] == '0')) out2[3] = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b41      	cmp	r3, #65	; 0x41
 8000d9a:	d111      	bne.n	8000dc0 <Set_outputs+0x430>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b4d      	cmp	r3, #77	; 0x4d
 8000da4:	d10c      	bne.n	8000dc0 <Set_outputs+0x430>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3302      	adds	r3, #2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b31      	cmp	r3, #49	; 0x31
 8000dae:	d107      	bne.n	8000dc0 <Set_outputs+0x430>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	330e      	adds	r3, #14
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b30      	cmp	r3, #48	; 0x30
 8000db8:	d102      	bne.n	8000dc0 <Set_outputs+0x430>
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <Set_outputs+0x490>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	70da      	strb	r2, [r3, #3]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '1')) out2[4] = 1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b41      	cmp	r3, #65	; 0x41
 8000dc6:	d111      	bne.n	8000dec <Set_outputs+0x45c>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b4d      	cmp	r3, #77	; 0x4d
 8000dd0:	d10c      	bne.n	8000dec <Set_outputs+0x45c>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b31      	cmp	r3, #49	; 0x31
 8000dda:	d107      	bne.n	8000dec <Set_outputs+0x45c>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	330f      	adds	r3, #15
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b31      	cmp	r3, #49	; 0x31
 8000de4:	d102      	bne.n	8000dec <Set_outputs+0x45c>
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <Set_outputs+0x490>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	711a      	strb	r2, [r3, #4]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[15] == '0')) out2[4] = 0;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b41      	cmp	r3, #65	; 0x41
 8000df2:	d117      	bne.n	8000e24 <Set_outputs+0x494>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3301      	adds	r3, #1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b4d      	cmp	r3, #77	; 0x4d
 8000dfc:	d112      	bne.n	8000e24 <Set_outputs+0x494>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3302      	adds	r3, #2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b31      	cmp	r3, #49	; 0x31
 8000e06:	d10d      	bne.n	8000e24 <Set_outputs+0x494>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	330f      	adds	r3, #15
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b30      	cmp	r3, #48	; 0x30
 8000e10:	d108      	bne.n	8000e24 <Set_outputs+0x494>
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <Set_outputs+0x490>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	711a      	strb	r2, [r3, #4]
 8000e18:	e004      	b.n	8000e24 <Set_outputs+0x494>
 8000e1a:	bf00      	nop
 8000e1c:	200002a8 	.word	0x200002a8
 8000e20:	200002b0 	.word	0x200002b0

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '1')) out2[5] = 1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b41      	cmp	r3, #65	; 0x41
 8000e2a:	d111      	bne.n	8000e50 <Set_outputs+0x4c0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b4d      	cmp	r3, #77	; 0x4d
 8000e34:	d10c      	bne.n	8000e50 <Set_outputs+0x4c0>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b31      	cmp	r3, #49	; 0x31
 8000e3e:	d107      	bne.n	8000e50 <Set_outputs+0x4c0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3310      	adds	r3, #16
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b31      	cmp	r3, #49	; 0x31
 8000e48:	d102      	bne.n	8000e50 <Set_outputs+0x4c0>
 8000e4a:	4b99      	ldr	r3, [pc, #612]	; (80010b0 <Set_outputs+0x720>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	715a      	strb	r2, [r3, #5]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[16] == '0')) out2[5] = 0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b41      	cmp	r3, #65	; 0x41
 8000e56:	d111      	bne.n	8000e7c <Set_outputs+0x4ec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b4d      	cmp	r3, #77	; 0x4d
 8000e60:	d10c      	bne.n	8000e7c <Set_outputs+0x4ec>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3302      	adds	r3, #2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b31      	cmp	r3, #49	; 0x31
 8000e6a:	d107      	bne.n	8000e7c <Set_outputs+0x4ec>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3310      	adds	r3, #16
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b30      	cmp	r3, #48	; 0x30
 8000e74:	d102      	bne.n	8000e7c <Set_outputs+0x4ec>
 8000e76:	4b8e      	ldr	r3, [pc, #568]	; (80010b0 <Set_outputs+0x720>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	715a      	strb	r2, [r3, #5]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '1')) out2[6] = 1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b41      	cmp	r3, #65	; 0x41
 8000e82:	d111      	bne.n	8000ea8 <Set_outputs+0x518>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b4d      	cmp	r3, #77	; 0x4d
 8000e8c:	d10c      	bne.n	8000ea8 <Set_outputs+0x518>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3302      	adds	r3, #2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b31      	cmp	r3, #49	; 0x31
 8000e96:	d107      	bne.n	8000ea8 <Set_outputs+0x518>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3311      	adds	r3, #17
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b31      	cmp	r3, #49	; 0x31
 8000ea0:	d102      	bne.n	8000ea8 <Set_outputs+0x518>
 8000ea2:	4b83      	ldr	r3, [pc, #524]	; (80010b0 <Set_outputs+0x720>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	719a      	strb	r2, [r3, #6]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[17] == '0')) out2[6] = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b41      	cmp	r3, #65	; 0x41
 8000eae:	d111      	bne.n	8000ed4 <Set_outputs+0x544>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b4d      	cmp	r3, #77	; 0x4d
 8000eb8:	d10c      	bne.n	8000ed4 <Set_outputs+0x544>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b31      	cmp	r3, #49	; 0x31
 8000ec2:	d107      	bne.n	8000ed4 <Set_outputs+0x544>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3311      	adds	r3, #17
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b30      	cmp	r3, #48	; 0x30
 8000ecc:	d102      	bne.n	8000ed4 <Set_outputs+0x544>
 8000ece:	4b78      	ldr	r3, [pc, #480]	; (80010b0 <Set_outputs+0x720>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	719a      	strb	r2, [r3, #6]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '1')) out2[7] = 1;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b41      	cmp	r3, #65	; 0x41
 8000eda:	d111      	bne.n	8000f00 <Set_outputs+0x570>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b4d      	cmp	r3, #77	; 0x4d
 8000ee4:	d10c      	bne.n	8000f00 <Set_outputs+0x570>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3302      	adds	r3, #2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b31      	cmp	r3, #49	; 0x31
 8000eee:	d107      	bne.n	8000f00 <Set_outputs+0x570>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3312      	adds	r3, #18
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b31      	cmp	r3, #49	; 0x31
 8000ef8:	d102      	bne.n	8000f00 <Set_outputs+0x570>
 8000efa:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <Set_outputs+0x720>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	71da      	strb	r2, [r3, #7]
	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(str_rx1[2] == '1')&&(str_rx1[18] == '0')) out2[7] = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b41      	cmp	r3, #65	; 0x41
 8000f06:	d111      	bne.n	8000f2c <Set_outputs+0x59c>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b4d      	cmp	r3, #77	; 0x4d
 8000f10:	d10c      	bne.n	8000f2c <Set_outputs+0x59c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3302      	adds	r3, #2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b31      	cmp	r3, #49	; 0x31
 8000f1a:	d107      	bne.n	8000f2c <Set_outputs+0x59c>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3312      	adds	r3, #18
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b30      	cmp	r3, #48	; 0x30
 8000f24:	d102      	bne.n	8000f2c <Set_outputs+0x59c>
 8000f26:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <Set_outputs+0x720>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	71da      	strb	r2, [r3, #7]

	if ((str_rx1[0] == 'A')&&(str_rx1[1] == 'M')&&(flag_ok ==1)){ USART1_Send_String ("OK"); flag_ok=0;}
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b41      	cmp	r3, #65	; 0x41
 8000f32:	d10e      	bne.n	8000f52 <Set_outputs+0x5c2>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b4d      	cmp	r3, #77	; 0x4d
 8000f3c:	d109      	bne.n	8000f52 <Set_outputs+0x5c2>
 8000f3e:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <Set_outputs+0x724>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <Set_outputs+0x5c2>
 8000f46:	485c      	ldr	r0, [pc, #368]	; (80010b8 <Set_outputs+0x728>)
 8000f48:	f000 fb2e 	bl	80015a8 <USART1_Send_String>
 8000f4c:	4b59      	ldr	r3, [pc, #356]	; (80010b4 <Set_outputs+0x724>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]

		if (out1[0] ==1) LL_GPIO_SetOutputPin(OUT1_GPIO_Port, OUT1_Pin); else LL_GPIO_ResetOutputPin(OUT1_GPIO_Port, OUT1_Pin);
 8000f52:	4b5a      	ldr	r3, [pc, #360]	; (80010bc <Set_outputs+0x72c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d104      	bne.n	8000f64 <Set_outputs+0x5d4>
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4858      	ldr	r0, [pc, #352]	; (80010c0 <Set_outputs+0x730>)
 8000f5e:	f7ff fc17 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f62:	e003      	b.n	8000f6c <Set_outputs+0x5dc>
 8000f64:	2101      	movs	r1, #1
 8000f66:	4856      	ldr	r0, [pc, #344]	; (80010c0 <Set_outputs+0x730>)
 8000f68:	f7ff fc20 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[1] ==1) LL_GPIO_SetOutputPin(OUT2_GPIO_Port, OUT2_Pin); else LL_GPIO_ResetOutputPin(OUT2_GPIO_Port, OUT2_Pin);
 8000f6c:	4b53      	ldr	r3, [pc, #332]	; (80010bc <Set_outputs+0x72c>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d104      	bne.n	8000f7e <Set_outputs+0x5ee>
 8000f74:	2102      	movs	r1, #2
 8000f76:	4852      	ldr	r0, [pc, #328]	; (80010c0 <Set_outputs+0x730>)
 8000f78:	f7ff fc0a 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f7c:	e003      	b.n	8000f86 <Set_outputs+0x5f6>
 8000f7e:	2102      	movs	r1, #2
 8000f80:	484f      	ldr	r0, [pc, #316]	; (80010c0 <Set_outputs+0x730>)
 8000f82:	f7ff fc13 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[2] ==1) LL_GPIO_SetOutputPin(OUT3_GPIO_Port, OUT3_Pin); else LL_GPIO_ResetOutputPin(OUT3_GPIO_Port, OUT3_Pin);
 8000f86:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <Set_outputs+0x72c>)
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d104      	bne.n	8000f98 <Set_outputs+0x608>
 8000f8e:	2104      	movs	r1, #4
 8000f90:	484b      	ldr	r0, [pc, #300]	; (80010c0 <Set_outputs+0x730>)
 8000f92:	f7ff fbfd 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000f96:	e003      	b.n	8000fa0 <Set_outputs+0x610>
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4849      	ldr	r0, [pc, #292]	; (80010c0 <Set_outputs+0x730>)
 8000f9c:	f7ff fc06 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[3] ==1) LL_GPIO_SetOutputPin(OUT4_GPIO_Port, OUT4_Pin); else LL_GPIO_ResetOutputPin(OUT4_GPIO_Port, OUT4_Pin);
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <Set_outputs+0x72c>)
 8000fa2:	78db      	ldrb	r3, [r3, #3]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d104      	bne.n	8000fb2 <Set_outputs+0x622>
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4845      	ldr	r0, [pc, #276]	; (80010c0 <Set_outputs+0x730>)
 8000fac:	f7ff fbf0 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000fb0:	e003      	b.n	8000fba <Set_outputs+0x62a>
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	4842      	ldr	r0, [pc, #264]	; (80010c0 <Set_outputs+0x730>)
 8000fb6:	f7ff fbf9 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[4] ==1) LL_GPIO_SetOutputPin(OUT5_GPIO_Port, OUT5_Pin); else LL_GPIO_ResetOutputPin(OUT5_GPIO_Port, OUT5_Pin);
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <Set_outputs+0x72c>)
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d104      	bne.n	8000fcc <Set_outputs+0x63c>
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	483e      	ldr	r0, [pc, #248]	; (80010c0 <Set_outputs+0x730>)
 8000fc6:	f7ff fbe3 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000fca:	e003      	b.n	8000fd4 <Set_outputs+0x644>
 8000fcc:	2110      	movs	r1, #16
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <Set_outputs+0x730>)
 8000fd0:	f7ff fbec 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[5] ==1) LL_GPIO_SetOutputPin(OUT6_GPIO_Port, OUT6_Pin); else LL_GPIO_ResetOutputPin(OUT6_GPIO_Port, OUT6_Pin);
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <Set_outputs+0x72c>)
 8000fd6:	795b      	ldrb	r3, [r3, #5]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <Set_outputs+0x656>
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4838      	ldr	r0, [pc, #224]	; (80010c0 <Set_outputs+0x730>)
 8000fe0:	f7ff fbd6 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000fe4:	e003      	b.n	8000fee <Set_outputs+0x65e>
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4835      	ldr	r0, [pc, #212]	; (80010c0 <Set_outputs+0x730>)
 8000fea:	f7ff fbdf 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[6] ==1) LL_GPIO_SetOutputPin(OUT7_GPIO_Port, OUT7_Pin); else LL_GPIO_ResetOutputPin(OUT7_GPIO_Port, OUT7_Pin);
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <Set_outputs+0x72c>)
 8000ff0:	799b      	ldrb	r3, [r3, #6]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d104      	bne.n	8001000 <Set_outputs+0x670>
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	4831      	ldr	r0, [pc, #196]	; (80010c0 <Set_outputs+0x730>)
 8000ffa:	f7ff fbc9 	bl	8000790 <LL_GPIO_SetOutputPin>
 8000ffe:	e003      	b.n	8001008 <Set_outputs+0x678>
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <Set_outputs+0x730>)
 8001004:	f7ff fbd2 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out1[7] ==1) LL_GPIO_SetOutputPin(OUT8_GPIO_Port, OUT8_Pin); else LL_GPIO_ResetOutputPin(OUT8_GPIO_Port, OUT8_Pin);
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <Set_outputs+0x72c>)
 800100a:	79db      	ldrb	r3, [r3, #7]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d104      	bne.n	800101a <Set_outputs+0x68a>
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	482b      	ldr	r0, [pc, #172]	; (80010c0 <Set_outputs+0x730>)
 8001014:	f7ff fbbc 	bl	8000790 <LL_GPIO_SetOutputPin>
 8001018:	e003      	b.n	8001022 <Set_outputs+0x692>
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	4828      	ldr	r0, [pc, #160]	; (80010c0 <Set_outputs+0x730>)
 800101e:	f7ff fbc5 	bl	80007ac <LL_GPIO_ResetOutputPin>

		if (out2[0] ==1) LL_GPIO_SetOutputPin(OUT9_GPIO_Port, OUT9_Pin); else LL_GPIO_ResetOutputPin(OUT9_GPIO_Port, OUT9_Pin);
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <Set_outputs+0x720>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d105      	bne.n	8001036 <Set_outputs+0x6a6>
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <Set_outputs+0x730>)
 8001030:	f7ff fbae 	bl	8000790 <LL_GPIO_SetOutputPin>
 8001034:	e004      	b.n	8001040 <Set_outputs+0x6b0>
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4821      	ldr	r0, [pc, #132]	; (80010c0 <Set_outputs+0x730>)
 800103c:	f7ff fbb6 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[1] ==1) LL_GPIO_SetOutputPin(OUT10_GPIO_Port, OUT10_Pin); else LL_GPIO_ResetOutputPin(OUT10_GPIO_Port, OUT10_Pin);
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <Set_outputs+0x720>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <Set_outputs+0x6c4>
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	481c      	ldr	r0, [pc, #112]	; (80010c0 <Set_outputs+0x730>)
 800104e:	f7ff fb9f 	bl	8000790 <LL_GPIO_SetOutputPin>
 8001052:	e004      	b.n	800105e <Set_outputs+0x6ce>
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <Set_outputs+0x730>)
 800105a:	f7ff fba7 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[2] ==1) LL_GPIO_SetOutputPin(OUT11_GPIO_Port, OUT11_Pin); else LL_GPIO_ResetOutputPin(OUT11_GPIO_Port, OUT11_Pin);
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <Set_outputs+0x720>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d105      	bne.n	8001072 <Set_outputs+0x6e2>
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <Set_outputs+0x730>)
 800106c:	f7ff fb90 	bl	8000790 <LL_GPIO_SetOutputPin>
 8001070:	e004      	b.n	800107c <Set_outputs+0x6ec>
 8001072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <Set_outputs+0x730>)
 8001078:	f7ff fb98 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[3] ==1) LL_GPIO_SetOutputPin(OUT12_GPIO_Port, OUT12_Pin); else LL_GPIO_ResetOutputPin(OUT12_GPIO_Port, OUT12_Pin);
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <Set_outputs+0x720>)
 800107e:	78db      	ldrb	r3, [r3, #3]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d105      	bne.n	8001090 <Set_outputs+0x700>
 8001084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <Set_outputs+0x730>)
 800108a:	f7ff fb81 	bl	8000790 <LL_GPIO_SetOutputPin>
 800108e:	e004      	b.n	800109a <Set_outputs+0x70a>
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <Set_outputs+0x730>)
 8001096:	f7ff fb89 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[4] ==1) LL_GPIO_SetOutputPin(OUT13_GPIO_Port, OUT13_Pin); else LL_GPIO_ResetOutputPin(OUT13_GPIO_Port, OUT13_Pin);
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <Set_outputs+0x720>)
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d110      	bne.n	80010c4 <Set_outputs+0x734>
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <Set_outputs+0x730>)
 80010a8:	f7ff fb72 	bl	8000790 <LL_GPIO_SetOutputPin>
 80010ac:	e00f      	b.n	80010ce <Set_outputs+0x73e>
 80010ae:	bf00      	nop
 80010b0:	200002b0 	.word	0x200002b0
 80010b4:	200002a5 	.word	0x200002a5
 80010b8:	0800d884 	.word	0x0800d884
 80010bc:	200002a8 	.word	0x200002a8
 80010c0:	40020400 	.word	0x40020400
 80010c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <Set_outputs+0x7a0>)
 80010ca:	f7ff fb6f 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[5] ==1) LL_GPIO_SetOutputPin(OUT14_GPIO_Port, OUT14_Pin); else LL_GPIO_ResetOutputPin(OUT14_GPIO_Port, OUT14_Pin);
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <Set_outputs+0x7a4>)
 80010d0:	795b      	ldrb	r3, [r3, #5]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d105      	bne.n	80010e2 <Set_outputs+0x752>
 80010d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <Set_outputs+0x7a0>)
 80010dc:	f7ff fb58 	bl	8000790 <LL_GPIO_SetOutputPin>
 80010e0:	e004      	b.n	80010ec <Set_outputs+0x75c>
 80010e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e6:	4812      	ldr	r0, [pc, #72]	; (8001130 <Set_outputs+0x7a0>)
 80010e8:	f7ff fb60 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[6] ==1) LL_GPIO_SetOutputPin(OUT15_GPIO_Port, OUT15_Pin); else LL_GPIO_ResetOutputPin(OUT15_GPIO_Port, OUT15_Pin);
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <Set_outputs+0x7a4>)
 80010ee:	799b      	ldrb	r3, [r3, #6]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d105      	bne.n	8001100 <Set_outputs+0x770>
 80010f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <Set_outputs+0x7a0>)
 80010fa:	f7ff fb49 	bl	8000790 <LL_GPIO_SetOutputPin>
 80010fe:	e004      	b.n	800110a <Set_outputs+0x77a>
 8001100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <Set_outputs+0x7a0>)
 8001106:	f7ff fb51 	bl	80007ac <LL_GPIO_ResetOutputPin>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <Set_outputs+0x7a4>)
 800110c:	79db      	ldrb	r3, [r3, #7]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d105      	bne.n	800111e <Set_outputs+0x78e>
 8001112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <Set_outputs+0x7a8>)
 8001118:	f7ff fb3a 	bl	8000790 <LL_GPIO_SetOutputPin>

}
 800111c:	e004      	b.n	8001128 <Set_outputs+0x798>
		if (out2[7] ==1) LL_GPIO_SetOutputPin(OUT16_GPIO_Port, OUT16_Pin); else LL_GPIO_ResetOutputPin(OUT16_GPIO_Port, OUT16_Pin);
 800111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <Set_outputs+0x7a8>)
 8001124:	f7ff fb42 	bl	80007ac <LL_GPIO_ResetOutputPin>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40020400 	.word	0x40020400
 8001134:	200002b0 	.word	0x200002b0
 8001138:	40020000 	.word	0x40020000

0800113c <UART_Printf>:





void UART_Printf(const char* fmt, ...) {
 800113c:	b40f      	push	{r0, r1, r2, r3}
 800113e:	b580      	push	{r7, lr}
 8001140:	b0c2      	sub	sp, #264	; 0x108
 8001142:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8001144:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800114c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001150:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8001152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800115a:	f107 0008 	add.w	r0, r7, #8
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	f00b fa18 	bl	800c59c <vsniprintf>
    CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f835 	bl	80001e0 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f00a fd3f 	bl	800bc04 <CDC_Transmit_FS>
    va_end(args);
}
 8001186:	bf00      	nop
 8001188:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800118c:	46bd      	mov	sp, r7
 800118e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001192:	b004      	add	sp, #16
 8001194:	4770      	bx	lr
	...

08001198 <BuildStartPage>:
		"<p><a href='/switch'>Antenna switch</a></p>"
		"<p><a href='/toggle'>Toggle switch</a></p>"
		"<p><a href='/label'>Config name of labels</a></p>";


void BuildStartPage (char* buf){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	strcpy(buf,http_200_header);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <BuildStartPage+0x48>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	4611      	mov	r1, r2
 80011a8:	2352      	movs	r3, #82	; 0x52
 80011aa:	461a      	mov	r2, r3
 80011ac:	f00b fa72 	bl	800c694 <memcpy>
	strcat(buf, (char *)startPage);
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <BuildStartPage+0x4c>)
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f00b fa18 	bl	800c5e8 <strcat>
	strcat(buf, (char *)SVG);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff f811 	bl	80001e0 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <BuildStartPage+0x50>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	4611      	mov	r1, r2
 80011cc:	f241 03e5 	movw	r3, #4325	; 0x10e5
 80011d0:	461a      	mov	r2, r3
 80011d2:	f00b fa5f 	bl	800c694 <memcpy>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	0800ea5c 	.word	0x0800ea5c
 80011e4:	20000018 	.word	0x20000018
 80011e8:	0800d974 	.word	0x0800d974

080011ec <W5500_Select>:
/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
void W5500_Select(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <W5500_Select+0x14>)
 80011f6:	f003 f991 	bl	800451c <HAL_GPIO_WritePin>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020000 	.word	0x40020000

08001204 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2110      	movs	r1, #16
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <W5500_Unselect+0x14>)
 800120e:	f003 f985 	bl	800451c <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020000 	.word	0x40020000

0800121c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8001228:	887a      	ldrh	r2, [r7, #2]
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <W5500_ReadBuff+0x24>)
 8001232:	f005 fa6b 	bl	800670c <HAL_SPI_Receive>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200022e8 	.word	0x200022e8

08001244 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <W5500_WriteBuff+0x24>)
 800125a:	f005 f91b 	bl	8006494 <HAL_SPI_Transmit>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200022e8 	.word	0x200022e8

0800126c <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffd0 	bl	800121c <W5500_ReadBuff>
    return byte;
 800127c:	79fb      	ldrb	r3, [r7, #7]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffd5 	bl	8001244 <W5500_WriteBuff>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <loopback_tcps>:


int32_t loopback_tcps(uint8_t sn, char *buf, uint16_t port) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	4613      	mov	r3, r2
 80012b2:	80bb      	strh	r3, [r7, #4]
	int32_t ret;
	uint32_t size = 0, sentsize = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
	char *url;

	switch (getSn_SR(sn)) {
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3301      	adds	r3, #1
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fe73 	bl	8002fb4 <WIZCHIP_READ>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b1c      	cmp	r3, #28
 80012d2:	f200 812c 	bhi.w	800152e <loopback_tcps+0x28a>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <loopback_tcps+0x38>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080014fd 	.word	0x080014fd
 80012e0:	0800152f 	.word	0x0800152f
 80012e4:	0800152f 	.word	0x0800152f
 80012e8:	0800152f 	.word	0x0800152f
 80012ec:	0800152f 	.word	0x0800152f
 80012f0:	0800152f 	.word	0x0800152f
 80012f4:	0800152f 	.word	0x0800152f
 80012f8:	0800152f 	.word	0x0800152f
 80012fc:	0800152f 	.word	0x0800152f
 8001300:	0800152f 	.word	0x0800152f
 8001304:	0800152f 	.word	0x0800152f
 8001308:	0800152f 	.word	0x0800152f
 800130c:	0800152f 	.word	0x0800152f
 8001310:	0800152f 	.word	0x0800152f
 8001314:	0800152f 	.word	0x0800152f
 8001318:	0800152f 	.word	0x0800152f
 800131c:	0800152f 	.word	0x0800152f
 8001320:	0800152f 	.word	0x0800152f
 8001324:	0800152f 	.word	0x0800152f
 8001328:	080014db 	.word	0x080014db
 800132c:	0800152f 	.word	0x0800152f
 8001330:	0800152f 	.word	0x0800152f
 8001334:	0800152f 	.word	0x0800152f
 8001338:	08001351 	.word	0x08001351
 800133c:	0800152f 	.word	0x0800152f
 8001340:	0800152f 	.word	0x0800152f
 8001344:	0800152f 	.word	0x0800152f
 8001348:	0800152f 	.word	0x0800152f
 800134c:	080014af 	.word	0x080014af
	case SOCK_ESTABLISHED:
		if (getSn_IR(sn) & Sn_IR_CON) {
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	3301      	adds	r3, #1
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fe29 	bl	8002fb4 <WIZCHIP_READ>
 8001362:	4603      	mov	r3, r0
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00e      	beq.n	800138a <loopback_tcps+0xe6>
			UART_Printf("%d:Connected\r\n", sn);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4619      	mov	r1, r3
 8001370:	4874      	ldr	r0, [pc, #464]	; (8001544 <loopback_tcps+0x2a0>)
 8001372:	f7ff fee3 	bl	800113c <UART_Printf>
			setSn_IR(sn, Sn_IR_CON);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	3301      	adds	r3, #1
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001382:	2101      	movs	r1, #1
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fe61 	bl	800304c <WIZCHIP_WRITE>
		}
		if ((size = getSn_RX_RSR(sn)) > 0) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f001 ffb6 	bl	80032fe <getSn_RX_RSR>
 8001392:	4603      	mov	r3, r0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80ca 	beq.w	8001532 <loopback_tcps+0x28e>
			if (size > DATA_BUF_SIZE)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f242 0204 	movw	r2, #8196	; 0x2004
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d902      	bls.n	80013ae <loopback_tcps+0x10a>
				size = DATA_BUF_SIZE;
 80013a8:	f242 0304 	movw	r3, #8196	; 0x2004
 80013ac:	617b      	str	r3, [r7, #20]
			ret = recv(sn, buf, size);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f806 	bl	80023c8 <recv>
 80013bc:	60f8      	str	r0, [r7, #12]
			if (ret <= 0)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dc01      	bgt.n	80013c8 <loopback_tcps+0x124>
				return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	e0b8      	b.n	800153a <loopback_tcps+0x296>
			sentsize = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
//=============================================
			if (memcmp(buf, "GET ", 4) == 0) {
 80013cc:	2204      	movs	r2, #4
 80013ce:	495e      	ldr	r1, [pc, #376]	; (8001548 <loopback_tcps+0x2a4>)
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f00b f8f1 	bl	800c5b8 <memcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d163      	bne.n	80014a4 <loopback_tcps+0x200>
				url = buf + 4;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3304      	adds	r3, #4
 80013e0:	60bb      	str	r3, [r7, #8]

				if (memcmp(url, "/status", 7) == 0) {
 80013e2:	2207      	movs	r2, #7
 80013e4:	4959      	ldr	r1, [pc, #356]	; (800154c <loopback_tcps+0x2a8>)
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f00b f8e6 	bl	800c5b8 <memcmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d104      	bne.n	80013fc <loopback_tcps+0x158>
					strcpy(buf, (char *)post_url);
 80013f2:	4957      	ldr	r1, [pc, #348]	; (8001550 <loopback_tcps+0x2ac>)
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f00b f945 	bl	800c684 <strcpy>
 80013fa:	e02f      	b.n	800145c <loopback_tcps+0x1b8>
				} else if ((memcmp(url, "/ H", 3) == 0)) {
 80013fc:	2203      	movs	r2, #3
 80013fe:	4955      	ldr	r1, [pc, #340]	; (8001554 <loopback_tcps+0x2b0>)
 8001400:	68b8      	ldr	r0, [r7, #8]
 8001402:	f00b f8d9 	bl	800c5b8 <memcmp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <loopback_tcps+0x170>
					BuildStartPage(buf);
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fec3 	bl	8001198 <BuildStartPage>
 8001412:	e023      	b.n	800145c <loopback_tcps+0x1b8>
				} else if (memcmp(url, "/AM1", 4) == 0) {
 8001414:	2204      	movs	r2, #4
 8001416:	4950      	ldr	r1, [pc, #320]	; (8001558 <loopback_tcps+0x2b4>)
 8001418:	68b8      	ldr	r0, [r7, #8]
 800141a:	f00b f8cd 	bl	800c5b8 <memcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d113      	bne.n	800144c <loopback_tcps+0x1a8>
					get_url = url + 1;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3301      	adds	r3, #1
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <loopback_tcps+0x2b8>)
 800142a:	6013      	str	r3, [r2, #0]
					strncpy(post_url, (char *)get_url,19);
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <loopback_tcps+0x2b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2213      	movs	r2, #19
 8001432:	4619      	mov	r1, r3
 8001434:	4846      	ldr	r0, [pc, #280]	; (8001550 <loopback_tcps+0x2ac>)
 8001436:	f00b f8e6 	bl	800c606 <strncpy>
					Set_outputs(get_url);
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <loopback_tcps+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff faa6 	bl	8000990 <Set_outputs>
					BuildStartPage(buf);
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f7ff fea7 	bl	8001198 <BuildStartPage>
 800144a:	e007      	b.n	800145c <loopback_tcps+0x1b8>
				}else

				{
					strcpy(buf, http_404_header);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4a44      	ldr	r2, [pc, #272]	; (8001560 <loopback_tcps+0x2bc>)
 8001450:	4618      	mov	r0, r3
 8001452:	4611      	mov	r1, r2
 8001454:	2359      	movs	r3, #89	; 0x59
 8001456:	461a      	mov	r2, r3
 8001458:	f00b f91c 	bl	800c694 <memcpy>
				}
				//======================================================
				size = strlen(buf);
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f7fe febf 	bl	80001e0 <strlen>
 8001462:	6178      	str	r0, [r7, #20]
				while (size != sentsize) {
 8001464:	e01a      	b.n	800149c <loopback_tcps+0x1f8>
					ret = send(sn, buf + sentsize, size - sentsize);
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	18d1      	adds	r1, r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	b29a      	uxth	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	b29b      	uxth	r3, r3
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29a      	uxth	r2, r3
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 feaa 	bl	80021d4 <send>
 8001480:	60f8      	str	r0, [r7, #12]
					if (ret < 0) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da05      	bge.n	8001494 <loopback_tcps+0x1f0>
						close(sn);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd64 	bl	8001f58 <close>
						return ret;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	e052      	b.n	800153a <loopback_tcps+0x296>
					}
					sentsize += ret;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4413      	add	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
				while (size != sentsize) {
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1e0      	bne.n	8001466 <loopback_tcps+0x1c2>
				}
			}
			disconnect(sn);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fe1e 	bl	80020e8 <disconnect>
		}
		break;
 80014ac:	e041      	b.n	8001532 <loopback_tcps+0x28e>
	case SOCK_CLOSE_WAIT:
		UART_Printf("%d:CloseWait\r\n", sn);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4619      	mov	r1, r3
 80014b2:	482c      	ldr	r0, [pc, #176]	; (8001564 <loopback_tcps+0x2c0>)
 80014b4:	f7ff fe42 	bl	800113c <UART_Printf>
		if ((ret = disconnect(sn)) != SOCK_OK)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fe14 	bl	80020e8 <disconnect>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <loopback_tcps+0x22a>
			return ret;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	e035      	b.n	800153a <loopback_tcps+0x296>
		UART_Printf("%d:Closed\r\n", sn);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <loopback_tcps+0x2c4>)
 80014d4:	f7ff fe32 	bl	800113c <UART_Printf>
		break;
 80014d8:	e02e      	b.n	8001538 <loopback_tcps+0x294>
	case SOCK_INIT:
		UART_Printf("%d:Listen, port [%d]\r\n", sn, port);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	88ba      	ldrh	r2, [r7, #4]
 80014de:	4619      	mov	r1, r3
 80014e0:	4822      	ldr	r0, [pc, #136]	; (800156c <loopback_tcps+0x2c8>)
 80014e2:	f7ff fe2b 	bl	800113c <UART_Printf>
		if ((ret = listen(sn)) != SOCK_OK)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fda3 	bl	8002034 <listen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d01e      	beq.n	8001536 <loopback_tcps+0x292>
			return ret;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	e01e      	b.n	800153a <loopback_tcps+0x296>
		break;
	case SOCK_CLOSED:
		UART_Printf("%d:LBTStart\r\n", sn);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4619      	mov	r1, r3
 8001500:	481b      	ldr	r0, [pc, #108]	; (8001570 <loopback_tcps+0x2cc>)
 8001502:	f7ff fe1b 	bl	800113c <UART_Printf>
		if ((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn)
 8001506:	88ba      	ldrh	r2, [r7, #4]
 8001508:	79f8      	ldrb	r0, [r7, #7]
 800150a:	2300      	movs	r3, #0
 800150c:	2101      	movs	r1, #1
 800150e:	f000 fc0f 	bl	8001d30 <socket>
 8001512:	4603      	mov	r3, r0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	429a      	cmp	r2, r3
 800151c:	d001      	beq.n	8001522 <loopback_tcps+0x27e>
			return ret;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	e00b      	b.n	800153a <loopback_tcps+0x296>
		UART_Printf("%d:Opened\r\n", sn);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4619      	mov	r1, r3
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <loopback_tcps+0x2d0>)
 8001528:	f7ff fe08 	bl	800113c <UART_Printf>
		break;
 800152c:	e004      	b.n	8001538 <loopback_tcps+0x294>
	default:
		break;
 800152e:	bf00      	nop
 8001530:	e002      	b.n	8001538 <loopback_tcps+0x294>
		break;
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <loopback_tcps+0x294>
		break;
 8001536:	bf00      	nop
	}
	return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	0800d888 	.word	0x0800d888
 8001548:	0800d898 	.word	0x0800d898
 800154c:	0800d8a0 	.word	0x0800d8a0
 8001550:	200002bc 	.word	0x200002bc
 8001554:	0800d8a8 	.word	0x0800d8a8
 8001558:	0800d8ac 	.word	0x0800d8ac
 800155c:	200002b8 	.word	0x200002b8
 8001560:	0800eab0 	.word	0x0800eab0
 8001564:	0800d8b4 	.word	0x0800d8b4
 8001568:	0800d8c4 	.word	0x0800d8c4
 800156c:	0800d8d0 	.word	0x0800d8d0
 8001570:	0800d8e8 	.word	0x0800d8e8
 8001574:	0800d8f8 	.word	0x0800d8f8

08001578 <USART1_Send>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */


void USART1_Send (char chr){
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & USART_SR_TC));
 8001582:	bf00      	nop
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <USART1_Send+0x2c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f9      	beq.n	8001584 <USART1_Send+0xc>
	USART1->DR = chr;
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <USART1_Send+0x2c>)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	6053      	str	r3, [r2, #4]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40011000 	.word	0x40011000

080015a8 <USART1_Send_String>:

void USART1_Send_String (char* str){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]
	while(str[i])
 80015b4:	e009      	b.n	80015ca <USART1_Send_String+0x22>
	USART1_Send (str[i++]);
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	73fa      	strb	r2, [r7, #15]
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffd7 	bl	8001578 <USART1_Send>
	while(str[i])
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ef      	bne.n	80015b6 <USART1_Send_String+0xe>
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <WriteToEEPROM>:

void WriteToEEPROM (uint32_t address, wiz_NetInfo value)
{
 80015e0:	b084      	sub	sp, #16
 80015e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80015ec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80015f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
     HAL_FLASH_Unlock();
 80015f4:	f002 fc54 	bl	8003ea0 <HAL_FLASH_Unlock>
     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80015f8:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <WriteToEEPROM+0x114>)
 80015fa:	23b3      	movs	r3, #179	; 0xb3
 80015fc:	60d3      	str	r3, [r2, #12]
     FLASH_Erase_Sector(FLASH_SECTOR_5, VOLTAGE_RANGE_3);
 80015fe:	2102      	movs	r1, #2
 8001600:	2005      	movs	r0, #5
 8001602:	f002 fdbf 	bl	8004184 <FLASH_Erase_Sector>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address, value.ip[0]);
 8001606:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2200      	movs	r2, #0
 800160e:	461c      	mov	r4, r3
 8001610:	4615      	mov	r5, r2
 8001612:	4622      	mov	r2, r4
 8001614:	462b      	mov	r3, r5
 8001616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001618:	2002      	movs	r0, #2
 800161a:	f002 fbed 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+4, value.ip[1]);
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	1d19      	adds	r1, r3, #4
 8001622:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2200      	movs	r2, #0
 800162a:	4698      	mov	r8, r3
 800162c:	4691      	mov	r9, r2
 800162e:	4642      	mov	r2, r8
 8001630:	464b      	mov	r3, r9
 8001632:	2002      	movs	r0, #2
 8001634:	f002 fbe0 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+8, value.ip[2]);
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	f103 0108 	add.w	r1, r3, #8
 800163e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2200      	movs	r2, #0
 8001646:	469a      	mov	sl, r3
 8001648:	4693      	mov	fp, r2
 800164a:	4652      	mov	r2, sl
 800164c:	465b      	mov	r3, fp
 800164e:	2002      	movs	r0, #2
 8001650:	f002 fbd2 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+12, value.ip[3]);
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	f103 010c 	add.w	r1, r3, #12
 800165a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2200      	movs	r2, #0
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	627a      	str	r2, [r7, #36]	; 0x24
 8001666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800166a:	2002      	movs	r0, #2
 800166c:	f002 fbc4 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+16, value.gw[0]);
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	f103 0110 	add.w	r1, r3, #16
 8001676:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2200      	movs	r2, #0
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	61fa      	str	r2, [r7, #28]
 8001682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001686:	2002      	movs	r0, #2
 8001688:	f002 fbb6 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+20, value.gw[1]);
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	f103 0114 	add.w	r1, r3, #20
 8001692:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2200      	movs	r2, #0
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	617a      	str	r2, [r7, #20]
 800169e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016a2:	2002      	movs	r0, #2
 80016a4:	f002 fba8 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+24, value.gw[2]);
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	f103 0118 	add.w	r1, r3, #24
 80016ae:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	60fa      	str	r2, [r7, #12]
 80016ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016be:	2002      	movs	r0, #2
 80016c0:	f002 fb9a 	bl	8003df8 <HAL_FLASH_Program>
     HAL_FLASH_Program(TYPEPROGRAM_WORD, address+28, value.gw[3]);
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	f103 011c 	add.w	r1, r3, #28
 80016ca:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016da:	2002      	movs	r0, #2
 80016dc:	f002 fb8c 	bl	8003df8 <HAL_FLASH_Program>

     HAL_FLASH_Lock();
 80016e0:	f002 fc00 	bl	8003ee4 <HAL_FLASH_Lock>
}
 80016e4:	bf00      	nop
 80016e6:	3730      	adds	r7, #48	; 0x30
 80016e8:	46bd      	mov	sp, r7
 80016ea:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ee:	b004      	add	sp, #16
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00

080016f8 <ReadSettingsFromEEPROM>:

void ReadSettingsFromEEPROM() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	gWIZNETINFO.ip[0] = ReadFromEEPROM(EEPROM_ADRESS_START);
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <ReadSettingsFromEEPROM+0x78>)
 80016fe:	f000 f849 	bl	8001794 <ReadFromEEPROM>
 8001702:	4603      	mov	r3, r0
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 8001708:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1] = ReadFromEEPROM(EEPROM_ADRESS_START + 4);
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <ReadSettingsFromEEPROM+0x80>)
 800170c:	f000 f842 	bl	8001794 <ReadFromEEPROM>
 8001710:	4603      	mov	r3, r0
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 8001716:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[2] = ReadFromEEPROM(EEPROM_ADRESS_START + 8);
 8001718:	4818      	ldr	r0, [pc, #96]	; (800177c <ReadSettingsFromEEPROM+0x84>)
 800171a:	f000 f83b 	bl	8001794 <ReadFromEEPROM>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 8001724:	721a      	strb	r2, [r3, #8]
	gWIZNETINFO.ip[3] = ReadFromEEPROM(EEPROM_ADRESS_START + 12);
 8001726:	4816      	ldr	r0, [pc, #88]	; (8001780 <ReadSettingsFromEEPROM+0x88>)
 8001728:	f000 f834 	bl	8001794 <ReadFromEEPROM>
 800172c:	4603      	mov	r3, r0
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 8001732:	725a      	strb	r2, [r3, #9]

	gWIZNETINFO.gw[0] = ReadFromEEPROM(EEPROM_ADRESS_START + 16);
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <ReadSettingsFromEEPROM+0x8c>)
 8001736:	f000 f82d 	bl	8001794 <ReadFromEEPROM>
 800173a:	4603      	mov	r3, r0
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 8001740:	739a      	strb	r2, [r3, #14]
	gWIZNETINFO.gw[1] = ReadFromEEPROM(EEPROM_ADRESS_START + 20);
 8001742:	4811      	ldr	r0, [pc, #68]	; (8001788 <ReadSettingsFromEEPROM+0x90>)
 8001744:	f000 f826 	bl	8001794 <ReadFromEEPROM>
 8001748:	4603      	mov	r3, r0
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 800174e:	73da      	strb	r2, [r3, #15]
	gWIZNETINFO.gw[2] = ReadFromEEPROM(EEPROM_ADRESS_START + 24);
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <ReadSettingsFromEEPROM+0x94>)
 8001752:	f000 f81f 	bl	8001794 <ReadFromEEPROM>
 8001756:	4603      	mov	r3, r0
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 800175c:	741a      	strb	r2, [r3, #16]
	gWIZNETINFO.gw[3] = ReadFromEEPROM(EEPROM_ADRESS_START + 28);
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <ReadSettingsFromEEPROM+0x98>)
 8001760:	f000 f818 	bl	8001794 <ReadFromEEPROM>
 8001764:	4603      	mov	r3, r0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <ReadSettingsFromEEPROM+0x7c>)
 800176a:	745a      	strb	r2, [r3, #17]
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	08030000 	.word	0x08030000
 8001774:	20000000 	.word	0x20000000
 8001778:	08030004 	.word	0x08030004
 800177c:	08030008 	.word	0x08030008
 8001780:	0803000c 	.word	0x0803000c
 8001784:	08030010 	.word	0x08030010
 8001788:	08030014 	.word	0x08030014
 800178c:	08030018 	.word	0x08030018
 8001790:	0803001c 	.word	0x0803001c

08001794 <ReadFromEEPROM>:

uint32_t ReadFromEEPROM (uint32_t address)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return (*(__IO uint32_t *)address);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b2:	f002 f9b7 	bl	8003b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b6:	f000 f8fd 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ba:	f000 fa35 	bl	8001c28 <MX_GPIO_Init>
  MX_TIM10_Init();
 80017be:	f000 f99d 	bl	8001afc <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 80017c2:	f00a f961 	bl	800ba88 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80017c6:	f000 f963 	bl	8001a90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017ca:	f000 f9cd 	bl	8001b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableIT_UPDATE(TIM10);
 80017ce:	4865      	ldr	r0, [pc, #404]	; (8001964 <main+0x1b8>)
 80017d0:	f7fe ff85 	bl	80006de <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM10);
 80017d4:	4863      	ldr	r0, [pc, #396]	; (8001964 <main+0x1b8>)
 80017d6:	f7fe ff62 	bl	800069e <LL_TIM_EnableCounter>
	LL_USART_Enable(USART1);
 80017da:	4863      	ldr	r0, [pc, #396]	; (8001968 <main+0x1bc>)
 80017dc:	f7fe ff8f 	bl	80006fe <LL_USART_Enable>
	LL_USART_EnableIT_RXNE(USART1);
 80017e0:	4861      	ldr	r0, [pc, #388]	; (8001968 <main+0x1bc>)
 80017e2:	f7fe ffb2 	bl	800074a <LL_USART_EnableIT_RXNE>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2108      	movs	r1, #8
 80017ea:	4860      	ldr	r0, [pc, #384]	; (800196c <main+0x1c0>)
 80017ec:	f002 fe96 	bl	800451c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f002 f9d9 	bl	8003ba8 <HAL_Delay>
	HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2108      	movs	r1, #8
 80017fa:	485c      	ldr	r0, [pc, #368]	; (800196c <main+0x1c0>)
 80017fc:	f002 fe8e 	bl	800451c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001804:	f002 f9d0 	bl	8003ba8 <HAL_Delay>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001808:	4959      	ldr	r1, [pc, #356]	; (8001970 <main+0x1c4>)
 800180a:	485a      	ldr	r0, [pc, #360]	; (8001974 <main+0x1c8>)
 800180c:	f001 fede 	bl	80035cc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001810:	4959      	ldr	r1, [pc, #356]	; (8001978 <main+0x1cc>)
 8001812:	485a      	ldr	r0, [pc, #360]	; (800197c <main+0x1d0>)
 8001814:	f001 ff00 	bl	8003618 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001818:	4959      	ldr	r1, [pc, #356]	; (8001980 <main+0x1d4>)
 800181a:	485a      	ldr	r0, [pc, #360]	; (8001984 <main+0x1d8>)
 800181c:	f001 ff28 	bl	8003670 <reg_wizchip_spiburst_cbfunc>
	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 8001820:	4a59      	ldr	r2, [pc, #356]	; (8001988 <main+0x1dc>)
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182a:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800182e:	f107 0208 	add.w	r2, r7, #8
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f001 ffcf 	bl	80037dc <wizchip_init>
	ReadSettingsFromEEPROM();
 800183e:	f7ff ff5b 	bl	80016f8 <ReadSettingsFromEEPROM>
	if (gWIZNETINFO.ip[0] > 254){
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <main+0x1e0>)
 8001844:	799b      	ldrb	r3, [r3, #6]
 8001846:	2bff      	cmp	r3, #255	; 0xff
 8001848:	d129      	bne.n	800189e <main+0xf2>
		gWIZNETINFO.ip[0] = 192;
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <main+0x1e0>)
 800184c:	22c0      	movs	r2, #192	; 0xc0
 800184e:	719a      	strb	r2, [r3, #6]
		gWIZNETINFO.ip[1] = 168;
 8001850:	4b4e      	ldr	r3, [pc, #312]	; (800198c <main+0x1e0>)
 8001852:	22a8      	movs	r2, #168	; 0xa8
 8001854:	71da      	strb	r2, [r3, #7]
		gWIZNETINFO.ip[2] = 0;
 8001856:	4b4d      	ldr	r3, [pc, #308]	; (800198c <main+0x1e0>)
 8001858:	2200      	movs	r2, #0
 800185a:	721a      	strb	r2, [r3, #8]
		gWIZNETINFO.ip[3] = 250;
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <main+0x1e0>)
 800185e:	22fa      	movs	r2, #250	; 0xfa
 8001860:	725a      	strb	r2, [r3, #9]

		gWIZNETINFO.gw[0] = 192;
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <main+0x1e0>)
 8001864:	22c0      	movs	r2, #192	; 0xc0
 8001866:	739a      	strb	r2, [r3, #14]
		gWIZNETINFO.gw[1] = 168;
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <main+0x1e0>)
 800186a:	22a8      	movs	r2, #168	; 0xa8
 800186c:	73da      	strb	r2, [r3, #15]
		gWIZNETINFO.gw[2] = 0;
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <main+0x1e0>)
 8001870:	2200      	movs	r2, #0
 8001872:	741a      	strb	r2, [r3, #16]
		gWIZNETINFO.gw[3] = 1;
 8001874:	4b45      	ldr	r3, [pc, #276]	; (800198c <main+0x1e0>)
 8001876:	2201      	movs	r2, #1
 8001878:	745a      	strb	r2, [r3, #17]
		WriteToEEPROM(EEPROM_ADRESS_START, gWIZNETINFO);
 800187a:	4c44      	ldr	r4, [pc, #272]	; (800198c <main+0x1e0>)
 800187c:	466b      	mov	r3, sp
 800187e:	f104 020c 	add.w	r2, r4, #12
 8001882:	ca07      	ldmia	r2, {r0, r1, r2}
 8001884:	c303      	stmia	r3!, {r0, r1}
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	3302      	adds	r3, #2
 800188a:	0c12      	lsrs	r2, r2, #16
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001892:	483f      	ldr	r0, [pc, #252]	; (8001990 <main+0x1e4>)
 8001894:	f7ff fea4 	bl	80015e0 <WriteToEEPROM>
		HAL_Delay(100);
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	f002 f985 	bl	8003ba8 <HAL_Delay>

	}

	wizchip_setnetinfo(&gWIZNETINFO);
 800189e:	483b      	ldr	r0, [pc, #236]	; (800198c <main+0x1e0>)
 80018a0:	f002 f828 	bl	80038f4 <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80018a4:	4939      	ldr	r1, [pc, #228]	; (800198c <main+0x1e0>)
 80018a6:	2000      	movs	r0, #0
 80018a8:	f001 ff0e 	bl	80036c8 <ctlnetwork>
	HAL_Delay(1000);
 80018ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b0:	f002 f97a 	bl	8003ba8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		stat = socket(HTTP_SOCKET, Sn_MR_TCP, 80, 0);
 80018b4:	2300      	movs	r3, #0
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	2101      	movs	r1, #1
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 fa38 	bl	8001d30 <socket>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <main+0x1e8>)
 80018c6:	701a      	strb	r2, [r3, #0]
		/*if (stat != HTTP_SOCKET)
			UART_Printf("socket() failed, code = %d\r\n", stat);
		else
			UART_Printf("Socket created, connecting...\r\n");*/
		stat = listen(HTTP_SOCKET);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 fbb3 	bl	8002034 <listen>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <main+0x1e8>)
 80018d4:	701a      	strb	r2, [r3, #0]
		/*if (stat != SOCK_OK)
			UART_Printf("listen() failed, code = %d\r\n", stat);
		else
			UART_Printf("listen() OK\r\n");*/
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 80018d6:	e022      	b.n	800191e <main+0x172>
			HAL_Delay(5);
 80018d8:	2005      	movs	r0, #5
 80018da:	f002 f965 	bl	8003ba8 <HAL_Delay>
			if (flag_usb == 1) {
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <main+0x1ec>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d109      	bne.n	80018fa <main+0x14e>
				flag_usb = 0;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <main+0x1ec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
				strcpy(post_url,(char *) str_rx2);
 80018ec:	492b      	ldr	r1, [pc, #172]	; (800199c <main+0x1f0>)
 80018ee:	482c      	ldr	r0, [pc, #176]	; (80019a0 <main+0x1f4>)
 80018f0:	f00a fec8 	bl	800c684 <strcpy>
				Set_outputs(str_rx2);
 80018f4:	4829      	ldr	r0, [pc, #164]	; (800199c <main+0x1f0>)
 80018f6:	f7ff f84b 	bl	8000990 <Set_outputs>
			}
			if (flag_get_ip == 1){
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <main+0x1f8>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d104      	bne.n	800190c <main+0x160>
				flag_get_ip = 0;
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <main+0x1f8>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
				send_ip_to_uart();
 8001908:	f7fe ff90 	bl	800082c <send_ip_to_uart>
			}
			if (flag_set_ip == 1){
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <main+0x1fc>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d104      	bne.n	800191e <main+0x172>
				flag_set_ip = 0;
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <main+0x1fc>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
				receive_ip_from_uart();
 800191a:	f7fe ffdb 	bl	80008d4 <receive_ip_from_uart>
		while (getSn_SR(HTTP_SOCKET) == SOCK_LISTEN) {
 800191e:	f44f 7042 	mov.w	r0, #776	; 0x308
 8001922:	f001 fb47 	bl	8002fb4 <WIZCHIP_READ>
 8001926:	4603      	mov	r3, r0
 8001928:	2b14      	cmp	r3, #20
 800192a:	d0d5      	beq.n	80018d8 <main+0x12c>
		}
		/*UART_Printf("Input connection\r\n");
		if (getSn_SR(HTTP_SOCKET) != SOCK_ESTABLISHED)
			UART_Printf("Error socket status\r\n");*/
		uint8_t rIP[4];
		getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	461a      	mov	r2, r3
 8001930:	2104      	movs	r1, #4
 8001932:	2000      	movs	r0, #0
 8001934:	f000 fdfe 	bl	8002534 <getsockopt>
		UART_Printf("IP:  %d.%d.%d.%d\r\n", rIP[0], rIP[1], rIP[2], rIP[3]);
 8001938:	793b      	ldrb	r3, [r7, #4]
 800193a:	4619      	mov	r1, r3
 800193c:	797b      	ldrb	r3, [r7, #5]
 800193e:	461a      	mov	r2, r3
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	4618      	mov	r0, r3
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4603      	mov	r3, r0
 800194a:	4818      	ldr	r0, [pc, #96]	; (80019ac <main+0x200>)
 800194c:	f7ff fbf6 	bl	800113c <UART_Printf>

		loopback_tcps(HTTP_SOCKET, gDATABUF, 80);
 8001950:	2250      	movs	r2, #80	; 0x50
 8001952:	4917      	ldr	r1, [pc, #92]	; (80019b0 <main+0x204>)
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fca5 	bl	80012a4 <loopback_tcps>

		close(HTTP_SOCKET);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 fafc 	bl	8001f58 <close>
	while (1) {
 8001960:	e7a8      	b.n	80018b4 <main+0x108>
 8001962:	bf00      	nop
 8001964:	40014400 	.word	0x40014400
 8001968:	40011000 	.word	0x40011000
 800196c:	40020000 	.word	0x40020000
 8001970:	08001205 	.word	0x08001205
 8001974:	080011ed 	.word	0x080011ed
 8001978:	08001287 	.word	0x08001287
 800197c:	0800126d 	.word	0x0800126d
 8001980:	08001245 	.word	0x08001245
 8001984:	0800121d 	.word	0x0800121d
 8001988:	0800d918 	.word	0x0800d918
 800198c:	20000000 	.word	0x20000000
 8001990:	08030000 	.word	0x08030000
 8001994:	200022e4 	.word	0x200022e4
 8001998:	200002d5 	.word	0x200002d5
 800199c:	2000028c 	.word	0x2000028c
 80019a0:	200002bc 	.word	0x200002bc
 80019a4:	200002de 	.word	0x200002de
 80019a8:	200002df 	.word	0x200002df
 80019ac:	0800d904 	.word	0x0800d904
 80019b0:	200002e0 	.word	0x200002e0

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	2230      	movs	r2, #48	; 0x30
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00a fe08 	bl	800c5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <SystemClock_Config+0xd4>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <SystemClock_Config+0xd4>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <SystemClock_Config+0xd4>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <SystemClock_Config+0xd8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <SystemClock_Config+0xd8>)
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <SystemClock_Config+0xd8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a14:	2301      	movs	r3, #1
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a28:	2319      	movs	r3, #25
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a32:	2304      	movs	r3, #4
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a36:	2307      	movs	r3, #7
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3a:	f107 0320 	add.w	r3, r7, #32
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 f802 	bl	8005a48 <HAL_RCC_OscConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a4a:	f000 f96b 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4e:	230f      	movs	r3, #15
 8001a50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a52:	2302      	movs	r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2102      	movs	r1, #2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fa64 	bl	8005f38 <HAL_RCC_ClockConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a76:	f000 f955 	bl	8001d24 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001a7a:	f004 fb43 	bl	8006104 <HAL_RCC_EnableCSS>
}
 8001a7e:	bf00      	nop
 8001a80:	3750      	adds	r7, #80	; 0x50
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001a96:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <MX_SPI1_Init+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001adc:	220a      	movs	r2, #10
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_SPI1_Init+0x64>)
 8001ae2:	f004 fc4e 	bl	8006382 <HAL_SPI_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aec:	f000 f91a 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200022e8 	.word	0x200022e8
 8001af8:	40013000 	.word	0x40013000

08001afc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 8001b10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b14:	f7fe fe72 	bl	80007fc <LL_APB2_GRP1_EnableClock>

  /* TIM10 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001b18:	f7fe fd38 	bl	800058c <__NVIC_GetPriorityGrouping>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	210f      	movs	r1, #15
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd88 	bl	8000638 <NVIC_EncodePriority>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2019      	movs	r0, #25
 8001b2e:	f7fe fd59 	bl	80005e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b32:	2019      	movs	r0, #25
 8001b34:	f7fe fd38 	bl	80005a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8001b38:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8001b3c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 8001b42:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001b46:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_TIM10_Init+0x68>)
 8001b52:	f006 f83d 	bl	8007bd0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM10);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <MX_TIM10_Init+0x68>)
 8001b58:	f7fe fdb1 	bl	80006be <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40014400 	.word	0x40014400

08001b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	; 0x38
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001b92:	2010      	movs	r0, #16
 8001b94:	f7fe fe32 	bl	80007fc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7fe fe17 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001b9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ba2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4818      	ldr	r0, [pc, #96]	; (8001c20 <MX_USART1_UART_Init+0xb8>)
 8001bbe:	f005 fe20 	bl	8007802 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bc2:	f7fe fce3 	bl	800058c <__NVIC_GetPriorityGrouping>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fd33 	bl	8000638 <NVIC_EncodePriority>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2025      	movs	r0, #37	; 0x25
 8001bd8:	f7fe fd04 	bl	80005e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001bdc:	2025      	movs	r0, #37	; 0x25
 8001bde:	f7fe fce3 	bl	80005a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001be2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001be6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_USART1_UART_Init+0xbc>)
 8001c08:	f006 fac4 	bl	8008194 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_USART1_UART_Init+0xbc>)
 8001c0e:	f7fe fd86 	bl	800071e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_USART1_UART_Init+0xbc>)
 8001c14:	f7fe fd73 	bl	80006fe <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3738      	adds	r7, #56	; 0x38
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40011000 	.word	0x40011000

08001c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f7fe fdc4 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001c44:	2080      	movs	r0, #128	; 0x80
 8001c46:	f7fe fdc1 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7fe fdbe 	bl	80007cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7fe fdbb 	bl	80007cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8001c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5a:	4826      	ldr	r0, [pc, #152]	; (8001cf4 <MX_GPIO_Init+0xcc>)
 8001c5c:	f7fe fda6 	bl	80007ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin);
 8001c60:	f248 0118 	movw	r1, #32792	; 0x8018
 8001c64:	4824      	ldr	r0, [pc, #144]	; (8001cf8 <MX_GPIO_Init+0xd0>)
 8001c66:	f7fe fda1 	bl	80007ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 8001c6a:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <MX_GPIO_Init+0xd4>)
 8001c70:	f7fe fd9c 	bl	80007ac <LL_GPIO_ResetOutputPin>
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4819      	ldr	r0, [pc, #100]	; (8001cf4 <MX_GPIO_Init+0xcc>)
 8001c90:	f005 fdb7 	bl	8007802 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_Pin;
 8001c94:	2301      	movs	r3, #1
 8001c96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4814      	ldr	r0, [pc, #80]	; (8001cf8 <MX_GPIO_Init+0xd0>)
 8001ca6:	f005 fdac 	bl	8007802 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI1_CS_Pin|OUT16_Pin;
 8001caa:	f248 0318 	movw	r3, #32792	; 0x8018
 8001cae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <MX_GPIO_Init+0xd0>)
 8001cc6:	f005 fd9c 	bl	8007802 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT11_Pin
 8001cca:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001cce:	603b      	str	r3, [r7, #0]
                          |OUT12_Pin|OUT13_Pin|OUT14_Pin|OUT15_Pin
                          |OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin
                          |OUT8_Pin|OUT9_Pin|OUT10_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_GPIO_Init+0xd4>)
 8001ce6:	f005 fd8c 	bl	8007802 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400

08001d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d12:	f001 ff29 	bl	8003b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <Error_Handler+0x8>
	...

08001d30 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4604      	mov	r4, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	4603      	mov	r3, r0
 8001d44:	71bb      	strb	r3, [r7, #6]
 8001d46:	460b      	mov	r3, r1
 8001d48:	80bb      	strh	r3, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d902      	bls.n	8001d5a <socket+0x2a>
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e0f0      	b.n	8001f3c <socket+0x20c>
	switch(protocol)
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d005      	beq.n	8001d6c <socket+0x3c>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	dd11      	ble.n	8001d88 <socket+0x58>
 8001d64:	3b02      	subs	r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d80e      	bhi.n	8001d88 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001d6a:	e011      	b.n	8001d90 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2204      	movs	r2, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d78:	f001 f9b6 	bl	80030e8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <socket+0x5e>
 8001d82:	f06f 0302 	mvn.w	r3, #2
 8001d86:	e0d9      	b.n	8001f3c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001d88:	f06f 0304 	mvn.w	r3, #4
 8001d8c:	e0d6      	b.n	8001f3c <socket+0x20c>
	    break;
 8001d8e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <socket+0x70>
 8001d9a:	f06f 0305 	mvn.w	r3, #5
 8001d9e:	e0cd      	b.n	8001f3c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d028      	beq.n	8001df8 <socket+0xc8>
	{
   	switch(protocol)
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d002      	beq.n	8001db2 <socket+0x82>
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d008      	beq.n	8001dc2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001db0:	e022      	b.n	8001df8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d11a      	bne.n	8001df2 <socket+0xc2>
 8001dbc:	f06f 0305 	mvn.w	r3, #5
 8001dc0:	e0bc      	b.n	8001f3c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db02      	blt.n	8001dda <socket+0xaa>
 8001dd4:	f06f 0305 	mvn.w	r3, #5
 8001dd8:	e0b0      	b.n	8001f3c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db04      	blt.n	8001df6 <socket+0xc6>
 8001dec:	f06f 0305 	mvn.w	r3, #5
 8001df0:	e0a4      	b.n	8001f3c <socket+0x20c>
   	      break;
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <socket+0xc8>
   	      break;
 8001df6:	bf00      	nop
   	}
   }
	close(sn);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f8ac 	bl	8001f58 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	3301      	adds	r3, #1
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0e:	f023 030f 	bic.w	r3, r3, #15
 8001e12:	b25a      	sxtb	r2, r3
 8001e14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f001 f914 	bl	800304c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d110      	bne.n	8001e4c <socket+0x11c>
	{
	   port = sock_any_port++;
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <socket+0x214>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	b291      	uxth	r1, r2
 8001e32:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <socket+0x214>)
 8001e34:	8011      	strh	r1, [r2, #0]
 8001e36:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <socket+0x214>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d103      	bne.n	8001e4c <socket+0x11c>
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <socket+0x214>)
 8001e46:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001e4a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	3301      	adds	r3, #1
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e58:	461a      	mov	r2, r3
 8001e5a:	88bb      	ldrh	r3, [r7, #4]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4619      	mov	r1, r3
 8001e64:	4610      	mov	r0, r2
 8001e66:	f001 f8f1 	bl	800304c <WIZCHIP_WRITE>
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3301      	adds	r3, #1
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	461a      	mov	r2, r3
 8001e78:	88bb      	ldrh	r3, [r7, #4]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f001 f8e4 	bl	800304c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	3301      	adds	r3, #1
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 f8da 	bl	800304c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001e98:	bf00      	nop
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 f884 	bl	8002fb4 <WIZCHIP_READ>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f3      	bne.n	8001e9a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <socket+0x218>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <socket+0x218>)
 8001ece:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <socket+0x218>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <socket+0x218>)
 8001eec:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <socket+0x21c>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4013      	ands	r3, r2
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <socket+0x21c>)
 8001f0a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <socket+0x220>)
 8001f10:	2100      	movs	r1, #0
 8001f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <socket+0x224>)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001f1e:	bf00      	nop
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3301      	adds	r3, #1
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 f841 	bl	8002fb4 <WIZCHIP_READ>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f3      	beq.n	8001f20 <socket+0x1f0>
   return (int8_t)sn;
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd90      	pop	{r4, r7, pc}
 8001f44:	200000f6 	.word	0x200000f6
 8001f48:	20002340 	.word	0x20002340
 8001f4c:	20002342 	.word	0x20002342
 8001f50:	20002344 	.word	0x20002344
 8001f54:	20002354 	.word	0x20002354

08001f58 <close>:

int8_t close(uint8_t sn)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d902      	bls.n	8001f6e <close+0x16>
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	e055      	b.n	800201a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3301      	adds	r3, #1
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 f865 	bl	800304c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001f82:	bf00      	nop
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3301      	adds	r3, #1
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 f80f 	bl	8002fb4 <WIZCHIP_READ>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f3      	bne.n	8001f84 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fa8:	211f      	movs	r1, #31
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f84e 	bl	800304c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <close+0xcc>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <close+0xcc>)
 8001fcc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <close+0xd0>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <close+0xd0>)
 8001fea:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <close+0xd4>)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <close+0xd8>)
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001ffe:	bf00      	nop
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3301      	adds	r3, #1
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800200c:	4618      	mov	r0, r3
 800200e:	f000 ffd1 	bl	8002fb4 <WIZCHIP_READ>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f3      	bne.n	8002000 <close+0xa8>
	return SOCK_OK;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20002340 	.word	0x20002340
 8002028:	20002342 	.word	0x20002342
 800202c:	20002344 	.word	0x20002344
 8002030:	20002354 	.word	0x20002354

08002034 <listen>:

int8_t listen(uint8_t sn)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d902      	bls.n	800204a <listen+0x16>
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	e049      	b.n	80020de <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3301      	adds	r3, #1
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 ffae 	bl	8002fb4 <WIZCHIP_READ>
 8002058:	4603      	mov	r3, r0
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	2b01      	cmp	r3, #1
 8002060:	d002      	beq.n	8002068 <listen+0x34>
 8002062:	f06f 0304 	mvn.w	r3, #4
 8002066:	e03a      	b.n	80020de <listen+0xaa>
	CHECK_SOCKINIT();
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	3301      	adds	r3, #1
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002074:	4618      	mov	r0, r3
 8002076:	f000 ff9d 	bl	8002fb4 <WIZCHIP_READ>
 800207a:	4603      	mov	r3, r0
 800207c:	2b13      	cmp	r3, #19
 800207e:	d002      	beq.n	8002086 <listen+0x52>
 8002080:	f06f 0302 	mvn.w	r3, #2
 8002084:	e02b      	b.n	80020de <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3301      	adds	r3, #1
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002092:	2102      	movs	r1, #2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 ffd9 	bl	800304c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800209a:	bf00      	nop
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	3301      	adds	r3, #1
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 ff83 	bl	8002fb4 <WIZCHIP_READ>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f3      	bne.n	800209c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020b4:	e006      	b.n	80020c4 <listen+0x90>
   {
         close(sn);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff4d 	bl	8001f58 <close>
         return SOCKERR_SOCKCLOSED;
 80020be:	f06f 0303 	mvn.w	r3, #3
 80020c2:	e00c      	b.n	80020de <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3301      	adds	r3, #1
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 ff6f 	bl	8002fb4 <WIZCHIP_READ>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b14      	cmp	r3, #20
 80020da:	d1ec      	bne.n	80020b6 <listen+0x82>
   }
   return SOCK_OK;
 80020dc:	2301      	movs	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d902      	bls.n	80020fe <disconnect+0x16>
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	e062      	b.n	80021c4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	3301      	adds	r3, #1
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4618      	mov	r0, r3
 8002108:	f000 ff54 	bl	8002fb4 <WIZCHIP_READ>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	2b01      	cmp	r3, #1
 8002114:	d002      	beq.n	800211c <disconnect+0x34>
 8002116:	f06f 0304 	mvn.w	r3, #4
 800211a:	e053      	b.n	80021c4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	3301      	adds	r3, #1
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002128:	2108      	movs	r1, #8
 800212a:	4618      	mov	r0, r3
 800212c:	f000 ff8e 	bl	800304c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002130:	bf00      	nop
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3301      	adds	r3, #1
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800213e:	4618      	mov	r0, r3
 8002140:	f000 ff38 	bl	8002fb4 <WIZCHIP_READ>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f3      	bne.n	8002132 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2201      	movs	r2, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	b21b      	sxth	r3, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <disconnect+0xe4>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b21b      	sxth	r3, r3
 800215e:	4013      	ands	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <disconnect+0xe4>)
 8002166:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <disconnect+0xe8>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	fa42 f303 	asr.w	r3, r2, r3
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <disconnect+0xc2>
 800217c:	2300      	movs	r3, #0
 800217e:	e021      	b.n	80021c4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3301      	adds	r3, #1
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800218c:	4618      	mov	r0, r3
 800218e:	f000 ff11 	bl	8002fb4 <WIZCHIP_READ>
 8002192:	4603      	mov	r3, r0
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <disconnect+0xc2>
	   {
	      close(sn);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff feda 	bl	8001f58 <close>
	      return SOCKERR_TIMEOUT;
 80021a4:	f06f 030c 	mvn.w	r3, #12
 80021a8:	e00c      	b.n	80021c4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	3301      	adds	r3, #1
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fefc 	bl	8002fb4 <WIZCHIP_READ>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1de      	bne.n	8002180 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20002342 	.word	0x20002342
 80021d0:	20002340 	.word	0x20002340

080021d4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d902      	bls.n	80021f8 <send+0x24>
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e0de      	b.n	80023b6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3301      	adds	r3, #1
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fed7 	bl	8002fb4 <WIZCHIP_READ>
 8002206:	4603      	mov	r3, r0
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	2b01      	cmp	r3, #1
 800220e:	d002      	beq.n	8002216 <send+0x42>
 8002210:	f06f 0304 	mvn.w	r3, #4
 8002214:	e0cf      	b.n	80023b6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <send+0x4e>
 800221c:	f06f 030d 	mvn.w	r3, #13
 8002220:	e0c9      	b.n	80023b6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	3301      	adds	r3, #1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fec0 	bl	8002fb4 <WIZCHIP_READ>
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b17      	cmp	r3, #23
 800223c:	d005      	beq.n	800224a <send+0x76>
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b1c      	cmp	r3, #28
 8002242:	d002      	beq.n	800224a <send+0x76>
 8002244:	f06f 0306 	mvn.w	r3, #6
 8002248:	e0b5      	b.n	80023b6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <send+0x1ec>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	fa42 f303 	asr.w	r3, r2, r3
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d039      	beq.n	80022d2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3301      	adds	r3, #1
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fea2 	bl	8002fb4 <WIZCHIP_READ>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d019      	beq.n	80022b6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3301      	adds	r3, #1
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800228e:	2110      	movs	r1, #16
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fedb 	bl	800304c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2201      	movs	r2, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	b21b      	sxth	r3, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <send+0x1ec>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4013      	ands	r3, r2
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <send+0x1ec>)
 80022b2:	801a      	strh	r2, [r3, #0]
 80022b4:	e00d      	b.n	80022d2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <send+0xfa>
      {
         close(sn);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fe48 	bl	8001f58 <close>
         return SOCKERR_TIMEOUT;
 80022c8:	f06f 030c 	mvn.w	r3, #12
 80022cc:	e073      	b.n	80023b6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e071      	b.n	80023b6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	3301      	adds	r3, #1
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fe68 	bl	8002fb4 <WIZCHIP_READ>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80022ec:	88ba      	ldrh	r2, [r7, #4]
 80022ee:	89bb      	ldrh	r3, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <send+0x124>
 80022f4:	89bb      	ldrh	r3, [r7, #12]
 80022f6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ffb4 	bl	8003268 <getSn_TX_FSR>
 8002300:	4603      	mov	r3, r0
 8002302:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	3301      	adds	r3, #1
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fe4f 	bl	8002fb4 <WIZCHIP_READ>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b17      	cmp	r3, #23
 800231e:	d009      	beq.n	8002334 <send+0x160>
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b1c      	cmp	r3, #28
 8002324:	d006      	beq.n	8002334 <send+0x160>
      {
         close(sn);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fe15 	bl	8001f58 <close>
         return SOCKERR_SOCKSTATUS;
 800232e:	f06f 0306 	mvn.w	r3, #6
 8002332:	e040      	b.n	80023b6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <send+0x1f0>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	fa42 f303 	asr.w	r3, r2, r3
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <send+0x180>
 8002348:	88ba      	ldrh	r2, [r7, #4]
 800234a:	89bb      	ldrh	r3, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d901      	bls.n	8002354 <send+0x180>
 8002350:	2300      	movs	r3, #0
 8002352:	e030      	b.n	80023b6 <send+0x1e2>
      if(len <= freesize) break;
 8002354:	88ba      	ldrh	r2, [r7, #4]
 8002356:	89bb      	ldrh	r3, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d900      	bls.n	800235e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800235c:	e7cc      	b.n	80022f8 <send+0x124>
      if(len <= freesize) break;
 800235e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002360:	88ba      	ldrh	r2, [r7, #4]
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f001 f814 	bl	8003394 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	3301      	adds	r3, #1
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002378:	2120      	movs	r1, #32
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fe66 	bl	800304c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002380:	bf00      	nop
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	3301      	adds	r3, #1
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fe10 	bl	8002fb4 <WIZCHIP_READ>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f3      	bne.n	8002382 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2201      	movs	r2, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <send+0x1ec>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <send+0x1ec>)
 80023b2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80023b4:	88bb      	ldrh	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20002342 	.word	0x20002342
 80023c4:	20002340 	.word	0x20002340

080023c8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4613      	mov	r3, r2
 80023d6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d902      	bls.n	80023ec <recv+0x24>
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e09c      	b.n	8002526 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3301      	adds	r3, #1
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fddd 	bl	8002fb4 <WIZCHIP_READ>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <recv+0x42>
 8002404:	f06f 0304 	mvn.w	r3, #4
 8002408:	e08d      	b.n	8002526 <recv+0x15e>
   CHECK_SOCKDATA();
 800240a:	88bb      	ldrh	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <recv+0x4e>
 8002410:	f06f 030d 	mvn.w	r3, #13
 8002414:	e087      	b.n	8002526 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	3301      	adds	r3, #1
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fdc6 	bl	8002fb4 <WIZCHIP_READ>
 8002428:	4603      	mov	r3, r0
 800242a:	b29b      	uxth	r3, r3
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002430:	89ba      	ldrh	r2, [r7, #12]
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d201      	bcs.n	800243c <recv+0x74>
 8002438:	89bb      	ldrh	r3, [r7, #12]
 800243a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 ff5d 	bl	80032fe <getSn_RX_RSR>
 8002444:	4603      	mov	r3, r0
 8002446:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	3301      	adds	r3, #1
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fdad 	bl	8002fb4 <WIZCHIP_READ>
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b17      	cmp	r3, #23
 8002462:	d026      	beq.n	80024b2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b1c      	cmp	r3, #28
 8002468:	d11c      	bne.n	80024a4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800246a:	89bb      	ldrh	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d133      	bne.n	80024d8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fef8 	bl	8003268 <getSn_TX_FSR>
 8002478:	4603      	mov	r3, r0
 800247a:	461c      	mov	r4, r3
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	3301      	adds	r3, #1
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fd93 	bl	8002fb4 <WIZCHIP_READ>
 800248e:	4603      	mov	r3, r0
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	429c      	cmp	r4, r3
 8002494:	d10d      	bne.n	80024b2 <recv+0xea>
               {
                  close(sn);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fd5d 	bl	8001f58 <close>
                  return SOCKERR_SOCKSTATUS;
 800249e:	f06f 0306 	mvn.w	r3, #6
 80024a2:	e040      	b.n	8002526 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fd56 	bl	8001f58 <close>
               return SOCKERR_SOCKSTATUS;
 80024ac:	f06f 0306 	mvn.w	r3, #6
 80024b0:	e039      	b.n	8002526 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <recv+0x168>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	fa42 f303 	asr.w	r3, r2, r3
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <recv+0x108>
 80024c6:	89bb      	ldrh	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <recv+0x108>
 80024cc:	2300      	movs	r3, #0
 80024ce:	e02a      	b.n	8002526 <recv+0x15e>
         if(recvsize != 0) break;
 80024d0:	89bb      	ldrh	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80024d6:	e7b1      	b.n	800243c <recv+0x74>
               if(recvsize != 0) break;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <recv+0x116>
         if(recvsize != 0) break;
 80024dc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80024de:	89ba      	ldrh	r2, [r7, #12]
 80024e0:	88bb      	ldrh	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d201      	bcs.n	80024ea <recv+0x122>
 80024e6:	89bb      	ldrh	r3, [r7, #12]
 80024e8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80024ea:	88ba      	ldrh	r2, [r7, #4]
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	6839      	ldr	r1, [r7, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 ffab 	bl	800344c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3301      	adds	r3, #1
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fda1 	bl	800304c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800250a:	bf00      	nop
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3301      	adds	r3, #1
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fd4b 	bl	8002fb4 <WIZCHIP_READ>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f3      	bne.n	800250c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002524:	88bb      	ldrh	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	bf00      	nop
 8002530:	20002340 	.word	0x20002340

08002534 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	603a      	str	r2, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
 8002540:	460b      	mov	r3, r1
 8002542:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d902      	bls.n	8002550 <getsockopt+0x1c>
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e101      	b.n	8002754 <getsockopt+0x220>
   switch(sotype)
 8002550:	79bb      	ldrb	r3, [r7, #6]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	f200 80fa 	bhi.w	800274c <getsockopt+0x218>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <getsockopt+0x2c>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002595 	.word	0x08002595
 8002564:	080025b1 	.word	0x080025b1
 8002568:	080025cd 	.word	0x080025cd
 800256c:	080025e9 	.word	0x080025e9
 8002570:	08002623 	.word	0x08002623
 8002574:	0800263b 	.word	0x0800263b
 8002578:	0800274d 	.word	0x0800274d
 800257c:	08002675 	.word	0x08002675
 8002580:	080026af 	.word	0x080026af
 8002584:	080026c1 	.word	0x080026c1
 8002588:	080026d3 	.word	0x080026d3
 800258c:	080026ef 	.word	0x080026ef
 8002590:	08002727 	.word	0x08002727
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3301      	adds	r3, #1
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd09 	bl	8002fb4 <WIZCHIP_READ>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f023 030f 	bic.w	r3, r3, #15
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	701a      	strb	r2, [r3, #0]
         break;
 80025ae:	e0d0      	b.n	8002752 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	3301      	adds	r3, #1
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fcf9 	bl	8002fb4 <WIZCHIP_READ>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	701a      	strb	r2, [r3, #0]
         break;
 80025ca:	e0c2      	b.n	8002752 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3301      	adds	r3, #1
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fceb 	bl	8002fb4 <WIZCHIP_READ>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	701a      	strb	r2, [r3, #0]
         break;
 80025e6:	e0b4      	b.n	8002752 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3301      	adds	r3, #1
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fcdd 	bl	8002fb4 <WIZCHIP_READ>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	b29c      	uxth	r4, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3301      	adds	r3, #1
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fcd0 	bl	8002fb4 <WIZCHIP_READ>
 8002614:	4603      	mov	r3, r0
 8002616:	b29b      	uxth	r3, r3
 8002618:	4423      	add	r3, r4
 800261a:	b29a      	uxth	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	801a      	strh	r2, [r3, #0]
         break;
 8002620:	e097      	b.n	8002752 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	3301      	adds	r3, #1
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800262e:	2204      	movs	r2, #4
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fd58 	bl	80030e8 <WIZCHIP_READ_BUF>
         break;
 8002638:	e08b      	b.n	8002752 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	3301      	adds	r3, #1
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fcb4 	bl	8002fb4 <WIZCHIP_READ>
 800264c:	4603      	mov	r3, r0
 800264e:	b29b      	uxth	r3, r3
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b29c      	uxth	r4, r3
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	3301      	adds	r3, #1
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fca7 	bl	8002fb4 <WIZCHIP_READ>
 8002666:	4603      	mov	r3, r0
 8002668:	b29b      	uxth	r3, r3
 800266a:	4423      	add	r3, r4
 800266c:	b29a      	uxth	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	801a      	strh	r2, [r3, #0]
         break;
 8002672:	e06e      	b.n	8002752 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	3301      	adds	r3, #1
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fc99 	bl	8002fb4 <WIZCHIP_READ>
 8002682:	4603      	mov	r3, r0
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	2b01      	cmp	r3, #1
 800268a:	d002      	beq.n	8002692 <getsockopt+0x15e>
 800268c:	f06f 0304 	mvn.w	r3, #4
 8002690:	e060      	b.n	8002754 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3301      	adds	r3, #1
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fc88 	bl	8002fb4 <WIZCHIP_READ>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	801a      	strh	r2, [r3, #0]
         break;
 80026ac:	e051      	b.n	8002752 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fdd9 	bl	8003268 <getSn_TX_FSR>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	801a      	strh	r2, [r3, #0]
         break;
 80026be:	e048      	b.n	8002752 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fe1b 	bl	80032fe <getSn_RX_RSR>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	801a      	strh	r2, [r3, #0]
         break;
 80026d0:	e03f      	b.n	8002752 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	3301      	adds	r3, #1
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fc68 	bl	8002fb4 <WIZCHIP_READ>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	701a      	strb	r2, [r3, #0]
         break;
 80026ec:	e031      	b.n	8002752 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	3301      	adds	r3, #1
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fc5c 	bl	8002fb4 <WIZCHIP_READ>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fdf8 	bl	80032fe <getSn_RX_RSR>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8002716:	e01c      	b.n	8002752 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <getsockopt+0x228>)
 800271c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	801a      	strh	r2, [r3, #0]
         break;
 8002724:	e015      	b.n	8002752 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	3301      	adds	r3, #1
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fc40 	bl	8002fb4 <WIZCHIP_READ>
 8002734:	4603      	mov	r3, r0
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 800273a:	f06f 0304 	mvn.w	r3, #4
 800273e:	e009      	b.n	8002754 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <getsockopt+0x22c>)
 8002744:	5cd2      	ldrb	r2, [r2, r3]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	701a      	strb	r2, [r3, #0]
         break;
 800274a:	e002      	b.n	8002752 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 800274c:	f06f 0301 	mvn.w	r3, #1
 8002750:	e000      	b.n	8002754 <getsockopt+0x220>
   }
   return SOCK_OK;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	20002344 	.word	0x20002344
 8002760:	20002354 	.word	0x20002354

08002764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_MspInit+0x4c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_MspInit+0x4c>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_MspInit+0x4c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_MspInit+0x4c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_MspInit+0x4c>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_MspInit+0x4c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <HAL_SPI_MspInit+0x94>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d133      	bne.n	800283e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_SPI_MspInit+0x98>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_SPI_MspInit+0x98>)
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_SPI_MspInit+0x98>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_SPI_MspInit+0x98>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_SPI_MspInit+0x98>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_SPI_MspInit+0x98>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800280e:	23e0      	movs	r3, #224	; 0xe0
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281a:	2303      	movs	r3, #3
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800281e:	2305      	movs	r3, #5
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4809      	ldr	r0, [pc, #36]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 800282a:	f001 fcf3 	bl	8004214 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2023      	movs	r0, #35	; 0x23
 8002834:	f001 fa94 	bl	8003d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002838:	2023      	movs	r0, #35	; 0x23
 800283a:	f001 faad 	bl	8003d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	; 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40013000 	.word	0x40013000
 800284c:	40023800 	.word	0x40023800
 8002850:	40020000 	.word	0x40020000

08002854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	; 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_InitTick+0xd0>)
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_InitTick+0xd0>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6453      	str	r3, [r2, #68]	; 0x44
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_InitTick+0xd0>)
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002880:	f107 020c 	add.w	r2, r7, #12
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fd2c 	bl	80062e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002890:	f003 fd16 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 8002894:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	4a23      	ldr	r2, [pc, #140]	; (8002928 <HAL_InitTick+0xd4>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9b      	lsrs	r3, r3, #18
 80028a0:	3b01      	subs	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_InitTick+0xd8>)
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_InitTick+0xdc>)
 80028a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_InitTick+0xd8>)
 80028ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028b2:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_InitTick+0xd8>)
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_InitTick+0xd8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_InitTick+0xd8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_InitTick+0xd8>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028ca:	4818      	ldr	r0, [pc, #96]	; (800292c <HAL_InitTick+0xd8>)
 80028cc:	f004 fc14 	bl	80070f8 <HAL_TIM_Base_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80028d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11b      	bne.n	8002916 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028de:	4813      	ldr	r0, [pc, #76]	; (800292c <HAL_InitTick+0xd8>)
 80028e0:	f004 fc64 	bl	80071ac <HAL_TIM_Base_Start_IT>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80028ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d111      	bne.n	8002916 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028f2:	2019      	movs	r0, #25
 80028f4:	f001 fa50 	bl	8003d98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	d808      	bhi.n	8002910 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80028fe:	2200      	movs	r2, #0
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	2019      	movs	r0, #25
 8002904:	f001 fa2c 	bl	8003d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_InitTick+0xe0>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e002      	b.n	8002916 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800291a:	4618      	mov	r0, r3
 800291c:	3730      	adds	r7, #48	; 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	431bde83 	.word	0x431bde83
 800292c:	2000235c 	.word	0x2000235c
 8002930:	40010000 	.word	0x40010000
 8002934:	20000128 	.word	0x20000128

08002938 <LL_TIM_ClearFlag_UPDATE>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f06f 0201 	mvn.w	r2, #1
 8002946:	611a      	str	r2, [r3, #16]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4013      	ands	r3, r2
 8002990:	041a      	lsls	r2, r3, #16
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43d9      	mvns	r1, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	400b      	ands	r3, r1
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80029b0:	f003 fccc 	bl	800634c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <NMI_Handler+0x8>

080029b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ba:	e7fe      	b.n	80029ba <HardFault_Handler+0x4>

080029bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <MemManage_Handler+0x4>

080029c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <UsageFault_Handler+0x4>

080029ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM10)) {
 8002a0c:	4809      	ldr	r0, [pc, #36]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002a0e:	f7ff ffa1 	bl	8002954 <LL_TIM_IsActiveFlag_UPDATE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <TIM1_UP_TIM10_IRQHandler+0x20>
			LL_TIM_ClearFlag_UPDATE(TIM10);
 8002a18:	4806      	ldr	r0, [pc, #24]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002a1a:	f7ff ff8d 	bl	8002938 <LL_TIM_ClearFlag_UPDATE>
			LL_GPIO_TogglePin(GPIOC, LED_Pin);
 8002a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8002a24:	f7ff ffa9 	bl	800297a <LL_GPIO_TogglePin>
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8002a2a:	f004 fc21 	bl	8007270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40014400 	.word	0x40014400
 8002a38:	40020800 	.word	0x40020800
 8002a3c:	2000235c 	.word	0x2000235c

08002a40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <SPI1_IRQHandler+0x10>)
 8002a46:	f004 f915 	bl	8006c74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200022e8 	.word	0x200022e8

08002a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	char letter;
	static uint8_t i = 0;
	letter = USART1->DR;
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <USART1_IRQHandler+0x3c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	71fb      	strb	r3, [r7, #7]
	if (letter != '\r') {
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b0d      	cmp	r3, #13
 8002a64:	d01a      	beq.n	8002a9c <USART1_IRQHandler+0x48>
		str_rx2[i] = letter;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <USART1_IRQHandler+0x40>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <USART1_IRQHandler+0x44>)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	5453      	strb	r3, [r2, r1]
		i++;
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <USART1_IRQHandler+0x40>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <USART1_IRQHandler+0x40>)
 8002a7c:	701a      	strb	r2, [r3, #0]
		if (i == 24)
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <USART1_IRQHandler+0x40>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	f040 8234 	bne.w	8002ef0 <USART1_IRQHandler+0x49c>
			i = 0;
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <USART1_IRQHandler+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002a8e:	e22f      	b.n	8002ef0 <USART1_IRQHandler+0x49c>
 8002a90:	40011000 	.word	0x40011000
 8002a94:	200023a4 	.word	0x200023a4
 8002a98:	2000028c 	.word	0x2000028c
		str_rx2[i] = '\r';
 8002a9c:	4b98      	ldr	r3, [pc, #608]	; (8002d00 <USART1_IRQHandler+0x2ac>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002aa4:	210d      	movs	r1, #13
 8002aa6:	5499      	strb	r1, [r3, r2]
		i = 0;
 8002aa8:	4b95      	ldr	r3, [pc, #596]	; (8002d00 <USART1_IRQHandler+0x2ac>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
		flag_ok = 1;
 8002aae:	4b96      	ldr	r3, [pc, #600]	; (8002d08 <USART1_IRQHandler+0x2b4>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='S')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 8002ab4:	4b93      	ldr	r3, [pc, #588]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b53      	cmp	r3, #83	; 0x53
 8002aba:	d10a      	bne.n	8002ad2 <USART1_IRQHandler+0x7e>
 8002abc:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b45      	cmp	r3, #69	; 0x45
 8002ac2:	d106      	bne.n	8002ad2 <USART1_IRQHandler+0x7e>
 8002ac4:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002ac6:	789b      	ldrb	r3, [r3, #2]
 8002ac8:	2b54      	cmp	r3, #84	; 0x54
 8002aca:	d102      	bne.n	8002ad2 <USART1_IRQHandler+0x7e>
				flag_set_ip = 1;
 8002acc:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <USART1_IRQHandler+0x2b8>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='G')&&(str_rx2[1]=='E')&&(str_rx2[2]=='T')){
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b47      	cmp	r3, #71	; 0x47
 8002ad8:	d10a      	bne.n	8002af0 <USART1_IRQHandler+0x9c>
 8002ada:	4b8a      	ldr	r3, [pc, #552]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b45      	cmp	r3, #69	; 0x45
 8002ae0:	d106      	bne.n	8002af0 <USART1_IRQHandler+0x9c>
 8002ae2:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002ae4:	789b      	ldrb	r3, [r3, #2]
 8002ae6:	2b54      	cmp	r3, #84	; 0x54
 8002ae8:	d102      	bne.n	8002af0 <USART1_IRQHandler+0x9c>
			flag_get_ip = 1;
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <USART1_IRQHandler+0x2bc>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0]=='A')&&(str_rx2[1]=='M')&&(str_rx2[2]=='1')){
 8002af0:	4b84      	ldr	r3, [pc, #528]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b41      	cmp	r3, #65	; 0x41
 8002af6:	d10a      	bne.n	8002b0e <USART1_IRQHandler+0xba>
 8002af8:	4b82      	ldr	r3, [pc, #520]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b4d      	cmp	r3, #77	; 0x4d
 8002afe:	d106      	bne.n	8002b0e <USART1_IRQHandler+0xba>
 8002b00:	4b80      	ldr	r3, [pc, #512]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	2b31      	cmp	r3, #49	; 0x31
 8002b06:	d102      	bne.n	8002b0e <USART1_IRQHandler+0xba>
			flag_usb = 1;
 8002b08:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <USART1_IRQHandler+0x2c0>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'I') && (str_rx2[1] == 'P')) {
 8002b0e:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b49      	cmp	r3, #73	; 0x49
 8002b14:	f040 80e9 	bne.w	8002cea <USART1_IRQHandler+0x296>
 8002b18:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b50      	cmp	r3, #80	; 0x50
 8002b1e:	f040 80e4 	bne.w	8002cea <USART1_IRQHandler+0x296>
			if (str_rx2[2] == '1') {
 8002b22:	4b78      	ldr	r3, [pc, #480]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b24:	789b      	ldrb	r3, [r3, #2]
 8002b26:	2b31      	cmp	r3, #49	; 0x31
 8002b28:	d134      	bne.n	8002b94 <USART1_IRQHandler+0x140>
				if (str_rx2[3] != ';') {
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b2c:	78db      	ldrb	r3, [r3, #3]
 8002b2e:	2b3b      	cmp	r3, #59	; 0x3b
 8002b30:	d00f      	beq.n	8002b52 <USART1_IRQHandler+0xfe>
					ip1 = (str_rx2[3] - 48) * 100;
 8002b32:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b34:	78db      	ldrb	r3, [r3, #3]
 8002b36:	461a      	mov	r2, r3
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	0091      	lsls	r1, r2, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	460b      	mov	r3, r1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3340      	adds	r3, #64	; 0x40
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <USART1_IRQHandler+0x2c4>)
 8002b50:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	2b3b      	cmp	r3, #59	; 0x3b
 8002b58:	d00e      	beq.n	8002b78 <USART1_IRQHandler+0x124>
					ip1 = ip1 + (str_rx2[4] - 48) * 10;
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <USART1_IRQHandler+0x2c4>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3320      	adds	r3, #32
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <USART1_IRQHandler+0x2c4>)
 8002b76:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002b78:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b7a:	795b      	ldrb	r3, [r3, #5]
 8002b7c:	2b3b      	cmp	r3, #59	; 0x3b
 8002b7e:	d009      	beq.n	8002b94 <USART1_IRQHandler+0x140>
					ip1 = ip1 + (str_rx2[5] - 48);
 8002b80:	4b60      	ldr	r3, [pc, #384]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b82:	795a      	ldrb	r2, [r3, #5]
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <USART1_IRQHandler+0x2c4>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3b30      	subs	r3, #48	; 0x30
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <USART1_IRQHandler+0x2c4>)
 8002b92:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 8002b94:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b96:	789b      	ldrb	r3, [r3, #2]
 8002b98:	2b32      	cmp	r3, #50	; 0x32
 8002b9a:	d134      	bne.n	8002c06 <USART1_IRQHandler+0x1b2>
				if (str_rx2[3] != ';') {
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002b9e:	78db      	ldrb	r3, [r3, #3]
 8002ba0:	2b3b      	cmp	r3, #59	; 0x3b
 8002ba2:	d00f      	beq.n	8002bc4 <USART1_IRQHandler+0x170>
					ip2 = (str_rx2[3] - 48) * 100;
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	0091      	lsls	r1, r2, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3340      	adds	r3, #64	; 0x40
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <USART1_IRQHandler+0x2c8>)
 8002bc2:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002bc6:	791b      	ldrb	r3, [r3, #4]
 8002bc8:	2b3b      	cmp	r3, #59	; 0x3b
 8002bca:	d00e      	beq.n	8002bea <USART1_IRQHandler+0x196>
					ip2 = ip2 + (str_rx2[4] - 48) * 10;
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002bce:	791b      	ldrb	r3, [r3, #4]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <USART1_IRQHandler+0x2c8>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3320      	adds	r3, #32
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <USART1_IRQHandler+0x2c8>)
 8002be8:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002bea:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002bec:	795b      	ldrb	r3, [r3, #5]
 8002bee:	2b3b      	cmp	r3, #59	; 0x3b
 8002bf0:	d009      	beq.n	8002c06 <USART1_IRQHandler+0x1b2>
					ip2 = ip2 + (str_rx2[5] - 48);
 8002bf2:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002bf4:	795a      	ldrb	r2, [r3, #5]
 8002bf6:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <USART1_IRQHandler+0x2c8>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3b30      	subs	r3, #48	; 0x30
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <USART1_IRQHandler+0x2c8>)
 8002c04:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 8002c06:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	2b33      	cmp	r3, #51	; 0x33
 8002c0c:	d134      	bne.n	8002c78 <USART1_IRQHandler+0x224>
				if (str_rx2[3] != ';') {
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c10:	78db      	ldrb	r3, [r3, #3]
 8002c12:	2b3b      	cmp	r3, #59	; 0x3b
 8002c14:	d00f      	beq.n	8002c36 <USART1_IRQHandler+0x1e2>
					ip3 = (str_rx2[3] - 48) * 100;
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	0091      	lsls	r1, r2, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	460b      	mov	r3, r1
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3340      	adds	r3, #64	; 0x40
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <USART1_IRQHandler+0x2cc>)
 8002c34:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	2b3b      	cmp	r3, #59	; 0x3b
 8002c3c:	d00e      	beq.n	8002c5c <USART1_IRQHandler+0x208>
					ip3 = ip3 + (str_rx2[4] - 48) * 10;
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c40:	791b      	ldrb	r3, [r3, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <USART1_IRQHandler+0x2cc>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3320      	adds	r3, #32
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <USART1_IRQHandler+0x2cc>)
 8002c5a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002c5c:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c5e:	795b      	ldrb	r3, [r3, #5]
 8002c60:	2b3b      	cmp	r3, #59	; 0x3b
 8002c62:	d009      	beq.n	8002c78 <USART1_IRQHandler+0x224>
					ip3 = ip3 + (str_rx2[5] - 48);
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c66:	795a      	ldrb	r2, [r3, #5]
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <USART1_IRQHandler+0x2cc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3b30      	subs	r3, #48	; 0x30
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <USART1_IRQHandler+0x2cc>)
 8002c76:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c7a:	789b      	ldrb	r3, [r3, #2]
 8002c7c:	2b34      	cmp	r3, #52	; 0x34
 8002c7e:	d134      	bne.n	8002cea <USART1_IRQHandler+0x296>
				if (str_rx2[3] != ';') {
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c82:	78db      	ldrb	r3, [r3, #3]
 8002c84:	2b3b      	cmp	r3, #59	; 0x3b
 8002c86:	d00f      	beq.n	8002ca8 <USART1_IRQHandler+0x254>
					ip4 = (str_rx2[3] - 48) * 100;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002c8a:	78db      	ldrb	r3, [r3, #3]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	0091      	lsls	r1, r2, #2
 8002c96:	461a      	mov	r2, r3
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3340      	adds	r3, #64	; 0x40
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <USART1_IRQHandler+0x2d0>)
 8002ca6:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002caa:	791b      	ldrb	r3, [r3, #4]
 8002cac:	2b3b      	cmp	r3, #59	; 0x3b
 8002cae:	d00e      	beq.n	8002cce <USART1_IRQHandler+0x27a>
					ip4 = ip4 + (str_rx2[4] - 48) * 10;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <USART1_IRQHandler+0x2d0>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <USART1_IRQHandler+0x2d0>)
 8002ccc:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002cd0:	795b      	ldrb	r3, [r3, #5]
 8002cd2:	2b3b      	cmp	r3, #59	; 0x3b
 8002cd4:	d009      	beq.n	8002cea <USART1_IRQHandler+0x296>
					ip4 = ip4 + (str_rx2[5] - 48);
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002cd8:	795a      	ldrb	r2, [r3, #5]
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <USART1_IRQHandler+0x2d0>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	3b30      	subs	r3, #48	; 0x30
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <USART1_IRQHandler+0x2d0>)
 8002ce8:	701a      	strb	r2, [r3, #0]
		if ((str_rx2[0] == 'G') && (str_rx2[1] == 'W')) {
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b47      	cmp	r3, #71	; 0x47
 8002cf0:	f040 80fe 	bne.w	8002ef0 <USART1_IRQHandler+0x49c>
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <USART1_IRQHandler+0x2b0>)
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	2b57      	cmp	r3, #87	; 0x57
 8002cfa:	f040 80f9 	bne.w	8002ef0 <USART1_IRQHandler+0x49c>
 8002cfe:	e013      	b.n	8002d28 <USART1_IRQHandler+0x2d4>
 8002d00:	200023a4 	.word	0x200023a4
 8002d04:	2000028c 	.word	0x2000028c
 8002d08:	200002a5 	.word	0x200002a5
 8002d0c:	200002df 	.word	0x200002df
 8002d10:	200002de 	.word	0x200002de
 8002d14:	200002d5 	.word	0x200002d5
 8002d18:	200002d6 	.word	0x200002d6
 8002d1c:	200002d7 	.word	0x200002d7
 8002d20:	200002d8 	.word	0x200002d8
 8002d24:	200002d9 	.word	0x200002d9
			if (str_rx2[2] == '1') {
 8002d28:	4b74      	ldr	r3, [pc, #464]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d2a:	789b      	ldrb	r3, [r3, #2]
 8002d2c:	2b31      	cmp	r3, #49	; 0x31
 8002d2e:	d134      	bne.n	8002d9a <USART1_IRQHandler+0x346>
				if (str_rx2[3] != ';') {
 8002d30:	4b72      	ldr	r3, [pc, #456]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d32:	78db      	ldrb	r3, [r3, #3]
 8002d34:	2b3b      	cmp	r3, #59	; 0x3b
 8002d36:	d00f      	beq.n	8002d58 <USART1_IRQHandler+0x304>
					gw1 = (str_rx2[3] - 48) * 100;
 8002d38:	4b70      	ldr	r3, [pc, #448]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	0091      	lsls	r1, r2, #2
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3340      	adds	r3, #64	; 0x40
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <USART1_IRQHandler+0x4ac>)
 8002d56:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	2b3b      	cmp	r3, #59	; 0x3b
 8002d5e:	d00e      	beq.n	8002d7e <USART1_IRQHandler+0x32a>
					gw1 = gw1 + (str_rx2[4] - 48) * 10;
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	461a      	mov	r2, r3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <USART1_IRQHandler+0x4ac>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3320      	adds	r3, #32
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <USART1_IRQHandler+0x4ac>)
 8002d7c:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d80:	795b      	ldrb	r3, [r3, #5]
 8002d82:	2b3b      	cmp	r3, #59	; 0x3b
 8002d84:	d009      	beq.n	8002d9a <USART1_IRQHandler+0x346>
					gw1 = gw1 + (str_rx2[5] - 48);
 8002d86:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d88:	795a      	ldrb	r2, [r3, #5]
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <USART1_IRQHandler+0x4ac>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3b30      	subs	r3, #48	; 0x30
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <USART1_IRQHandler+0x4ac>)
 8002d98:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '2') {
 8002d9a:	4b58      	ldr	r3, [pc, #352]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002d9c:	789b      	ldrb	r3, [r3, #2]
 8002d9e:	2b32      	cmp	r3, #50	; 0x32
 8002da0:	d134      	bne.n	8002e0c <USART1_IRQHandler+0x3b8>
				if (str_rx2[3] != ';') {
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002da4:	78db      	ldrb	r3, [r3, #3]
 8002da6:	2b3b      	cmp	r3, #59	; 0x3b
 8002da8:	d00f      	beq.n	8002dca <USART1_IRQHandler+0x376>
					gw2 = (str_rx2[3] - 48) * 100;
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	461a      	mov	r2, r3
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	0091      	lsls	r1, r2, #2
 8002db8:	461a      	mov	r2, r3
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3340      	adds	r3, #64	; 0x40
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <USART1_IRQHandler+0x4b0>)
 8002dc8:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002dca:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002dcc:	791b      	ldrb	r3, [r3, #4]
 8002dce:	2b3b      	cmp	r3, #59	; 0x3b
 8002dd0:	d00e      	beq.n	8002df0 <USART1_IRQHandler+0x39c>
					gw2 = gw2 + (str_rx2[4] - 48) * 10;
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002dd4:	791b      	ldrb	r3, [r3, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <USART1_IRQHandler+0x4b0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3320      	adds	r3, #32
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <USART1_IRQHandler+0x4b0>)
 8002dee:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002df0:	4b42      	ldr	r3, [pc, #264]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002df2:	795b      	ldrb	r3, [r3, #5]
 8002df4:	2b3b      	cmp	r3, #59	; 0x3b
 8002df6:	d009      	beq.n	8002e0c <USART1_IRQHandler+0x3b8>
					gw2 = gw2 + (str_rx2[5] - 48);
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002dfa:	795a      	ldrb	r2, [r3, #5]
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <USART1_IRQHandler+0x4b0>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3b30      	subs	r3, #48	; 0x30
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <USART1_IRQHandler+0x4b0>)
 8002e0a:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '3') {
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	2b33      	cmp	r3, #51	; 0x33
 8002e12:	d134      	bne.n	8002e7e <USART1_IRQHandler+0x42a>
				if (str_rx2[3] != ';') {
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e16:	78db      	ldrb	r3, [r3, #3]
 8002e18:	2b3b      	cmp	r3, #59	; 0x3b
 8002e1a:	d00f      	beq.n	8002e3c <USART1_IRQHandler+0x3e8>
					gw3 = (str_rx2[3] - 48) * 100;
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e1e:	78db      	ldrb	r3, [r3, #3]
 8002e20:	461a      	mov	r2, r3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	461a      	mov	r2, r3
 8002e28:	0091      	lsls	r1, r2, #2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3340      	adds	r3, #64	; 0x40
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <USART1_IRQHandler+0x4b4>)
 8002e3a:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e3e:	791b      	ldrb	r3, [r3, #4]
 8002e40:	2b3b      	cmp	r3, #59	; 0x3b
 8002e42:	d00e      	beq.n	8002e62 <USART1_IRQHandler+0x40e>
					gw3 = gw3 + (str_rx2[4] - 48) * 10;
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e46:	791b      	ldrb	r3, [r3, #4]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <USART1_IRQHandler+0x4b4>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3320      	adds	r3, #32
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <USART1_IRQHandler+0x4b4>)
 8002e60:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e64:	795b      	ldrb	r3, [r3, #5]
 8002e66:	2b3b      	cmp	r3, #59	; 0x3b
 8002e68:	d009      	beq.n	8002e7e <USART1_IRQHandler+0x42a>
					gw3 = gw3 + (str_rx2[5] - 48);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e6c:	795a      	ldrb	r2, [r3, #5]
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <USART1_IRQHandler+0x4b4>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3b30      	subs	r3, #48	; 0x30
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <USART1_IRQHandler+0x4b4>)
 8002e7c:	701a      	strb	r2, [r3, #0]
			if (str_rx2[2] == '4') {
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	2b34      	cmp	r3, #52	; 0x34
 8002e84:	d134      	bne.n	8002ef0 <USART1_IRQHandler+0x49c>
				if (str_rx2[3] != ';') {
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e88:	78db      	ldrb	r3, [r3, #3]
 8002e8a:	2b3b      	cmp	r3, #59	; 0x3b
 8002e8c:	d00f      	beq.n	8002eae <USART1_IRQHandler+0x45a>
					gw4 = (str_rx2[3] - 48) * 100;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002e90:	78db      	ldrb	r3, [r3, #3]
 8002e92:	461a      	mov	r2, r3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	0091      	lsls	r1, r2, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3340      	adds	r3, #64	; 0x40
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <USART1_IRQHandler+0x4b8>)
 8002eac:	701a      	strb	r2, [r3, #0]
				if (str_rx2[4] != ';') {
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002eb0:	791b      	ldrb	r3, [r3, #4]
 8002eb2:	2b3b      	cmp	r3, #59	; 0x3b
 8002eb4:	d00e      	beq.n	8002ed4 <USART1_IRQHandler+0x480>
					gw4 = gw4 + (str_rx2[4] - 48) * 10;
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002eb8:	791b      	ldrb	r3, [r3, #4]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <USART1_IRQHandler+0x4b8>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3320      	adds	r3, #32
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <USART1_IRQHandler+0x4b8>)
 8002ed2:	701a      	strb	r2, [r3, #0]
				if (str_rx2[5] != ';') {
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002ed6:	795b      	ldrb	r3, [r3, #5]
 8002ed8:	2b3b      	cmp	r3, #59	; 0x3b
 8002eda:	d009      	beq.n	8002ef0 <USART1_IRQHandler+0x49c>
					gw4 = gw4 + (str_rx2[5] - 48);
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <USART1_IRQHandler+0x4a8>)
 8002ede:	795a      	ldrb	r2, [r3, #5]
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <USART1_IRQHandler+0x4b8>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3b30      	subs	r3, #48	; 0x30
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <USART1_IRQHandler+0x4b8>)
 8002eee:	701a      	strb	r2, [r3, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	2000028c 	.word	0x2000028c
 8002f00:	200002da 	.word	0x200002da
 8002f04:	200002db 	.word	0x200002db
 8002f08:	200002dc 	.word	0x200002dc
 8002f0c:	200002dd 	.word	0x200002dd

08002f10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <OTG_FS_IRQHandler+0x10>)
 8002f16:	f001 fc6a 	bl	80047ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200030b8 	.word	0x200030b8

08002f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <_sbrk+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <_sbrk+0x60>)
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <_sbrk+0x64>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <_sbrk+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f54:	f009 fb6a 	bl	800c62c <__errno>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e009      	b.n	8002f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <_sbrk+0x64>)
 8002f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20010000 	.word	0x20010000
 8002f84:	00000400 	.word	0x00000400
 8002f88:	200023a8 	.word	0x200023a8
 8002f8c:	20003930 	.word	0x20003930

08002f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <SystemInit+0x20>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <SystemInit+0x20>)
 8002f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <WIZCHIP_READ+0x94>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <WIZCHIP_READ+0x94>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <WIZCHIP_READ+0x94>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <WIZCHIP_READ+0x24>
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <WIZCHIP_READ+0x94>)
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d114      	bne.n	8003002 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <WIZCHIP_READ+0x94>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	0c12      	lsrs	r2, r2, #16
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <WIZCHIP_READ+0x94>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	0a12      	lsrs	r2, r2, #8
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <WIZCHIP_READ+0x94>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4798      	blx	r3
 8003000:	e011      	b.n	8003026 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	b2db      	uxtb	r3, r3
 8003010:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <WIZCHIP_READ+0x94>)
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f107 020c 	add.w	r2, r7, #12
 8003020:	2103      	movs	r1, #3
 8003022:	4610      	mov	r0, r2
 8003024:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <WIZCHIP_READ+0x94>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4798      	blx	r3
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <WIZCHIP_READ+0x94>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <WIZCHIP_READ+0x94>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4798      	blx	r3
   return ret;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200000fc 	.word	0x200000fc

0800304c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003058:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d119      	bne.n	80030a8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	0c12      	lsrs	r2, r2, #16
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	4610      	mov	r0, r2
 8003080:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	0a12      	lsrs	r2, r2, #8
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	4610      	mov	r0, r2
 800308e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4610      	mov	r0, r2
 80030a4:	4798      	blx	r3
 80030a6:	e013      	b.n	80030d0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	f107 020c 	add.w	r2, r7, #12
 80030ca:	2104      	movs	r1, #4
 80030cc:	4610      	mov	r0, r2
 80030ce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <WIZCHIP_WRITE+0x98>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	4798      	blx	r3
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	200000fc 	.word	0x200000fc

080030e8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4798      	blx	r3
   WIZCHIP.CS._select();
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <WIZCHIP_READ_BUF+0x2a>
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d126      	bne.n	8003160 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	0c12      	lsrs	r2, r2, #16
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4610      	mov	r0, r2
 800311e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	0a12      	lsrs	r2, r2, #8
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	4610      	mov	r0, r2
 800312c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	4610      	mov	r0, r2
 8003138:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800313a:	2300      	movs	r3, #0
 800313c:	82fb      	strh	r3, [r7, #22]
 800313e:	e00a      	b.n	8003156 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	8afa      	ldrh	r2, [r7, #22]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	188c      	adds	r4, r1, r2
 800314a:	4798      	blx	r3
 800314c:	4603      	mov	r3, r0
 800314e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003150:	8afb      	ldrh	r3, [r7, #22]
 8003152:	3301      	adds	r3, #1
 8003154:	82fb      	strh	r3, [r7, #22]
 8003156:	8afa      	ldrh	r2, [r7, #22]
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3f0      	bcc.n	8003140 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800315e:	e017      	b.n	8003190 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	b2db      	uxtb	r3, r3
 8003166:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b2db      	uxtb	r3, r3
 800316e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	f107 0210 	add.w	r2, r7, #16
 800317e:	2103      	movs	r1, #3
 8003180:	4610      	mov	r0, r2
 8003182:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	4611      	mov	r1, r2
 800318c:	68b8      	ldr	r0, [r7, #8]
 800318e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003196:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <WIZCHIP_READ_BUF+0xbc>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	4798      	blx	r3
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	200000fc 	.word	0x200000fc

080031a8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80031b6:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	4798      	blx	r3
   WIZCHIP.CS._select();
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d126      	bne.n	8003220 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	0c12      	lsrs	r2, r2, #16
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	4610      	mov	r0, r2
 80031de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	0a12      	lsrs	r2, r2, #8
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	4610      	mov	r0, r2
 80031ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	4610      	mov	r0, r2
 80031f8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	82fb      	strh	r3, [r7, #22]
 80031fe:	e00a      	b.n	8003216 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	8afa      	ldrh	r2, [r7, #22]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	440a      	add	r2, r1
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003210:	8afb      	ldrh	r3, [r7, #22]
 8003212:	3301      	adds	r3, #1
 8003214:	82fb      	strh	r3, [r7, #22]
 8003216:	8afa      	ldrh	r2, [r7, #22]
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	429a      	cmp	r2, r3
 800321c:	d3f0      	bcc.n	8003200 <WIZCHIP_WRITE_BUF+0x58>
 800321e:	e017      	b.n	8003250 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	b2db      	uxtb	r3, r3
 8003226:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	b2db      	uxtb	r3, r3
 800322e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f107 0210 	add.w	r2, r7, #16
 800323e:	2103      	movs	r1, #3
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	4611      	mov	r1, r2
 800324c:	68b8      	ldr	r0, [r7, #8]
 800324e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003256:	4b03      	ldr	r3, [pc, #12]	; (8003264 <WIZCHIP_WRITE_BUF+0xbc>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	4798      	blx	r3
}
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200000fc 	.word	0x200000fc

08003268 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003272:	2300      	movs	r3, #0
 8003274:	81fb      	strh	r3, [r7, #14]
 8003276:	2300      	movs	r3, #0
 8003278:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3301      	adds	r3, #1
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fe94 	bl	8002fb4 <WIZCHIP_READ>
 800328c:	4603      	mov	r3, r0
 800328e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003290:	89bb      	ldrh	r3, [r7, #12]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	b29c      	uxth	r4, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3301      	adds	r3, #1
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fe86 	bl	8002fb4 <WIZCHIP_READ>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4423      	add	r3, r4
 80032ae:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80032b0:	89bb      	ldrh	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01a      	beq.n	80032ec <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3301      	adds	r3, #1
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fe76 	bl	8002fb4 <WIZCHIP_READ>
 80032c8:	4603      	mov	r3, r0
 80032ca:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	b29c      	uxth	r4, r3
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3301      	adds	r3, #1
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fe68 	bl	8002fb4 <WIZCHIP_READ>
 80032e4:	4603      	mov	r3, r0
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4423      	add	r3, r4
 80032ea:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80032ec:	89fa      	ldrh	r2, [r7, #14]
 80032ee:	89bb      	ldrh	r3, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1c2      	bne.n	800327a <getSn_TX_FSR+0x12>
   return val;
 80032f4:	89fb      	ldrh	r3, [r7, #14]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003308:	2300      	movs	r3, #0
 800330a:	81fb      	strh	r3, [r7, #14]
 800330c:	2300      	movs	r3, #0
 800330e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3301      	adds	r3, #1
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fe49 	bl	8002fb4 <WIZCHIP_READ>
 8003322:	4603      	mov	r3, r0
 8003324:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	b29c      	uxth	r4, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3301      	adds	r3, #1
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fe3b 	bl	8002fb4 <WIZCHIP_READ>
 800333e:	4603      	mov	r3, r0
 8003340:	b29b      	uxth	r3, r3
 8003342:	4423      	add	r3, r4
 8003344:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003346:	89bb      	ldrh	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01a      	beq.n	8003382 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	3301      	adds	r3, #1
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fe2b 	bl	8002fb4 <WIZCHIP_READ>
 800335e:	4603      	mov	r3, r0
 8003360:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003362:	89fb      	ldrh	r3, [r7, #14]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	b29c      	uxth	r4, r3
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3301      	adds	r3, #1
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fe1d 	bl	8002fb4 <WIZCHIP_READ>
 800337a:	4603      	mov	r3, r0
 800337c:	b29b      	uxth	r3, r3
 800337e:	4423      	add	r3, r4
 8003380:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003382:	89fa      	ldrh	r2, [r7, #14]
 8003384:	89bb      	ldrh	r3, [r7, #12]
 8003386:	429a      	cmp	r2, r3
 8003388:	d1c2      	bne.n	8003310 <getSn_RX_RSR+0x12>
   return val;
 800338a:	89fb      	ldrh	r3, [r7, #14]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}

08003394 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80033ac:	88bb      	ldrh	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d048      	beq.n	8003444 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	3301      	adds	r3, #1
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fdf8 	bl	8002fb4 <WIZCHIP_READ>
 80033c4:	4603      	mov	r3, r0
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	b29c      	uxth	r4, r3
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	3301      	adds	r3, #1
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fdeb 	bl	8002fb4 <WIZCHIP_READ>
 80033de:	4603      	mov	r3, r0
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4423      	add	r3, r4
 80033e4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80033e6:	89fb      	ldrh	r3, [r7, #14]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	79fa      	ldrb	r2, [r7, #7]
 80033ec:	0092      	lsls	r2, r2, #2
 80033ee:	3202      	adds	r2, #2
 80033f0:	00d2      	lsls	r2, r2, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80033f6:	88bb      	ldrh	r3, [r7, #4]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	68b8      	ldr	r0, [r7, #8]
 80033fe:	f7ff fed3 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003402:	89fa      	ldrh	r2, [r7, #14]
 8003404:	88bb      	ldrh	r3, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3301      	adds	r3, #1
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003416:	461a      	mov	r2, r3
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f7ff fe12 	bl	800304c <WIZCHIP_WRITE>
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	3301      	adds	r3, #1
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003434:	461a      	mov	r2, r3
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7ff fe05 	bl	800304c <WIZCHIP_WRITE>
 8003442:	e000      	b.n	8003446 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003444:	bf00      	nop
}
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003464:	88bb      	ldrh	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d048      	beq.n	80034fc <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3301      	adds	r3, #1
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fd9c 	bl	8002fb4 <WIZCHIP_READ>
 800347c:	4603      	mov	r3, r0
 800347e:	b29b      	uxth	r3, r3
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	b29c      	uxth	r4, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3301      	adds	r3, #1
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fd8f 	bl	8002fb4 <WIZCHIP_READ>
 8003496:	4603      	mov	r3, r0
 8003498:	b29b      	uxth	r3, r3
 800349a:	4423      	add	r3, r4
 800349c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	79fa      	ldrb	r2, [r7, #7]
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	3203      	adds	r2, #3
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80034ae:	88bb      	ldrh	r3, [r7, #4]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6839      	ldr	r1, [r7, #0]
 80034b4:	68b8      	ldr	r0, [r7, #8]
 80034b6:	f7ff fe17 	bl	80030e8 <WIZCHIP_READ_BUF>
   ptr += len;
 80034ba:	89fa      	ldrh	r2, [r7, #14]
 80034bc:	88bb      	ldrh	r3, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3301      	adds	r3, #1
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80034ce:	461a      	mov	r2, r3
 80034d0:	89fb      	ldrh	r3, [r7, #14]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7ff fdb6 	bl	800304c <WIZCHIP_WRITE>
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	3301      	adds	r3, #1
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80034ec:	461a      	mov	r2, r3
 80034ee:	89fb      	ldrh	r3, [r7, #14]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f7ff fda9 	bl	800304c <WIZCHIP_WRITE>
 80034fa:	e000      	b.n	80034fe <wiz_recv_data+0xb2>
   if(len == 0) return;
 80034fc:	bf00      	nop
}
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}

08003504 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	70fb      	strb	r3, [r7, #3]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
 8003578:	2300      	movs	r3, #0
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	807b      	strh	r3, [r7, #2]
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <reg_wizchip_cs_cbfunc+0x16>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <reg_wizchip_cs_cbfunc+0x40>)
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <reg_wizchip_cs_cbfunc+0x44>)
 80035e6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <reg_wizchip_cs_cbfunc+0x40>)
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <reg_wizchip_cs_cbfunc+0x48>)
 80035ec:	619a      	str	r2, [r3, #24]
 80035ee:	e006      	b.n	80035fe <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80035f0:	4a06      	ldr	r2, [pc, #24]	; (800360c <reg_wizchip_cs_cbfunc+0x40>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <reg_wizchip_cs_cbfunc+0x40>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6193      	str	r3, [r2, #24]
   }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200000fc 	.word	0x200000fc
 8003610:	08003521 	.word	0x08003521
 8003614:	0800352f 	.word	0x0800352f

08003618 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003622:	bf00      	nop
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <reg_wizchip_spi_cbfunc+0x4c>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f9      	beq.n	8003624 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <reg_wizchip_spi_cbfunc+0x24>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <reg_wizchip_spi_cbfunc+0x4c>)
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <reg_wizchip_spi_cbfunc+0x50>)
 8003640:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <reg_wizchip_spi_cbfunc+0x4c>)
 8003644:	4a09      	ldr	r2, [pc, #36]	; (800366c <reg_wizchip_spi_cbfunc+0x54>)
 8003646:	621a      	str	r2, [r3, #32]
 8003648:	e006      	b.n	8003658 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800364a:	4a06      	ldr	r2, [pc, #24]	; (8003664 <reg_wizchip_spi_cbfunc+0x4c>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <reg_wizchip_spi_cbfunc+0x4c>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6213      	str	r3, [r2, #32]
   }
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	200000fc 	.word	0x200000fc
 8003668:	08003575 	.word	0x08003575
 800366c:	08003585 	.word	0x08003585

08003670 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800367a:	bf00      	nop
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f9      	beq.n	800367c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <reg_wizchip_spiburst_cbfunc+0x24>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <reg_wizchip_spiburst_cbfunc+0x54>)
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
 80036a0:	e006      	b.n	80036b0 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	200000fc 	.word	0x200000fc
 80036c0:	0800359b 	.word	0x0800359b
 80036c4:	080035b3 	.word	0x080035b3

080036c8 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d82c      	bhi.n	8003734 <ctlnetwork+0x6c>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <ctlnetwork+0x18>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	080036f9 	.word	0x080036f9
 80036e4:	08003701 	.word	0x08003701
 80036e8:	08003709 	.word	0x08003709
 80036ec:	08003717 	.word	0x08003717
 80036f0:	08003725 	.word	0x08003725
 80036f4:	0800372d 	.word	0x0800372d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80036f8:	6838      	ldr	r0, [r7, #0]
 80036fa:	f000 f8fb 	bl	80038f4 <wizchip_setnetinfo>
         break;
 80036fe:	e01c      	b.n	800373a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	f000 f937 	bl	8003974 <wizchip_getnetinfo>
         break;
 8003706:	e018      	b.n	800373a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f971 	bl	80039f4 <wizchip_setnetmode>
 8003712:	4603      	mov	r3, r0
 8003714:	e012      	b.n	800373c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003716:	f000 f98f 	bl	8003a38 <wizchip_getnetmode>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	701a      	strb	r2, [r3, #0]
         break;
 8003722:	e00a      	b.n	800373a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f000 f98f 	bl	8003a48 <wizchip_settimeout>
         break;
 800372a:	e006      	b.n	800373a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800372c:	6838      	ldr	r0, [r7, #0]
 800372e:	f000 f9ac 	bl	8003a8a <wizchip_gettimeout>
         break;
 8003732:	e002      	b.n	800373a <ctlnetwork+0x72>
      default:
         return -1;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e000      	b.n	800373c <ctlnetwork+0x74>
   }
   return 0;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2206      	movs	r2, #6
 800374e:	4619      	mov	r1, r3
 8003750:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003754:	f7ff fcc8 	bl	80030e8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	2204      	movs	r2, #4
 800375e:	4619      	mov	r1, r3
 8003760:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003764:	f7ff fcc0 	bl	80030e8 <WIZCHIP_READ_BUF>
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	2204      	movs	r2, #4
 800376e:	4619      	mov	r1, r3
 8003770:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003774:	f7ff fcb8 	bl	80030e8 <WIZCHIP_READ_BUF>
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2204      	movs	r2, #4
 800377e:	4619      	mov	r1, r3
 8003780:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003784:	f7ff fcb0 	bl	80030e8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003788:	2180      	movs	r1, #128	; 0x80
 800378a:	2000      	movs	r0, #0
 800378c:	f7ff fc5e 	bl	800304c <WIZCHIP_WRITE>
   getMR(); // for delay
 8003790:	2000      	movs	r0, #0
 8003792:	f7ff fc0f 	bl	8002fb4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	2206      	movs	r2, #6
 800379a:	4619      	mov	r1, r3
 800379c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80037a0:	f7ff fd02 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	2204      	movs	r2, #4
 80037aa:	4619      	mov	r1, r3
 80037ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037b0:	f7ff fcfa 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80037b4:	f107 0310 	add.w	r3, r7, #16
 80037b8:	2204      	movs	r2, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80037c0:	f7ff fcf2 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	2204      	movs	r2, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80037d0:	f7ff fcea 	bl	80031a8 <WIZCHIP_WRITE_BUF>
}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80037ea:	f7ff ffab 	bl	8003744 <wizchip_sw_reset>
   if(txsize)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03b      	beq.n	800386c <wizchip_init+0x90>
   {
      tmp = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e015      	b.n	800382a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80037fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	7bbb      	ldrb	r3, [r7, #14]
 800380a:	4413      	add	r3, r2
 800380c:	b2db      	uxtb	r3, r3
 800380e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003814:	2b10      	cmp	r3, #16
 8003816:	dd02      	ble.n	800381e <wizchip_init+0x42>
 8003818:	f04f 33ff 	mov.w	r3, #4294967295
 800381c:	e066      	b.n	80038ec <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	3301      	adds	r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382e:	2b07      	cmp	r3, #7
 8003830:	dde5      	ble.n	80037fe <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
 8003836:	e015      	b.n	8003864 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	3301      	adds	r3, #1
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003846:	4618      	mov	r0, r3
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	4619      	mov	r1, r3
 8003854:	f7ff fbfa 	bl	800304c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	3301      	adds	r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003868:	2b07      	cmp	r3, #7
 800386a:	dde5      	ble.n	8003838 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03b      	beq.n	80038ea <wizchip_init+0x10e>
   {
      tmp = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e015      	b.n	80038a8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800387c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	4413      	add	r3, r2
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	7bbb      	ldrb	r3, [r7, #14]
 8003888:	4413      	add	r3, r2
 800388a:	b2db      	uxtb	r3, r3
 800388c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800388e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003892:	2b10      	cmp	r3, #16
 8003894:	dd02      	ble.n	800389c <wizchip_init+0xc0>
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	e027      	b.n	80038ec <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800389c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	dde5      	ble.n	800387c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e015      	b.n	80038e2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	3301      	adds	r3, #1
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80038c4:	4618      	mov	r0, r3
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7ff fbbb 	bl	800304c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	dde5      	ble.n	80038b6 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2206      	movs	r2, #6
 8003900:	4619      	mov	r1, r3
 8003902:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003906:	f7ff fc4f 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	330e      	adds	r3, #14
 800390e:	2204      	movs	r2, #4
 8003910:	4619      	mov	r1, r3
 8003912:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003916:	f7ff fc47 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	330a      	adds	r3, #10
 800391e:	2204      	movs	r2, #4
 8003920:	4619      	mov	r1, r3
 8003922:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003926:	f7ff fc3f 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3306      	adds	r3, #6
 800392e:	2204      	movs	r2, #4
 8003930:	4619      	mov	r1, r3
 8003932:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003936:	f7ff fc37 	bl	80031a8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7c9a      	ldrb	r2, [r3, #18]
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <wizchip_setnetinfo+0x78>)
 8003940:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	7cda      	ldrb	r2, [r3, #19]
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <wizchip_setnetinfo+0x78>)
 8003948:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7d1a      	ldrb	r2, [r3, #20]
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <wizchip_setnetinfo+0x78>)
 8003950:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7d5a      	ldrb	r2, [r3, #21]
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <wizchip_setnetinfo+0x78>)
 8003958:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7d9a      	ldrb	r2, [r3, #22]
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <wizchip_setnetinfo+0x7c>)
 8003960:	701a      	strb	r2, [r3, #0]
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200023ac 	.word	0x200023ac
 8003970:	200023b0 	.word	0x200023b0

08003974 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2206      	movs	r2, #6
 8003980:	4619      	mov	r1, r3
 8003982:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003986:	f7ff fbaf 	bl	80030e8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	330e      	adds	r3, #14
 800398e:	2204      	movs	r2, #4
 8003990:	4619      	mov	r1, r3
 8003992:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003996:	f7ff fba7 	bl	80030e8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	330a      	adds	r3, #10
 800399e:	2204      	movs	r2, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80039a6:	f7ff fb9f 	bl	80030e8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3306      	adds	r3, #6
 80039ae:	2204      	movs	r2, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80039b6:	f7ff fb97 	bl	80030e8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <wizchip_getnetinfo+0x78>)
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <wizchip_getnetinfo+0x78>)
 80039c4:	785a      	ldrb	r2, [r3, #1]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <wizchip_getnetinfo+0x78>)
 80039cc:	789a      	ldrb	r2, [r3, #2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <wizchip_getnetinfo+0x78>)
 80039d4:	78da      	ldrb	r2, [r3, #3]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <wizchip_getnetinfo+0x7c>)
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	759a      	strb	r2, [r3, #22]
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200023ac 	.word	0x200023ac
 80039f0:	200023b0 	.word	0x200023b0

080039f4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <wizchip_setnetmode+0x1e>
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e00e      	b.n	8003a30 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7ff face 	bl	8002fb4 <WIZCHIP_READ>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	4619      	mov	r1, r3
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7ff fb0f 	bl	800304c <WIZCHIP_WRITE>
   return 0;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f7ff fab9 	bl	8002fb4 <WIZCHIP_READ>
 8003a42:	4603      	mov	r3, r0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003a5a:	f7ff faf7 	bl	800304c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	885b      	ldrh	r3, [r3, #2]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003a6e:	f7ff faed 	bl	800304c <WIZCHIP_WRITE>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	885b      	ldrh	r3, [r3, #2]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003a7e:	f7ff fae5 	bl	800304c <WIZCHIP_WRITE>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003a8a:	b590      	push	{r4, r7, lr}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003a92:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003a96:	f7ff fa8d 	bl	8002fb4 <WIZCHIP_READ>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003aa2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003aa6:	f7ff fa85 	bl	8002fb4 <WIZCHIP_READ>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	b29c      	uxth	r4, r3
 8003ab2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003ab6:	f7ff fa7d 	bl	8002fb4 <WIZCHIP_READ>
 8003aba:	4603      	mov	r3, r0
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	4423      	add	r3, r4
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	805a      	strh	r2, [r3, #2]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd90      	pop	{r4, r7, pc}
	...

08003ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ad4:	480d      	ldr	r0, [pc, #52]	; (8003b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ad6:	490e      	ldr	r1, [pc, #56]	; (8003b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003adc:	e002      	b.n	8003ae4 <LoopCopyDataInit>

08003ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae2:	3304      	adds	r3, #4

08003ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae8:	d3f9      	bcc.n	8003ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003aec:	4c0b      	ldr	r4, [pc, #44]	; (8003b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af0:	e001      	b.n	8003af6 <LoopFillZerobss>

08003af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af4:	3204      	adds	r2, #4

08003af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af8:	d3fb      	bcc.n	8003af2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003afa:	f7ff fa49 	bl	8002f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afe:	f008 fd9b 	bl	800c638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b02:	f7fd fe53 	bl	80017ac <main>
  bx  lr    
 8003b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8003b14:	0800ec84 	.word	0x0800ec84
  ldr r2, =_sbss
 8003b18:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8003b1c:	2000392c 	.word	0x2000392c

08003b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC_IRQHandler>
	...

08003b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <HAL_Init+0x40>)
 8003b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_Init+0x40>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_Init+0x40>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	f000 f8fc 	bl	8003d4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b52:	200f      	movs	r0, #15
 8003b54:	f7fe fe7e 	bl	8002854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b58:	f7fe fe04 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_IncTick+0x20>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_IncTick+0x24>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_IncTick+0x24>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	2000012c 	.word	0x2000012c
 8003b8c:	200023b4 	.word	0x200023b4

08003b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return uwTick;
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_GetTick+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200023b4 	.word	0x200023b4

08003ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff ffee 	bl	8003b90 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d005      	beq.n	8003bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_Delay+0x44>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bce:	bf00      	nop
 8003bd0:	f7ff ffde 	bl	8003b90 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d8f7      	bhi.n	8003bd0 <HAL_Delay+0x28>
  {
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000012c 	.word	0x2000012c

08003bf0 <__NVIC_SetPriorityGrouping>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c22:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	60d3      	str	r3, [r2, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_GetPriorityGrouping>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <__NVIC_GetPriorityGrouping+0x18>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	f003 0307 	and.w	r3, r3, #7
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_EnableIRQ>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	db0b      	blt.n	8003c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4907      	ldr	r1, [pc, #28]	; (8003c8c <__NVIC_EnableIRQ+0x38>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2001      	movs	r0, #1
 8003c76:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000e100 	.word	0xe000e100

08003c90 <__NVIC_SetPriority>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	db0a      	blt.n	8003cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	490c      	ldr	r1, [pc, #48]	; (8003cdc <__NVIC_SetPriority+0x4c>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cb8:	e00a      	b.n	8003cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <__NVIC_SetPriority+0x50>)
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	0112      	lsls	r2, r2, #4
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	440b      	add	r3, r1
 8003cce:	761a      	strb	r2, [r3, #24]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000e100 	.word	0xe000e100
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <NVIC_EncodePriority>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f1c3 0307 	rsb	r3, r3, #7
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	bf28      	it	cs
 8003d02:	2304      	movcs	r3, #4
 8003d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d902      	bls.n	8003d14 <NVIC_EncodePriority+0x30>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3b03      	subs	r3, #3
 8003d12:	e000      	b.n	8003d16 <NVIC_EncodePriority+0x32>
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43da      	mvns	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	401a      	ands	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43d9      	mvns	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d3c:	4313      	orrs	r3, r2
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ff4c 	bl	8003bf0 <__NVIC_SetPriorityGrouping>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d72:	f7ff ff61 	bl	8003c38 <__NVIC_GetPriorityGrouping>
 8003d76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	6978      	ldr	r0, [r7, #20]
 8003d7e:	f7ff ffb1 	bl	8003ce4 <NVIC_EncodePriority>
 8003d82:	4602      	mov	r2, r0
 8003d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff80 	bl	8003c90 <__NVIC_SetPriority>
}
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff54 	bl	8003c54 <__NVIC_EnableIRQ>
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00c      	b.n	8003dec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2205      	movs	r2, #5
 8003dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_FLASH_Program+0xa0>)
 8003e0c:	7e1b      	ldrb	r3, [r3, #24]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_FLASH_Program+0x1e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e03b      	b.n	8003e8e <HAL_FLASH_Program+0x96>
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_FLASH_Program+0xa0>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e20:	f000 f870 	bl	8003f04 <FLASH_WaitForLastOperation>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d12b      	bne.n	8003e86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e34:	783b      	ldrb	r3, [r7, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	68b8      	ldr	r0, [r7, #8]
 8003e3a:	f000 f91b 	bl	8004074 <FLASH_Program_Byte>
 8003e3e:	e016      	b.n	8003e6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e46:	883b      	ldrh	r3, [r7, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 f8ee 	bl	800402c <FLASH_Program_HalfWord>
 8003e50:	e00d      	b.n	8003e6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d105      	bne.n	8003e64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	68b8      	ldr	r0, [r7, #8]
 8003e5e:	f000 f8c3 	bl	8003fe8 <FLASH_Program_Word>
 8003e62:	e004      	b.n	8003e6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e68:	68b8      	ldr	r0, [r7, #8]
 8003e6a:	f000 f88b 	bl	8003f84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e72:	f000 f847 	bl	8003f04 <FLASH_WaitForLastOperation>
 8003e76:	4603      	mov	r3, r0
 8003e78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_FLASH_Program+0xa4>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_FLASH_Program+0xa4>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_FLASH_Program+0xa0>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200023b8 	.word	0x200023b8
 8003e9c:	40023c00 	.word	0x40023c00

08003ea0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da0b      	bge.n	8003eca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <HAL_FLASH_Unlock+0x3c>)
 8003eb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003ebc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_FLASH_Unlock+0x38>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da01      	bge.n	8003eca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003eca:	79fb      	ldrb	r3, [r7, #7]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	45670123 	.word	0x45670123
 8003ee0:	cdef89ab 	.word	0xcdef89ab

08003ee4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_FLASH_Lock+0x1c>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_FLASH_Lock+0x1c>)
 8003eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40023c00 	.word	0x40023c00

08003f04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <FLASH_WaitForLastOperation+0x78>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f16:	f7ff fe3b 	bl	8003b90 <HAL_GetTick>
 8003f1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f1c:	e010      	b.n	8003f40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d00c      	beq.n	8003f40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <FLASH_WaitForLastOperation+0x38>
 8003f2c:	f7ff fe30 	bl	8003b90 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d201      	bcs.n	8003f40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e019      	b.n	8003f74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <FLASH_WaitForLastOperation+0x7c>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e8      	bne.n	8003f1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <FLASH_WaitForLastOperation+0x7c>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <FLASH_WaitForLastOperation+0x7c>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <FLASH_WaitForLastOperation+0x7c>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f6a:	f000 f8a5 	bl	80040b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
  
}  
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200023b8 	.word	0x200023b8
 8003f80:	40023c00 	.word	0x40023c00

08003f84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <FLASH_Program_DoubleWord+0x60>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <FLASH_Program_DoubleWord+0x60>)
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <FLASH_Program_DoubleWord+0x60>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <FLASH_Program_DoubleWord+0x60>)
 8003fa2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003fa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <FLASH_Program_DoubleWord+0x60>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <FLASH_Program_DoubleWord+0x60>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003fba:	f3bf 8f6f 	isb	sy
}
 8003fbe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	000a      	movs	r2, r1
 8003fce:	2300      	movs	r3, #0
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	3104      	adds	r1, #4
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40023c00 	.word	0x40023c00

08003fe8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <FLASH_Program_Word+0x40>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <FLASH_Program_Word+0x40>)
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <FLASH_Program_Word+0x40>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <FLASH_Program_Word+0x40>)
 8004004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <FLASH_Program_Word+0x40>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	4a06      	ldr	r2, [pc, #24]	; (8004028 <FLASH_Program_Word+0x40>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40023c00 	.word	0x40023c00

0800402c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <FLASH_Program_HalfWord+0x44>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <FLASH_Program_HalfWord+0x44>)
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <FLASH_Program_HalfWord+0x44>)
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	4a09      	ldr	r2, [pc, #36]	; (8004070 <FLASH_Program_HalfWord+0x44>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <FLASH_Program_HalfWord+0x44>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	4a06      	ldr	r2, [pc, #24]	; (8004070 <FLASH_Program_HalfWord+0x44>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	801a      	strh	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00

08004074 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <FLASH_Program_Byte+0x40>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <FLASH_Program_Byte+0x40>)
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <FLASH_Program_Byte+0x40>)
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <FLASH_Program_Byte+0x40>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <FLASH_Program_Byte+0x40>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <FLASH_Program_Byte+0x40>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	701a      	strb	r2, [r3, #0]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40023c00 	.word	0x40023c00

080040b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80040bc:	4b2f      	ldr	r3, [pc, #188]	; (800417c <FLASH_SetErrorCode+0xc4>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f043 0310 	orr.w	r3, r3, #16
 80040d0:	4a2b      	ldr	r2, [pc, #172]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 80040d2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <FLASH_SetErrorCode+0xc4>)
 80040d6:	2210      	movs	r2, #16
 80040d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80040da:	4b28      	ldr	r3, [pc, #160]	; (800417c <FLASH_SetErrorCode+0xc4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f043 0308 	orr.w	r3, r3, #8
 80040ee:	4a24      	ldr	r2, [pc, #144]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 80040f0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <FLASH_SetErrorCode+0xc4>)
 80040f4:	2220      	movs	r2, #32
 80040f6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <FLASH_SetErrorCode+0xc4>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004104:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 800410e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <FLASH_SetErrorCode+0xc4>)
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <FLASH_SetErrorCode+0xc4>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 800412c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <FLASH_SetErrorCode+0xc4>)
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <FLASH_SetErrorCode+0xc4>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 800414a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <FLASH_SetErrorCode+0xc4>)
 800414e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004152:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <FLASH_SetErrorCode+0xc4>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f043 0320 	orr.w	r3, r3, #32
 8004168:	4a05      	ldr	r2, [pc, #20]	; (8004180 <FLASH_SetErrorCode+0xc8>)
 800416a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <FLASH_SetErrorCode+0xc4>)
 800416e:	2202      	movs	r2, #2
 8004170:	60da      	str	r2, [r3, #12]
  }
}
 8004172:	bf00      	nop
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40023c00 	.word	0x40023c00
 8004180:	200023b8 	.word	0x200023b8

08004184 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e010      	b.n	80041c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d103      	bne.n	80041ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80041a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e009      	b.n	80041c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d103      	bne.n	80041bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80041b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e002      	b.n	80041c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80041bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	490f      	ldr	r1, [pc, #60]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80041e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	4a07      	ldr	r2, [pc, #28]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <FLASH_Erase_Sector+0x8c>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	6113      	str	r3, [r2, #16]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40023c00 	.word	0x40023c00

08004214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e159      	b.n	80044e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004230:	2201      	movs	r2, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	f040 8148 	bne.w	80044de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d005      	beq.n	8004266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004262:	2b02      	cmp	r3, #2
 8004264:	d130      	bne.n	80042c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d017      	beq.n	8004304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d123      	bne.n	8004358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	08da      	lsrs	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3208      	adds	r2, #8
 8004318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0203 	and.w	r2, r3, #3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a2 	beq.w	80044de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	4b57      	ldr	r3, [pc, #348]	; (80044fc <HAL_GPIO_Init+0x2e8>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	4a56      	ldr	r2, [pc, #344]	; (80044fc <HAL_GPIO_Init+0x2e8>)
 80043a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a8:	6453      	str	r3, [r2, #68]	; 0x44
 80043aa:	4b54      	ldr	r3, [pc, #336]	; (80044fc <HAL_GPIO_Init+0x2e8>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043b6:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_GPIO_Init+0x2ec>)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a49      	ldr	r2, [pc, #292]	; (8004504 <HAL_GPIO_Init+0x2f0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d019      	beq.n	8004416 <HAL_GPIO_Init+0x202>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a48      	ldr	r2, [pc, #288]	; (8004508 <HAL_GPIO_Init+0x2f4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_GPIO_Init+0x1fe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a47      	ldr	r2, [pc, #284]	; (800450c <HAL_GPIO_Init+0x2f8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00d      	beq.n	800440e <HAL_GPIO_Init+0x1fa>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a46      	ldr	r2, [pc, #280]	; (8004510 <HAL_GPIO_Init+0x2fc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <HAL_GPIO_Init+0x1f6>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a45      	ldr	r2, [pc, #276]	; (8004514 <HAL_GPIO_Init+0x300>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_GPIO_Init+0x1f2>
 8004402:	2304      	movs	r3, #4
 8004404:	e008      	b.n	8004418 <HAL_GPIO_Init+0x204>
 8004406:	2307      	movs	r3, #7
 8004408:	e006      	b.n	8004418 <HAL_GPIO_Init+0x204>
 800440a:	2303      	movs	r3, #3
 800440c:	e004      	b.n	8004418 <HAL_GPIO_Init+0x204>
 800440e:	2302      	movs	r3, #2
 8004410:	e002      	b.n	8004418 <HAL_GPIO_Init+0x204>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_GPIO_Init+0x204>
 8004416:	2300      	movs	r3, #0
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f002 0203 	and.w	r2, r2, #3
 800441e:	0092      	lsls	r2, r2, #2
 8004420:	4093      	lsls	r3, r2
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004428:	4935      	ldr	r1, [pc, #212]	; (8004500 <HAL_GPIO_Init+0x2ec>)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	3302      	adds	r3, #2
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004436:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_GPIO_Init+0x304>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_GPIO_Init+0x304>)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_GPIO_Init+0x304>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004484:	4a24      	ldr	r2, [pc, #144]	; (8004518 <HAL_GPIO_Init+0x304>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_GPIO_Init+0x304>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_GPIO_Init+0x304>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <HAL_GPIO_Init+0x304>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044d8:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_GPIO_Init+0x304>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	f67f aea2 	bls.w	8004230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3724      	adds	r7, #36	; 0x24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	40013800 	.word	0x40013800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40013c00 	.word	0x40013c00

0800451c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
 8004528:	4613      	mov	r3, r2
 800452a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800452c:	787b      	ldrb	r3, [r7, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004538:	e003      	b.n	8004542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	041a      	lsls	r2, r3, #16
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800454e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004550:	b08f      	sub	sp, #60	; 0x3c
 8004552:	af0a      	add	r7, sp, #40	; 0x28
 8004554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e10f      	b.n	8004780 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f007 fc8a 	bl	800be94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2203      	movs	r2, #3
 8004584:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f003 ff71 	bl	8008486 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	687e      	ldr	r6, [r7, #4]
 80045ac:	466d      	mov	r5, sp
 80045ae:	f106 0410 	add.w	r4, r6, #16
 80045b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045be:	e885 0003 	stmia.w	r5, {r0, r1}
 80045c2:	1d33      	adds	r3, r6, #4
 80045c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f003 fe48 	bl	800825c <USB_CoreInit>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0d0      	b.n	8004780 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f003 ff5f 	bl	80084a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e04a      	b.n	8004686 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	333d      	adds	r3, #61	; 0x3d
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004604:	7bfa      	ldrb	r2, [r7, #15]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	333c      	adds	r3, #60	; 0x3c
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	b298      	uxth	r0, r3
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3344      	adds	r3, #68	; 0x44
 800462c:	4602      	mov	r2, r0
 800462e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3340      	adds	r3, #64	; 0x40
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3348      	adds	r3, #72	; 0x48
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	334c      	adds	r3, #76	; 0x4c
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3354      	adds	r3, #84	; 0x54
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	3301      	adds	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
 8004686:	7bfa      	ldrb	r2, [r7, #15]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d3af      	bcc.n	80045f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	e044      	b.n	8004720 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	3301      	adds	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d3b5      	bcc.n	8004696 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	687e      	ldr	r6, [r7, #4]
 8004732:	466d      	mov	r5, sp
 8004734:	f106 0410 	add.w	r4, r6, #16
 8004738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800473c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004744:	e885 0003 	stmia.w	r5, {r0, r1}
 8004748:	1d33      	adds	r3, r6, #4
 800474a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800474c:	6838      	ldr	r0, [r7, #0]
 800474e:	f003 fef7 	bl	8008540 <USB_DevInit>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e00d      	b.n	8004780 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f005 f846 	bl	800980a <USB_DevDisconnect>

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004788 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_PCD_Start+0x1c>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e020      	b.n	80047e6 <HAL_PCD_Start+0x5e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d109      	bne.n	80047c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d005      	beq.n	80047c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f003 fe49 	bl	8008464 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f004 fff6 	bl	80097c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047ee:	b590      	push	{r4, r7, lr}
 80047f0:	b08d      	sub	sp, #52	; 0x34
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f005 f8b4 	bl	8009972 <USB_GetMode>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 848a 	bne.w	8005126 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f005 f818 	bl	800984c <USB_ReadInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8480 	beq.w	8005124 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f005 f805 	bl	800984c <USB_ReadInterrupts>
 8004842:	4603      	mov	r3, r0
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d107      	bne.n	800485c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f002 0202 	and.w	r2, r2, #2
 800485a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f004 fff3 	bl	800984c <USB_ReadInterrupts>
 8004866:	4603      	mov	r3, r0
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b10      	cmp	r3, #16
 800486e:	d161      	bne.n	8004934 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0210 	bic.w	r2, r2, #16
 800487e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f003 020f 	and.w	r2, r3, #15
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	3304      	adds	r3, #4
 800489e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	0c5b      	lsrs	r3, r3, #17
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d124      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d035      	beq.n	8004924 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	6a38      	ldr	r0, [r7, #32]
 80048cc:	f004 fe2a 	bl	8009524 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048dc:	441a      	add	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ee:	441a      	add	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
 80048f4:	e016      	b.n	8004924 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	0c5b      	lsrs	r3, r3, #17
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d110      	bne.n	8004924 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004908:	2208      	movs	r2, #8
 800490a:	4619      	mov	r1, r3
 800490c:	6a38      	ldr	r0, [r7, #32]
 800490e:	f004 fe09 	bl	8009524 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491e:	441a      	add	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0210 	orr.w	r2, r2, #16
 8004932:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f004 ff87 	bl	800984c <USB_ReadInterrupts>
 800493e:	4603      	mov	r3, r0
 8004940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004948:	f040 80a7 	bne.w	8004a9a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f004 ff8c 	bl	8009872 <USB_ReadDevAllOutEpInterrupt>
 800495a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800495c:	e099      	b.n	8004a92 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 808e 	beq.w	8004a86 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f004 ffb0 	bl	80098da <USB_ReadDevOutEPInterrupt>
 800497a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	461a      	mov	r2, r3
 8004994:	2301      	movs	r3, #1
 8004996:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fec2 	bl	8005724 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	461a      	mov	r2, r3
 80049b8:	2308      	movs	r3, #8
 80049ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 ff98 	bl	80058f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	461a      	mov	r2, r3
 80049dc:	2310      	movs	r3, #16
 80049de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d030      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d109      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a08:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	78db      	ldrb	r3, [r3, #3]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d108      	bne.n	8004a3a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f007 fb29 	bl	800c08c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	2302      	movs	r3, #2
 8004a4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	461a      	mov	r2, r3
 8004a64:	2320      	movs	r3, #32
 8004a66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3301      	adds	r3, #1
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f af62 	bne.w	800495e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f004 fed4 	bl	800984c <USB_ReadInterrupts>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004aae:	f040 80db 	bne.w	8004c68 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fef5 	bl	80098a6 <USB_ReadDevAllInEpInterrupt>
 8004abc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ac2:	e0cd      	b.n	8004c60 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80c2 	beq.w	8004c54 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f004 ff1b 	bl	8009916 <USB_ReadDevInEPInterrupt>
 8004ae0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d057      	beq.n	8004b9c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69f9      	ldr	r1, [r7, #28]
 8004b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2301      	movs	r3, #1
 8004b20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d132      	bne.n	8004b90 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334c      	adds	r3, #76	; 0x4c
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4403      	add	r3, r0
 8004b4a:	3348      	adds	r3, #72	; 0x48
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4419      	add	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4403      	add	r3, r0
 8004b5e:	334c      	adds	r3, #76	; 0x4c
 8004b60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d113      	bne.n	8004b90 <HAL_PCD_IRQHandler+0x3a2>
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3354      	adds	r3, #84	; 0x54
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	f004 ff22 	bl	80099d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f007 f9fd 	bl	800bf96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	461a      	mov	r2, r3
 8004bec:	2340      	movs	r3, #64	; 0x40
 8004bee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d023      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bfc:	6a38      	ldr	r0, [r7, #32]
 8004bfe:	f003 fe03 	bl	8008808 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	3338      	adds	r3, #56	; 0x38
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	3304      	adds	r3, #4
 8004c14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d108      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f007 fa40 	bl	800c0b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2302      	movs	r3, #2
 8004c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fcdb 	bl	800560a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	3301      	adds	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f47f af2e 	bne.w	8004ac4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f004 fded 	bl	800984c <USB_ReadInterrupts>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c7c:	d122      	bne.n	8004cc4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d108      	bne.n	8004cae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fec2 	bl	8005a30 <HAL_PCDEx_LPM_Callback>
 8004cac:	e002      	b.n	8004cb4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f007 f9de 	bl	800c070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f004 fdbf 	bl	800984c <USB_ReadInterrupts>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d112      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d102      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f007 f99a 	bl	800c024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cfe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f004 fda1 	bl	800984c <USB_ReadInterrupts>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	f040 80b7 	bne.w	8004e86 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2110      	movs	r1, #16
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 fd68 	bl	8008808 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3c:	e046      	b.n	8004dcc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004da4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	3301      	adds	r3, #1
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d3b3      	bcc.n	8004d3e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004de8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d016      	beq.n	8004e20 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e02:	f043 030b 	orr.w	r3, r3, #11
 8004e06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e18:	f043 030b 	orr.w	r3, r3, #11
 8004e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e1e:	e015      	b.n	8004e4c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e32:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e36:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e46:	f043 030b 	orr.w	r3, r3, #11
 8004e4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e70:	461a      	mov	r2, r3
 8004e72:	f004 fdaf 	bl	80099d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f004 fcde 	bl	800984c <USB_ReadInterrupts>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9a:	d124      	bne.n	8004ee6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f004 fd74 	bl	800998e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f003 fd29 	bl	8008902 <USB_GetDevSpeed>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681c      	ldr	r4, [r3, #0]
 8004ebc:	f001 f9f4 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f003 fa28 	bl	8008320 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f007 f888 	bl	800bfe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f004 fcae 	bl	800984c <USB_ReadInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d10a      	bne.n	8004f10 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f007 f865 	bl	800bfca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f002 0208 	and.w	r2, r2, #8
 8004f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f004 fc99 	bl	800984c <USB_ReadInterrupts>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d122      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f30:	2301      	movs	r3, #1
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	e014      	b.n	8004f60 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fb27 	bl	80055a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3e5      	bcc.n	8004f36 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 fc6c 	bl	800984c <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7e:	d13b      	bne.n	8004ff8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f80:	2301      	movs	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	e02b      	b.n	8004fde <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3340      	adds	r3, #64	; 0x40
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d115      	bne.n	8004fd8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004fac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da12      	bge.n	8004fd8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	333f      	adds	r3, #63	; 0x3f
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fae8 	bl	80055a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	3301      	adds	r3, #1
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d3ce      	bcc.n	8004f86 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f004 fc25 	bl	800984c <USB_ReadInterrupts>
 8005002:	4603      	mov	r3, r0
 8005004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800500c:	d155      	bne.n	80050ba <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800500e:	2301      	movs	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	e045      	b.n	80050a0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d12e      	bne.n	800509a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800503c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800503e:	2b00      	cmp	r3, #0
 8005040:	da2b      	bge.n	800509a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800504e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005052:	429a      	cmp	r2, r3
 8005054:	d121      	bne.n	800509a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005096:	6053      	str	r3, [r2, #4]
            break;
 8005098:	e007      	b.n	80050aa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	3301      	adds	r3, #1
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3b4      	bcc.n	8005014 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80050b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f004 fbc4 	bl	800984c <USB_ReadInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ce:	d10a      	bne.n	80050e6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f006 ffff 	bl	800c0d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f004 fbae 	bl	800984c <USB_ReadInterrupts>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d115      	bne.n	8005126 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f006 ffef 	bl	800c0f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	e000      	b.n	8005126 <HAL_PCD_IRQHandler+0x938>
      return;
 8005124:	bf00      	nop
    }
  }
}
 8005126:	3734      	adds	r7, #52	; 0x34
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}

0800512c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_PCD_SetAddress+0x1a>
 8005142:	2302      	movs	r3, #2
 8005144:	e013      	b.n	800516e <HAL_PCD_SetAddress+0x42>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f004 fb0c 	bl	800977c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	4608      	mov	r0, r1
 8005180:	4611      	mov	r1, r2
 8005182:	461a      	mov	r2, r3
 8005184:	4603      	mov	r3, r0
 8005186:	70fb      	strb	r3, [r7, #3]
 8005188:	460b      	mov	r3, r1
 800518a:	803b      	strh	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005198:	2b00      	cmp	r3, #0
 800519a:	da0f      	bge.n	80051bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	3338      	adds	r3, #56	; 0x38
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	3304      	adds	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	705a      	strb	r2, [r3, #1]
 80051ba:	e00f      	b.n	80051dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051e8:	883a      	ldrh	r2, [r7, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	78ba      	ldrb	r2, [r7, #2]
 80051f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005206:	78bb      	ldrb	r3, [r7, #2]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d102      	bne.n	8005212 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_PCD_EP_Open+0xaa>
 800521c:	2302      	movs	r3, #2
 800521e:	e00e      	b.n	800523e <HAL_PCD_EP_Open+0xc8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68f9      	ldr	r1, [r7, #12]
 800522e:	4618      	mov	r0, r3
 8005230:	f003 fb8c 	bl	800894c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800523c:	7afb      	ldrb	r3, [r7, #11]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	460b      	mov	r3, r1
 8005250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005256:	2b00      	cmp	r3, #0
 8005258:	da0f      	bge.n	800527a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	f003 020f 	and.w	r2, r3, #15
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	3338      	adds	r3, #56	; 0x38
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	3304      	adds	r3, #4
 8005270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	705a      	strb	r2, [r3, #1]
 8005278:	e00f      	b.n	800529a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	f003 020f 	and.w	r2, r3, #15
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	3304      	adds	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_PCD_EP_Close+0x6e>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e00e      	b.n	80052d2 <HAL_PCD_EP_Close+0x8c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68f9      	ldr	r1, [r7, #12]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f003 fbca 	bl	8008a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b086      	sub	sp, #24
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	460b      	mov	r3, r1
 80052e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ea:	7afb      	ldrb	r3, [r7, #11]
 80052ec:	f003 020f 	and.w	r2, r3, #15
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	3304      	adds	r3, #4
 8005302:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800531c:	7afb      	ldrb	r3, [r7, #11]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	b2da      	uxtb	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d102      	bne.n	8005336 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	f003 fea9 	bl	80090a4 <USB_EP0StartXfer>
 8005352:	e008      	b.n	8005366 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6979      	ldr	r1, [r7, #20]
 8005362:	f003 fc57 	bl	8008c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 020f 	and.w	r2, r3, #15
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	460b      	mov	r3, r1
 80053ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b0:	7afb      	ldrb	r3, [r7, #11]
 80053b2:	f003 020f 	and.w	r2, r3, #15
 80053b6:	4613      	mov	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	3338      	adds	r3, #56	; 0x38
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	3304      	adds	r3, #4
 80053c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2201      	movs	r2, #1
 80053de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e0:	7afb      	ldrb	r3, [r7, #11]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d102      	bne.n	80053fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	6979      	ldr	r1, [r7, #20]
 8005412:	f003 fe47 	bl	80090a4 <USB_EP0StartXfer>
 8005416:	e008      	b.n	800542a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	f003 fbf5 	bl	8008c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d901      	bls.n	8005452 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e050      	b.n	80054f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005456:	2b00      	cmp	r3, #0
 8005458:	da0f      	bge.n	800547a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 020f 	and.w	r2, r3, #15
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	3338      	adds	r3, #56	; 0x38
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	3304      	adds	r3, #4
 8005470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	705a      	strb	r2, [r3, #1]
 8005478:	e00d      	b.n	8005496 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4413      	add	r3, r2
 800548c:	3304      	adds	r3, #4
 800548e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_PCD_EP_SetStall+0x82>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e01e      	b.n	80054f4 <HAL_PCD_EP_SetStall+0xc0>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f004 f885 	bl	80095d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	b2d9      	uxtb	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054e4:	461a      	mov	r2, r3
 80054e6:	f004 fa75 	bl	80099d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	f003 020f 	and.w	r2, r3, #15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d901      	bls.n	800551a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800551a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	da0f      	bge.n	8005542 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	f003 020f 	and.w	r2, r3, #15
 8005528:	4613      	mov	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	3338      	adds	r3, #56	; 0x38
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	3304      	adds	r3, #4
 8005538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	705a      	strb	r2, [r3, #1]
 8005540:	e00f      	b.n	8005562 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 020f 	and.w	r2, r3, #15
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_PCD_EP_ClrStall+0x86>
 800557e:	2302      	movs	r3, #2
 8005580:	e00e      	b.n	80055a0 <HAL_PCD_EP_ClrStall+0xa4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	4618      	mov	r0, r3
 8005592:	f004 f88d 	bl	80096b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da0c      	bge.n	80055d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	3338      	adds	r3, #56	; 0x38
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e00c      	b.n	80055f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4413      	add	r3, r2
 80055ec:	3304      	adds	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f003 feac 	bl	8009354 <USB_EPStopXfer>
 80055fc:	4603      	mov	r3, r0
 80055fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005600:	7afb      	ldrb	r3, [r7, #11]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b08a      	sub	sp, #40	; 0x28
 800560e:	af02      	add	r7, sp, #8
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	3338      	adds	r3, #56	; 0x38
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4413      	add	r3, r2
 800562e:	3304      	adds	r3, #4
 8005630:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d901      	bls.n	8005642 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e06c      	b.n	800571c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	429a      	cmp	r2, r3
 8005656:	d902      	bls.n	800565e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3303      	adds	r3, #3
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005666:	e02b      	b.n	80056c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	429a      	cmp	r2, r3
 800567c:	d902      	bls.n	8005684 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3303      	adds	r3, #3
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6919      	ldr	r1, [r3, #16]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800569c:	b2db      	uxtb	r3, r3
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4603      	mov	r3, r0
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f003 ff00 	bl	80094a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	441a      	add	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	441a      	add	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d809      	bhi.n	80056ea <PCD_WriteEmptyTxFifo+0xe0>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056de:	429a      	cmp	r2, r3
 80056e0:	d203      	bcs.n	80056ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1be      	bne.n	8005668 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d811      	bhi.n	800571a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2201      	movs	r2, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	43db      	mvns	r3, r3
 8005710:	6939      	ldr	r1, [r7, #16]
 8005712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005716:	4013      	ands	r3, r2
 8005718:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	333c      	adds	r3, #60	; 0x3c
 800573c:	3304      	adds	r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d17b      	bne.n	8005852 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4a61      	ldr	r2, [pc, #388]	; (80058ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	f240 80b9 	bls.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80b3 	beq.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578c:	6093      	str	r3, [r2, #8]
 800578e:	e0a7      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	461a      	mov	r2, r3
 80057a8:	2320      	movs	r3, #32
 80057aa:	6093      	str	r3, [r2, #8]
 80057ac:	e098      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8093 	bne.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4a4b      	ldr	r2, [pc, #300]	; (80058ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d90f      	bls.n	80057e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	6093      	str	r3, [r2, #8]
 80057e0:	e07e      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	3304      	adds	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	0159      	lsls	r1, r3, #5
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	440b      	add	r3, r1
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d114      	bne.n	8005844 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800582c:	461a      	mov	r2, r3
 800582e:	2101      	movs	r1, #1
 8005830:	f004 f8d0 	bl	80099d4 <USB_EP0_OutStart>
 8005834:	e006      	b.n	8005844 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f006 fb88 	bl	800bf60 <HAL_PCD_DataOutStageCallback>
 8005850:	e046      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d124      	bne.n	80058a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005876:	6093      	str	r3, [r2, #8]
 8005878:	e032      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2320      	movs	r3, #32
 8005894:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f006 fb5f 	bl	800bf60 <HAL_PCD_DataOutStageCallback>
 80058a2:	e01d      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d114      	bne.n	80058d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058cc:	461a      	mov	r2, r3
 80058ce:	2100      	movs	r1, #0
 80058d0:	f004 f880 	bl	80099d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f006 fb40 	bl	800bf60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	4f54300a 	.word	0x4f54300a
 80058f0:	4f54310a 	.word	0x4f54310a

080058f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	333c      	adds	r3, #60	; 0x3c
 800590c:	3304      	adds	r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <PCD_EP_OutSetupPacket_int+0x88>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d90e      	bls.n	8005948 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f006 faf7 	bl	800bf3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <PCD_EP_OutSetupPacket_int+0x88>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d90c      	bls.n	8005970 <PCD_EP_OutSetupPacket_int+0x7c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d108      	bne.n	8005970 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005968:	461a      	mov	r2, r3
 800596a:	2101      	movs	r1, #1
 800596c:	f004 f832 	bl	80099d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	4f54300a 	.word	0x4f54300a

08005980 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
 800598c:	4613      	mov	r3, r2
 800598e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800599e:	883b      	ldrh	r3, [r7, #0]
 80059a0:	0419      	lsls	r1, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
 80059ac:	e028      	b.n	8005a00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
 80059c0:	e00d      	b.n	80059de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3340      	adds	r3, #64	; 0x40
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	3301      	adds	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3ec      	bcc.n	80059c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059e8:	883b      	ldrh	r3, [r7, #0]
 80059ea:	0418      	lsls	r0, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	4302      	orrs	r2, r0
 80059f8:	3340      	adds	r3, #64	; 0x40
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e267      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d075      	beq.n	8005b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a66:	4b88      	ldr	r3, [pc, #544]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d00c      	beq.n	8005a8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a72:	4b85      	ldr	r3, [pc, #532]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d112      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7e:	4b82      	ldr	r3, [pc, #520]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	4b7e      	ldr	r3, [pc, #504]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05b      	beq.n	8005b50 <HAL_RCC_OscConfig+0x108>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d157      	bne.n	8005b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e242      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d106      	bne.n	8005abc <HAL_RCC_OscConfig+0x74>
 8005aae:	4b76      	ldr	r3, [pc, #472]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a75      	ldr	r2, [pc, #468]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e01d      	b.n	8005af8 <HAL_RCC_OscConfig+0xb0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x98>
 8005ac6:	4b70      	ldr	r3, [pc, #448]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6f      	ldr	r2, [pc, #444]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4b6d      	ldr	r3, [pc, #436]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6c      	ldr	r2, [pc, #432]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0xb0>
 8005ae0:	4b69      	ldr	r3, [pc, #420]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a68      	ldr	r2, [pc, #416]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b66      	ldr	r3, [pc, #408]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a65      	ldr	r2, [pc, #404]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fe f846 	bl	8003b90 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fe f842 	bl	8003b90 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e207      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0xc0>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fe f832 	bl	8003b90 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fe f82e 	bl	8003b90 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e1f3      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b42:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0xe8>
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d063      	beq.n	8005c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6a:	4b47      	ldr	r3, [pc, #284]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d11c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b76:	4b44      	ldr	r3, [pc, #272]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d116      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	4b41      	ldr	r3, [pc, #260]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_RCC_OscConfig+0x152>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e1c7      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9a:	4b3b      	ldr	r3, [pc, #236]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4937      	ldr	r1, [pc, #220]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	e03a      	b.n	8005c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d020      	beq.n	8005bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	4b34      	ldr	r3, [pc, #208]	; (8005c8c <HAL_RCC_OscConfig+0x244>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fd ffe7 	bl	8003b90 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc6:	f7fd ffe3 	bl	8003b90 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e1a8      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd8:	4b2b      	ldr	r3, [pc, #172]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be4:	4b28      	ldr	r3, [pc, #160]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4925      	ldr	r1, [pc, #148]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]
 8005bf8:	e015      	b.n	8005c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <HAL_RCC_OscConfig+0x244>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd ffc6 	bl	8003b90 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c08:	f7fd ffc2 	bl	8003b90 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e187      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d036      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3a:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <HAL_RCC_OscConfig+0x248>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fd ffa6 	bl	8003b90 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c48:	f7fd ffa2 	bl	8003b90 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e167      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x200>
 8005c66:	e01b      	b.n	8005ca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_RCC_OscConfig+0x248>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7fd ff8f 	bl	8003b90 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	e00e      	b.n	8005c94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c76:	f7fd ff8b 	bl	8003b90 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d907      	bls.n	8005c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e150      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	42470000 	.word	0x42470000
 8005c90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c94:	4b88      	ldr	r3, [pc, #544]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ea      	bne.n	8005c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8097 	beq.w	8005ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb2:	4b81      	ldr	r3, [pc, #516]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]
 8005cc2:	4b7d      	ldr	r3, [pc, #500]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	4a7c      	ldr	r2, [pc, #496]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cce:	4b7a      	ldr	r3, [pc, #488]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cde:	4b77      	ldr	r3, [pc, #476]	; (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d118      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cea:	4b74      	ldr	r3, [pc, #464]	; (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a73      	ldr	r2, [pc, #460]	; (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf6:	f7fd ff4b 	bl	8003b90 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cfe:	f7fd ff47 	bl	8003b90 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e10c      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <HAL_RCC_OscConfig+0x474>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d106      	bne.n	8005d32 <HAL_RCC_OscConfig+0x2ea>
 8005d24:	4b64      	ldr	r3, [pc, #400]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	4a63      	ldr	r2, [pc, #396]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d30:	e01c      	b.n	8005d6c <HAL_RCC_OscConfig+0x324>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCC_OscConfig+0x30c>
 8005d3a:	4b5f      	ldr	r3, [pc, #380]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	4a5e      	ldr	r2, [pc, #376]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d40:	f043 0304 	orr.w	r3, r3, #4
 8005d44:	6713      	str	r3, [r2, #112]	; 0x70
 8005d46:	4b5c      	ldr	r3, [pc, #368]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	4a5b      	ldr	r2, [pc, #364]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	6713      	str	r3, [r2, #112]	; 0x70
 8005d52:	e00b      	b.n	8005d6c <HAL_RCC_OscConfig+0x324>
 8005d54:	4b58      	ldr	r3, [pc, #352]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	4a57      	ldr	r2, [pc, #348]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d60:	4b55      	ldr	r3, [pc, #340]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4a54      	ldr	r2, [pc, #336]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fd ff0c 	bl	8003b90 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d7c:	f7fd ff08 	bl	8003b90 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e0cb      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d92:	4b49      	ldr	r3, [pc, #292]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ee      	beq.n	8005d7c <HAL_RCC_OscConfig+0x334>
 8005d9e:	e014      	b.n	8005dca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da0:	f7fd fef6 	bl	8003b90 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da8:	f7fd fef2 	bl	8003b90 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e0b5      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dbe:	4b3e      	ldr	r3, [pc, #248]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ee      	bne.n	8005da8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd0:	4b39      	ldr	r3, [pc, #228]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	4a38      	ldr	r2, [pc, #224]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a1 	beq.w	8005f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005de6:	4b34      	ldr	r3, [pc, #208]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d05c      	beq.n	8005eac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d141      	bne.n	8005e7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_RCC_OscConfig+0x478>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fd fec6 	bl	8003b90 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fd fec2 	bl	8003b90 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e087      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	491b      	ldr	r1, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e50:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x478>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd fe9b 	bl	8003b90 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fd fe97 	bl	8003b90 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e05c      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x416>
 8005e7c:	e054      	b.n	8005f28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <HAL_RCC_OscConfig+0x478>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fd fe84 	bl	8003b90 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fd fe80 	bl	8003b90 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e045      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x444>
 8005eaa:	e03d      	b.n	8005f28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e038      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40007000 	.word	0x40007000
 8005ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <HAL_RCC_OscConfig+0x4ec>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d028      	beq.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d121      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11a      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d111      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40023800 	.word	0x40023800

08005f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0cc      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b68      	ldr	r3, [pc, #416]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d90c      	bls.n	8005f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b65      	ldr	r3, [pc, #404]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f62:	4b63      	ldr	r3, [pc, #396]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0b8      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d020      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f8c:	4b59      	ldr	r3, [pc, #356]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a58      	ldr	r2, [pc, #352]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fa4:	4b53      	ldr	r3, [pc, #332]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4a52      	ldr	r2, [pc, #328]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb0:	4b50      	ldr	r3, [pc, #320]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	494d      	ldr	r1, [pc, #308]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d044      	beq.n	8006058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b47      	ldr	r3, [pc, #284]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d119      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d107      	bne.n	8006006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff6:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e06f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006006:	4b3b      	ldr	r3, [pc, #236]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e067      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006016:	4b37      	ldr	r3, [pc, #220]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f023 0203 	bic.w	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4934      	ldr	r1, [pc, #208]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006028:	f7fd fdb2 	bl	8003b90 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602e:	e00a      	b.n	8006046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006030:	f7fd fdae 	bl	8003b90 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	; 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e04f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 020c 	and.w	r2, r3, #12
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	429a      	cmp	r2, r3
 8006056:	d1eb      	bne.n	8006030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d20c      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b22      	ldr	r3, [pc, #136]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e032      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800608c:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4916      	ldr	r1, [pc, #88]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	490e      	ldr	r1, [pc, #56]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060be:	f000 f82d 	bl	800611c <HAL_RCC_GetSysClockFreq>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	490a      	ldr	r1, [pc, #40]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 80060d0:	5ccb      	ldrb	r3, [r1, r3]
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fc fbb8 	bl	8002854 <HAL_InitTick>

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023c00 	.word	0x40023c00
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0800eb0c 	.word	0x0800eb0c
 80060fc:	200000f8 	.word	0x200000f8
 8006100:	20000128 	.word	0x20000128

08006104 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006108:	4b03      	ldr	r3, [pc, #12]	; (8006118 <HAL_RCC_EnableCSS+0x14>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
}
 800610e:	bf00      	nop
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	4247004c 	.word	0x4247004c

0800611c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800611c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006120:	b090      	sub	sp, #64	; 0x40
 8006122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
 8006128:	2300      	movs	r3, #0
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	2300      	movs	r3, #0
 800612e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006134:	4b59      	ldr	r3, [pc, #356]	; (800629c <HAL_RCC_GetSysClockFreq+0x180>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 030c 	and.w	r3, r3, #12
 800613c:	2b08      	cmp	r3, #8
 800613e:	d00d      	beq.n	800615c <HAL_RCC_GetSysClockFreq+0x40>
 8006140:	2b08      	cmp	r3, #8
 8006142:	f200 80a1 	bhi.w	8006288 <HAL_RCC_GetSysClockFreq+0x16c>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <HAL_RCC_GetSysClockFreq+0x34>
 800614a:	2b04      	cmp	r3, #4
 800614c:	d003      	beq.n	8006156 <HAL_RCC_GetSysClockFreq+0x3a>
 800614e:	e09b      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006150:	4b53      	ldr	r3, [pc, #332]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006152:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006154:	e09b      	b.n	800628e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006156:	4b53      	ldr	r3, [pc, #332]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800615a:	e098      	b.n	800628e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800615c:	4b4f      	ldr	r3, [pc, #316]	; (800629c <HAL_RCC_GetSysClockFreq+0x180>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006166:	4b4d      	ldr	r3, [pc, #308]	; (800629c <HAL_RCC_GetSysClockFreq+0x180>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d028      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006172:	4b4a      	ldr	r3, [pc, #296]	; (800629c <HAL_RCC_GetSysClockFreq+0x180>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	099b      	lsrs	r3, r3, #6
 8006178:	2200      	movs	r2, #0
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	627a      	str	r2, [r7, #36]	; 0x24
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006184:	2100      	movs	r1, #0
 8006186:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006188:	fb03 f201 	mul.w	r2, r3, r1
 800618c:	2300      	movs	r3, #0
 800618e:	fb00 f303 	mul.w	r3, r0, r3
 8006192:	4413      	add	r3, r2
 8006194:	4a43      	ldr	r2, [pc, #268]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006196:	fba0 1202 	umull	r1, r2, r0, r2
 800619a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800619c:	460a      	mov	r2, r1
 800619e:	62ba      	str	r2, [r7, #40]	; 0x28
 80061a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a2:	4413      	add	r3, r2
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	2200      	movs	r2, #0
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	61fa      	str	r2, [r7, #28]
 80061ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80061b6:	f7fa f86b 	bl	8000290 <__aeabi_uldivmod>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4613      	mov	r3, r2
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c2:	e053      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c4:	4b35      	ldr	r3, [pc, #212]	; (800629c <HAL_RCC_GetSysClockFreq+0x180>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	099b      	lsrs	r3, r3, #6
 80061ca:	2200      	movs	r2, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	617a      	str	r2, [r7, #20]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061d6:	f04f 0b00 	mov.w	fp, #0
 80061da:	4652      	mov	r2, sl
 80061dc:	465b      	mov	r3, fp
 80061de:	f04f 0000 	mov.w	r0, #0
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	0159      	lsls	r1, r3, #5
 80061e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061ec:	0150      	lsls	r0, r2, #5
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	ebb2 080a 	subs.w	r8, r2, sl
 80061f6:	eb63 090b 	sbc.w	r9, r3, fp
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006206:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800620a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800620e:	ebb2 0408 	subs.w	r4, r2, r8
 8006212:	eb63 0509 	sbc.w	r5, r3, r9
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	00eb      	lsls	r3, r5, #3
 8006220:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006224:	00e2      	lsls	r2, r4, #3
 8006226:	4614      	mov	r4, r2
 8006228:	461d      	mov	r5, r3
 800622a:	eb14 030a 	adds.w	r3, r4, sl
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	eb45 030b 	adc.w	r3, r5, fp
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006242:	4629      	mov	r1, r5
 8006244:	028b      	lsls	r3, r1, #10
 8006246:	4621      	mov	r1, r4
 8006248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800624c:	4621      	mov	r1, r4
 800624e:	028a      	lsls	r2, r1, #10
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	2200      	movs	r2, #0
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	60fa      	str	r2, [r7, #12]
 800625c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006260:	f7fa f816 	bl	8000290 <__aeabi_uldivmod>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4613      	mov	r3, r2
 800626a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <HAL_RCC_GetSysClockFreq+0x180>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	3301      	adds	r3, #1
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800627c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006286:	e002      	b.n	800628e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800628c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006290:	4618      	mov	r0, r3
 8006292:	3740      	adds	r7, #64	; 0x40
 8006294:	46bd      	mov	sp, r7
 8006296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	00f42400 	.word	0x00f42400
 80062a4:	017d7840 	.word	0x017d7840

080062a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062ac:	4b03      	ldr	r3, [pc, #12]	; (80062bc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ae:	681b      	ldr	r3, [r3, #0]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	200000f8 	.word	0x200000f8

080062c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062c4:	f7ff fff0 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0b5b      	lsrs	r3, r3, #13
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4903      	ldr	r1, [pc, #12]	; (80062e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062dc:	4618      	mov	r0, r3
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40023800 	.word	0x40023800
 80062e4:	0800eb1c 	.word	0x0800eb1c

080062e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	220f      	movs	r2, #15
 80062f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0203 	and.w	r2, r3, #3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_RCC_GetClockConfig+0x5c>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	08db      	lsrs	r3, r3, #3
 8006322:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <HAL_RCC_GetClockConfig+0x60>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0207 	and.w	r2, r3, #7
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	601a      	str	r2, [r3, #0]
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	40023c00 	.word	0x40023c00

0800634c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <HAL_RCC_NMI_IRQHandler+0x20>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d104      	bne.n	8006366 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800635c:	f000 f80a 	bl	8006374 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006360:	4b03      	ldr	r3, [pc, #12]	; (8006370 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	701a      	strb	r2, [r3, #0]
  }
}
 8006366:	bf00      	nop
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40023800 	.word	0x40023800
 8006370:	4002380e 	.word	0x4002380e

08006374 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e07b      	b.n	800648c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a4:	d009      	beq.n	80063ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	61da      	str	r2, [r3, #28]
 80063ac:	e005      	b.n	80063ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d106      	bne.n	80063da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fc f9ed 	bl	80027b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	ea42 0103 	orr.w	r1, r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	f003 0104 	and.w	r1, r3, #4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	f003 0210 	and.w	r2, r3, #16
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_SPI_Transmit+0x22>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e126      	b.n	8006704 <HAL_SPI_Transmit+0x270>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064be:	f7fd fb67 	bl	8003b90 <HAL_GetTick>
 80064c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d002      	beq.n	80064da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
 80064d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064d8:	e10b      	b.n	80066f2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_SPI_Transmit+0x52>
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064ea:	e102      	b.n	80066f2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2203      	movs	r2, #3
 80064f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	88fa      	ldrh	r2, [r7, #6]
 800650a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006532:	d10f      	bne.n	8006554 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006542:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006552:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d007      	beq.n	8006572 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657a:	d14b      	bne.n	8006614 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_SPI_Transmit+0xf6>
 8006584:	8afb      	ldrh	r3, [r7, #22]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d13e      	bne.n	8006608 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	881a      	ldrh	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	1c9a      	adds	r2, r3, #2
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ae:	e02b      	b.n	8006608 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d112      	bne.n	80065e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	881a      	ldrh	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80065e2:	e011      	b.n	8006608 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e4:	f7fd fad4 	bl	8003b90 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d803      	bhi.n	80065fc <HAL_SPI_Transmit+0x168>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d102      	bne.n	8006602 <HAL_SPI_Transmit+0x16e>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006606:	e074      	b.n	80066f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1ce      	bne.n	80065b0 <HAL_SPI_Transmit+0x11c>
 8006612:	e04c      	b.n	80066ae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Transmit+0x18e>
 800661c:	8afb      	ldrh	r3, [r7, #22]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d140      	bne.n	80066a4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006648:	e02c      	b.n	80066a4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d113      	bne.n	8006680 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	86da      	strh	r2, [r3, #54]	; 0x36
 800667e:	e011      	b.n	80066a4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006680:	f7fd fa86 	bl	8003b90 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d803      	bhi.n	8006698 <HAL_SPI_Transmit+0x204>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d102      	bne.n	800669e <HAL_SPI_Transmit+0x20a>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066a2:	e026      	b.n	80066f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1cd      	bne.n	800664a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fcde 	bl	8007074 <SPI_EndRxTxTransaction>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e000      	b.n	80066f2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80066f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006702:	7ffb      	ldrb	r3, [r7, #31]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006728:	d112      	bne.n	8006750 <HAL_SPI_Receive+0x44>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10e      	bne.n	8006750 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2204      	movs	r2, #4
 8006736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f8f1 	bl	800692e <HAL_SPI_TransmitReceive>
 800674c:	4603      	mov	r3, r0
 800674e:	e0ea      	b.n	8006926 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_SPI_Receive+0x52>
 800675a:	2302      	movs	r3, #2
 800675c:	e0e3      	b.n	8006926 <HAL_SPI_Receive+0x21a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006766:	f7fd fa13 	bl	8003b90 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d002      	beq.n	800677e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006778:	2302      	movs	r3, #2
 800677a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800677c:	e0ca      	b.n	8006914 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_SPI_Receive+0x7e>
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800678e:	e0c1      	b.n	8006914 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2204      	movs	r2, #4
 8006794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d6:	d10f      	bne.n	80067f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d007      	beq.n	8006816 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006814:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d162      	bne.n	80068e4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800681e:	e02e      	b.n	800687e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d115      	bne.n	800685a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f103 020c 	add.w	r2, r3, #12
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	7812      	ldrb	r2, [r2, #0]
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006858:	e011      	b.n	800687e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685a:	f7fd f999 	bl	8003b90 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d803      	bhi.n	8006872 <HAL_SPI_Receive+0x166>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d102      	bne.n	8006878 <HAL_SPI_Receive+0x16c>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800687c:	e04a      	b.n	8006914 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1cb      	bne.n	8006820 <HAL_SPI_Receive+0x114>
 8006888:	e031      	b.n	80068ee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b01      	cmp	r3, #1
 8006896:	d113      	bne.n	80068c0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	b292      	uxth	r2, r2
 80068a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	1c9a      	adds	r2, r3, #2
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068be:	e011      	b.n	80068e4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c0:	f7fd f966 	bl	8003b90 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d803      	bhi.n	80068d8 <HAL_SPI_Receive+0x1cc>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d102      	bne.n	80068de <HAL_SPI_Receive+0x1d2>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068e2:	e017      	b.n	8006914 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1cd      	bne.n	800688a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fb58 	bl	8006fa8 <SPI_EndRxTransaction>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
 8006910:	e000      	b.n	8006914 <HAL_SPI_Receive+0x208>
  }

error :
 8006912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006924:	7dfb      	ldrb	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b08c      	sub	sp, #48	; 0x30
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800693c:	2301      	movs	r3, #1
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_SPI_TransmitReceive+0x26>
 8006950:	2302      	movs	r3, #2
 8006952:	e18a      	b.n	8006c6a <HAL_SPI_TransmitReceive+0x33c>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800695c:	f7fd f918 	bl	8003b90 <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006972:	887b      	ldrh	r3, [r7, #2]
 8006974:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800697a:	2b01      	cmp	r3, #1
 800697c:	d00f      	beq.n	800699e <HAL_SPI_TransmitReceive+0x70>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006984:	d107      	bne.n	8006996 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d103      	bne.n	8006996 <HAL_SPI_TransmitReceive+0x68>
 800698e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006992:	2b04      	cmp	r3, #4
 8006994:	d003      	beq.n	800699e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006996:	2302      	movs	r3, #2
 8006998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800699c:	e15b      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x82>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x82>
 80069aa:	887b      	ldrh	r3, [r7, #2]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d103      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069b6:	e14e      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d003      	beq.n	80069cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2205      	movs	r2, #5
 80069c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	887a      	ldrh	r2, [r7, #2]
 80069e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	887a      	ldrh	r2, [r7, #2]
 80069ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d007      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d178      	bne.n	8006b1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x10a>
 8006a32:	8b7b      	ldrh	r3, [r7, #26]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d166      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a5c:	e053      	b.n	8006b06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_SPI_TransmitReceive+0x176>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0x176>
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d113      	bne.n	8006aa4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	881a      	ldrh	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	1c9a      	adds	r2, r3, #2
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d119      	bne.n	8006ae6 <HAL_SPI_TransmitReceive+0x1b8>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d014      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ae6:	f7fd f853 	bl	8003b90 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d807      	bhi.n	8006b06 <HAL_SPI_TransmitReceive+0x1d8>
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afc:	d003      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b04:	e0a7      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1a6      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x130>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1a1      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x130>
 8006b1a:	e07c      	b.n	8006c16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <HAL_SPI_TransmitReceive+0x1fc>
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d16b      	bne.n	8006c02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b50:	e057      	b.n	8006c02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d11c      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x26c>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d017      	beq.n	8006b9a <HAL_SPI_TransmitReceive+0x26c>
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d114      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d119      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x2ae>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d014      	beq.n	8006bdc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bdc:	f7fc ffd8 	bl	8003b90 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d803      	bhi.n	8006bf4 <HAL_SPI_TransmitReceive+0x2c6>
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d102      	bne.n	8006bfa <HAL_SPI_TransmitReceive+0x2cc>
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c00:	e029      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1a2      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x224>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d19d      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fa2a 	bl	8007074 <SPI_EndRxTxTransaction>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c32:	e010      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10b      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	e000      	b.n	8006c56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3730      	adds	r7, #48	; 0x30
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10e      	bne.n	8006cb4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
    return;
 8006cb2:	e0ce      	b.n	8006e52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_SPI_IRQHandler+0x5e>
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
    return;
 8006cd0:	e0bf      	b.n	8006e52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <HAL_SPI_IRQHandler+0x7e>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d105      	bne.n	8006cf2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80b0 	beq.w	8006e52 <HAL_SPI_IRQHandler+0x1de>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80aa 	beq.w	8006e52 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d023      	beq.n	8006d50 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d011      	beq.n	8006d38 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d18:	f043 0204 	orr.w	r2, r3, #4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	e00b      	b.n	8006d50 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
        return;
 8006d4e:	e080      	b.n	8006e52 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f043 0208 	orr.w	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d04f      	beq.n	8006e50 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dbe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <HAL_SPI_IRQHandler+0x168>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d034      	beq.n	8006e46 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0203 	bic.w	r2, r2, #3
 8006dea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d011      	beq.n	8006e18 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df8:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <HAL_SPI_IRQHandler+0x1e4>)
 8006dfa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fc ffd7 	bl	8003db4 <HAL_DMA_Abort_IT>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d016      	beq.n	8006e4e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <HAL_SPI_IRQHandler+0x1e4>)
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fc ffc1 	bl	8003db4 <HAL_DMA_Abort_IT>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e44:	e003      	b.n	8006e4e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f808 	bl	8006e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e4c:	e000      	b.n	8006e50 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006e4e:	bf00      	nop
    return;
 8006e50:	bf00      	nop
  }
}
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	08006e71 	.word	0x08006e71

08006e5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff ffe6 	bl	8006e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ea8:	f7fc fe72 	bl	8003b90 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eb8:	f7fc fe6a 	bl	8003b90 <HAL_GetTick>
 8006ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ebe:	4b39      	ldr	r3, [pc, #228]	; (8006fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	015b      	lsls	r3, r3, #5
 8006ec4:	0d1b      	lsrs	r3, r3, #20
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ece:	e054      	b.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d050      	beq.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed8:	f7fc fe5a 	bl	8003b90 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d902      	bls.n	8006eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d13d      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f06:	d111      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f10:	d004      	beq.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1a:	d107      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f34:	d10f      	bne.n	8006f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e017      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4013      	ands	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d19b      	bne.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200000f8 	.word	0x200000f8

08006fa8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fbc:	d111      	bne.n	8006fe2 <SPI_EndRxTransaction+0x3a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc6:	d004      	beq.n	8006fd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	d107      	bne.n	8006fe2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fea:	d12a      	bne.n	8007042 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff4:	d012      	beq.n	800701c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff ff49 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d02d      	beq.n	8007068 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e026      	b.n	800706a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2200      	movs	r2, #0
 8007024:	2101      	movs	r1, #1
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff ff36 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01a      	beq.n	8007068 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f043 0220 	orr.w	r2, r3, #32
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e013      	b.n	800706a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	2101      	movs	r1, #1
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ff23 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e000      	b.n	800706a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af02      	add	r7, sp, #8
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <SPI_EndRxTxTransaction+0x7c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <SPI_EndRxTxTransaction+0x80>)
 8007086:	fba2 2303 	umull	r2, r3, r2, r3
 800708a:	0d5b      	lsrs	r3, r3, #21
 800708c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007090:	fb02 f303 	mul.w	r3, r2, r3
 8007094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800709e:	d112      	bne.n	80070c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	2180      	movs	r1, #128	; 0x80
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fef4 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ba:	f043 0220 	orr.w	r2, r3, #32
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e00f      	b.n	80070e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070dc:	2b80      	cmp	r3, #128	; 0x80
 80070de:	d0f2      	beq.n	80070c6 <SPI_EndRxTxTransaction+0x52>
 80070e0:	e000      	b.n	80070e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80070e2:	bf00      	nop
  }

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	200000f8 	.word	0x200000f8
 80070f4:	165e9f81 	.word	0x165e9f81

080070f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e041      	b.n	800718e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f839 	bl	8007196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f000 f9ca 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d001      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e044      	b.n	800724e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_TIM_Base_Start_IT+0xb0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x6c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d013      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x6c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1a      	ldr	r2, [pc, #104]	; (8007260 <HAL_TIM_Base_Start_IT+0xb4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x6c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a19      	ldr	r2, [pc, #100]	; (8007264 <HAL_TIM_Base_Start_IT+0xb8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x6c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a17      	ldr	r2, [pc, #92]	; (8007268 <HAL_TIM_Base_Start_IT+0xbc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0x6c>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a16      	ldr	r2, [pc, #88]	; (800726c <HAL_TIM_Base_Start_IT+0xc0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d111      	bne.n	800723c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b06      	cmp	r3, #6
 8007228:	d010      	beq.n	800724c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0201 	orr.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723a:	e007      	b.n	800724c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40014000 	.word	0x40014000

08007270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b02      	cmp	r3, #2
 8007284:	d122      	bne.n	80072cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b02      	cmp	r3, #2
 8007292:	d11b      	bne.n	80072cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0202 	mvn.w	r2, #2
 800729c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8ee 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 80072b8:	e005      	b.n	80072c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8e0 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8f1 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d122      	bne.n	8007320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d11b      	bne.n	8007320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0204 	mvn.w	r2, #4
 80072f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8c4 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8b6 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8c7 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b08      	cmp	r3, #8
 800732c:	d122      	bne.n	8007374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d11b      	bne.n	8007374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0208 	mvn.w	r2, #8
 8007344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2204      	movs	r2, #4
 800734a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f89a 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f88c 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f89d 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b10      	cmp	r3, #16
 8007380:	d122      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b10      	cmp	r3, #16
 800738e:	d11b      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0210 	mvn.w	r2, #16
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2208      	movs	r2, #8
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f870 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f862 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f873 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d10e      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d107      	bne.n	80073f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0201 	mvn.w	r2, #1
 80073ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7fa fc86 	bl	8001d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d10e      	bne.n	8007420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740c:	2b80      	cmp	r3, #128	; 0x80
 800740e:	d107      	bne.n	8007420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8e2 	bl	80075e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d10e      	bne.n	800744c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d107      	bne.n	800744c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f838 	bl	80074bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b20      	cmp	r3, #32
 8007458:	d10e      	bne.n	8007478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b20      	cmp	r3, #32
 8007466:	d107      	bne.n	8007478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0220 	mvn.w	r2, #32
 8007470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f8ac 	bl	80075d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a34      	ldr	r2, [pc, #208]	; (80075b4 <TIM_Base_SetConfig+0xe4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00f      	beq.n	8007508 <TIM_Base_SetConfig+0x38>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x38>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a31      	ldr	r2, [pc, #196]	; (80075b8 <TIM_Base_SetConfig+0xe8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x38>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a30      	ldr	r2, [pc, #192]	; (80075bc <TIM_Base_SetConfig+0xec>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x38>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a2f      	ldr	r2, [pc, #188]	; (80075c0 <TIM_Base_SetConfig+0xf0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d108      	bne.n	800751a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a25      	ldr	r2, [pc, #148]	; (80075b4 <TIM_Base_SetConfig+0xe4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01b      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007528:	d017      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a22      	ldr	r2, [pc, #136]	; (80075b8 <TIM_Base_SetConfig+0xe8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a21      	ldr	r2, [pc, #132]	; (80075bc <TIM_Base_SetConfig+0xec>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <TIM_Base_SetConfig+0xf0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <TIM_Base_SetConfig+0xf4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <TIM_Base_SetConfig+0xf8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_Base_SetConfig+0x8a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1d      	ldr	r2, [pc, #116]	; (80075cc <TIM_Base_SetConfig+0xfc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d108      	bne.n	800756c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <TIM_Base_SetConfig+0xe4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d103      	bne.n	80075a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	615a      	str	r2, [r3, #20]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40014400 	.word	0x40014400
 80075cc:	40014800 	.word	0x40014800

080075d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <LL_GPIO_SetPinMode>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	b089      	sub	sp, #36	; 0x24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	fa93 f3a3 	rbit	r3, r3
 8007612:	613b      	str	r3, [r7, #16]
  return result;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	fab3 f383 	clz	r3, r3
 800761a:	b2db      	uxtb	r3, r3
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	2103      	movs	r1, #3
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	401a      	ands	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	fa93 f3a3 	rbit	r3, r3
 8007632:	61bb      	str	r3, [r7, #24]
  return result;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	fab3 f383 	clz	r3, r3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	fa01 f303 	lsl.w	r3, r1, r3
 8007644:	431a      	orrs	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	601a      	str	r2, [r3, #0]
}
 800764a:	bf00      	nop
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <LL_GPIO_SetPinOutputType>:
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	43db      	mvns	r3, r3
 800766a:	401a      	ands	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	431a      	orrs	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	605a      	str	r2, [r3, #4]
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <LL_GPIO_SetPinSpeed>:
{
 8007686:	b480      	push	{r7}
 8007688:	b089      	sub	sp, #36	; 0x24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	fa93 f3a3 	rbit	r3, r3
 80076a0:	613b      	str	r3, [r7, #16]
  return result;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	fab3 f383 	clz	r3, r3
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	2103      	movs	r1, #3
 80076ae:	fa01 f303 	lsl.w	r3, r1, r3
 80076b2:	43db      	mvns	r3, r3
 80076b4:	401a      	ands	r2, r3
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	fa93 f3a3 	rbit	r3, r3
 80076c0:	61bb      	str	r3, [r7, #24]
  return result;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	fab3 f383 	clz	r3, r3
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	fa01 f303 	lsl.w	r3, r1, r3
 80076d2:	431a      	orrs	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	609a      	str	r2, [r3, #8]
}
 80076d8:	bf00      	nop
 80076da:	3724      	adds	r7, #36	; 0x24
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <LL_GPIO_SetPinPull>:
{
 80076e4:	b480      	push	{r7}
 80076e6:	b089      	sub	sp, #36	; 0x24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	fa93 f3a3 	rbit	r3, r3
 80076fe:	613b      	str	r3, [r7, #16]
  return result;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	fab3 f383 	clz	r3, r3
 8007706:	b2db      	uxtb	r3, r3
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	2103      	movs	r1, #3
 800770c:	fa01 f303 	lsl.w	r3, r1, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	fa93 f3a3 	rbit	r3, r3
 800771e:	61bb      	str	r3, [r7, #24]
  return result;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	fab3 f383 	clz	r3, r3
 8007726:	b2db      	uxtb	r3, r3
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	fa01 f303 	lsl.w	r3, r1, r3
 8007730:	431a      	orrs	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	60da      	str	r2, [r3, #12]
}
 8007736:	bf00      	nop
 8007738:	3724      	adds	r7, #36	; 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <LL_GPIO_SetAFPin_0_7>:
{
 8007742:	b480      	push	{r7}
 8007744:	b089      	sub	sp, #36	; 0x24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	fa93 f3a3 	rbit	r3, r3
 800775c:	613b      	str	r3, [r7, #16]
  return result;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	fab3 f383 	clz	r3, r3
 8007764:	b2db      	uxtb	r3, r3
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	210f      	movs	r1, #15
 800776a:	fa01 f303 	lsl.w	r3, r1, r3
 800776e:	43db      	mvns	r3, r3
 8007770:	401a      	ands	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	fa93 f3a3 	rbit	r3, r3
 800777c:	61bb      	str	r3, [r7, #24]
  return result;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	fab3 f383 	clz	r3, r3
 8007784:	b2db      	uxtb	r3, r3
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	fa01 f303 	lsl.w	r3, r1, r3
 800778e:	431a      	orrs	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	3724      	adds	r7, #36	; 0x24
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <LL_GPIO_SetAFPin_8_15>:
{
 80077a0:	b480      	push	{r7}
 80077a2:	b089      	sub	sp, #36	; 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	fa93 f3a3 	rbit	r3, r3
 80077bc:	613b      	str	r3, [r7, #16]
  return result;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	fab3 f383 	clz	r3, r3
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	210f      	movs	r1, #15
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	401a      	ands	r2, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	0a1b      	lsrs	r3, r3, #8
 80077d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	fa93 f3a3 	rbit	r3, r3
 80077de:	61bb      	str	r3, [r7, #24]
  return result;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	fab3 f383 	clz	r3, r3
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	fa01 f303 	lsl.w	r3, r1, r3
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80077f6:	bf00      	nop
 80077f8:	3724      	adds	r7, #36	; 0x24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b088      	sub	sp, #32
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	fa93 f3a3 	rbit	r3, r3
 8007820:	613b      	str	r3, [r7, #16]
  return result;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	fab3 f383 	clz	r3, r3
 8007828:	b2db      	uxtb	r3, r3
 800782a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800782c:	e050      	b.n	80078d0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	2101      	movs	r1, #1
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	fa01 f303 	lsl.w	r3, r1, r3
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d042      	beq.n	80078ca <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d003      	beq.n	8007854 <LL_GPIO_Init+0x52>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d10d      	bne.n	8007870 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	461a      	mov	r2, r3
 800785a:	69b9      	ldr	r1, [r7, #24]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff12 	bl	8007686 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	461a      	mov	r2, r3
 8007868:	69b9      	ldr	r1, [r7, #24]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fef3 	bl	8007656 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	461a      	mov	r2, r3
 8007876:	69b9      	ldr	r1, [r7, #24]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ff33 	bl	80076e4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d11a      	bne.n	80078bc <LL_GPIO_Init+0xba>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	fa93 f3a3 	rbit	r3, r3
 8007890:	60bb      	str	r3, [r7, #8]
  return result;
 8007892:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007894:	fab3 f383 	clz	r3, r3
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b07      	cmp	r3, #7
 800789c:	d807      	bhi.n	80078ae <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	461a      	mov	r2, r3
 80078a4:	69b9      	ldr	r1, [r7, #24]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff ff4b 	bl	8007742 <LL_GPIO_SetAFPin_0_7>
 80078ac:	e006      	b.n	80078bc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	461a      	mov	r2, r3
 80078b4:	69b9      	ldr	r1, [r7, #24]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff ff72 	bl	80077a0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	461a      	mov	r2, r3
 80078c2:	69b9      	ldr	r1, [r7, #24]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fe97 	bl	80075f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3301      	adds	r3, #1
 80078ce:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1a7      	bne.n	800782e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3720      	adds	r7, #32
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <LL_RCC_GetSysClkSource+0x18>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f003 030c 	and.w	r3, r3, #12
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800

08007904 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <LL_RCC_GetAHBPrescaler+0x18>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007910:	4618      	mov	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40023800 	.word	0x40023800

08007920 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800792c:	4618      	mov	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40023800 	.word	0x40023800

0800793c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800

08007958 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <LL_RCC_PLL_GetMainSource+0x18>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8007964:	4618      	mov	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800

08007974 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <LL_RCC_PLL_GetN+0x18>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8007982:	4618      	mov	r0, r3
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	40023800 	.word	0x40023800

08007990 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <LL_RCC_PLL_GetP+0x18>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800799c:	4618      	mov	r0, r3
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40023800 	.word	0x40023800

080079ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <LL_RCC_PLL_GetDivider+0x18>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40023800 	.word	0x40023800

080079c8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80079d0:	f000 f820 	bl	8007a14 <RCC_GetSystemClockFreq>
 80079d4:	4602      	mov	r2, r0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f840 	bl	8007a64 <RCC_GetHCLKClockFreq>
 80079e4:	4602      	mov	r2, r0
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f84e 	bl	8007a90 <RCC_GetPCLK1ClockFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f85a 	bl	8007ab8 <RCC_GetPCLK2ClockFreq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60da      	str	r2, [r3, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8007a1e:	f7ff ff63 	bl	80078e8 <LL_RCC_GetSysClkSource>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d00c      	beq.n	8007a42 <RCC_GetSystemClockFreq+0x2e>
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d80f      	bhi.n	8007a4c <RCC_GetSystemClockFreq+0x38>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <RCC_GetSystemClockFreq+0x22>
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d003      	beq.n	8007a3c <RCC_GetSystemClockFreq+0x28>
 8007a34:	e00a      	b.n	8007a4c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007a36:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <RCC_GetSystemClockFreq+0x48>)
 8007a38:	607b      	str	r3, [r7, #4]
      break;
 8007a3a:	e00a      	b.n	8007a52 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <RCC_GetSystemClockFreq+0x4c>)
 8007a3e:	607b      	str	r3, [r7, #4]
      break;
 8007a40:	e007      	b.n	8007a52 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8007a42:	2008      	movs	r0, #8
 8007a44:	f000 f84c 	bl	8007ae0 <RCC_PLL_GetFreqDomain_SYS>
 8007a48:	6078      	str	r0, [r7, #4]
      break;
 8007a4a:	e002      	b.n	8007a52 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <RCC_GetSystemClockFreq+0x48>)
 8007a4e:	607b      	str	r3, [r7, #4]
      break;
 8007a50:	bf00      	nop
  }

  return frequency;
 8007a52:	687b      	ldr	r3, [r7, #4]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	00f42400 	.word	0x00f42400
 8007a60:	017d7840 	.word	0x017d7840

08007a64 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007a6c:	f7ff ff4a 	bl	8007904 <LL_RCC_GetAHBPrescaler>
 8007a70:	4603      	mov	r3, r0
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	4a04      	ldr	r2, [pc, #16]	; (8007a8c <RCC_GetHCLKClockFreq+0x28>)
 8007a7a:	5cd3      	ldrb	r3, [r2, r3]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	40d3      	lsrs	r3, r2
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	0800eb0c 	.word	0x0800eb0c

08007a90 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007a98:	f7ff ff42 	bl	8007920 <LL_RCC_GetAPB1Prescaler>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	0a9b      	lsrs	r3, r3, #10
 8007aa0:	4a04      	ldr	r2, [pc, #16]	; (8007ab4 <RCC_GetPCLK1ClockFreq+0x24>)
 8007aa2:	5cd3      	ldrb	r3, [r2, r3]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	40d3      	lsrs	r3, r2
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	0800eb1c 	.word	0x0800eb1c

08007ab8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007ac0:	f7ff ff3c 	bl	800793c <LL_RCC_GetAPB2Prescaler>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	0b5b      	lsrs	r3, r3, #13
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <RCC_GetPCLK2ClockFreq+0x24>)
 8007aca:	5cd3      	ldrb	r3, [r2, r3]
 8007acc:	461a      	mov	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	40d3      	lsrs	r3, r2
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	0800eb1c 	.word	0x0800eb1c

08007ae0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	2300      	movs	r3, #0
 8007af2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007af4:	f7ff ff30 	bl	8007958 <LL_RCC_PLL_GetMainSource>
 8007af8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b06:	d003      	beq.n	8007b10 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8007b08:	e005      	b.n	8007b16 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007b0c:	617b      	str	r3, [r7, #20]
      break;
 8007b0e:	e005      	b.n	8007b1c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007b10:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007b12:	617b      	str	r3, [r7, #20]
      break;
 8007b14:	e002      	b.n	8007b1c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8007b16:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007b18:	617b      	str	r3, [r7, #20]
      break;
 8007b1a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d113      	bne.n	8007b4a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007b22:	f7ff ff43 	bl	80079ac <LL_RCC_PLL_GetDivider>
 8007b26:	4602      	mov	r2, r0
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	fbb3 f4f2 	udiv	r4, r3, r2
 8007b2e:	f7ff ff21 	bl	8007974 <LL_RCC_PLL_GetN>
 8007b32:	4603      	mov	r3, r0
 8007b34:	fb03 f404 	mul.w	r4, r3, r4
 8007b38:	f7ff ff2a 	bl	8007990 <LL_RCC_PLL_GetP>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	0c1b      	lsrs	r3, r3, #16
 8007b40:	3301      	adds	r3, #1
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	fbb4 f3f3 	udiv	r3, r4, r3
 8007b48:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007b4a:	693b      	ldr	r3, [r7, #16]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	371c      	adds	r7, #28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd90      	pop	{r4, r7, pc}
 8007b54:	00f42400 	.word	0x00f42400
 8007b58:	017d7840 	.word	0x017d7840

08007b5c <LL_TIM_SetPrescaler>:
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <LL_TIM_SetAutoReload>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <LL_TIM_SetRepetitionCounter>:
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f043 0201 	orr.w	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	615a      	str	r2, [r3, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a31      	ldr	r2, [pc, #196]	; (8007ca8 <LL_TIM_Init+0xd8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00f      	beq.n	8007c08 <LL_TIM_Init+0x38>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d00b      	beq.n	8007c08 <LL_TIM_Init+0x38>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a2e      	ldr	r2, [pc, #184]	; (8007cac <LL_TIM_Init+0xdc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d007      	beq.n	8007c08 <LL_TIM_Init+0x38>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a2d      	ldr	r2, [pc, #180]	; (8007cb0 <LL_TIM_Init+0xe0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <LL_TIM_Init+0x38>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a2c      	ldr	r2, [pc, #176]	; (8007cb4 <LL_TIM_Init+0xe4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d106      	bne.n	8007c16 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a23      	ldr	r2, [pc, #140]	; (8007ca8 <LL_TIM_Init+0xd8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01b      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c24:	d017      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a20      	ldr	r2, [pc, #128]	; (8007cac <LL_TIM_Init+0xdc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a1f      	ldr	r2, [pc, #124]	; (8007cb0 <LL_TIM_Init+0xe0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00f      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <LL_TIM_Init+0xe4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00b      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <LL_TIM_Init+0xe8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <LL_TIM_Init+0xec>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <LL_TIM_Init+0x86>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <LL_TIM_Init+0xf0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d106      	bne.n	8007c64 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff81 	bl	8007b78 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff ff6d 	bl	8007b5c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a08      	ldr	r2, [pc, #32]	; (8007ca8 <LL_TIM_Init+0xd8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d105      	bne.n	8007c96 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff ff7f 	bl	8007b94 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff ff8a 	bl	8007bb0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	40014400 	.word	0x40014400
 8007cc0:	40014800 	.word	0x40014800

08007cc4 <LL_USART_IsEnabled>:
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd8:	bf0c      	ite	eq
 8007cda:	2301      	moveq	r3, #1
 8007cdc:	2300      	movne	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <LL_USART_SetStopBitsLength>:
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	611a      	str	r2, [r3, #16]
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <LL_USART_SetHWFlowCtrl>:
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	615a      	str	r2, [r3, #20]
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <LL_USART_SetBaudRate>:
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b0c0      	sub	sp, #256	; 0x100
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d44:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8007d48:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d58:	f040 810c 	bne.w	8007f74 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007d5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	1891      	adds	r1, r2, r2
 8007d74:	6639      	str	r1, [r7, #96]	; 0x60
 8007d76:	415b      	adcs	r3, r3
 8007d78:	667b      	str	r3, [r7, #100]	; 0x64
 8007d7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007d7e:	4621      	mov	r1, r4
 8007d80:	eb12 0801 	adds.w	r8, r2, r1
 8007d84:	4629      	mov	r1, r5
 8007d86:	eb43 0901 	adc.w	r9, r3, r1
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d9e:	4690      	mov	r8, r2
 8007da0:	4699      	mov	r9, r3
 8007da2:	4623      	mov	r3, r4
 8007da4:	eb18 0303 	adds.w	r3, r8, r3
 8007da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dac:	462b      	mov	r3, r5
 8007dae:	eb49 0303 	adc.w	r3, r9, r3
 8007db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007db6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007dba:	2200      	movs	r2, #0
 8007dbc:	469a      	mov	sl, r3
 8007dbe:	4693      	mov	fp, r2
 8007dc0:	eb1a 030a 	adds.w	r3, sl, sl
 8007dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dc6:	eb4b 030b 	adc.w	r3, fp, fp
 8007dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dd4:	f7f8 fa5c 	bl	8000290 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4b64      	ldr	r3, [pc, #400]	; (8007f70 <LL_USART_SetBaudRate+0x238>)
 8007dde:	fba3 2302 	umull	r2, r3, r3, r2
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	b29c      	uxth	r4, r3
 8007dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007df4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007df8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	1891      	adds	r1, r2, r2
 8007e02:	6539      	str	r1, [r7, #80]	; 0x50
 8007e04:	415b      	adcs	r3, r3
 8007e06:	657b      	str	r3, [r7, #84]	; 0x54
 8007e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	1851      	adds	r1, r2, r1
 8007e10:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e12:	4649      	mov	r1, r9
 8007e14:	414b      	adcs	r3, r1
 8007e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8007e24:	4659      	mov	r1, fp
 8007e26:	00cb      	lsls	r3, r1, #3
 8007e28:	4651      	mov	r1, sl
 8007e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e2e:	4651      	mov	r1, sl
 8007e30:	00ca      	lsls	r2, r1, #3
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	4642      	mov	r2, r8
 8007e3a:	189b      	adds	r3, r3, r2
 8007e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e40:	464b      	mov	r3, r9
 8007e42:	460a      	mov	r2, r1
 8007e44:	eb42 0303 	adc.w	r3, r2, r3
 8007e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e56:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8007e5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007e5e:	460b      	mov	r3, r1
 8007e60:	18db      	adds	r3, r3, r3
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
 8007e64:	4613      	mov	r3, r2
 8007e66:	eb42 0303 	adc.w	r3, r2, r3
 8007e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e70:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007e74:	f7f8 fa0c 	bl	8000290 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4b3c      	ldr	r3, [pc, #240]	; (8007f70 <LL_USART_SetBaudRate+0x238>)
 8007e80:	fba3 2301 	umull	r2, r3, r3, r1
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	2264      	movs	r2, #100	; 0x64
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	1acb      	subs	r3, r1, r3
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e94:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <LL_USART_SetBaudRate+0x238>)
 8007e96:	fba3 2302 	umull	r2, r3, r3, r2
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4423      	add	r3, r4
 8007eaa:	b29c      	uxth	r4, r3
 8007eac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eb6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007eba:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	1891      	adds	r1, r2, r2
 8007ec4:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ec6:	415b      	adcs	r3, r3
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ece:	4641      	mov	r1, r8
 8007ed0:	1851      	adds	r1, r2, r1
 8007ed2:	6339      	str	r1, [r7, #48]	; 0x30
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	414b      	adcs	r3, r1
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eda:	f04f 0200 	mov.w	r2, #0
 8007ede:	f04f 0300 	mov.w	r3, #0
 8007ee2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ee6:	4659      	mov	r1, fp
 8007ee8:	00cb      	lsls	r3, r1, #3
 8007eea:	4651      	mov	r1, sl
 8007eec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ef0:	4651      	mov	r1, sl
 8007ef2:	00ca      	lsls	r2, r1, #3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4642      	mov	r2, r8
 8007efc:	189b      	adds	r3, r3, r2
 8007efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f02:	464b      	mov	r3, r9
 8007f04:	460a      	mov	r2, r1
 8007f06:	eb42 0303 	adc.w	r3, r2, r3
 8007f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f18:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8007f1c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007f20:	460b      	mov	r3, r1
 8007f22:	18db      	adds	r3, r3, r3
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f26:	4613      	mov	r3, r2
 8007f28:	eb42 0303 	adc.w	r3, r2, r3
 8007f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f32:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007f36:	f7f8 f9ab 	bl	8000290 <__aeabi_uldivmod>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <LL_USART_SetBaudRate+0x238>)
 8007f40:	fba3 1302 	umull	r1, r3, r3, r2
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	2164      	movs	r1, #100	; 0x64
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	3332      	adds	r3, #50	; 0x32
 8007f52:	4a07      	ldr	r2, [pc, #28]	; (8007f70 <LL_USART_SetBaudRate+0x238>)
 8007f54:	fba2 2303 	umull	r2, r3, r2, r3
 8007f58:	095b      	lsrs	r3, r3, #5
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4423      	add	r3, r4
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6c:	609a      	str	r2, [r3, #8]
}
 8007f6e:	e108      	b.n	8008182 <LL_USART_SetBaudRate+0x44a>
 8007f70:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007f74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f7e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f82:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8007f86:	4642      	mov	r2, r8
 8007f88:	464b      	mov	r3, r9
 8007f8a:	1891      	adds	r1, r2, r2
 8007f8c:	6239      	str	r1, [r7, #32]
 8007f8e:	415b      	adcs	r3, r3
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
 8007f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f96:	4641      	mov	r1, r8
 8007f98:	1854      	adds	r4, r2, r1
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	eb43 0501 	adc.w	r5, r3, r1
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	00eb      	lsls	r3, r5, #3
 8007faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fae:	00e2      	lsls	r2, r4, #3
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	4643      	mov	r3, r8
 8007fb6:	18e3      	adds	r3, r4, r3
 8007fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fbc:	464b      	mov	r3, r9
 8007fbe:	eb45 0303 	adc.w	r3, r5, r3
 8007fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	008b      	lsls	r3, r1, #2
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fea:	4621      	mov	r1, r4
 8007fec:	008a      	lsls	r2, r1, #2
 8007fee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007ff2:	f7f8 f94d 	bl	8000290 <__aeabi_uldivmod>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4b65      	ldr	r3, [pc, #404]	; (8008190 <LL_USART_SetBaudRate+0x458>)
 8007ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	b29b      	uxth	r3, r3
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	b29c      	uxth	r4, r3
 8008008:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800800c:	2200      	movs	r2, #0
 800800e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008016:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800801a:	4642      	mov	r2, r8
 800801c:	464b      	mov	r3, r9
 800801e:	1891      	adds	r1, r2, r2
 8008020:	61b9      	str	r1, [r7, #24]
 8008022:	415b      	adcs	r3, r3
 8008024:	61fb      	str	r3, [r7, #28]
 8008026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800802a:	4641      	mov	r1, r8
 800802c:	1851      	adds	r1, r2, r1
 800802e:	6139      	str	r1, [r7, #16]
 8008030:	4649      	mov	r1, r9
 8008032:	414b      	adcs	r3, r1
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008042:	4659      	mov	r1, fp
 8008044:	00cb      	lsls	r3, r1, #3
 8008046:	4651      	mov	r1, sl
 8008048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800804c:	4651      	mov	r1, sl
 800804e:	00ca      	lsls	r2, r1, #3
 8008050:	4610      	mov	r0, r2
 8008052:	4619      	mov	r1, r3
 8008054:	4603      	mov	r3, r0
 8008056:	4642      	mov	r2, r8
 8008058:	189b      	adds	r3, r3, r2
 800805a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800805e:	464b      	mov	r3, r9
 8008060:	460a      	mov	r2, r1
 8008062:	eb42 0303 	adc.w	r3, r2, r3
 8008066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800806a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800806e:	2200      	movs	r2, #0
 8008070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008074:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8008084:	4649      	mov	r1, r9
 8008086:	008b      	lsls	r3, r1, #2
 8008088:	4641      	mov	r1, r8
 800808a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800808e:	4641      	mov	r1, r8
 8008090:	008a      	lsls	r2, r1, #2
 8008092:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008096:	f7f8 f8fb 	bl	8000290 <__aeabi_uldivmod>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	4b3b      	ldr	r3, [pc, #236]	; (8008190 <LL_USART_SetBaudRate+0x458>)
 80080a2:	fba3 2301 	umull	r2, r3, r3, r1
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	2264      	movs	r2, #100	; 0x64
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	1acb      	subs	r3, r1, r3
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	3332      	adds	r3, #50	; 0x32
 80080b4:	4a36      	ldr	r2, [pc, #216]	; (8008190 <LL_USART_SetBaudRate+0x458>)
 80080b6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4423      	add	r3, r4
 80080c6:	b29c      	uxth	r4, r3
 80080c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080cc:	2200      	movs	r2, #0
 80080ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80080d0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080d2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080d6:	4642      	mov	r2, r8
 80080d8:	464b      	mov	r3, r9
 80080da:	1891      	adds	r1, r2, r2
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	415b      	adcs	r3, r3
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080e6:	4641      	mov	r1, r8
 80080e8:	1851      	adds	r1, r2, r1
 80080ea:	6039      	str	r1, [r7, #0]
 80080ec:	4649      	mov	r1, r9
 80080ee:	414b      	adcs	r3, r1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080fe:	4659      	mov	r1, fp
 8008100:	00cb      	lsls	r3, r1, #3
 8008102:	4651      	mov	r1, sl
 8008104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008108:	4651      	mov	r1, sl
 800810a:	00ca      	lsls	r2, r1, #3
 800810c:	4610      	mov	r0, r2
 800810e:	4619      	mov	r1, r3
 8008110:	4603      	mov	r3, r0
 8008112:	4642      	mov	r2, r8
 8008114:	189b      	adds	r3, r3, r2
 8008116:	673b      	str	r3, [r7, #112]	; 0x70
 8008118:	464b      	mov	r3, r9
 800811a:	460a      	mov	r2, r1
 800811c:	eb42 0303 	adc.w	r3, r2, r3
 8008120:	677b      	str	r3, [r7, #116]	; 0x74
 8008122:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008126:	2200      	movs	r2, #0
 8008128:	66bb      	str	r3, [r7, #104]	; 0x68
 800812a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8008138:	4649      	mov	r1, r9
 800813a:	008b      	lsls	r3, r1, #2
 800813c:	4641      	mov	r1, r8
 800813e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008142:	4641      	mov	r1, r8
 8008144:	008a      	lsls	r2, r1, #2
 8008146:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800814a:	f7f8 f8a1 	bl	8000290 <__aeabi_uldivmod>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <LL_USART_SetBaudRate+0x458>)
 8008154:	fba3 1302 	umull	r1, r3, r3, r2
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	2164      	movs	r1, #100	; 0x64
 800815c:	fb01 f303 	mul.w	r3, r1, r3
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	3332      	adds	r3, #50	; 0x32
 8008166:	4a0a      	ldr	r2, [pc, #40]	; (8008190 <LL_USART_SetBaudRate+0x458>)
 8008168:	fba2 2303 	umull	r2, r3, r2, r3
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	b29b      	uxth	r3, r3
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	b29b      	uxth	r3, r3
 8008176:	4423      	add	r3, r4
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008180:	609a      	str	r2, [r3, #8]
}
 8008182:	bf00      	nop
 8008184:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008188:	46bd      	mov	sp, r7
 800818a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800818e:	bf00      	nop
 8008190:	51eb851f 	.word	0x51eb851f

08008194 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fd8c 	bl	8007cc4 <LL_USART_IsEnabled>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d149      	bne.n	8008246 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80081ba:	f023 030c 	bic.w	r3, r3, #12
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	6851      	ldr	r1, [r2, #4]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68d2      	ldr	r2, [r2, #12]
 80081c6:	4311      	orrs	r1, r2
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	6912      	ldr	r2, [r2, #16]
 80081cc:	4311      	orrs	r1, r2
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	6992      	ldr	r2, [r2, #24]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fd83 	bl	8007cec <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fd90 	bl	8007d12 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff fbe6 	bl	80079c8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a14      	ldr	r2, [pc, #80]	; (8008250 <LL_USART_Init+0xbc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d102      	bne.n	800820a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	e00c      	b.n	8008224 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a11      	ldr	r2, [pc, #68]	; (8008254 <LL_USART_Init+0xc0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d102      	bne.n	8008218 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	61bb      	str	r3, [r7, #24]
 8008216:	e005      	b.n	8008224 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a0f      	ldr	r2, [pc, #60]	; (8008258 <LL_USART_Init+0xc4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d101      	bne.n	8008224 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00d      	beq.n	8008246 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8008232:	2300      	movs	r3, #0
 8008234:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69b9      	ldr	r1, [r7, #24]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff fd79 	bl	8007d38 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8008246:	7ffb      	ldrb	r3, [r7, #31]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40011000 	.word	0x40011000
 8008254:	40004400 	.word	0x40004400
 8008258:	40011400 	.word	0x40011400

0800825c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800825c:	b084      	sub	sp, #16
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	f107 001c 	add.w	r0, r7, #28
 800826a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b01      	cmp	r3, #1
 8008272:	d122      	bne.n	80082ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800829c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d105      	bne.n	80082ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fbee 	bl	8009a90 <USB_CoreReset>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73fb      	strb	r3, [r7, #15]
 80082b8:	e01a      	b.n	80082f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fbe2 	bl	8009a90 <USB_CoreReset>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
 80082e2:	e005      	b.n	80082f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10b      	bne.n	800830e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f043 0206 	orr.w	r2, r3, #6
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f043 0220 	orr.w	r2, r3, #32
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800831a:	b004      	add	sp, #16
 800831c:	4770      	bx	lr
	...

08008320 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	4613      	mov	r3, r2
 800832c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d165      	bne.n	8008400 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4a41      	ldr	r2, [pc, #260]	; (800843c <USB_SetTurnaroundTime+0x11c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d906      	bls.n	800834a <USB_SetTurnaroundTime+0x2a>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4a40      	ldr	r2, [pc, #256]	; (8008440 <USB_SetTurnaroundTime+0x120>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d202      	bcs.n	800834a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008344:	230f      	movs	r3, #15
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	e062      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	4a3c      	ldr	r2, [pc, #240]	; (8008440 <USB_SetTurnaroundTime+0x120>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d306      	bcc.n	8008360 <USB_SetTurnaroundTime+0x40>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4a3b      	ldr	r2, [pc, #236]	; (8008444 <USB_SetTurnaroundTime+0x124>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d202      	bcs.n	8008360 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800835a:	230e      	movs	r3, #14
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e057      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4a38      	ldr	r2, [pc, #224]	; (8008444 <USB_SetTurnaroundTime+0x124>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d306      	bcc.n	8008376 <USB_SetTurnaroundTime+0x56>
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4a37      	ldr	r2, [pc, #220]	; (8008448 <USB_SetTurnaroundTime+0x128>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d202      	bcs.n	8008376 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008370:	230d      	movs	r3, #13
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e04c      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4a33      	ldr	r2, [pc, #204]	; (8008448 <USB_SetTurnaroundTime+0x128>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d306      	bcc.n	800838c <USB_SetTurnaroundTime+0x6c>
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4a32      	ldr	r2, [pc, #200]	; (800844c <USB_SetTurnaroundTime+0x12c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d802      	bhi.n	800838c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008386:	230c      	movs	r3, #12
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	e041      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4a2f      	ldr	r2, [pc, #188]	; (800844c <USB_SetTurnaroundTime+0x12c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d906      	bls.n	80083a2 <USB_SetTurnaroundTime+0x82>
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4a2e      	ldr	r2, [pc, #184]	; (8008450 <USB_SetTurnaroundTime+0x130>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d802      	bhi.n	80083a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800839c:	230b      	movs	r3, #11
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	e036      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4a2a      	ldr	r2, [pc, #168]	; (8008450 <USB_SetTurnaroundTime+0x130>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d906      	bls.n	80083b8 <USB_SetTurnaroundTime+0x98>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4a29      	ldr	r2, [pc, #164]	; (8008454 <USB_SetTurnaroundTime+0x134>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d802      	bhi.n	80083b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083b2:	230a      	movs	r3, #10
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e02b      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4a26      	ldr	r2, [pc, #152]	; (8008454 <USB_SetTurnaroundTime+0x134>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d906      	bls.n	80083ce <USB_SetTurnaroundTime+0xae>
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4a25      	ldr	r2, [pc, #148]	; (8008458 <USB_SetTurnaroundTime+0x138>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d202      	bcs.n	80083ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083c8:	2309      	movs	r3, #9
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e020      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a21      	ldr	r2, [pc, #132]	; (8008458 <USB_SetTurnaroundTime+0x138>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d306      	bcc.n	80083e4 <USB_SetTurnaroundTime+0xc4>
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4a20      	ldr	r2, [pc, #128]	; (800845c <USB_SetTurnaroundTime+0x13c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d802      	bhi.n	80083e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083de:	2308      	movs	r3, #8
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e015      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4a1d      	ldr	r2, [pc, #116]	; (800845c <USB_SetTurnaroundTime+0x13c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d906      	bls.n	80083fa <USB_SetTurnaroundTime+0xda>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4a1c      	ldr	r2, [pc, #112]	; (8008460 <USB_SetTurnaroundTime+0x140>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d202      	bcs.n	80083fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80083f4:	2307      	movs	r3, #7
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	e00a      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80083fa:	2306      	movs	r3, #6
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e007      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008406:	2309      	movs	r3, #9
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e001      	b.n	8008410 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800840c:	2309      	movs	r3, #9
 800840e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	029b      	lsls	r3, r3, #10
 8008424:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008428:	431a      	orrs	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	00d8acbf 	.word	0x00d8acbf
 8008440:	00e4e1c0 	.word	0x00e4e1c0
 8008444:	00f42400 	.word	0x00f42400
 8008448:	01067380 	.word	0x01067380
 800844c:	011a499f 	.word	0x011a499f
 8008450:	01312cff 	.word	0x01312cff
 8008454:	014ca43f 	.word	0x014ca43f
 8008458:	016e3600 	.word	0x016e3600
 800845c:	01a6ab1f 	.word	0x01a6ab1f
 8008460:	01e84800 	.word	0x01e84800

08008464 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f043 0201 	orr.w	r2, r3, #1
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d115      	bne.n	80084f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084d6:	2001      	movs	r0, #1
 80084d8:	f7fb fb66 	bl	8003ba8 <HAL_Delay>
      ms++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fa45 	bl	8009972 <USB_GetMode>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d01e      	beq.n	800852c <USB_SetCurrentMode+0x84>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b31      	cmp	r3, #49	; 0x31
 80084f2:	d9f0      	bls.n	80084d6 <USB_SetCurrentMode+0x2e>
 80084f4:	e01a      	b.n	800852c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d115      	bne.n	8008528 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008508:	2001      	movs	r0, #1
 800850a:	f7fb fb4d 	bl	8003ba8 <HAL_Delay>
      ms++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fa2c 	bl	8009972 <USB_GetMode>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <USB_SetCurrentMode+0x84>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b31      	cmp	r3, #49	; 0x31
 8008524:	d9f0      	bls.n	8008508 <USB_SetCurrentMode+0x60>
 8008526:	e001      	b.n	800852c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e005      	b.n	8008538 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b32      	cmp	r3, #50	; 0x32
 8008530:	d101      	bne.n	8008536 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008540:	b084      	sub	sp, #16
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800854e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	e009      	b.n	8008574 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3340      	adds	r3, #64	; 0x40
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	3301      	adds	r3, #1
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2b0e      	cmp	r3, #14
 8008578:	d9f2      	bls.n	8008560 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11c      	bne.n	80085ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858e:	f043 0302 	orr.w	r3, r3, #2
 8008592:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
 80085b8:	e00b      	b.n	80085d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085d8:	461a      	mov	r2, r3
 80085da:	2300      	movs	r3, #0
 80085dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e4:	4619      	mov	r1, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ec:	461a      	mov	r2, r3
 80085ee:	680b      	ldr	r3, [r1, #0]
 80085f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d10c      	bne.n	8008612 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d104      	bne.n	8008608 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80085fe:	2100      	movs	r1, #0
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f965 	bl	80088d0 <USB_SetDevSpeed>
 8008606:	e008      	b.n	800861a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008608:	2101      	movs	r1, #1
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f960 	bl	80088d0 <USB_SetDevSpeed>
 8008610:	e003      	b.n	800861a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008612:	2103      	movs	r1, #3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f95b 	bl	80088d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800861a:	2110      	movs	r1, #16
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8f3 	bl	8008808 <USB_FlushTxFifo>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f91f 	bl	8008870 <USB_FlushRxFifo>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008642:	461a      	mov	r2, r3
 8008644:	2300      	movs	r3, #0
 8008646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864e:	461a      	mov	r2, r3
 8008650:	2300      	movs	r3, #0
 8008652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865a:	461a      	mov	r2, r3
 800865c:	2300      	movs	r3, #0
 800865e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008660:	2300      	movs	r3, #0
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	e043      	b.n	80086ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867c:	d118      	bne.n	80086b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	461a      	mov	r2, r3
 8008692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	e013      	b.n	80086c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	461a      	mov	r2, r3
 80086a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e008      	b.n	80086c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086bc:	461a      	mov	r2, r3
 80086be:	2300      	movs	r3, #0
 80086c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	461a      	mov	r2, r3
 80086d0:	2300      	movs	r3, #0
 80086d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e0:	461a      	mov	r2, r3
 80086e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	3301      	adds	r3, #1
 80086ec:	613b      	str	r3, [r7, #16]
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d3b7      	bcc.n	8008666 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	e043      	b.n	8008784 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800870e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008712:	d118      	bne.n	8008746 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008726:	461a      	mov	r2, r3
 8008728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	e013      	b.n	8008758 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873c:	461a      	mov	r2, r3
 800873e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e008      	b.n	8008758 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008752:	461a      	mov	r2, r3
 8008754:	2300      	movs	r3, #0
 8008756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008764:	461a      	mov	r2, r3
 8008766:	2300      	movs	r3, #0
 8008768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008776:	461a      	mov	r2, r3
 8008778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800877c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	3301      	adds	r3, #1
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	429a      	cmp	r2, r3
 800878a:	d3b7      	bcc.n	80086fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800879a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800879e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	f043 0210 	orr.w	r2, r3, #16
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	4b0f      	ldr	r3, [pc, #60]	; (8008804 <USB_DevInit+0x2c4>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	f043 0208 	orr.w	r2, r3, #8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d107      	bne.n	80087f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087ec:	f043 0304 	orr.w	r3, r3, #4
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008800:	b004      	add	sp, #16
 8008802:	4770      	bx	lr
 8008804:	803c3800 	.word	0x803c3800

08008808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a13      	ldr	r2, [pc, #76]	; (800886c <USB_FlushTxFifo+0x64>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d901      	bls.n	8008828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e01b      	b.n	8008860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	daf2      	bge.n	8008816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	019b      	lsls	r3, r3, #6
 8008838:	f043 0220 	orr.w	r2, r3, #32
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4a08      	ldr	r2, [pc, #32]	; (800886c <USB_FlushTxFifo+0x64>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d901      	bls.n	8008852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e006      	b.n	8008860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b20      	cmp	r3, #32
 800885c:	d0f0      	beq.n	8008840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	00030d40 	.word	0x00030d40

08008870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4a11      	ldr	r2, [pc, #68]	; (80088cc <USB_FlushRxFifo+0x5c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d901      	bls.n	800888e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e018      	b.n	80088c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	daf2      	bge.n	800887c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2210      	movs	r2, #16
 800889e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4a08      	ldr	r2, [pc, #32]	; (80088cc <USB_FlushRxFifo+0x5c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d901      	bls.n	80088b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e006      	b.n	80088c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d0f0      	beq.n	80088a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	00030d40 	.word	0x00030d40

080088d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	68f9      	ldr	r1, [r7, #12]
 80088ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088f0:	4313      	orrs	r3, r2
 80088f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008902:	b480      	push	{r7}
 8008904:	b087      	sub	sp, #28
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0306 	and.w	r3, r3, #6
 800891a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
 8008926:	e00a      	b.n	800893e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d002      	beq.n	8008934 <USB_GetDevSpeed+0x32>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b06      	cmp	r3, #6
 8008932:	d102      	bne.n	800893a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008934:	2302      	movs	r3, #2
 8008936:	75fb      	strb	r3, [r7, #23]
 8008938:	e001      	b.n	800893e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800893a:	230f      	movs	r3, #15
 800893c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008940:	4618      	mov	r0, r3
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d13a      	bne.n	80089de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f303 	lsl.w	r3, r1, r3
 800897e:	b29b      	uxth	r3, r3
 8008980:	68f9      	ldr	r1, [r7, #12]
 8008982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008986:	4313      	orrs	r3, r2
 8008988:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4413      	add	r3, r2
 8008992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d155      	bne.n	8008a4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	791b      	ldrb	r3, [r3, #4]
 80089ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	059b      	lsls	r3, r3, #22
 80089c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089c4:	4313      	orrs	r3, r2
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e036      	b.n	8008a4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e4:	69da      	ldr	r2, [r3, #28]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	2101      	movs	r1, #1
 80089f0:	fa01 f303 	lsl.w	r3, r1, r3
 80089f4:	041b      	lsls	r3, r3, #16
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d11a      	bne.n	8008a4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	791b      	ldrb	r3, [r3, #4]
 8008a30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a32:	430b      	orrs	r3, r1
 8008a34:	4313      	orrs	r3, r2
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d161      	bne.n	8008b3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a8e:	d11f      	bne.n	8008ad0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	0151      	lsls	r1, r2, #5
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	440a      	add	r2, r1
 8008aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ace:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	43db      	mvns	r3, r3
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008af0:	4013      	ands	r3, r2
 8008af2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	2101      	movs	r1, #1
 8008b06:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b14:	4013      	ands	r3, r2
 8008b16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	0159      	lsls	r1, r3, #5
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	440b      	add	r3, r1
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	4619      	mov	r1, r3
 8008b34:	4b35      	ldr	r3, [pc, #212]	; (8008c0c <USB_DeactivateEndpoint+0x1b0>)
 8008b36:	4013      	ands	r3, r2
 8008b38:	600b      	str	r3, [r1, #0]
 8008b3a:	e060      	b.n	8008bfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b52:	d11f      	bne.n	8008b94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	0151      	lsls	r1, r2, #5
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	440a      	add	r2, r1
 8008b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	0151      	lsls	r1, r2, #5
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	440a      	add	r2, r1
 8008b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8008baa:	041b      	lsls	r3, r3, #16
 8008bac:	43db      	mvns	r3, r3
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	69da      	ldr	r2, [r3, #28]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	2101      	movs	r1, #1
 8008bca:	fa01 f303 	lsl.w	r3, r1, r3
 8008bce:	041b      	lsls	r3, r3, #16
 8008bd0:	43db      	mvns	r3, r3
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd8:	4013      	ands	r3, r2
 8008bda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	0159      	lsls	r1, r3, #5
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	440b      	add	r3, r1
 8008bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <USB_DeactivateEndpoint+0x1b4>)
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	ec337800 	.word	0xec337800
 8008c10:	eff37800 	.word	0xeff37800

08008c14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	; 0x28
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	f040 815c 	bne.w	8008eee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d132      	bne.n	8008ca4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	0151      	lsls	r1, r2, #5
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	440a      	add	r2, r1
 8008c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9c:	0cdb      	lsrs	r3, r3, #19
 8008c9e:	04db      	lsls	r3, r3, #19
 8008ca0:	6113      	str	r3, [r2, #16]
 8008ca2:	e074      	b.n	8008d8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	0151      	lsls	r1, r2, #5
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	440a      	add	r2, r1
 8008cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbe:	0cdb      	lsrs	r3, r3, #19
 8008cc0:	04db      	lsls	r3, r3, #19
 8008cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ce2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6999      	ldr	r1, [r3, #24]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	440b      	add	r3, r1
 8008d00:	1e59      	subs	r1, r3, #1
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d0c:	4b9d      	ldr	r3, [pc, #628]	; (8008f84 <USB_EPStartXfer+0x370>)
 8008d0e:	400b      	ands	r3, r1
 8008d10:	69b9      	ldr	r1, [r7, #24]
 8008d12:	0148      	lsls	r0, r1, #5
 8008d14:	69f9      	ldr	r1, [r7, #28]
 8008d16:	4401      	add	r1, r0
 8008d18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d36:	69b9      	ldr	r1, [r7, #24]
 8008d38:	0148      	lsls	r0, r1, #5
 8008d3a:	69f9      	ldr	r1, [r7, #28]
 8008d3c:	4401      	add	r1, r0
 8008d3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d42:	4313      	orrs	r3, r2
 8008d44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	791b      	ldrb	r3, [r3, #4]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d11f      	bne.n	8008d8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	0151      	lsls	r1, r2, #5
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	440a      	add	r2, r1
 8008d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008d6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d14b      	bne.n	8008e2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d009      	beq.n	8008db0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	461a      	mov	r2, r3
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	791b      	ldrb	r3, [r3, #4]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d128      	bne.n	8008e0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d110      	bne.n	8008dea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	e00f      	b.n	8008e0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	0151      	lsls	r1, r2, #5
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	0151      	lsls	r1, r2, #5
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	440a      	add	r2, r1
 8008e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	e133      	b.n	8009094 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	791b      	ldrb	r3, [r3, #4]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d015      	beq.n	8008e80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 811b 	beq.w	8009094 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	f003 030f 	and.w	r3, r3, #15
 8008e6e:	2101      	movs	r1, #1
 8008e70:	fa01 f303 	lsl.w	r3, r1, r3
 8008e74:	69f9      	ldr	r1, [r7, #28]
 8008e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	634b      	str	r3, [r1, #52]	; 0x34
 8008e7e:	e109      	b.n	8009094 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d110      	bne.n	8008eb2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	e00f      	b.n	8008ed2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6919      	ldr	r1, [r3, #16]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	b298      	uxth	r0, r3
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fade 	bl	80094a8 <USB_WritePacket>
 8008eec:	e0d2      	b.n	8009094 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f08:	0cdb      	lsrs	r3, r3, #19
 8008f0a:	04db      	lsls	r3, r3, #19
 8008f0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d126      	bne.n	8008f88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f50:	69b9      	ldr	r1, [r7, #24]
 8008f52:	0148      	lsls	r0, r1, #5
 8008f54:	69f9      	ldr	r1, [r7, #28]
 8008f56:	4401      	add	r1, r0
 8008f58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f7e:	6113      	str	r3, [r2, #16]
 8008f80:	e03a      	b.n	8008ff8 <USB_EPStartXfer+0x3e4>
 8008f82:	bf00      	nop
 8008f84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	699a      	ldr	r2, [r3, #24]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	1e5a      	subs	r2, r3, #1
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	8afa      	ldrh	r2, [r7, #22]
 8008fa4:	fb03 f202 	mul.w	r2, r3, r2
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	8afb      	ldrh	r3, [r7, #22]
 8008fbc:	04d9      	lsls	r1, r3, #19
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <USB_EPStartXfer+0x48c>)
 8008fc0:	400b      	ands	r3, r1
 8008fc2:	69b9      	ldr	r1, [r7, #24]
 8008fc4:	0148      	lsls	r0, r1, #5
 8008fc6:	69f9      	ldr	r1, [r7, #28]
 8008fc8:	4401      	add	r1, r0
 8008fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe8:	69b9      	ldr	r1, [r7, #24]
 8008fea:	0148      	lsls	r0, r1, #5
 8008fec:	69f9      	ldr	r1, [r7, #28]
 8008fee:	4401      	add	r1, r0
 8008ff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d10d      	bne.n	800901a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6919      	ldr	r1, [r3, #16]
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009016:	460a      	mov	r2, r1
 8009018:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	791b      	ldrb	r3, [r3, #4]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d128      	bne.n	8009074 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d110      	bne.n	8009054 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	0151      	lsls	r1, r2, #5
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	440a      	add	r2, r1
 8009048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800904c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	e00f      	b.n	8009074 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	440a      	add	r2, r1
 800906a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009072:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	440a      	add	r2, r1
 800908a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800908e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009092:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	1ff80000 	.word	0x1ff80000

080090a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	f040 80ce 	bne.w	8009262 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d132      	bne.n	8009134 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	0151      	lsls	r1, r2, #5
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	440a      	add	r2, r1
 80090e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	440a      	add	r2, r1
 8009128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912c:	0cdb      	lsrs	r3, r3, #19
 800912e:	04db      	lsls	r3, r3, #19
 8009130:	6113      	str	r3, [r2, #16]
 8009132:	e04e      	b.n	80091d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	0151      	lsls	r1, r2, #5
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	440a      	add	r2, r1
 800914a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914e:	0cdb      	lsrs	r3, r3, #19
 8009150:	04db      	lsls	r3, r3, #19
 8009152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	0151      	lsls	r1, r2, #5
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	440a      	add	r2, r1
 800916a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009176:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	429a      	cmp	r2, r3
 8009182:	d903      	bls.n	800918c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091c2:	6939      	ldr	r1, [r7, #16]
 80091c4:	0148      	lsls	r0, r1, #5
 80091c6:	6979      	ldr	r1, [r7, #20]
 80091c8:	4401      	add	r1, r0
 80091ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091ce:	4313      	orrs	r3, r2
 80091d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d11e      	bne.n	8009216 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ec:	461a      	mov	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	440a      	add	r2, r1
 800920a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	e097      	b.n	8009346 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009234:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8083 	beq.w	8009346 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	2101      	movs	r1, #1
 8009252:	fa01 f303 	lsl.w	r3, r1, r3
 8009256:	6979      	ldr	r1, [r7, #20]
 8009258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800925c:	4313      	orrs	r3, r2
 800925e:	634b      	str	r3, [r1, #52]	; 0x34
 8009260:	e071      	b.n	8009346 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	440a      	add	r2, r1
 8009278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927c:	0cdb      	lsrs	r3, r3, #19
 800927e:	04db      	lsls	r3, r3, #19
 8009280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f4:	6939      	ldr	r1, [r7, #16]
 80092f6:	0148      	lsls	r0, r1, #5
 80092f8:	6979      	ldr	r1, [r7, #20]
 80092fa:	4401      	add	r1, r0
 80092fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009300:	4313      	orrs	r3, r2
 8009302:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d10d      	bne.n	8009326 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6919      	ldr	r1, [r3, #16]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009322:	460a      	mov	r2, r1
 8009324:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009344:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	371c      	adds	r7, #28
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d14a      	bne.n	8009408 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800938a:	f040 8086 	bne.w	800949a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	7812      	ldrb	r2, [r2, #0]
 80093a2:	0151      	lsls	r1, r2, #5
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	440a      	add	r2, r1
 80093a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f242 7210 	movw	r2, #10000	; 0x2710
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d902      	bls.n	80093ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ea:	e056      	b.n	800949a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009404:	d0e7      	beq.n	80093d6 <USB_EPStopXfer+0x82>
 8009406:	e048      	b.n	800949a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800941c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009420:	d13b      	bne.n	800949a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	7812      	ldrb	r2, [r2, #0]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009444:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	7812      	ldrb	r2, [r2, #0]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009468:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f242 7210 	movw	r2, #10000	; 0x2710
 8009476:	4293      	cmp	r3, r2
 8009478:	d902      	bls.n	8009480 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	75fb      	strb	r3, [r7, #23]
          break;
 800947e:	e00c      	b.n	800949a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009498:	d0e7      	beq.n	800946a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
}
 800949c:	4618      	mov	r0, r3
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b089      	sub	sp, #36	; 0x24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4611      	mov	r1, r2
 80094b4:	461a      	mov	r2, r3
 80094b6:	460b      	mov	r3, r1
 80094b8:	71fb      	strb	r3, [r7, #7]
 80094ba:	4613      	mov	r3, r2
 80094bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d123      	bne.n	8009516 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094ce:	88bb      	ldrh	r3, [r7, #4]
 80094d0:	3303      	adds	r3, #3
 80094d2:	089b      	lsrs	r3, r3, #2
 80094d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094d6:	2300      	movs	r3, #0
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	e018      	b.n	800950e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094dc:	79fb      	ldrb	r3, [r7, #7]
 80094de:	031a      	lsls	r2, r3, #12
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e8:	461a      	mov	r2, r3
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	3301      	adds	r3, #1
 80094f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	3301      	adds	r3, #1
 80094fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	3301      	adds	r3, #1
 8009500:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	3301      	adds	r3, #1
 8009506:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	3301      	adds	r3, #1
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	429a      	cmp	r2, r3
 8009514:	d3e2      	bcc.n	80094dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3724      	adds	r7, #36	; 0x24
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009524:	b480      	push	{r7}
 8009526:	b08b      	sub	sp, #44	; 0x2c
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	089b      	lsrs	r3, r3, #2
 800953e:	b29b      	uxth	r3, r3
 8009540:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800954a:	2300      	movs	r3, #0
 800954c:	623b      	str	r3, [r7, #32]
 800954e:	e014      	b.n	800957a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	601a      	str	r2, [r3, #0]
    pDest++;
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	3301      	adds	r3, #1
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	3301      	adds	r3, #1
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	3301      	adds	r3, #1
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	3301      	adds	r3, #1
 8009572:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	3301      	adds	r3, #1
 8009578:	623b      	str	r3, [r7, #32]
 800957a:	6a3a      	ldr	r2, [r7, #32]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	429a      	cmp	r2, r3
 8009580:	d3e6      	bcc.n	8009550 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009582:	8bfb      	ldrh	r3, [r7, #30]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01e      	beq.n	80095c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009592:	461a      	mov	r2, r3
 8009594:	f107 0310 	add.w	r3, r7, #16
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	fa22 f303 	lsr.w	r3, r2, r3
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	701a      	strb	r2, [r3, #0]
      i++;
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	3301      	adds	r3, #1
 80095b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	3301      	adds	r3, #1
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80095ba:	8bfb      	ldrh	r3, [r7, #30]
 80095bc:	3b01      	subs	r3, #1
 80095be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095c0:	8bfb      	ldrh	r3, [r7, #30]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1ea      	bne.n	800959c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	372c      	adds	r7, #44	; 0x2c
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d12c      	bne.n	800964a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	db12      	blt.n	8009628 <USB_EPSetStall+0x54>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00f      	beq.n	8009628 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	0151      	lsls	r1, r2, #5
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	440a      	add	r2, r1
 800961e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009626:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	440a      	add	r2, r1
 800963e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	e02b      	b.n	80096a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	db12      	blt.n	8009682 <USB_EPSetStall+0xae>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00f      	beq.n	8009682 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	0151      	lsls	r1, r2, #5
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	440a      	add	r2, r1
 8009678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800967c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009680:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	0151      	lsls	r1, r2, #5
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	440a      	add	r2, r1
 8009698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800969c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	785b      	ldrb	r3, [r3, #1]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d128      	bne.n	800971e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	0151      	lsls	r1, r2, #5
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	440a      	add	r2, r1
 80096e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	791b      	ldrb	r3, [r3, #4]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d003      	beq.n	80096fc <USB_EPClearStall+0x4c>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	791b      	ldrb	r3, [r3, #4]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d138      	bne.n	800976e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	e027      	b.n	800976e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	440a      	add	r2, r1
 8009734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800973c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	791b      	ldrb	r3, [r3, #4]
 8009742:	2b03      	cmp	r3, #3
 8009744:	d003      	beq.n	800974e <USB_EPClearStall+0x9e>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	791b      	ldrb	r3, [r3, #4]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d10f      	bne.n	800976e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	440a      	add	r2, r1
 8009764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800976c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800979a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800979e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097b6:	4313      	orrs	r3, r2
 80097b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097f6:	f023 0302 	bic.w	r3, r3, #2
 80097fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009824:	f023 0303 	bic.w	r3, r3, #3
 8009828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009838:	f043 0302 	orr.w	r3, r3, #2
 800983c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	4013      	ands	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009864:	68fb      	ldr	r3, [r7, #12]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	4013      	ands	r3, r2
 8009894:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	0c1b      	lsrs	r3, r3, #16
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b085      	sub	sp, #20
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	4013      	ands	r3, r2
 80098c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	b29b      	uxth	r3, r3
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	4013      	ands	r3, r2
 8009906:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009908:	68bb      	ldr	r3, [r7, #8]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009916:	b480      	push	{r7}
 8009918:	b087      	sub	sp, #28
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009938:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	fa22 f303 	lsr.w	r3, r2, r3
 8009946:	01db      	lsls	r3, r3, #7
 8009948:	b2db      	uxtb	r3, r3
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4013      	ands	r3, r2
 8009962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009964:	68bb      	ldr	r3, [r7, #8]
}
 8009966:	4618      	mov	r0, r3
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	f003 0301 	and.w	r3, r3, #1
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099ac:	f023 0307 	bic.w	r3, r3, #7
 80099b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	460b      	mov	r3, r1
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	333c      	adds	r3, #60	; 0x3c
 80099ea:	3304      	adds	r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	4a26      	ldr	r2, [pc, #152]	; (8009a8c <USB_EP0_OutStart+0xb8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d90a      	bls.n	8009a0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a08:	d101      	bne.n	8009a0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e037      	b.n	8009a7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a14:	461a      	mov	r2, r3
 8009a16:	2300      	movs	r3, #0
 8009a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a3c:	f043 0318 	orr.w	r3, r3, #24
 8009a40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009a54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d10f      	bne.n	8009a7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	371c      	adds	r7, #28
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	4f54300a 	.word	0x4f54300a

08009a90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a13      	ldr	r2, [pc, #76]	; (8009af4 <USB_CoreReset+0x64>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d901      	bls.n	8009aae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e01b      	b.n	8009ae6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	daf2      	bge.n	8009a9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	f043 0201 	orr.w	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a09      	ldr	r2, [pc, #36]	; (8009af4 <USB_CoreReset+0x64>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d901      	bls.n	8009ad8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e006      	b.n	8009ae6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d0f0      	beq.n	8009ac6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	00030d40 	.word	0x00030d40

08009af8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b08:	f002 fc8a 	bl	800c420 <USBD_static_malloc>
 8009b0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d109      	bne.n	8009b28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	32b0      	adds	r2, #176	; 0xb0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b24:	2302      	movs	r3, #2
 8009b26:	e0d4      	b.n	8009cd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f002 fd52 	bl	800c5d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32b0      	adds	r2, #176	; 0xb0
 8009b3e:	68f9      	ldr	r1, [r7, #12]
 8009b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32b0      	adds	r2, #176	; 0xb0
 8009b4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7c1b      	ldrb	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d138      	bne.n	8009bd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b60:	4b5e      	ldr	r3, [pc, #376]	; (8009cdc <USBD_CDC_Init+0x1e4>)
 8009b62:	7819      	ldrb	r1, [r3, #0]
 8009b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b68:	2202      	movs	r2, #2
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f002 fb35 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b70:	4b5a      	ldr	r3, [pc, #360]	; (8009cdc <USBD_CDC_Init+0x1e4>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	2201      	movs	r2, #1
 8009b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b8a:	4b55      	ldr	r3, [pc, #340]	; (8009ce0 <USBD_CDC_Init+0x1e8>)
 8009b8c:	7819      	ldrb	r1, [r3, #0]
 8009b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b92:	2202      	movs	r2, #2
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f002 fb20 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b9a:	4b51      	ldr	r3, [pc, #324]	; (8009ce0 <USBD_CDC_Init+0x1e8>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 020f 	and.w	r2, r3, #15
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bb6:	4b4b      	ldr	r3, [pc, #300]	; (8009ce4 <USBD_CDC_Init+0x1ec>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	f003 020f 	and.w	r2, r3, #15
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	3326      	adds	r3, #38	; 0x26
 8009bcc:	2210      	movs	r2, #16
 8009bce:	801a      	strh	r2, [r3, #0]
 8009bd0:	e035      	b.n	8009c3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bd2:	4b42      	ldr	r3, [pc, #264]	; (8009cdc <USBD_CDC_Init+0x1e4>)
 8009bd4:	7819      	ldrb	r1, [r3, #0]
 8009bd6:	2340      	movs	r3, #64	; 0x40
 8009bd8:	2202      	movs	r2, #2
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f002 fafd 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009be0:	4b3e      	ldr	r3, [pc, #248]	; (8009cdc <USBD_CDC_Init+0x1e4>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 020f 	and.w	r2, r3, #15
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	3324      	adds	r3, #36	; 0x24
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bfa:	4b39      	ldr	r3, [pc, #228]	; (8009ce0 <USBD_CDC_Init+0x1e8>)
 8009bfc:	7819      	ldrb	r1, [r3, #0]
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	2202      	movs	r2, #2
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fae9 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c08:	4b35      	ldr	r3, [pc, #212]	; (8009ce0 <USBD_CDC_Init+0x1e8>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f003 020f 	and.w	r2, r3, #15
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	4613      	mov	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c20:	2201      	movs	r2, #1
 8009c22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c24:	4b2f      	ldr	r3, [pc, #188]	; (8009ce4 <USBD_CDC_Init+0x1ec>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 020f 	and.w	r2, r3, #15
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	3326      	adds	r3, #38	; 0x26
 8009c3a:	2210      	movs	r2, #16
 8009c3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c3e:	4b29      	ldr	r3, [pc, #164]	; (8009ce4 <USBD_CDC_Init+0x1ec>)
 8009c40:	7819      	ldrb	r1, [r3, #0]
 8009c42:	2308      	movs	r3, #8
 8009c44:	2203      	movs	r2, #3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f002 fac7 	bl	800c1da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c4c:	4b25      	ldr	r3, [pc, #148]	; (8009ce4 <USBD_CDC_Init+0x1ec>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	3324      	adds	r3, #36	; 0x24
 8009c62:	2201      	movs	r2, #1
 8009c64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	33b0      	adds	r3, #176	; 0xb0
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e018      	b.n	8009cd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7c1b      	ldrb	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ca8:	4b0d      	ldr	r3, [pc, #52]	; (8009ce0 <USBD_CDC_Init+0x1e8>)
 8009caa:	7819      	ldrb	r1, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f002 fb7e 	bl	800c3b8 <USBD_LL_PrepareReceive>
 8009cbc:	e008      	b.n	8009cd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cbe:	4b08      	ldr	r3, [pc, #32]	; (8009ce0 <USBD_CDC_Init+0x1e8>)
 8009cc0:	7819      	ldrb	r1, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cc8:	2340      	movs	r3, #64	; 0x40
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 fb74 	bl	800c3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200001b7 	.word	0x200001b7
 8009ce0:	200001b8 	.word	0x200001b8
 8009ce4:	200001b9 	.word	0x200001b9

08009ce8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009cf4:	4b3a      	ldr	r3, [pc, #232]	; (8009de0 <USBD_CDC_DeInit+0xf8>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f002 fa93 	bl	800c226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d00:	4b37      	ldr	r3, [pc, #220]	; (8009de0 <USBD_CDC_DeInit+0xf8>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	f003 020f 	and.w	r2, r3, #15
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	440b      	add	r3, r1
 8009d14:	3324      	adds	r3, #36	; 0x24
 8009d16:	2200      	movs	r2, #0
 8009d18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d1a:	4b32      	ldr	r3, [pc, #200]	; (8009de4 <USBD_CDC_DeInit+0xfc>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f002 fa80 	bl	800c226 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d26:	4b2f      	ldr	r3, [pc, #188]	; (8009de4 <USBD_CDC_DeInit+0xfc>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f003 020f 	and.w	r2, r3, #15
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d3e:	2200      	movs	r2, #0
 8009d40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d42:	4b29      	ldr	r3, [pc, #164]	; (8009de8 <USBD_CDC_DeInit+0x100>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f002 fa6c 	bl	800c226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d4e:	4b26      	ldr	r3, [pc, #152]	; (8009de8 <USBD_CDC_DeInit+0x100>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	f003 020f 	and.w	r2, r3, #15
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	440b      	add	r3, r1
 8009d62:	3324      	adds	r3, #36	; 0x24
 8009d64:	2200      	movs	r2, #0
 8009d66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d68:	4b1f      	ldr	r3, [pc, #124]	; (8009de8 <USBD_CDC_DeInit+0x100>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 020f 	and.w	r2, r3, #15
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	4613      	mov	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3326      	adds	r3, #38	; 0x26
 8009d7e:	2200      	movs	r2, #0
 8009d80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	32b0      	adds	r2, #176	; 0xb0
 8009d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01f      	beq.n	8009dd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	33b0      	adds	r3, #176	; 0xb0
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	32b0      	adds	r2, #176	; 0xb0
 8009db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f002 fb40 	bl	800c43c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	32b0      	adds	r2, #176	; 0xb0
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	200001b7 	.word	0x200001b7
 8009de4:	200001b8 	.word	0x200001b8
 8009de8:	200001b9 	.word	0x200001b9

08009dec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	32b0      	adds	r2, #176	; 0xb0
 8009e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e0bf      	b.n	8009f9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d050      	beq.n	8009eca <USBD_CDC_Setup+0xde>
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	f040 80af 	bne.w	8009f8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	88db      	ldrh	r3, [r3, #6]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d03a      	beq.n	8009eac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	b25b      	sxtb	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	da1b      	bge.n	8009e78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	33b0      	adds	r3, #176	; 0xb0
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	88d2      	ldrh	r2, [r2, #6]
 8009e5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	88db      	ldrh	r3, [r3, #6]
 8009e62:	2b07      	cmp	r3, #7
 8009e64:	bf28      	it	cs
 8009e66:	2307      	movcs	r3, #7
 8009e68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	89fa      	ldrh	r2, [r7, #14]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 fd89 	bl	800b988 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e76:	e090      	b.n	8009f9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	785a      	ldrb	r2, [r3, #1]
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	88db      	ldrh	r3, [r3, #6]
 8009e86:	2b3f      	cmp	r3, #63	; 0x3f
 8009e88:	d803      	bhi.n	8009e92 <USBD_CDC_Setup+0xa6>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	88db      	ldrh	r3, [r3, #6]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	e000      	b.n	8009e94 <USBD_CDC_Setup+0xa8>
 8009e92:	2240      	movs	r2, #64	; 0x40
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e9a:	6939      	ldr	r1, [r7, #16]
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 fd9b 	bl	800b9e0 <USBD_CtlPrepareRx>
      break;
 8009eaa:	e076      	b.n	8009f9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	33b0      	adds	r3, #176	; 0xb0
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	7850      	ldrb	r0, [r2, #1]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	4798      	blx	r3
      break;
 8009ec8:	e067      	b.n	8009f9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	2b0b      	cmp	r3, #11
 8009ed0:	d851      	bhi.n	8009f76 <USBD_CDC_Setup+0x18a>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <USBD_CDC_Setup+0xec>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f09 	.word	0x08009f09
 8009edc:	08009f85 	.word	0x08009f85
 8009ee0:	08009f77 	.word	0x08009f77
 8009ee4:	08009f77 	.word	0x08009f77
 8009ee8:	08009f77 	.word	0x08009f77
 8009eec:	08009f77 	.word	0x08009f77
 8009ef0:	08009f77 	.word	0x08009f77
 8009ef4:	08009f77 	.word	0x08009f77
 8009ef8:	08009f77 	.word	0x08009f77
 8009efc:	08009f77 	.word	0x08009f77
 8009f00:	08009f33 	.word	0x08009f33
 8009f04:	08009f5d 	.word	0x08009f5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d107      	bne.n	8009f24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f14:	f107 030a 	add.w	r3, r7, #10
 8009f18:	2202      	movs	r2, #2
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 fd33 	bl	800b988 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f22:	e032      	b.n	8009f8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fcbd 	bl	800b8a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f30:	e02b      	b.n	8009f8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d107      	bne.n	8009f4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f3e:	f107 030d 	add.w	r3, r7, #13
 8009f42:	2201      	movs	r2, #1
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fd1e 	bl	800b988 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f4c:	e01d      	b.n	8009f8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fca8 	bl	800b8a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f56:	2303      	movs	r3, #3
 8009f58:	75fb      	strb	r3, [r7, #23]
          break;
 8009f5a:	e016      	b.n	8009f8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d00f      	beq.n	8009f88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 fc9b 	bl	800b8a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f70:	2303      	movs	r3, #3
 8009f72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f74:	e008      	b.n	8009f88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 fc94 	bl	800b8a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	75fb      	strb	r3, [r7, #23]
          break;
 8009f82:	e002      	b.n	8009f8a <USBD_CDC_Setup+0x19e>
          break;
 8009f84:	bf00      	nop
 8009f86:	e008      	b.n	8009f9a <USBD_CDC_Setup+0x1ae>
          break;
 8009f88:	bf00      	nop
      }
      break;
 8009f8a:	e006      	b.n	8009f9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 fc89 	bl	800b8a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	75fb      	strb	r3, [r7, #23]
      break;
 8009f98:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	32b0      	adds	r2, #176	; 0xb0
 8009fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e065      	b.n	800a09a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	32b0      	adds	r2, #176	; 0xb0
 8009fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fdc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	f003 020f 	and.w	r2, r3, #15
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	440b      	add	r3, r1
 8009ff0:	3318      	adds	r3, #24
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d02f      	beq.n	800a058 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	f003 020f 	and.w	r2, r3, #15
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	440b      	add	r3, r1
 800a00a:	3318      	adds	r3, #24
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	f003 010f 	and.w	r1, r3, #15
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	460b      	mov	r3, r1
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	440b      	add	r3, r1
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4403      	add	r3, r0
 800a020:	3348      	adds	r3, #72	; 0x48
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	fbb2 f1f3 	udiv	r1, r2, r3
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d112      	bne.n	800a058 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	f003 020f 	and.w	r2, r3, #15
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	3318      	adds	r3, #24
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a04a:	78f9      	ldrb	r1, [r7, #3]
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f002 f990 	bl	800c376 <USBD_LL_Transmit>
 800a056:	e01f      	b.n	800a098 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	33b0      	adds	r3, #176	; 0xb0
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d010      	beq.n	800a098 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	33b0      	adds	r3, #176	; 0xb0
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	32b0      	adds	r2, #176	; 0xb0
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	32b0      	adds	r2, #176	; 0xb0
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e01a      	b.n	800a10a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f002 f98e 	bl	800c3fa <USBD_LL_GetRxDataSize>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	33b0      	adds	r3, #176	; 0xb0
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a104:	4611      	mov	r1, r2
 800a106:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	32b0      	adds	r2, #176	; 0xb0
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	e025      	b.n	800a180 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	33b0      	adds	r3, #176	; 0xb0
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01a      	beq.n	800a17e <USBD_CDC_EP0_RxReady+0x6c>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a14e:	2bff      	cmp	r3, #255	; 0xff
 800a150:	d015      	beq.n	800a17e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	33b0      	adds	r3, #176	; 0xb0
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a16a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a172:	b292      	uxth	r2, r2
 800a174:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	22ff      	movs	r2, #255	; 0xff
 800a17a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a190:	2182      	movs	r1, #130	; 0x82
 800a192:	4818      	ldr	r0, [pc, #96]	; (800a1f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a194:	f000 fd4f 	bl	800ac36 <USBD_GetEpDesc>
 800a198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a19a:	2101      	movs	r1, #1
 800a19c:	4815      	ldr	r0, [pc, #84]	; (800a1f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a19e:	f000 fd4a 	bl	800ac36 <USBD_GetEpDesc>
 800a1a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1a4:	2181      	movs	r1, #129	; 0x81
 800a1a6:	4813      	ldr	r0, [pc, #76]	; (800a1f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1a8:	f000 fd45 	bl	800ac36 <USBD_GetEpDesc>
 800a1ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2210      	movs	r2, #16
 800a1b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c8:	711a      	strb	r2, [r3, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1dc:	711a      	strb	r2, [r3, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2243      	movs	r2, #67	; 0x43
 800a1e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000174 	.word	0x20000174

0800a1f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a200:	2182      	movs	r1, #130	; 0x82
 800a202:	4818      	ldr	r0, [pc, #96]	; (800a264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a204:	f000 fd17 	bl	800ac36 <USBD_GetEpDesc>
 800a208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a20a:	2101      	movs	r1, #1
 800a20c:	4815      	ldr	r0, [pc, #84]	; (800a264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a20e:	f000 fd12 	bl	800ac36 <USBD_GetEpDesc>
 800a212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a214:	2181      	movs	r1, #129	; 0x81
 800a216:	4813      	ldr	r0, [pc, #76]	; (800a264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a218:	f000 fd0d 	bl	800ac36 <USBD_GetEpDesc>
 800a21c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2210      	movs	r2, #16
 800a228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2200      	movs	r2, #0
 800a234:	711a      	strb	r2, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f042 0202 	orr.w	r2, r2, #2
 800a23c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	711a      	strb	r2, [r3, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f042 0202 	orr.w	r2, r2, #2
 800a250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2243      	movs	r2, #67	; 0x43
 800a256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a258:	4b02      	ldr	r3, [pc, #8]	; (800a264 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000174 	.word	0x20000174

0800a268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a270:	2182      	movs	r1, #130	; 0x82
 800a272:	4818      	ldr	r0, [pc, #96]	; (800a2d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a274:	f000 fcdf 	bl	800ac36 <USBD_GetEpDesc>
 800a278:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a27a:	2101      	movs	r1, #1
 800a27c:	4815      	ldr	r0, [pc, #84]	; (800a2d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a27e:	f000 fcda 	bl	800ac36 <USBD_GetEpDesc>
 800a282:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a284:	2181      	movs	r1, #129	; 0x81
 800a286:	4813      	ldr	r0, [pc, #76]	; (800a2d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a288:	f000 fcd5 	bl	800ac36 <USBD_GetEpDesc>
 800a28c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2210      	movs	r2, #16
 800a298:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2a8:	711a      	strb	r2, [r3, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2bc:	711a      	strb	r2, [r3, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2243      	movs	r2, #67	; 0x43
 800a2c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2c8:	4b02      	ldr	r3, [pc, #8]	; (800a2d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000174 	.word	0x20000174

0800a2d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2e6:	4b03      	ldr	r3, [pc, #12]	; (800a2f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20000130 	.word	0x20000130

0800a2f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	e009      	b.n	800a320 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	33b0      	adds	r3, #176	; 0xb0
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	32b0      	adds	r2, #176	; 0xb0
 800a342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a346:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a34e:	2303      	movs	r3, #3
 800a350:	e008      	b.n	800a364 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	32b0      	adds	r2, #176	; 0xb0
 800a384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a388:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	e004      	b.n	800a39e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	32b0      	adds	r2, #176	; 0xb0
 800a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	32b0      	adds	r2, #176	; 0xb0
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e025      	b.n	800a42a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11f      	bne.n	800a428 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <USBD_CDC_TransmitPacket+0x88>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	f003 020f 	and.w	r2, r3, #15
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4403      	add	r3, r0
 800a40a:	3318      	adds	r3, #24
 800a40c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a40e:	4b09      	ldr	r3, [pc, #36]	; (800a434 <USBD_CDC_TransmitPacket+0x88>)
 800a410:	7819      	ldrb	r1, [r3, #0]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f001 ffa9 	bl	800c376 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	200001b7 	.word	0x200001b7

0800a438 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	32b0      	adds	r2, #176	; 0xb0
 800a44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	32b0      	adds	r2, #176	; 0xb0
 800a45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a462:	2303      	movs	r3, #3
 800a464:	e018      	b.n	800a498 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7c1b      	ldrb	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <USBD_CDC_ReceivePacket+0x68>)
 800a470:	7819      	ldrb	r1, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 ff9b 	bl	800c3b8 <USBD_LL_PrepareReceive>
 800a482:	e008      	b.n	800a496 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a484:	4b06      	ldr	r3, [pc, #24]	; (800a4a0 <USBD_CDC_ReceivePacket+0x68>)
 800a486:	7819      	ldrb	r1, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a48e:	2340      	movs	r3, #64	; 0x40
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 ff91 	bl	800c3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	200001b8 	.word	0x200001b8

0800a4a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e01f      	b.n	800a4fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	79fa      	ldrb	r2, [r7, #7]
 800a4ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f001 fe0b 	bl	800c10c <USBD_LL_Init>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	e025      	b.n	800a568 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	32ae      	adds	r2, #174	; 0xae
 800a52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00f      	beq.n	800a558 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	32ae      	adds	r2, #174	; 0xae
 800a542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a548:	f107 020e 	add.w	r2, r7, #14
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	4602      	mov	r2, r0
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 fe13 	bl	800c1a4 <USBD_LL_Start>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a590:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a592:	4618      	mov	r0, r3
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d009      	beq.n	800a5cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	4798      	blx	r3
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	78fa      	ldrb	r2, [r7, #3]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f001 f908 	bl	800b832 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a630:	461a      	mov	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a63e:	f003 031f 	and.w	r3, r3, #31
 800a642:	2b02      	cmp	r3, #2
 800a644:	d01a      	beq.n	800a67c <USBD_LL_SetupStage+0x72>
 800a646:	2b02      	cmp	r3, #2
 800a648:	d822      	bhi.n	800a690 <USBD_LL_SetupStage+0x86>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <USBD_LL_SetupStage+0x4a>
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d00a      	beq.n	800a668 <USBD_LL_SetupStage+0x5e>
 800a652:	e01d      	b.n	800a690 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fb5f 	bl	800ad20 <USBD_StdDevReq>
 800a662:	4603      	mov	r3, r0
 800a664:	73fb      	strb	r3, [r7, #15]
      break;
 800a666:	e020      	b.n	800a6aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fbc7 	bl	800ae04 <USBD_StdItfReq>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
      break;
 800a67a:	e016      	b.n	800a6aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc29 	bl	800aedc <USBD_StdEPReq>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
      break;
 800a68e:	e00c      	b.n	800a6aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a696:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f001 fde0 	bl	800c264 <USBD_LL_StallEP>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a8:	bf00      	nop
  }

  return ret;
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d16e      	bne.n	800a7aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	f040 8098 	bne.w	800a810 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d913      	bls.n	800a714 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	1ad2      	subs	r2, r2, r3
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	4293      	cmp	r3, r2
 800a704:	bf28      	it	cs
 800a706:	4613      	movcs	r3, r2
 800a708:	461a      	mov	r2, r3
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f001 f984 	bl	800ba1a <USBD_CtlContinueRx>
 800a712:	e07d      	b.n	800a810 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a71a:	f003 031f 	and.w	r3, r3, #31
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d014      	beq.n	800a74c <USBD_LL_DataOutStage+0x98>
 800a722:	2b02      	cmp	r3, #2
 800a724:	d81d      	bhi.n	800a762 <USBD_LL_DataOutStage+0xae>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <USBD_LL_DataOutStage+0x7c>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d003      	beq.n	800a736 <USBD_LL_DataOutStage+0x82>
 800a72e:	e018      	b.n	800a762 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a730:	2300      	movs	r3, #0
 800a732:	75bb      	strb	r3, [r7, #22]
            break;
 800a734:	e018      	b.n	800a768 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	4619      	mov	r1, r3
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fa5e 	bl	800ac02 <USBD_CoreFindIF>
 800a746:	4603      	mov	r3, r0
 800a748:	75bb      	strb	r3, [r7, #22]
            break;
 800a74a:	e00d      	b.n	800a768 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a752:	b2db      	uxtb	r3, r3
 800a754:	4619      	mov	r1, r3
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 fa60 	bl	800ac1c <USBD_CoreFindEP>
 800a75c:	4603      	mov	r3, r0
 800a75e:	75bb      	strb	r3, [r7, #22]
            break;
 800a760:	e002      	b.n	800a768 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	75bb      	strb	r3, [r7, #22]
            break;
 800a766:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a768:	7dbb      	ldrb	r3, [r7, #22]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d119      	bne.n	800a7a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b03      	cmp	r3, #3
 800a778:	d113      	bne.n	800a7a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a77a:	7dba      	ldrb	r2, [r7, #22]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	32ae      	adds	r2, #174	; 0xae
 800a780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a78a:	7dba      	ldrb	r2, [r7, #22]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a792:	7dba      	ldrb	r2, [r7, #22]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	32ae      	adds	r2, #174	; 0xae
 800a798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f001 f94a 	bl	800ba3c <USBD_CtlSendStatus>
 800a7a8:	e032      	b.n	800a810 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
 800a7ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 fa31 	bl	800ac1c <USBD_CoreFindEP>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7be:	7dbb      	ldrb	r3, [r7, #22]
 800a7c0:	2bff      	cmp	r3, #255	; 0xff
 800a7c2:	d025      	beq.n	800a810 <USBD_LL_DataOutStage+0x15c>
 800a7c4:	7dbb      	ldrb	r3, [r7, #22]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d122      	bne.n	800a810 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d117      	bne.n	800a806 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7d6:	7dba      	ldrb	r2, [r7, #22]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	32ae      	adds	r2, #174	; 0xae
 800a7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00f      	beq.n	800a806 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7e6:	7dba      	ldrb	r2, [r7, #22]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7ee:	7dba      	ldrb	r2, [r7, #22]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	32ae      	adds	r2, #174	; 0xae
 800a7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	7afa      	ldrb	r2, [r7, #11]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	4798      	blx	r3
 800a802:	4603      	mov	r3, r0
 800a804:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	e000      	b.n	800a812 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3718      	adds	r7, #24
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b086      	sub	sp, #24
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	460b      	mov	r3, r1
 800a824:	607a      	str	r2, [r7, #4]
 800a826:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d16f      	bne.n	800a90e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3314      	adds	r3, #20
 800a832:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d15a      	bne.n	800a8f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	689a      	ldr	r2, [r3, #8]
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	429a      	cmp	r2, r3
 800a848:	d914      	bls.n	800a874 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	1ad2      	subs	r2, r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	461a      	mov	r2, r3
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f001 f8ac 	bl	800b9be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a866:	2300      	movs	r3, #0
 800a868:	2200      	movs	r2, #0
 800a86a:	2100      	movs	r1, #0
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f001 fda3 	bl	800c3b8 <USBD_LL_PrepareReceive>
 800a872:	e03f      	b.n	800a8f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d11c      	bne.n	800a8ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a888:	429a      	cmp	r2, r3
 800a88a:	d316      	bcc.n	800a8ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a896:	429a      	cmp	r2, r3
 800a898:	d20f      	bcs.n	800a8ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f001 f88d 	bl	800b9be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f001 fd80 	bl	800c3b8 <USBD_LL_PrepareReceive>
 800a8b8:	e01c      	b.n	800a8f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d10f      	bne.n	800a8e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8e6:	2180      	movs	r1, #128	; 0x80
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f001 fcbb 	bl	800c264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f001 f8b7 	bl	800ba62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d03a      	beq.n	800a974 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff fe42 	bl	800a588 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a90c:	e032      	b.n	800a974 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a90e:	7afb      	ldrb	r3, [r7, #11]
 800a910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a914:	b2db      	uxtb	r3, r3
 800a916:	4619      	mov	r1, r3
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f97f 	bl	800ac1c <USBD_CoreFindEP>
 800a91e:	4603      	mov	r3, r0
 800a920:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	2bff      	cmp	r3, #255	; 0xff
 800a926:	d025      	beq.n	800a974 <USBD_LL_DataInStage+0x15a>
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d122      	bne.n	800a974 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b03      	cmp	r3, #3
 800a938:	d11c      	bne.n	800a974 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a93a:	7dfa      	ldrb	r2, [r7, #23]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	32ae      	adds	r2, #174	; 0xae
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a94a:	7dfa      	ldrb	r2, [r7, #23]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a952:	7dfa      	ldrb	r2, [r7, #23]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	32ae      	adds	r2, #174	; 0xae
 800a958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	7afa      	ldrb	r2, [r7, #11]
 800a960:	4611      	mov	r1, r2
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	4798      	blx	r3
 800a966:	4603      	mov	r3, r0
 800a968:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a96a:	7dbb      	ldrb	r3, [r7, #22]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a970:	7dbb      	ldrb	r3, [r7, #22]
 800a972:	e000      	b.n	800a976 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d014      	beq.n	800a9e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00e      	beq.n	800a9e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6852      	ldr	r2, [r2, #4]
 800a9d2:	b2d2      	uxtb	r2, r2
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	4798      	blx	r3
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fbf5 	bl	800c1da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2240      	movs	r2, #64	; 0x40
 800a9fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa00:	2340      	movs	r3, #64	; 0x40
 800aa02:	2200      	movs	r2, #0
 800aa04:	2180      	movs	r1, #128	; 0x80
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 fbe7 	bl	800c1da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2240      	movs	r2, #64	; 0x40
 800aa16:	621a      	str	r2, [r3, #32]

  return ret;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b083      	sub	sp, #12
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d106      	bne.n	800aa90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d110      	bne.n	800aad4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00b      	beq.n	800aad4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d005      	beq.n	800aad4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aace:	69db      	ldr	r3, [r3, #28]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	32ae      	adds	r2, #174	; 0xae
 800aaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e01c      	b.n	800ab3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d115      	bne.n	800ab38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	32ae      	adds	r2, #174	; 0xae
 800ab16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	32ae      	adds	r2, #174	; 0xae
 800ab2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	78fa      	ldrb	r2, [r7, #3]
 800ab32:	4611      	mov	r1, r2
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	32ae      	adds	r2, #174	; 0xae
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e01c      	b.n	800ab9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d115      	bne.n	800ab9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	32ae      	adds	r2, #174	; 0xae
 800ab7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	32ae      	adds	r2, #174	; 0xae
 800ab8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4611      	mov	r1, r2
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00e      	beq.n	800abf8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6852      	ldr	r2, [r2, #4]
 800abe6:	b2d2      	uxtb	r2, r2
 800abe8:	4611      	mov	r1, r2
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	4798      	blx	r3
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abf4:	2303      	movs	r3, #3
 800abf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b083      	sub	sp, #12
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b086      	sub	sp, #24
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	885b      	ldrh	r3, [r3, #2]
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d920      	bls.n	800aca0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac66:	e013      	b.n	800ac90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac68:	f107 030a 	add.w	r3, r7, #10
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f000 f81b 	bl	800acaa <USBD_GetNextDesc>
 800ac74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	785b      	ldrb	r3, [r3, #1]
 800ac7a:	2b05      	cmp	r3, #5
 800ac7c:	d108      	bne.n	800ac90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	789b      	ldrb	r3, [r3, #2]
 800ac86:	78fa      	ldrb	r2, [r7, #3]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d008      	beq.n	800ac9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	885b      	ldrh	r3, [r3, #2]
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	897b      	ldrh	r3, [r7, #10]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d8e5      	bhi.n	800ac68 <USBD_GetEpDesc+0x32>
 800ac9c:	e000      	b.n	800aca0 <USBD_GetEpDesc+0x6a>
          break;
 800ac9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aca0:	693b      	ldr	r3, [r7, #16]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	881a      	ldrh	r2, [r3, #0]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	4413      	add	r3, r2
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4413      	add	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acd6:	68fb      	ldr	r3, [r7, #12]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	3301      	adds	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad02:	8a3b      	ldrh	r3, [r7, #16]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	b21a      	sxth	r2, r3
 800ad08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	b21b      	sxth	r3, r3
 800ad10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad12:	89fb      	ldrh	r3, [r7, #14]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d005      	beq.n	800ad46 <USBD_StdDevReq+0x26>
 800ad3a:	2b40      	cmp	r3, #64	; 0x40
 800ad3c:	d857      	bhi.n	800adee <USBD_StdDevReq+0xce>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00f      	beq.n	800ad62 <USBD_StdDevReq+0x42>
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	d153      	bne.n	800adee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	32ae      	adds	r2, #174	; 0xae
 800ad50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad60:	e04a      	b.n	800adf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	785b      	ldrb	r3, [r3, #1]
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d83b      	bhi.n	800ade2 <USBD_StdDevReq+0xc2>
 800ad6a:	a201      	add	r2, pc, #4	; (adr r2, 800ad70 <USBD_StdDevReq+0x50>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800add9 	.word	0x0800add9
 800ad78:	0800ade3 	.word	0x0800ade3
 800ad7c:	0800adcf 	.word	0x0800adcf
 800ad80:	0800ade3 	.word	0x0800ade3
 800ad84:	0800ada3 	.word	0x0800ada3
 800ad88:	0800ad99 	.word	0x0800ad99
 800ad8c:	0800ade3 	.word	0x0800ade3
 800ad90:	0800adbb 	.word	0x0800adbb
 800ad94:	0800adad 	.word	0x0800adad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa3c 	bl	800b218 <USBD_GetDescriptor>
          break;
 800ada0:	e024      	b.n	800adec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fba1 	bl	800b4ec <USBD_SetAddress>
          break;
 800adaa:	e01f      	b.n	800adec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fbe0 	bl	800b574 <USBD_SetConfig>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73fb      	strb	r3, [r7, #15]
          break;
 800adb8:	e018      	b.n	800adec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fc83 	bl	800b6c8 <USBD_GetConfig>
          break;
 800adc2:	e013      	b.n	800adec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fcb4 	bl	800b734 <USBD_GetStatus>
          break;
 800adcc:	e00e      	b.n	800adec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fce3 	bl	800b79c <USBD_SetFeature>
          break;
 800add6:	e009      	b.n	800adec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fd07 	bl	800b7ee <USBD_ClrFeature>
          break;
 800ade0:	e004      	b.n	800adec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fd5e 	bl	800b8a6 <USBD_CtlError>
          break;
 800adea:	bf00      	nop
      }
      break;
 800adec:	e004      	b.n	800adf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fd58 	bl	800b8a6 <USBD_CtlError>
      break;
 800adf6:	bf00      	nop
  }

  return ret;
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop

0800ae04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae1a:	2b40      	cmp	r3, #64	; 0x40
 800ae1c:	d005      	beq.n	800ae2a <USBD_StdItfReq+0x26>
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d852      	bhi.n	800aec8 <USBD_StdItfReq+0xc4>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <USBD_StdItfReq+0x26>
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d14e      	bne.n	800aec8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	3b01      	subs	r3, #1
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d840      	bhi.n	800aeba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	889b      	ldrh	r3, [r3, #4]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d836      	bhi.n	800aeb0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	889b      	ldrh	r3, [r3, #4]
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff fed9 	bl	800ac02 <USBD_CoreFindIF>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae54:	7bbb      	ldrb	r3, [r7, #14]
 800ae56:	2bff      	cmp	r3, #255	; 0xff
 800ae58:	d01d      	beq.n	800ae96 <USBD_StdItfReq+0x92>
 800ae5a:	7bbb      	ldrb	r3, [r7, #14]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d11a      	bne.n	800ae96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae60:	7bba      	ldrb	r2, [r7, #14]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32ae      	adds	r2, #174	; 0xae
 800ae66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00f      	beq.n	800ae90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae70:	7bba      	ldrb	r2, [r7, #14]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae78:	7bba      	ldrb	r2, [r7, #14]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	32ae      	adds	r2, #174	; 0xae
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae8e:	e004      	b.n	800ae9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae94:	e001      	b.n	800ae9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae96:	2303      	movs	r3, #3
 800ae98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	88db      	ldrh	r3, [r3, #6]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d110      	bne.n	800aec4 <USBD_StdItfReq+0xc0>
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10d      	bne.n	800aec4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fdc7 	bl	800ba3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aeae:	e009      	b.n	800aec4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fcf7 	bl	800b8a6 <USBD_CtlError>
          break;
 800aeb8:	e004      	b.n	800aec4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fcf2 	bl	800b8a6 <USBD_CtlError>
          break;
 800aec2:	e000      	b.n	800aec6 <USBD_StdItfReq+0xc2>
          break;
 800aec4:	bf00      	nop
      }
      break;
 800aec6:	e004      	b.n	800aed2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fceb 	bl	800b8a6 <USBD_CtlError>
      break;
 800aed0:	bf00      	nop
  }

  return ret;
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	889b      	ldrh	r3, [r3, #4]
 800aeee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d007      	beq.n	800af0c <USBD_StdEPReq+0x30>
 800aefc:	2b40      	cmp	r3, #64	; 0x40
 800aefe:	f200 817f 	bhi.w	800b200 <USBD_StdEPReq+0x324>
 800af02:	2b00      	cmp	r3, #0
 800af04:	d02a      	beq.n	800af5c <USBD_StdEPReq+0x80>
 800af06:	2b20      	cmp	r3, #32
 800af08:	f040 817a 	bne.w	800b200 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fe83 	bl	800ac1c <USBD_CoreFindEP>
 800af16:	4603      	mov	r3, r0
 800af18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af1a:	7b7b      	ldrb	r3, [r7, #13]
 800af1c:	2bff      	cmp	r3, #255	; 0xff
 800af1e:	f000 8174 	beq.w	800b20a <USBD_StdEPReq+0x32e>
 800af22:	7b7b      	ldrb	r3, [r7, #13]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 8170 	bne.w	800b20a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af2a:	7b7a      	ldrb	r2, [r7, #13]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af32:	7b7a      	ldrb	r2, [r7, #13]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	32ae      	adds	r2, #174	; 0xae
 800af38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 8163 	beq.w	800b20a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af44:	7b7a      	ldrb	r2, [r7, #13]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	32ae      	adds	r2, #174	; 0xae
 800af4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	4798      	blx	r3
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af5a:	e156      	b.n	800b20a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	785b      	ldrb	r3, [r3, #1]
 800af60:	2b03      	cmp	r3, #3
 800af62:	d008      	beq.n	800af76 <USBD_StdEPReq+0x9a>
 800af64:	2b03      	cmp	r3, #3
 800af66:	f300 8145 	bgt.w	800b1f4 <USBD_StdEPReq+0x318>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 809b 	beq.w	800b0a6 <USBD_StdEPReq+0x1ca>
 800af70:	2b01      	cmp	r3, #1
 800af72:	d03c      	beq.n	800afee <USBD_StdEPReq+0x112>
 800af74:	e13e      	b.n	800b1f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d002      	beq.n	800af88 <USBD_StdEPReq+0xac>
 800af82:	2b03      	cmp	r3, #3
 800af84:	d016      	beq.n	800afb4 <USBD_StdEPReq+0xd8>
 800af86:	e02c      	b.n	800afe2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00d      	beq.n	800afaa <USBD_StdEPReq+0xce>
 800af8e:	7bbb      	ldrb	r3, [r7, #14]
 800af90:	2b80      	cmp	r3, #128	; 0x80
 800af92:	d00a      	beq.n	800afaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 f963 	bl	800c264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af9e:	2180      	movs	r1, #128	; 0x80
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 f95f 	bl	800c264 <USBD_LL_StallEP>
 800afa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afa8:	e020      	b.n	800afec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fc7a 	bl	800b8a6 <USBD_CtlError>
              break;
 800afb2:	e01b      	b.n	800afec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	885b      	ldrh	r3, [r3, #2]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10e      	bne.n	800afda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <USBD_StdEPReq+0xfe>
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	2b80      	cmp	r3, #128	; 0x80
 800afc6:	d008      	beq.n	800afda <USBD_StdEPReq+0xfe>
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	88db      	ldrh	r3, [r3, #6]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 f945 	bl	800c264 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fd2e 	bl	800ba3c <USBD_CtlSendStatus>

              break;
 800afe0:	e004      	b.n	800afec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fc5e 	bl	800b8a6 <USBD_CtlError>
              break;
 800afea:	bf00      	nop
          }
          break;
 800afec:	e107      	b.n	800b1fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d002      	beq.n	800b000 <USBD_StdEPReq+0x124>
 800affa:	2b03      	cmp	r3, #3
 800affc:	d016      	beq.n	800b02c <USBD_StdEPReq+0x150>
 800affe:	e04b      	b.n	800b098 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00d      	beq.n	800b022 <USBD_StdEPReq+0x146>
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	2b80      	cmp	r3, #128	; 0x80
 800b00a:	d00a      	beq.n	800b022 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f927 	bl	800c264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b016:	2180      	movs	r1, #128	; 0x80
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 f923 	bl	800c264 <USBD_LL_StallEP>
 800b01e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b020:	e040      	b.n	800b0a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fc3e 	bl	800b8a6 <USBD_CtlError>
              break;
 800b02a:	e03b      	b.n	800b0a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	885b      	ldrh	r3, [r3, #2]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d136      	bne.n	800b0a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f001 f92d 	bl	800c2a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fcf7 	bl	800ba3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff fde2 	bl	800ac1c <USBD_CoreFindEP>
 800b058:	4603      	mov	r3, r0
 800b05a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b05c:	7b7b      	ldrb	r3, [r7, #13]
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d01f      	beq.n	800b0a2 <USBD_StdEPReq+0x1c6>
 800b062:	7b7b      	ldrb	r3, [r7, #13]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d11c      	bne.n	800b0a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b068:	7b7a      	ldrb	r2, [r7, #13]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b070:	7b7a      	ldrb	r2, [r7, #13]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	32ae      	adds	r2, #174	; 0xae
 800b076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d010      	beq.n	800b0a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b080:	7b7a      	ldrb	r2, [r7, #13]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	32ae      	adds	r2, #174	; 0xae
 800b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b096:	e004      	b.n	800b0a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fc03 	bl	800b8a6 <USBD_CtlError>
              break;
 800b0a0:	e000      	b.n	800b0a4 <USBD_StdEPReq+0x1c8>
              break;
 800b0a2:	bf00      	nop
          }
          break;
 800b0a4:	e0ab      	b.n	800b1fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d002      	beq.n	800b0b8 <USBD_StdEPReq+0x1dc>
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d032      	beq.n	800b11c <USBD_StdEPReq+0x240>
 800b0b6:	e097      	b.n	800b1e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d007      	beq.n	800b0ce <USBD_StdEPReq+0x1f2>
 800b0be:	7bbb      	ldrb	r3, [r7, #14]
 800b0c0:	2b80      	cmp	r3, #128	; 0x80
 800b0c2:	d004      	beq.n	800b0ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fbed 	bl	800b8a6 <USBD_CtlError>
                break;
 800b0cc:	e091      	b.n	800b1f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	da0b      	bge.n	800b0ee <USBD_StdEPReq+0x212>
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
 800b0d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0dc:	4613      	mov	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	3310      	adds	r3, #16
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	e00b      	b.n	800b106 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4413      	add	r3, r2
 800b104:	3304      	adds	r3, #4
 800b106:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2202      	movs	r2, #2
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fc37 	bl	800b988 <USBD_CtlSendData>
              break;
 800b11a:	e06a      	b.n	800b1f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b11c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b120:	2b00      	cmp	r3, #0
 800b122:	da11      	bge.n	800b148 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	f003 020f 	and.w	r2, r3, #15
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	3324      	adds	r3, #36	; 0x24
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d117      	bne.n	800b16e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fbb0 	bl	800b8a6 <USBD_CtlError>
                  break;
 800b146:	e054      	b.n	800b1f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	f003 020f 	and.w	r2, r3, #15
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fb9d 	bl	800b8a6 <USBD_CtlError>
                  break;
 800b16c:	e041      	b.n	800b1f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b16e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b172:	2b00      	cmp	r3, #0
 800b174:	da0b      	bge.n	800b18e <USBD_StdEPReq+0x2b2>
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b17c:	4613      	mov	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4413      	add	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	3310      	adds	r3, #16
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	4413      	add	r3, r2
 800b18a:	3304      	adds	r3, #4
 800b18c:	e00b      	b.n	800b1a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <USBD_StdEPReq+0x2d8>
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b80      	cmp	r3, #128	; 0x80
 800b1b2:	d103      	bne.n	800b1bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	e00e      	b.n	800b1da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 f88d 	bl	800c2e0 <USBD_LL_IsStallEP>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d003      	beq.n	800b1d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e002      	b.n	800b1da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2202      	movs	r2, #2
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fbd1 	bl	800b988 <USBD_CtlSendData>
              break;
 800b1e6:	e004      	b.n	800b1f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fb5b 	bl	800b8a6 <USBD_CtlError>
              break;
 800b1f0:	bf00      	nop
          }
          break;
 800b1f2:	e004      	b.n	800b1fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fb55 	bl	800b8a6 <USBD_CtlError>
          break;
 800b1fc:	bf00      	nop
      }
      break;
 800b1fe:	e005      	b.n	800b20c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fb4f 	bl	800b8a6 <USBD_CtlError>
      break;
 800b208:	e000      	b.n	800b20c <USBD_StdEPReq+0x330>
      break;
 800b20a:	bf00      	nop
  }

  return ret;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	885b      	ldrh	r3, [r3, #2]
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	b29b      	uxth	r3, r3
 800b236:	3b01      	subs	r3, #1
 800b238:	2b06      	cmp	r3, #6
 800b23a:	f200 8128 	bhi.w	800b48e <USBD_GetDescriptor+0x276>
 800b23e:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <USBD_GetDescriptor+0x2c>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b261 	.word	0x0800b261
 800b248:	0800b279 	.word	0x0800b279
 800b24c:	0800b2b9 	.word	0x0800b2b9
 800b250:	0800b48f 	.word	0x0800b48f
 800b254:	0800b48f 	.word	0x0800b48f
 800b258:	0800b42f 	.word	0x0800b42f
 800b25c:	0800b45b 	.word	0x0800b45b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	7c12      	ldrb	r2, [r2, #16]
 800b26c:	f107 0108 	add.w	r1, r7, #8
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	60f8      	str	r0, [r7, #12]
      break;
 800b276:	e112      	b.n	800b49e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7c1b      	ldrb	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10d      	bne.n	800b29c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b288:	f107 0208 	add.w	r2, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	2202      	movs	r2, #2
 800b298:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b29a:	e100      	b.n	800b49e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	f107 0208 	add.w	r2, r7, #8
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	701a      	strb	r2, [r3, #0]
      break;
 800b2b6:	e0f2      	b.n	800b49e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	885b      	ldrh	r3, [r3, #2]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b05      	cmp	r3, #5
 800b2c0:	f200 80ac 	bhi.w	800b41c <USBD_GetDescriptor+0x204>
 800b2c4:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <USBD_GetDescriptor+0xb4>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b2e5 	.word	0x0800b2e5
 800b2d0:	0800b319 	.word	0x0800b319
 800b2d4:	0800b34d 	.word	0x0800b34d
 800b2d8:	0800b381 	.word	0x0800b381
 800b2dc:	0800b3b5 	.word	0x0800b3b5
 800b2e0:	0800b3e9 	.word	0x0800b3e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00b      	beq.n	800b308 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	7c12      	ldrb	r2, [r2, #16]
 800b2fc:	f107 0108 	add.w	r1, r7, #8
 800b300:	4610      	mov	r0, r2
 800b302:	4798      	blx	r3
 800b304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b306:	e091      	b.n	800b42c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 facb 	bl	800b8a6 <USBD_CtlError>
            err++;
 800b310:	7afb      	ldrb	r3, [r7, #11]
 800b312:	3301      	adds	r3, #1
 800b314:	72fb      	strb	r3, [r7, #11]
          break;
 800b316:	e089      	b.n	800b42c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	7c12      	ldrb	r2, [r2, #16]
 800b330:	f107 0108 	add.w	r1, r7, #8
 800b334:	4610      	mov	r0, r2
 800b336:	4798      	blx	r3
 800b338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33a:	e077      	b.n	800b42c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fab1 	bl	800b8a6 <USBD_CtlError>
            err++;
 800b344:	7afb      	ldrb	r3, [r7, #11]
 800b346:	3301      	adds	r3, #1
 800b348:	72fb      	strb	r3, [r7, #11]
          break;
 800b34a:	e06f      	b.n	800b42c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	7c12      	ldrb	r2, [r2, #16]
 800b364:	f107 0108 	add.w	r1, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b36e:	e05d      	b.n	800b42c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fa97 	bl	800b8a6 <USBD_CtlError>
            err++;
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	3301      	adds	r3, #1
 800b37c:	72fb      	strb	r3, [r7, #11]
          break;
 800b37e:	e055      	b.n	800b42c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7c12      	ldrb	r2, [r2, #16]
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a2:	e043      	b.n	800b42c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa7d 	bl	800b8a6 <USBD_CtlError>
            err++;
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b2:	e03b      	b.n	800b42c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	f107 0108 	add.w	r1, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d6:	e029      	b.n	800b42c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa63 	bl	800b8a6 <USBD_CtlError>
            err++;
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3e6:	e021      	b.n	800b42c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00b      	beq.n	800b40c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	7c12      	ldrb	r2, [r2, #16]
 800b400:	f107 0108 	add.w	r1, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40a:	e00f      	b.n	800b42c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa49 	bl	800b8a6 <USBD_CtlError>
            err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
          break;
 800b41a:	e007      	b.n	800b42c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa41 	bl	800b8a6 <USBD_CtlError>
          err++;
 800b424:	7afb      	ldrb	r3, [r7, #11]
 800b426:	3301      	adds	r3, #1
 800b428:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b42a:	bf00      	nop
      }
      break;
 800b42c:	e037      	b.n	800b49e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7c1b      	ldrb	r3, [r3, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43e:	f107 0208 	add.w	r2, r7, #8
 800b442:	4610      	mov	r0, r2
 800b444:	4798      	blx	r3
 800b446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b448:	e029      	b.n	800b49e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa2a 	bl	800b8a6 <USBD_CtlError>
        err++;
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	3301      	adds	r3, #1
 800b456:	72fb      	strb	r3, [r7, #11]
      break;
 800b458:	e021      	b.n	800b49e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7c1b      	ldrb	r3, [r3, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10d      	bne.n	800b47e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	f107 0208 	add.w	r2, r7, #8
 800b46e:	4610      	mov	r0, r2
 800b470:	4798      	blx	r3
 800b472:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	2207      	movs	r2, #7
 800b47a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b47c:	e00f      	b.n	800b49e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa10 	bl	800b8a6 <USBD_CtlError>
        err++;
 800b486:	7afb      	ldrb	r3, [r7, #11]
 800b488:	3301      	adds	r3, #1
 800b48a:	72fb      	strb	r3, [r7, #11]
      break;
 800b48c:	e007      	b.n	800b49e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 fa08 	bl	800b8a6 <USBD_CtlError>
      err++;
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	3301      	adds	r3, #1
 800b49a:	72fb      	strb	r3, [r7, #11]
      break;
 800b49c:	bf00      	nop
  }

  if (err != 0U)
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d11e      	bne.n	800b4e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	88db      	ldrh	r3, [r3, #6]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d016      	beq.n	800b4da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b4ac:	893b      	ldrh	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00e      	beq.n	800b4d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	88da      	ldrh	r2, [r3, #6]
 800b4b6:	893b      	ldrh	r3, [r7, #8]
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	bf28      	it	cs
 800b4bc:	4613      	movcs	r3, r2
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4c2:	893b      	ldrh	r3, [r7, #8]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fa5d 	bl	800b988 <USBD_CtlSendData>
 800b4ce:	e009      	b.n	800b4e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f9e7 	bl	800b8a6 <USBD_CtlError>
 800b4d8:	e004      	b.n	800b4e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 faae 	bl	800ba3c <USBD_CtlSendStatus>
 800b4e0:	e000      	b.n	800b4e4 <USBD_GetDescriptor+0x2cc>
    return;
 800b4e2:	bf00      	nop
  }
}
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop

0800b4ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	889b      	ldrh	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d131      	bne.n	800b562 <USBD_SetAddress+0x76>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	88db      	ldrh	r3, [r3, #6]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d12d      	bne.n	800b562 <USBD_SetAddress+0x76>
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	885b      	ldrh	r3, [r3, #2]
 800b50a:	2b7f      	cmp	r3, #127	; 0x7f
 800b50c:	d829      	bhi.n	800b562 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	885b      	ldrh	r3, [r3, #2]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b518:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d104      	bne.n	800b530 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f9bc 	bl	800b8a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52e:	e01d      	b.n	800b56c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7bfa      	ldrb	r2, [r7, #15]
 800b534:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fefb 	bl	800c338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa7a 	bl	800ba3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2202      	movs	r2, #2
 800b552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b556:	e009      	b.n	800b56c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b560:	e004      	b.n	800b56c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f99e 	bl	800b8a6 <USBD_CtlError>
  }
}
 800b56a:	bf00      	nop
 800b56c:	bf00      	nop
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	885b      	ldrh	r3, [r3, #2]
 800b586:	b2da      	uxtb	r2, r3
 800b588:	4b4e      	ldr	r3, [pc, #312]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b58a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b58c:	4b4d      	ldr	r3, [pc, #308]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d905      	bls.n	800b5a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f985 	bl	800b8a6 <USBD_CtlError>
    return USBD_FAIL;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e08c      	b.n	800b6ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d002      	beq.n	800b5b2 <USBD_SetConfig+0x3e>
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d029      	beq.n	800b604 <USBD_SetConfig+0x90>
 800b5b0:	e075      	b.n	800b69e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5b2:	4b44      	ldr	r3, [pc, #272]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d020      	beq.n	800b5fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5ba:	4b42      	ldr	r3, [pc, #264]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5c4:	4b3f      	ldr	r3, [pc, #252]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7fe ffe7 	bl	800a59e <USBD_SetClassConfig>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d008      	beq.n	800b5ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f962 	bl	800b8a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5ea:	e065      	b.n	800b6b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa25 	bl	800ba3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5fa:	e05d      	b.n	800b6b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fa1d 	bl	800ba3c <USBD_CtlSendStatus>
      break;
 800b602:	e059      	b.n	800b6b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b604:	4b2f      	ldr	r3, [pc, #188]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d112      	bne.n	800b632 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2202      	movs	r2, #2
 800b610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b614:	4b2b      	ldr	r3, [pc, #172]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	461a      	mov	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe ffd6 	bl	800a5d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fa06 	bl	800ba3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b630:	e042      	b.n	800b6b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b632:	4b24      	ldr	r3, [pc, #144]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d02a      	beq.n	800b696 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7fe ffc4 	bl	800a5d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b64e:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b658:	4b1a      	ldr	r3, [pc, #104]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7fe ff9d 	bl	800a59e <USBD_SetClassConfig>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00f      	beq.n	800b68e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f918 	bl	800b8a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fe ffa9 	bl	800a5d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b68c:	e014      	b.n	800b6b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f9d4 	bl	800ba3c <USBD_CtlSendStatus>
      break;
 800b694:	e010      	b.n	800b6b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f9d0 	bl	800ba3c <USBD_CtlSendStatus>
      break;
 800b69c:	e00c      	b.n	800b6b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f900 	bl	800b8a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6a6:	4b07      	ldr	r3, [pc, #28]	; (800b6c4 <USBD_SetConfig+0x150>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7fe ff92 	bl	800a5d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b6:	bf00      	nop
  }

  return ret;
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	200023d8 	.word	0x200023d8

0800b6c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	88db      	ldrh	r3, [r3, #6]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d004      	beq.n	800b6e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f8e2 	bl	800b8a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6e2:	e023      	b.n	800b72c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	dc02      	bgt.n	800b6f6 <USBD_GetConfig+0x2e>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dc03      	bgt.n	800b6fc <USBD_GetConfig+0x34>
 800b6f4:	e015      	b.n	800b722 <USBD_GetConfig+0x5a>
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d00b      	beq.n	800b712 <USBD_GetConfig+0x4a>
 800b6fa:	e012      	b.n	800b722 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3308      	adds	r3, #8
 800b706:	2201      	movs	r2, #1
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f93c 	bl	800b988 <USBD_CtlSendData>
        break;
 800b710:	e00c      	b.n	800b72c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3304      	adds	r3, #4
 800b716:	2201      	movs	r2, #1
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f934 	bl	800b988 <USBD_CtlSendData>
        break;
 800b720:	e004      	b.n	800b72c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f8be 	bl	800b8a6 <USBD_CtlError>
        break;
 800b72a:	bf00      	nop
}
 800b72c:	bf00      	nop
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	3b01      	subs	r3, #1
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d81e      	bhi.n	800b78a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	88db      	ldrh	r3, [r3, #6]
 800b750:	2b02      	cmp	r3, #2
 800b752:	d004      	beq.n	800b75e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f8a5 	bl	800b8a6 <USBD_CtlError>
        break;
 800b75c:	e01a      	b.n	800b794 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	f043 0202 	orr.w	r2, r3, #2
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	330c      	adds	r3, #12
 800b77e:	2202      	movs	r2, #2
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f900 	bl	800b988 <USBD_CtlSendData>
      break;
 800b788:	e004      	b.n	800b794 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f88a 	bl	800b8a6 <USBD_CtlError>
      break;
 800b792:	bf00      	nop
  }
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	885b      	ldrh	r3, [r3, #2]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d107      	bne.n	800b7be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f940 	bl	800ba3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7bc:	e013      	b.n	800b7e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	885b      	ldrh	r3, [r3, #2]
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d10b      	bne.n	800b7de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	889b      	ldrh	r3, [r3, #4]
 800b7ca:	0a1b      	lsrs	r3, r3, #8
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f930 	bl	800ba3c <USBD_CtlSendStatus>
}
 800b7dc:	e003      	b.n	800b7e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f860 	bl	800b8a6 <USBD_CtlError>
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b082      	sub	sp, #8
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	3b01      	subs	r3, #1
 800b802:	2b02      	cmp	r3, #2
 800b804:	d80b      	bhi.n	800b81e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	885b      	ldrh	r3, [r3, #2]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d10c      	bne.n	800b828 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f910 	bl	800ba3c <USBD_CtlSendStatus>
      }
      break;
 800b81c:	e004      	b.n	800b828 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f840 	bl	800b8a6 <USBD_CtlError>
      break;
 800b826:	e000      	b.n	800b82a <USBD_ClrFeature+0x3c>
      break;
 800b828:	bf00      	nop
  }
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b084      	sub	sp, #16
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	781a      	ldrb	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	781a      	ldrb	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f7ff fa41 	bl	800ace4 <SWAPBYTE>
 800b862:	4603      	mov	r3, r0
 800b864:	461a      	mov	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7ff fa34 	bl	800ace4 <SWAPBYTE>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3301      	adds	r3, #1
 800b888:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff fa27 	bl	800ace4 <SWAPBYTE>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	80da      	strh	r2, [r3, #6]
}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8b0:	2180      	movs	r1, #128	; 0x80
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fcd6 	bl	800c264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fcd2 	bl	800c264 <USBD_LL_StallEP>
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d036      	beq.n	800b94c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8e2:	6938      	ldr	r0, [r7, #16]
 800b8e4:	f000 f836 	bl	800b954 <USBD_GetLen>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	701a      	strb	r2, [r3, #0]
  idx++;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	3301      	adds	r3, #1
 800b906:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b908:	7dfb      	ldrb	r3, [r7, #23]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	4413      	add	r3, r2
 800b90e:	2203      	movs	r2, #3
 800b910:	701a      	strb	r2, [r3, #0]
  idx++;
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	3301      	adds	r3, #1
 800b916:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b918:	e013      	b.n	800b942 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	4413      	add	r3, r2
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	7812      	ldrb	r2, [r2, #0]
 800b924:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3301      	adds	r3, #1
 800b92a:	613b      	str	r3, [r7, #16]
    idx++;
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	3301      	adds	r3, #1
 800b930:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	4413      	add	r3, r2
 800b938:	2200      	movs	r2, #0
 800b93a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
 800b93e:	3301      	adds	r3, #1
 800b940:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e7      	bne.n	800b91a <USBD_GetString+0x52>
 800b94a:	e000      	b.n	800b94e <USBD_GetString+0x86>
    return;
 800b94c:	bf00      	nop
  }
}
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b964:	e005      	b.n	800b972 <USBD_GetLen+0x1e>
  {
    len++;
 800b966:	7bfb      	ldrb	r3, [r7, #15]
 800b968:	3301      	adds	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	3301      	adds	r3, #1
 800b970:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1f5      	bne.n	800b966 <USBD_GetLen+0x12>
  }

  return len;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2202      	movs	r2, #2
 800b998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 fce1 	bl	800c376 <USBD_LL_Transmit>

  return USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	60b9      	str	r1, [r7, #8]
 800b9c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 fcd0 	bl	800c376 <USBD_LL_Transmit>

  return USBD_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2203      	movs	r2, #3
 800b9f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	2100      	movs	r1, #0
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 fcd4 	bl	800c3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	60f8      	str	r0, [r7, #12]
 800ba22:	60b9      	str	r1, [r7, #8]
 800ba24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f000 fcc3 	bl	800c3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2204      	movs	r2, #4
 800ba48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2100      	movs	r1, #0
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fc8f 	bl	800c376 <USBD_LL_Transmit>

  return USBD_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b082      	sub	sp, #8
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2205      	movs	r2, #5
 800ba6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba72:	2300      	movs	r3, #0
 800ba74:	2200      	movs	r2, #0
 800ba76:	2100      	movs	r1, #0
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fc9d 	bl	800c3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4912      	ldr	r1, [pc, #72]	; (800bad8 <MX_USB_DEVICE_Init+0x50>)
 800ba90:	4812      	ldr	r0, [pc, #72]	; (800badc <MX_USB_DEVICE_Init+0x54>)
 800ba92:	f7fe fd07 	bl	800a4a4 <USBD_Init>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba9c:	f7f6 f942 	bl	8001d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800baa0:	490f      	ldr	r1, [pc, #60]	; (800bae0 <MX_USB_DEVICE_Init+0x58>)
 800baa2:	480e      	ldr	r0, [pc, #56]	; (800badc <MX_USB_DEVICE_Init+0x54>)
 800baa4:	f7fe fd2e 	bl	800a504 <USBD_RegisterClass>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800baae:	f7f6 f939 	bl	8001d24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bab2:	490c      	ldr	r1, [pc, #48]	; (800bae4 <MX_USB_DEVICE_Init+0x5c>)
 800bab4:	4809      	ldr	r0, [pc, #36]	; (800badc <MX_USB_DEVICE_Init+0x54>)
 800bab6:	f7fe fc1f 	bl	800a2f8 <USBD_CDC_RegisterInterface>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bac0:	f7f6 f930 	bl	8001d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bac4:	4805      	ldr	r0, [pc, #20]	; (800badc <MX_USB_DEVICE_Init+0x54>)
 800bac6:	f7fe fd53 	bl	800a570 <USBD_Start>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bad0:	f7f6 f928 	bl	8001d24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bad4:	bf00      	nop
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	200001d0 	.word	0x200001d0
 800badc:	200023dc 	.word	0x200023dc
 800bae0:	2000013c 	.word	0x2000013c
 800bae4:	200001bc 	.word	0x200001bc

0800bae8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800baec:	2200      	movs	r2, #0
 800baee:	4905      	ldr	r1, [pc, #20]	; (800bb04 <CDC_Init_FS+0x1c>)
 800baf0:	4805      	ldr	r0, [pc, #20]	; (800bb08 <CDC_Init_FS+0x20>)
 800baf2:	f7fe fc1b 	bl	800a32c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baf6:	4905      	ldr	r1, [pc, #20]	; (800bb0c <CDC_Init_FS+0x24>)
 800baf8:	4803      	ldr	r0, [pc, #12]	; (800bb08 <CDC_Init_FS+0x20>)
 800bafa:	f7fe fc39 	bl	800a370 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bafe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	20002ab8 	.word	0x20002ab8
 800bb08:	200023dc 	.word	0x200023dc
 800bb0c:	200026b8 	.word	0x200026b8

0800bb10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	2b23      	cmp	r3, #35	; 0x23
 800bb34:	d84a      	bhi.n	800bbcc <CDC_Control_FS+0xac>
 800bb36:	a201      	add	r2, pc, #4	; (adr r2, 800bb3c <CDC_Control_FS+0x1c>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bbcd 	.word	0x0800bbcd
 800bb40:	0800bbcd 	.word	0x0800bbcd
 800bb44:	0800bbcd 	.word	0x0800bbcd
 800bb48:	0800bbcd 	.word	0x0800bbcd
 800bb4c:	0800bbcd 	.word	0x0800bbcd
 800bb50:	0800bbcd 	.word	0x0800bbcd
 800bb54:	0800bbcd 	.word	0x0800bbcd
 800bb58:	0800bbcd 	.word	0x0800bbcd
 800bb5c:	0800bbcd 	.word	0x0800bbcd
 800bb60:	0800bbcd 	.word	0x0800bbcd
 800bb64:	0800bbcd 	.word	0x0800bbcd
 800bb68:	0800bbcd 	.word	0x0800bbcd
 800bb6c:	0800bbcd 	.word	0x0800bbcd
 800bb70:	0800bbcd 	.word	0x0800bbcd
 800bb74:	0800bbcd 	.word	0x0800bbcd
 800bb78:	0800bbcd 	.word	0x0800bbcd
 800bb7c:	0800bbcd 	.word	0x0800bbcd
 800bb80:	0800bbcd 	.word	0x0800bbcd
 800bb84:	0800bbcd 	.word	0x0800bbcd
 800bb88:	0800bbcd 	.word	0x0800bbcd
 800bb8c:	0800bbcd 	.word	0x0800bbcd
 800bb90:	0800bbcd 	.word	0x0800bbcd
 800bb94:	0800bbcd 	.word	0x0800bbcd
 800bb98:	0800bbcd 	.word	0x0800bbcd
 800bb9c:	0800bbcd 	.word	0x0800bbcd
 800bba0:	0800bbcd 	.word	0x0800bbcd
 800bba4:	0800bbcd 	.word	0x0800bbcd
 800bba8:	0800bbcd 	.word	0x0800bbcd
 800bbac:	0800bbcd 	.word	0x0800bbcd
 800bbb0:	0800bbcd 	.word	0x0800bbcd
 800bbb4:	0800bbcd 	.word	0x0800bbcd
 800bbb8:	0800bbcd 	.word	0x0800bbcd
 800bbbc:	0800bbcd 	.word	0x0800bbcd
 800bbc0:	0800bbcd 	.word	0x0800bbcd
 800bbc4:	0800bbcd 	.word	0x0800bbcd
 800bbc8:	0800bbcd 	.word	0x0800bbcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbcc:	bf00      	nop
  }

  return (USBD_OK);
 800bbce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	4805      	ldr	r0, [pc, #20]	; (800bc00 <CDC_Receive_FS+0x24>)
 800bbea:	f7fe fbc1 	bl	800a370 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbee:	4804      	ldr	r0, [pc, #16]	; (800bc00 <CDC_Receive_FS+0x24>)
 800bbf0:	f7fe fc22 	bl	800a438 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bbf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	200023dc 	.word	0x200023dc

0800bc04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc14:	4b0d      	ldr	r3, [pc, #52]	; (800bc4c <CDC_Transmit_FS+0x48>)
 800bc16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e00b      	b.n	800bc42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc2a:	887b      	ldrh	r3, [r7, #2]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	4806      	ldr	r0, [pc, #24]	; (800bc4c <CDC_Transmit_FS+0x48>)
 800bc32:	f7fe fb7b 	bl	800a32c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc36:	4805      	ldr	r0, [pc, #20]	; (800bc4c <CDC_Transmit_FS+0x48>)
 800bc38:	f7fe fbb8 	bl	800a3ac <USBD_CDC_TransmitPacket>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	200023dc 	.word	0x200023dc

0800bc50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
	...

0800bc74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2212      	movs	r2, #18
 800bc84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc86:	4b03      	ldr	r3, [pc, #12]	; (800bc94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	200001ec 	.word	0x200001ec

0800bc98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2204      	movs	r2, #4
 800bca8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcaa:	4b03      	ldr	r3, [pc, #12]	; (800bcb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20000200 	.word	0x20000200

0800bcbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcc8:	79fb      	ldrb	r3, [r7, #7]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d105      	bne.n	800bcda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	4907      	ldr	r1, [pc, #28]	; (800bcf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcd2:	4808      	ldr	r0, [pc, #32]	; (800bcf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcd4:	f7ff fdf8 	bl	800b8c8 <USBD_GetString>
 800bcd8:	e004      	b.n	800bce4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4904      	ldr	r1, [pc, #16]	; (800bcf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcde:	4805      	ldr	r0, [pc, #20]	; (800bcf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bce0:	f7ff fdf2 	bl	800b8c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce4:	4b02      	ldr	r3, [pc, #8]	; (800bcf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20002eb8 	.word	0x20002eb8
 800bcf4:	0800d920 	.word	0x0800d920

0800bcf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	6039      	str	r1, [r7, #0]
 800bd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	4904      	ldr	r1, [pc, #16]	; (800bd18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd08:	4804      	ldr	r0, [pc, #16]	; (800bd1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd0a:	f7ff fddd 	bl	800b8c8 <USBD_GetString>
  return USBD_StrDesc;
 800bd0e:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20002eb8 	.word	0x20002eb8
 800bd1c:	0800d938 	.word	0x0800d938

0800bd20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	221a      	movs	r2, #26
 800bd30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd32:	f000 f843 	bl	800bdbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd36:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000204 	.word	0x20000204

0800bd44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd50:	79fb      	ldrb	r3, [r7, #7]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d105      	bne.n	800bd62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4907      	ldr	r1, [pc, #28]	; (800bd78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd5a:	4808      	ldr	r0, [pc, #32]	; (800bd7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd5c:	f7ff fdb4 	bl	800b8c8 <USBD_GetString>
 800bd60:	e004      	b.n	800bd6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4904      	ldr	r1, [pc, #16]	; (800bd78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd66:	4805      	ldr	r0, [pc, #20]	; (800bd7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd68:	f7ff fdae 	bl	800b8c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20002eb8 	.word	0x20002eb8
 800bd7c:	0800d94c 	.word	0x0800d94c

0800bd80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d105      	bne.n	800bd9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4907      	ldr	r1, [pc, #28]	; (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd96:	4808      	ldr	r0, [pc, #32]	; (800bdb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd98:	f7ff fd96 	bl	800b8c8 <USBD_GetString>
 800bd9c:	e004      	b.n	800bda8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4904      	ldr	r1, [pc, #16]	; (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bda2:	4805      	ldr	r0, [pc, #20]	; (800bdb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bda4:	f7ff fd90 	bl	800b8c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20002eb8 	.word	0x20002eb8
 800bdb8:	0800d958 	.word	0x0800d958

0800bdbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdc2:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <Get_SerialNum+0x44>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdc8:	4b0e      	ldr	r3, [pc, #56]	; (800be04 <Get_SerialNum+0x48>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdce:	4b0e      	ldr	r3, [pc, #56]	; (800be08 <Get_SerialNum+0x4c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d009      	beq.n	800bdf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bde2:	2208      	movs	r2, #8
 800bde4:	4909      	ldr	r1, [pc, #36]	; (800be0c <Get_SerialNum+0x50>)
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 f814 	bl	800be14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdec:	2204      	movs	r2, #4
 800bdee:	4908      	ldr	r1, [pc, #32]	; (800be10 <Get_SerialNum+0x54>)
 800bdf0:	68b8      	ldr	r0, [r7, #8]
 800bdf2:	f000 f80f 	bl	800be14 <IntToUnicode>
  }
}
 800bdf6:	bf00      	nop
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	1fff7a10 	.word	0x1fff7a10
 800be04:	1fff7a14 	.word	0x1fff7a14
 800be08:	1fff7a18 	.word	0x1fff7a18
 800be0c:	20000206 	.word	0x20000206
 800be10:	20000216 	.word	0x20000216

0800be14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be14:	b480      	push	{r7}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	4613      	mov	r3, r2
 800be20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]
 800be2a:	e027      	b.n	800be7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	0f1b      	lsrs	r3, r3, #28
 800be30:	2b09      	cmp	r3, #9
 800be32:	d80b      	bhi.n	800be4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	0f1b      	lsrs	r3, r3, #28
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	4619      	mov	r1, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	440b      	add	r3, r1
 800be44:	3230      	adds	r2, #48	; 0x30
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	e00a      	b.n	800be62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	0f1b      	lsrs	r3, r3, #28
 800be50:	b2da      	uxtb	r2, r3
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4619      	mov	r1, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	440b      	add	r3, r1
 800be5c:	3237      	adds	r2, #55	; 0x37
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	011b      	lsls	r3, r3, #4
 800be66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	3301      	adds	r3, #1
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	4413      	add	r3, r2
 800be72:	2200      	movs	r2, #0
 800be74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	3301      	adds	r3, #1
 800be7a:	75fb      	strb	r3, [r7, #23]
 800be7c:	7dfa      	ldrb	r2, [r7, #23]
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	429a      	cmp	r2, r3
 800be82:	d3d3      	bcc.n	800be2c <IntToUnicode+0x18>
  }
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	371c      	adds	r7, #28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
	...

0800be94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	609a      	str	r2, [r3, #8]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800beb4:	d13a      	bne.n	800bf2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
 800beba:	4b1e      	ldr	r3, [pc, #120]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	4a1d      	ldr	r2, [pc, #116]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bec0:	f043 0301 	orr.w	r3, r3, #1
 800bec4:	6313      	str	r3, [r2, #48]	; 0x30
 800bec6:	4b1b      	ldr	r3, [pc, #108]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	613b      	str	r3, [r7, #16]
 800bed0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bed2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed8:	2302      	movs	r3, #2
 800beda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bee0:	2303      	movs	r3, #3
 800bee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bee4:	230a      	movs	r3, #10
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bee8:	f107 0314 	add.w	r3, r7, #20
 800beec:	4619      	mov	r1, r3
 800beee:	4812      	ldr	r0, [pc, #72]	; (800bf38 <HAL_PCD_MspInit+0xa4>)
 800bef0:	f7f8 f990 	bl	8004214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bef4:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef8:	4a0e      	ldr	r2, [pc, #56]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800befa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800befe:	6353      	str	r3, [r2, #52]	; 0x34
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bf06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf08:	4a0a      	ldr	r2, [pc, #40]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bf0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf0e:	6453      	str	r3, [r2, #68]	; 0x44
 800bf10:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bf12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	2043      	movs	r0, #67	; 0x43
 800bf22:	f7f7 ff1d 	bl	8003d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf26:	2043      	movs	r0, #67	; 0x43
 800bf28:	f7f7 ff36 	bl	8003d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	3728      	adds	r7, #40	; 0x28
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	40023800 	.word	0x40023800
 800bf38:	40020000 	.word	0x40020000

0800bf3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf50:	4619      	mov	r1, r3
 800bf52:	4610      	mov	r0, r2
 800bf54:	f7fe fb59 	bl	800a60a <USBD_LL_SetupStage>
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf72:	78fa      	ldrb	r2, [r7, #3]
 800bf74:	6879      	ldr	r1, [r7, #4]
 800bf76:	4613      	mov	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	440b      	add	r3, r1
 800bf80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	78fb      	ldrb	r3, [r7, #3]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f7fe fb93 	bl	800a6b4 <USBD_LL_DataOutStage>
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bfa8:	78fa      	ldrb	r2, [r7, #3]
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	4613      	mov	r3, r2
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	440b      	add	r3, r1
 800bfb6:	334c      	adds	r3, #76	; 0x4c
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	78fb      	ldrb	r3, [r7, #3]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	f7fe fc2c 	bl	800a81a <USBD_LL_DataInStage>
}
 800bfc2:	bf00      	nop
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fd60 	bl	800aa9e <USBD_LL_SOF>
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfee:	2301      	movs	r3, #1
 800bff0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d001      	beq.n	800bffe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bffa:	f7f5 fe93 	bl	8001d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c004:	7bfa      	ldrb	r2, [r7, #15]
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fd0a 	bl	800aa22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c014:	4618      	mov	r0, r3
 800c016:	f7fe fcb2 	bl	800a97e <USBD_LL_Reset>
}
 800c01a:	bf00      	nop
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fd05 	bl	800aa42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c04a:	f043 0301 	orr.w	r3, r3, #1
 800c04e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c058:	4b04      	ldr	r3, [pc, #16]	; (800c06c <HAL_PCD_SuspendCallback+0x48>)
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	4a03      	ldr	r2, [pc, #12]	; (800c06c <HAL_PCD_SuspendCallback+0x48>)
 800c05e:	f043 0306 	orr.w	r3, r3, #6
 800c062:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	e000ed00 	.word	0xe000ed00

0800c070 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fcf5 	bl	800aa6e <USBD_LL_Resume>
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe fd4d 	bl	800ab42 <USBD_LL_IsoOUTIncomplete>
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0c2:	78fa      	ldrb	r2, [r7, #3]
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fd09 	bl	800aade <USBD_LL_IsoINIncomplete>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fd5f 	bl	800aba6 <USBD_LL_DevConnected>
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fd5c 	bl	800abbc <USBD_LL_DevDisconnected>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d13c      	bne.n	800c196 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c11c:	4a20      	ldr	r2, [pc, #128]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a1e      	ldr	r2, [pc, #120]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c128:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c12c:	4b1c      	ldr	r3, [pc, #112]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c12e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c132:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c134:	4b1a      	ldr	r3, [pc, #104]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c136:	2204      	movs	r2, #4
 800c138:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c13a:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c13c:	2202      	movs	r2, #2
 800c13e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c140:	4b17      	ldr	r3, [pc, #92]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c142:	2200      	movs	r2, #0
 800c144:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c146:	4b16      	ldr	r3, [pc, #88]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c148:	2202      	movs	r2, #2
 800c14a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c14c:	4b14      	ldr	r3, [pc, #80]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c14e:	2200      	movs	r2, #0
 800c150:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c152:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c154:	2200      	movs	r2, #0
 800c156:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c158:	4b11      	ldr	r3, [pc, #68]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c15e:	4b10      	ldr	r3, [pc, #64]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c160:	2200      	movs	r2, #0
 800c162:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c164:	4b0e      	ldr	r3, [pc, #56]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c166:	2200      	movs	r2, #0
 800c168:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c16a:	480d      	ldr	r0, [pc, #52]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c16c:	f7f8 f9ef 	bl	800454e <HAL_PCD_Init>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c176:	f7f5 fdd5 	bl	8001d24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c17a:	2180      	movs	r1, #128	; 0x80
 800c17c:	4808      	ldr	r0, [pc, #32]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c17e:	f7f9 fc46 	bl	8005a0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c182:	2240      	movs	r2, #64	; 0x40
 800c184:	2100      	movs	r1, #0
 800c186:	4806      	ldr	r0, [pc, #24]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c188:	f7f9 fbfa 	bl	8005980 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c18c:	2280      	movs	r2, #128	; 0x80
 800c18e:	2101      	movs	r1, #1
 800c190:	4803      	ldr	r0, [pc, #12]	; (800c1a0 <USBD_LL_Init+0x94>)
 800c192:	f7f9 fbf5 	bl	8005980 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	200030b8 	.word	0x200030b8

0800c1a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f8 fae4 	bl	8004788 <HAL_PCD_Start>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f942 	bl	800c450 <USBD_Get_USB_Status>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	70fb      	strb	r3, [r7, #3]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70bb      	strb	r3, [r7, #2]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c202:	78bb      	ldrb	r3, [r7, #2]
 800c204:	883a      	ldrh	r2, [r7, #0]
 800c206:	78f9      	ldrb	r1, [r7, #3]
 800c208:	f7f8 ffb5 	bl	8005176 <HAL_PCD_EP_Open>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 f91c 	bl	800c450 <USBD_Get_USB_Status>
 800c218:	4603      	mov	r3, r0
 800c21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c240:	78fa      	ldrb	r2, [r7, #3]
 800c242:	4611      	mov	r1, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f7f8 fffe 	bl	8005246 <HAL_PCD_EP_Close>
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f8fd 	bl	800c450 <USBD_Get_USB_Status>
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c27e:	78fa      	ldrb	r2, [r7, #3]
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f7f9 f8d6 	bl	8005434 <HAL_PCD_EP_SetStall>
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 f8de 	bl	800c450 <USBD_Get_USB_Status>
 800c294:	4603      	mov	r3, r0
 800c296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c298:	7bbb      	ldrb	r3, [r7, #14]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2bc:	78fa      	ldrb	r2, [r7, #3]
 800c2be:	4611      	mov	r1, r2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7f9 f91b 	bl	80054fc <HAL_PCD_EP_ClrStall>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 f8bf 	bl	800c450 <USBD_Get_USB_Status>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	da0b      	bge.n	800c314 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2fc:	78fb      	ldrb	r3, [r7, #3]
 800c2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c302:	68f9      	ldr	r1, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	440b      	add	r3, r1
 800c30e:	333e      	adds	r3, #62	; 0x3e
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	e00b      	b.n	800c32c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c31a:	68f9      	ldr	r1, [r7, #12]
 800c31c:	4613      	mov	r3, r2
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c32a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c352:	78fa      	ldrb	r2, [r7, #3]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f7f8 fee8 	bl	800512c <HAL_PCD_SetAddress>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f874 	bl	800c450 <USBD_Get_USB_Status>
 800c368:	4603      	mov	r3, r0
 800c36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	460b      	mov	r3, r1
 800c384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c394:	7af9      	ldrb	r1, [r7, #11]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	f7f9 f801 	bl	80053a0 <HAL_PCD_EP_Transmit>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 f853 	bl	800c450 <USBD_Get_USB_Status>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	607a      	str	r2, [r7, #4]
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3d6:	7af9      	ldrb	r1, [r7, #11]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	f7f8 ff7d 	bl	80052da <HAL_PCD_EP_Receive>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 f832 	bl	800c450 <USBD_Get_USB_Status>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c40c:	78fa      	ldrb	r2, [r7, #3]
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f7f8 ffad 	bl	8005370 <HAL_PCD_EP_GetRxCount>
 800c416:	4603      	mov	r3, r0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c428:	4b03      	ldr	r3, [pc, #12]	; (800c438 <USBD_static_malloc+0x18>)
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	370c      	adds	r7, #12
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	200035c4 	.word	0x200035c4

0800c43c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]

}
 800c444:	bf00      	nop
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d817      	bhi.n	800c494 <USBD_Get_USB_Status+0x44>
 800c464:	a201      	add	r2, pc, #4	; (adr r2, 800c46c <USBD_Get_USB_Status+0x1c>)
 800c466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46a:	bf00      	nop
 800c46c:	0800c47d 	.word	0x0800c47d
 800c470:	0800c483 	.word	0x0800c483
 800c474:	0800c489 	.word	0x0800c489
 800c478:	0800c48f 	.word	0x0800c48f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
    break;
 800c480:	e00b      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c482:	2303      	movs	r3, #3
 800c484:	73fb      	strb	r3, [r7, #15]
    break;
 800c486:	e008      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c488:	2301      	movs	r3, #1
 800c48a:	73fb      	strb	r3, [r7, #15]
    break;
 800c48c:	e005      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c48e:	2303      	movs	r3, #3
 800c490:	73fb      	strb	r3, [r7, #15]
    break;
 800c492:	e002      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	73fb      	strb	r3, [r7, #15]
    break;
 800c498:	bf00      	nop
  }
  return usb_status;
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <siprintf>:
 800c4a8:	b40e      	push	{r1, r2, r3}
 800c4aa:	b500      	push	{lr}
 800c4ac:	b09c      	sub	sp, #112	; 0x70
 800c4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c4b0:	9002      	str	r0, [sp, #8]
 800c4b2:	9006      	str	r0, [sp, #24]
 800c4b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4b8:	4809      	ldr	r0, [pc, #36]	; (800c4e0 <siprintf+0x38>)
 800c4ba:	9107      	str	r1, [sp, #28]
 800c4bc:	9104      	str	r1, [sp, #16]
 800c4be:	4909      	ldr	r1, [pc, #36]	; (800c4e4 <siprintf+0x3c>)
 800c4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c4:	9105      	str	r1, [sp, #20]
 800c4c6:	6800      	ldr	r0, [r0, #0]
 800c4c8:	9301      	str	r3, [sp, #4]
 800c4ca:	a902      	add	r1, sp, #8
 800c4cc:	f000 fa42 	bl	800c954 <_svfiprintf_r>
 800c4d0:	9b02      	ldr	r3, [sp, #8]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	b01c      	add	sp, #112	; 0x70
 800c4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4dc:	b003      	add	sp, #12
 800c4de:	4770      	bx	lr
 800c4e0:	2000026c 	.word	0x2000026c
 800c4e4:	ffff0208 	.word	0xffff0208

0800c4e8 <siscanf>:
 800c4e8:	b40e      	push	{r1, r2, r3}
 800c4ea:	b510      	push	{r4, lr}
 800c4ec:	b09f      	sub	sp, #124	; 0x7c
 800c4ee:	ac21      	add	r4, sp, #132	; 0x84
 800c4f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c4f4:	f854 2b04 	ldr.w	r2, [r4], #4
 800c4f8:	9201      	str	r2, [sp, #4]
 800c4fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c4fe:	9004      	str	r0, [sp, #16]
 800c500:	9008      	str	r0, [sp, #32]
 800c502:	f7f3 fe6d 	bl	80001e0 <strlen>
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <siscanf+0x50>)
 800c508:	9005      	str	r0, [sp, #20]
 800c50a:	9009      	str	r0, [sp, #36]	; 0x24
 800c50c:	930d      	str	r3, [sp, #52]	; 0x34
 800c50e:	480b      	ldr	r0, [pc, #44]	; (800c53c <siscanf+0x54>)
 800c510:	9a01      	ldr	r2, [sp, #4]
 800c512:	6800      	ldr	r0, [r0, #0]
 800c514:	9403      	str	r4, [sp, #12]
 800c516:	2300      	movs	r3, #0
 800c518:	9311      	str	r3, [sp, #68]	; 0x44
 800c51a:	9316      	str	r3, [sp, #88]	; 0x58
 800c51c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c520:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c524:	a904      	add	r1, sp, #16
 800c526:	4623      	mov	r3, r4
 800c528:	f000 fb6c 	bl	800cc04 <__ssvfiscanf_r>
 800c52c:	b01f      	add	sp, #124	; 0x7c
 800c52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c532:	b003      	add	sp, #12
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	0800c541 	.word	0x0800c541
 800c53c:	2000026c 	.word	0x2000026c

0800c540 <__seofread>:
 800c540:	2000      	movs	r0, #0
 800c542:	4770      	bx	lr

0800c544 <_vsniprintf_r>:
 800c544:	b530      	push	{r4, r5, lr}
 800c546:	4614      	mov	r4, r2
 800c548:	2c00      	cmp	r4, #0
 800c54a:	b09b      	sub	sp, #108	; 0x6c
 800c54c:	4605      	mov	r5, r0
 800c54e:	461a      	mov	r2, r3
 800c550:	da05      	bge.n	800c55e <_vsniprintf_r+0x1a>
 800c552:	238b      	movs	r3, #139	; 0x8b
 800c554:	6003      	str	r3, [r0, #0]
 800c556:	f04f 30ff 	mov.w	r0, #4294967295
 800c55a:	b01b      	add	sp, #108	; 0x6c
 800c55c:	bd30      	pop	{r4, r5, pc}
 800c55e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c562:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c566:	bf14      	ite	ne
 800c568:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c56c:	4623      	moveq	r3, r4
 800c56e:	9302      	str	r3, [sp, #8]
 800c570:	9305      	str	r3, [sp, #20]
 800c572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c576:	9100      	str	r1, [sp, #0]
 800c578:	9104      	str	r1, [sp, #16]
 800c57a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c57e:	4669      	mov	r1, sp
 800c580:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c582:	f000 f9e7 	bl	800c954 <_svfiprintf_r>
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	bfbc      	itt	lt
 800c58a:	238b      	movlt	r3, #139	; 0x8b
 800c58c:	602b      	strlt	r3, [r5, #0]
 800c58e:	2c00      	cmp	r4, #0
 800c590:	d0e3      	beq.n	800c55a <_vsniprintf_r+0x16>
 800c592:	9b00      	ldr	r3, [sp, #0]
 800c594:	2200      	movs	r2, #0
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	e7df      	b.n	800c55a <_vsniprintf_r+0x16>
	...

0800c59c <vsniprintf>:
 800c59c:	b507      	push	{r0, r1, r2, lr}
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	460a      	mov	r2, r1
 800c5a4:	4601      	mov	r1, r0
 800c5a6:	4803      	ldr	r0, [pc, #12]	; (800c5b4 <vsniprintf+0x18>)
 800c5a8:	6800      	ldr	r0, [r0, #0]
 800c5aa:	f7ff ffcb 	bl	800c544 <_vsniprintf_r>
 800c5ae:	b003      	add	sp, #12
 800c5b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5b4:	2000026c 	.word	0x2000026c

0800c5b8 <memcmp>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	3901      	subs	r1, #1
 800c5bc:	4402      	add	r2, r0
 800c5be:	4290      	cmp	r0, r2
 800c5c0:	d101      	bne.n	800c5c6 <memcmp+0xe>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e005      	b.n	800c5d2 <memcmp+0x1a>
 800c5c6:	7803      	ldrb	r3, [r0, #0]
 800c5c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d001      	beq.n	800c5d4 <memcmp+0x1c>
 800c5d0:	1b18      	subs	r0, r3, r4
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	e7f2      	b.n	800c5be <memcmp+0x6>

0800c5d8 <memset>:
 800c5d8:	4402      	add	r2, r0
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d100      	bne.n	800c5e2 <memset+0xa>
 800c5e0:	4770      	bx	lr
 800c5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e6:	e7f9      	b.n	800c5dc <memset+0x4>

0800c5e8 <strcat>:
 800c5e8:	b510      	push	{r4, lr}
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	7814      	ldrb	r4, [r2, #0]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	2c00      	cmp	r4, #0
 800c5f4:	d1fa      	bne.n	800c5ec <strcat+0x4>
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c600:	2a00      	cmp	r2, #0
 800c602:	d1f9      	bne.n	800c5f8 <strcat+0x10>
 800c604:	bd10      	pop	{r4, pc}

0800c606 <strncpy>:
 800c606:	b510      	push	{r4, lr}
 800c608:	3901      	subs	r1, #1
 800c60a:	4603      	mov	r3, r0
 800c60c:	b132      	cbz	r2, 800c61c <strncpy+0x16>
 800c60e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c612:	f803 4b01 	strb.w	r4, [r3], #1
 800c616:	3a01      	subs	r2, #1
 800c618:	2c00      	cmp	r4, #0
 800c61a:	d1f7      	bne.n	800c60c <strncpy+0x6>
 800c61c:	441a      	add	r2, r3
 800c61e:	2100      	movs	r1, #0
 800c620:	4293      	cmp	r3, r2
 800c622:	d100      	bne.n	800c626 <strncpy+0x20>
 800c624:	bd10      	pop	{r4, pc}
 800c626:	f803 1b01 	strb.w	r1, [r3], #1
 800c62a:	e7f9      	b.n	800c620 <strncpy+0x1a>

0800c62c <__errno>:
 800c62c:	4b01      	ldr	r3, [pc, #4]	; (800c634 <__errno+0x8>)
 800c62e:	6818      	ldr	r0, [r3, #0]
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	2000026c 	.word	0x2000026c

0800c638 <__libc_init_array>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	4d0d      	ldr	r5, [pc, #52]	; (800c670 <__libc_init_array+0x38>)
 800c63c:	4c0d      	ldr	r4, [pc, #52]	; (800c674 <__libc_init_array+0x3c>)
 800c63e:	1b64      	subs	r4, r4, r5
 800c640:	10a4      	asrs	r4, r4, #2
 800c642:	2600      	movs	r6, #0
 800c644:	42a6      	cmp	r6, r4
 800c646:	d109      	bne.n	800c65c <__libc_init_array+0x24>
 800c648:	4d0b      	ldr	r5, [pc, #44]	; (800c678 <__libc_init_array+0x40>)
 800c64a:	4c0c      	ldr	r4, [pc, #48]	; (800c67c <__libc_init_array+0x44>)
 800c64c:	f001 f8fe 	bl	800d84c <_init>
 800c650:	1b64      	subs	r4, r4, r5
 800c652:	10a4      	asrs	r4, r4, #2
 800c654:	2600      	movs	r6, #0
 800c656:	42a6      	cmp	r6, r4
 800c658:	d105      	bne.n	800c666 <__libc_init_array+0x2e>
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c660:	4798      	blx	r3
 800c662:	3601      	adds	r6, #1
 800c664:	e7ee      	b.n	800c644 <__libc_init_array+0xc>
 800c666:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66a:	4798      	blx	r3
 800c66c:	3601      	adds	r6, #1
 800c66e:	e7f2      	b.n	800c656 <__libc_init_array+0x1e>
 800c670:	0800ec7c 	.word	0x0800ec7c
 800c674:	0800ec7c 	.word	0x0800ec7c
 800c678:	0800ec7c 	.word	0x0800ec7c
 800c67c:	0800ec80 	.word	0x0800ec80

0800c680 <__retarget_lock_acquire_recursive>:
 800c680:	4770      	bx	lr

0800c682 <__retarget_lock_release_recursive>:
 800c682:	4770      	bx	lr

0800c684 <strcpy>:
 800c684:	4603      	mov	r3, r0
 800c686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c68a:	f803 2b01 	strb.w	r2, [r3], #1
 800c68e:	2a00      	cmp	r2, #0
 800c690:	d1f9      	bne.n	800c686 <strcpy+0x2>
 800c692:	4770      	bx	lr

0800c694 <memcpy>:
 800c694:	440a      	add	r2, r1
 800c696:	4291      	cmp	r1, r2
 800c698:	f100 33ff 	add.w	r3, r0, #4294967295
 800c69c:	d100      	bne.n	800c6a0 <memcpy+0xc>
 800c69e:	4770      	bx	lr
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6aa:	4291      	cmp	r1, r2
 800c6ac:	d1f9      	bne.n	800c6a2 <memcpy+0xe>
 800c6ae:	bd10      	pop	{r4, pc}

0800c6b0 <_free_r>:
 800c6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6b2:	2900      	cmp	r1, #0
 800c6b4:	d044      	beq.n	800c740 <_free_r+0x90>
 800c6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ba:	9001      	str	r0, [sp, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f1a1 0404 	sub.w	r4, r1, #4
 800c6c2:	bfb8      	it	lt
 800c6c4:	18e4      	addlt	r4, r4, r3
 800c6c6:	f000 f8df 	bl	800c888 <__malloc_lock>
 800c6ca:	4a1e      	ldr	r2, [pc, #120]	; (800c744 <_free_r+0x94>)
 800c6cc:	9801      	ldr	r0, [sp, #4]
 800c6ce:	6813      	ldr	r3, [r2, #0]
 800c6d0:	b933      	cbnz	r3, 800c6e0 <_free_r+0x30>
 800c6d2:	6063      	str	r3, [r4, #4]
 800c6d4:	6014      	str	r4, [r2, #0]
 800c6d6:	b003      	add	sp, #12
 800c6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6dc:	f000 b8da 	b.w	800c894 <__malloc_unlock>
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d908      	bls.n	800c6f6 <_free_r+0x46>
 800c6e4:	6825      	ldr	r5, [r4, #0]
 800c6e6:	1961      	adds	r1, r4, r5
 800c6e8:	428b      	cmp	r3, r1
 800c6ea:	bf01      	itttt	eq
 800c6ec:	6819      	ldreq	r1, [r3, #0]
 800c6ee:	685b      	ldreq	r3, [r3, #4]
 800c6f0:	1949      	addeq	r1, r1, r5
 800c6f2:	6021      	streq	r1, [r4, #0]
 800c6f4:	e7ed      	b.n	800c6d2 <_free_r+0x22>
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	b10b      	cbz	r3, 800c700 <_free_r+0x50>
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	d9fa      	bls.n	800c6f6 <_free_r+0x46>
 800c700:	6811      	ldr	r1, [r2, #0]
 800c702:	1855      	adds	r5, r2, r1
 800c704:	42a5      	cmp	r5, r4
 800c706:	d10b      	bne.n	800c720 <_free_r+0x70>
 800c708:	6824      	ldr	r4, [r4, #0]
 800c70a:	4421      	add	r1, r4
 800c70c:	1854      	adds	r4, r2, r1
 800c70e:	42a3      	cmp	r3, r4
 800c710:	6011      	str	r1, [r2, #0]
 800c712:	d1e0      	bne.n	800c6d6 <_free_r+0x26>
 800c714:	681c      	ldr	r4, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	6053      	str	r3, [r2, #4]
 800c71a:	440c      	add	r4, r1
 800c71c:	6014      	str	r4, [r2, #0]
 800c71e:	e7da      	b.n	800c6d6 <_free_r+0x26>
 800c720:	d902      	bls.n	800c728 <_free_r+0x78>
 800c722:	230c      	movs	r3, #12
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	e7d6      	b.n	800c6d6 <_free_r+0x26>
 800c728:	6825      	ldr	r5, [r4, #0]
 800c72a:	1961      	adds	r1, r4, r5
 800c72c:	428b      	cmp	r3, r1
 800c72e:	bf04      	itt	eq
 800c730:	6819      	ldreq	r1, [r3, #0]
 800c732:	685b      	ldreq	r3, [r3, #4]
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	bf04      	itt	eq
 800c738:	1949      	addeq	r1, r1, r5
 800c73a:	6021      	streq	r1, [r4, #0]
 800c73c:	6054      	str	r4, [r2, #4]
 800c73e:	e7ca      	b.n	800c6d6 <_free_r+0x26>
 800c740:	b003      	add	sp, #12
 800c742:	bd30      	pop	{r4, r5, pc}
 800c744:	20003924 	.word	0x20003924

0800c748 <sbrk_aligned>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	4e0e      	ldr	r6, [pc, #56]	; (800c784 <sbrk_aligned+0x3c>)
 800c74c:	460c      	mov	r4, r1
 800c74e:	6831      	ldr	r1, [r6, #0]
 800c750:	4605      	mov	r5, r0
 800c752:	b911      	cbnz	r1, 800c75a <sbrk_aligned+0x12>
 800c754:	f000 ff3a 	bl	800d5cc <_sbrk_r>
 800c758:	6030      	str	r0, [r6, #0]
 800c75a:	4621      	mov	r1, r4
 800c75c:	4628      	mov	r0, r5
 800c75e:	f000 ff35 	bl	800d5cc <_sbrk_r>
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	d00a      	beq.n	800c77c <sbrk_aligned+0x34>
 800c766:	1cc4      	adds	r4, r0, #3
 800c768:	f024 0403 	bic.w	r4, r4, #3
 800c76c:	42a0      	cmp	r0, r4
 800c76e:	d007      	beq.n	800c780 <sbrk_aligned+0x38>
 800c770:	1a21      	subs	r1, r4, r0
 800c772:	4628      	mov	r0, r5
 800c774:	f000 ff2a 	bl	800d5cc <_sbrk_r>
 800c778:	3001      	adds	r0, #1
 800c77a:	d101      	bne.n	800c780 <sbrk_aligned+0x38>
 800c77c:	f04f 34ff 	mov.w	r4, #4294967295
 800c780:	4620      	mov	r0, r4
 800c782:	bd70      	pop	{r4, r5, r6, pc}
 800c784:	20003928 	.word	0x20003928

0800c788 <_malloc_r>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	1ccd      	adds	r5, r1, #3
 800c78e:	f025 0503 	bic.w	r5, r5, #3
 800c792:	3508      	adds	r5, #8
 800c794:	2d0c      	cmp	r5, #12
 800c796:	bf38      	it	cc
 800c798:	250c      	movcc	r5, #12
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	4607      	mov	r7, r0
 800c79e:	db01      	blt.n	800c7a4 <_malloc_r+0x1c>
 800c7a0:	42a9      	cmp	r1, r5
 800c7a2:	d905      	bls.n	800c7b0 <_malloc_r+0x28>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	603b      	str	r3, [r7, #0]
 800c7a8:	2600      	movs	r6, #0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c884 <_malloc_r+0xfc>
 800c7b4:	f000 f868 	bl	800c888 <__malloc_lock>
 800c7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7bc:	461c      	mov	r4, r3
 800c7be:	bb5c      	cbnz	r4, 800c818 <_malloc_r+0x90>
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f7ff ffc0 	bl	800c748 <sbrk_aligned>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	d155      	bne.n	800c87a <_malloc_r+0xf2>
 800c7ce:	f8d8 4000 	ldr.w	r4, [r8]
 800c7d2:	4626      	mov	r6, r4
 800c7d4:	2e00      	cmp	r6, #0
 800c7d6:	d145      	bne.n	800c864 <_malloc_r+0xdc>
 800c7d8:	2c00      	cmp	r4, #0
 800c7da:	d048      	beq.n	800c86e <_malloc_r+0xe6>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	eb04 0903 	add.w	r9, r4, r3
 800c7e6:	f000 fef1 	bl	800d5cc <_sbrk_r>
 800c7ea:	4581      	cmp	r9, r0
 800c7ec:	d13f      	bne.n	800c86e <_malloc_r+0xe6>
 800c7ee:	6821      	ldr	r1, [r4, #0]
 800c7f0:	1a6d      	subs	r5, r5, r1
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	f7ff ffa7 	bl	800c748 <sbrk_aligned>
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	d037      	beq.n	800c86e <_malloc_r+0xe6>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	442b      	add	r3, r5
 800c802:	6023      	str	r3, [r4, #0]
 800c804:	f8d8 3000 	ldr.w	r3, [r8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d038      	beq.n	800c87e <_malloc_r+0xf6>
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	42a2      	cmp	r2, r4
 800c810:	d12b      	bne.n	800c86a <_malloc_r+0xe2>
 800c812:	2200      	movs	r2, #0
 800c814:	605a      	str	r2, [r3, #4]
 800c816:	e00f      	b.n	800c838 <_malloc_r+0xb0>
 800c818:	6822      	ldr	r2, [r4, #0]
 800c81a:	1b52      	subs	r2, r2, r5
 800c81c:	d41f      	bmi.n	800c85e <_malloc_r+0xd6>
 800c81e:	2a0b      	cmp	r2, #11
 800c820:	d917      	bls.n	800c852 <_malloc_r+0xca>
 800c822:	1961      	adds	r1, r4, r5
 800c824:	42a3      	cmp	r3, r4
 800c826:	6025      	str	r5, [r4, #0]
 800c828:	bf18      	it	ne
 800c82a:	6059      	strne	r1, [r3, #4]
 800c82c:	6863      	ldr	r3, [r4, #4]
 800c82e:	bf08      	it	eq
 800c830:	f8c8 1000 	streq.w	r1, [r8]
 800c834:	5162      	str	r2, [r4, r5]
 800c836:	604b      	str	r3, [r1, #4]
 800c838:	4638      	mov	r0, r7
 800c83a:	f104 060b 	add.w	r6, r4, #11
 800c83e:	f000 f829 	bl	800c894 <__malloc_unlock>
 800c842:	f026 0607 	bic.w	r6, r6, #7
 800c846:	1d23      	adds	r3, r4, #4
 800c848:	1af2      	subs	r2, r6, r3
 800c84a:	d0ae      	beq.n	800c7aa <_malloc_r+0x22>
 800c84c:	1b9b      	subs	r3, r3, r6
 800c84e:	50a3      	str	r3, [r4, r2]
 800c850:	e7ab      	b.n	800c7aa <_malloc_r+0x22>
 800c852:	42a3      	cmp	r3, r4
 800c854:	6862      	ldr	r2, [r4, #4]
 800c856:	d1dd      	bne.n	800c814 <_malloc_r+0x8c>
 800c858:	f8c8 2000 	str.w	r2, [r8]
 800c85c:	e7ec      	b.n	800c838 <_malloc_r+0xb0>
 800c85e:	4623      	mov	r3, r4
 800c860:	6864      	ldr	r4, [r4, #4]
 800c862:	e7ac      	b.n	800c7be <_malloc_r+0x36>
 800c864:	4634      	mov	r4, r6
 800c866:	6876      	ldr	r6, [r6, #4]
 800c868:	e7b4      	b.n	800c7d4 <_malloc_r+0x4c>
 800c86a:	4613      	mov	r3, r2
 800c86c:	e7cc      	b.n	800c808 <_malloc_r+0x80>
 800c86e:	230c      	movs	r3, #12
 800c870:	603b      	str	r3, [r7, #0]
 800c872:	4638      	mov	r0, r7
 800c874:	f000 f80e 	bl	800c894 <__malloc_unlock>
 800c878:	e797      	b.n	800c7aa <_malloc_r+0x22>
 800c87a:	6025      	str	r5, [r4, #0]
 800c87c:	e7dc      	b.n	800c838 <_malloc_r+0xb0>
 800c87e:	605b      	str	r3, [r3, #4]
 800c880:	deff      	udf	#255	; 0xff
 800c882:	bf00      	nop
 800c884:	20003924 	.word	0x20003924

0800c888 <__malloc_lock>:
 800c888:	4801      	ldr	r0, [pc, #4]	; (800c890 <__malloc_lock+0x8>)
 800c88a:	f7ff bef9 	b.w	800c680 <__retarget_lock_acquire_recursive>
 800c88e:	bf00      	nop
 800c890:	20003920 	.word	0x20003920

0800c894 <__malloc_unlock>:
 800c894:	4801      	ldr	r0, [pc, #4]	; (800c89c <__malloc_unlock+0x8>)
 800c896:	f7ff bef4 	b.w	800c682 <__retarget_lock_release_recursive>
 800c89a:	bf00      	nop
 800c89c:	20003920 	.word	0x20003920

0800c8a0 <__ssputs_r>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	688e      	ldr	r6, [r1, #8]
 800c8a6:	461f      	mov	r7, r3
 800c8a8:	42be      	cmp	r6, r7
 800c8aa:	680b      	ldr	r3, [r1, #0]
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	4690      	mov	r8, r2
 800c8b2:	d82c      	bhi.n	800c90e <__ssputs_r+0x6e>
 800c8b4:	898a      	ldrh	r2, [r1, #12]
 800c8b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8ba:	d026      	beq.n	800c90a <__ssputs_r+0x6a>
 800c8bc:	6965      	ldr	r5, [r4, #20]
 800c8be:	6909      	ldr	r1, [r1, #16]
 800c8c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8c4:	eba3 0901 	sub.w	r9, r3, r1
 800c8c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8cc:	1c7b      	adds	r3, r7, #1
 800c8ce:	444b      	add	r3, r9
 800c8d0:	106d      	asrs	r5, r5, #1
 800c8d2:	429d      	cmp	r5, r3
 800c8d4:	bf38      	it	cc
 800c8d6:	461d      	movcc	r5, r3
 800c8d8:	0553      	lsls	r3, r2, #21
 800c8da:	d527      	bpl.n	800c92c <__ssputs_r+0x8c>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	f7ff ff53 	bl	800c788 <_malloc_r>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	b360      	cbz	r0, 800c940 <__ssputs_r+0xa0>
 800c8e6:	6921      	ldr	r1, [r4, #16]
 800c8e8:	464a      	mov	r2, r9
 800c8ea:	f7ff fed3 	bl	800c694 <memcpy>
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8f8:	81a3      	strh	r3, [r4, #12]
 800c8fa:	6126      	str	r6, [r4, #16]
 800c8fc:	6165      	str	r5, [r4, #20]
 800c8fe:	444e      	add	r6, r9
 800c900:	eba5 0509 	sub.w	r5, r5, r9
 800c904:	6026      	str	r6, [r4, #0]
 800c906:	60a5      	str	r5, [r4, #8]
 800c908:	463e      	mov	r6, r7
 800c90a:	42be      	cmp	r6, r7
 800c90c:	d900      	bls.n	800c910 <__ssputs_r+0x70>
 800c90e:	463e      	mov	r6, r7
 800c910:	6820      	ldr	r0, [r4, #0]
 800c912:	4632      	mov	r2, r6
 800c914:	4641      	mov	r1, r8
 800c916:	f000 fe3e 	bl	800d596 <memmove>
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	1b9b      	subs	r3, r3, r6
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	4433      	add	r3, r6
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	2000      	movs	r0, #0
 800c928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92c:	462a      	mov	r2, r5
 800c92e:	f000 fe5d 	bl	800d5ec <_realloc_r>
 800c932:	4606      	mov	r6, r0
 800c934:	2800      	cmp	r0, #0
 800c936:	d1e0      	bne.n	800c8fa <__ssputs_r+0x5a>
 800c938:	6921      	ldr	r1, [r4, #16]
 800c93a:	4650      	mov	r0, sl
 800c93c:	f7ff feb8 	bl	800c6b0 <_free_r>
 800c940:	230c      	movs	r3, #12
 800c942:	f8ca 3000 	str.w	r3, [sl]
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	f04f 30ff 	mov.w	r0, #4294967295
 800c952:	e7e9      	b.n	800c928 <__ssputs_r+0x88>

0800c954 <_svfiprintf_r>:
 800c954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c958:	4698      	mov	r8, r3
 800c95a:	898b      	ldrh	r3, [r1, #12]
 800c95c:	061b      	lsls	r3, r3, #24
 800c95e:	b09d      	sub	sp, #116	; 0x74
 800c960:	4607      	mov	r7, r0
 800c962:	460d      	mov	r5, r1
 800c964:	4614      	mov	r4, r2
 800c966:	d50e      	bpl.n	800c986 <_svfiprintf_r+0x32>
 800c968:	690b      	ldr	r3, [r1, #16]
 800c96a:	b963      	cbnz	r3, 800c986 <_svfiprintf_r+0x32>
 800c96c:	2140      	movs	r1, #64	; 0x40
 800c96e:	f7ff ff0b 	bl	800c788 <_malloc_r>
 800c972:	6028      	str	r0, [r5, #0]
 800c974:	6128      	str	r0, [r5, #16]
 800c976:	b920      	cbnz	r0, 800c982 <_svfiprintf_r+0x2e>
 800c978:	230c      	movs	r3, #12
 800c97a:	603b      	str	r3, [r7, #0]
 800c97c:	f04f 30ff 	mov.w	r0, #4294967295
 800c980:	e0d0      	b.n	800cb24 <_svfiprintf_r+0x1d0>
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	616b      	str	r3, [r5, #20]
 800c986:	2300      	movs	r3, #0
 800c988:	9309      	str	r3, [sp, #36]	; 0x24
 800c98a:	2320      	movs	r3, #32
 800c98c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c990:	f8cd 800c 	str.w	r8, [sp, #12]
 800c994:	2330      	movs	r3, #48	; 0x30
 800c996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb3c <_svfiprintf_r+0x1e8>
 800c99a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c99e:	f04f 0901 	mov.w	r9, #1
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	469a      	mov	sl, r3
 800c9a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9aa:	b10a      	cbz	r2, 800c9b0 <_svfiprintf_r+0x5c>
 800c9ac:	2a25      	cmp	r2, #37	; 0x25
 800c9ae:	d1f9      	bne.n	800c9a4 <_svfiprintf_r+0x50>
 800c9b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b4:	d00b      	beq.n	800c9ce <_svfiprintf_r+0x7a>
 800c9b6:	465b      	mov	r3, fp
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7ff ff6f 	bl	800c8a0 <__ssputs_r>
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	f000 80a9 	beq.w	800cb1a <_svfiprintf_r+0x1c6>
 800c9c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ca:	445a      	add	r2, fp
 800c9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 80a1 	beq.w	800cb1a <_svfiprintf_r+0x1c6>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f04f 32ff 	mov.w	r2, #4294967295
 800c9de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e2:	f10a 0a01 	add.w	sl, sl, #1
 800c9e6:	9304      	str	r3, [sp, #16]
 800c9e8:	9307      	str	r3, [sp, #28]
 800c9ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c9f0:	4654      	mov	r4, sl
 800c9f2:	2205      	movs	r2, #5
 800c9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f8:	4850      	ldr	r0, [pc, #320]	; (800cb3c <_svfiprintf_r+0x1e8>)
 800c9fa:	f7f3 fbf9 	bl	80001f0 <memchr>
 800c9fe:	9a04      	ldr	r2, [sp, #16]
 800ca00:	b9d8      	cbnz	r0, 800ca3a <_svfiprintf_r+0xe6>
 800ca02:	06d0      	lsls	r0, r2, #27
 800ca04:	bf44      	itt	mi
 800ca06:	2320      	movmi	r3, #32
 800ca08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca0c:	0711      	lsls	r1, r2, #28
 800ca0e:	bf44      	itt	mi
 800ca10:	232b      	movmi	r3, #43	; 0x2b
 800ca12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca16:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca1c:	d015      	beq.n	800ca4a <_svfiprintf_r+0xf6>
 800ca1e:	9a07      	ldr	r2, [sp, #28]
 800ca20:	4654      	mov	r4, sl
 800ca22:	2000      	movs	r0, #0
 800ca24:	f04f 0c0a 	mov.w	ip, #10
 800ca28:	4621      	mov	r1, r4
 800ca2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca2e:	3b30      	subs	r3, #48	; 0x30
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d94d      	bls.n	800cad0 <_svfiprintf_r+0x17c>
 800ca34:	b1b0      	cbz	r0, 800ca64 <_svfiprintf_r+0x110>
 800ca36:	9207      	str	r2, [sp, #28]
 800ca38:	e014      	b.n	800ca64 <_svfiprintf_r+0x110>
 800ca3a:	eba0 0308 	sub.w	r3, r0, r8
 800ca3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca42:	4313      	orrs	r3, r2
 800ca44:	9304      	str	r3, [sp, #16]
 800ca46:	46a2      	mov	sl, r4
 800ca48:	e7d2      	b.n	800c9f0 <_svfiprintf_r+0x9c>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	1d19      	adds	r1, r3, #4
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	9103      	str	r1, [sp, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bfbb      	ittet	lt
 800ca56:	425b      	neglt	r3, r3
 800ca58:	f042 0202 	orrlt.w	r2, r2, #2
 800ca5c:	9307      	strge	r3, [sp, #28]
 800ca5e:	9307      	strlt	r3, [sp, #28]
 800ca60:	bfb8      	it	lt
 800ca62:	9204      	strlt	r2, [sp, #16]
 800ca64:	7823      	ldrb	r3, [r4, #0]
 800ca66:	2b2e      	cmp	r3, #46	; 0x2e
 800ca68:	d10c      	bne.n	800ca84 <_svfiprintf_r+0x130>
 800ca6a:	7863      	ldrb	r3, [r4, #1]
 800ca6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6e:	d134      	bne.n	800cada <_svfiprintf_r+0x186>
 800ca70:	9b03      	ldr	r3, [sp, #12]
 800ca72:	1d1a      	adds	r2, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	9203      	str	r2, [sp, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	bfb8      	it	lt
 800ca7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca80:	3402      	adds	r4, #2
 800ca82:	9305      	str	r3, [sp, #20]
 800ca84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb4c <_svfiprintf_r+0x1f8>
 800ca88:	7821      	ldrb	r1, [r4, #0]
 800ca8a:	2203      	movs	r2, #3
 800ca8c:	4650      	mov	r0, sl
 800ca8e:	f7f3 fbaf 	bl	80001f0 <memchr>
 800ca92:	b138      	cbz	r0, 800caa4 <_svfiprintf_r+0x150>
 800ca94:	9b04      	ldr	r3, [sp, #16]
 800ca96:	eba0 000a 	sub.w	r0, r0, sl
 800ca9a:	2240      	movs	r2, #64	; 0x40
 800ca9c:	4082      	lsls	r2, r0
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	3401      	adds	r4, #1
 800caa2:	9304      	str	r3, [sp, #16]
 800caa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa8:	4825      	ldr	r0, [pc, #148]	; (800cb40 <_svfiprintf_r+0x1ec>)
 800caaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caae:	2206      	movs	r2, #6
 800cab0:	f7f3 fb9e 	bl	80001f0 <memchr>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d038      	beq.n	800cb2a <_svfiprintf_r+0x1d6>
 800cab8:	4b22      	ldr	r3, [pc, #136]	; (800cb44 <_svfiprintf_r+0x1f0>)
 800caba:	bb1b      	cbnz	r3, 800cb04 <_svfiprintf_r+0x1b0>
 800cabc:	9b03      	ldr	r3, [sp, #12]
 800cabe:	3307      	adds	r3, #7
 800cac0:	f023 0307 	bic.w	r3, r3, #7
 800cac4:	3308      	adds	r3, #8
 800cac6:	9303      	str	r3, [sp, #12]
 800cac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caca:	4433      	add	r3, r6
 800cacc:	9309      	str	r3, [sp, #36]	; 0x24
 800cace:	e768      	b.n	800c9a2 <_svfiprintf_r+0x4e>
 800cad0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad4:	460c      	mov	r4, r1
 800cad6:	2001      	movs	r0, #1
 800cad8:	e7a6      	b.n	800ca28 <_svfiprintf_r+0xd4>
 800cada:	2300      	movs	r3, #0
 800cadc:	3401      	adds	r4, #1
 800cade:	9305      	str	r3, [sp, #20]
 800cae0:	4619      	mov	r1, r3
 800cae2:	f04f 0c0a 	mov.w	ip, #10
 800cae6:	4620      	mov	r0, r4
 800cae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caec:	3a30      	subs	r2, #48	; 0x30
 800caee:	2a09      	cmp	r2, #9
 800caf0:	d903      	bls.n	800cafa <_svfiprintf_r+0x1a6>
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0c6      	beq.n	800ca84 <_svfiprintf_r+0x130>
 800caf6:	9105      	str	r1, [sp, #20]
 800caf8:	e7c4      	b.n	800ca84 <_svfiprintf_r+0x130>
 800cafa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cafe:	4604      	mov	r4, r0
 800cb00:	2301      	movs	r3, #1
 800cb02:	e7f0      	b.n	800cae6 <_svfiprintf_r+0x192>
 800cb04:	ab03      	add	r3, sp, #12
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	462a      	mov	r2, r5
 800cb0a:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <_svfiprintf_r+0x1f4>)
 800cb0c:	a904      	add	r1, sp, #16
 800cb0e:	4638      	mov	r0, r7
 800cb10:	f3af 8000 	nop.w
 800cb14:	1c42      	adds	r2, r0, #1
 800cb16:	4606      	mov	r6, r0
 800cb18:	d1d6      	bne.n	800cac8 <_svfiprintf_r+0x174>
 800cb1a:	89ab      	ldrh	r3, [r5, #12]
 800cb1c:	065b      	lsls	r3, r3, #25
 800cb1e:	f53f af2d 	bmi.w	800c97c <_svfiprintf_r+0x28>
 800cb22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb24:	b01d      	add	sp, #116	; 0x74
 800cb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2a:	ab03      	add	r3, sp, #12
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	462a      	mov	r2, r5
 800cb30:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <_svfiprintf_r+0x1f4>)
 800cb32:	a904      	add	r1, sp, #16
 800cb34:	4638      	mov	r0, r7
 800cb36:	f000 fa4b 	bl	800cfd0 <_printf_i>
 800cb3a:	e7eb      	b.n	800cb14 <_svfiprintf_r+0x1c0>
 800cb3c:	0800eb24 	.word	0x0800eb24
 800cb40:	0800eb2e 	.word	0x0800eb2e
 800cb44:	00000000 	.word	0x00000000
 800cb48:	0800c8a1 	.word	0x0800c8a1
 800cb4c:	0800eb2a 	.word	0x0800eb2a

0800cb50 <_sungetc_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	1c4b      	adds	r3, r1, #1
 800cb54:	4614      	mov	r4, r2
 800cb56:	d103      	bne.n	800cb60 <_sungetc_r+0x10>
 800cb58:	f04f 35ff 	mov.w	r5, #4294967295
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	8993      	ldrh	r3, [r2, #12]
 800cb62:	f023 0320 	bic.w	r3, r3, #32
 800cb66:	8193      	strh	r3, [r2, #12]
 800cb68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb6a:	6852      	ldr	r2, [r2, #4]
 800cb6c:	b2cd      	uxtb	r5, r1
 800cb6e:	b18b      	cbz	r3, 800cb94 <_sungetc_r+0x44>
 800cb70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb72:	4293      	cmp	r3, r2
 800cb74:	dd08      	ble.n	800cb88 <_sungetc_r+0x38>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	1e5a      	subs	r2, r3, #1
 800cb7a:	6022      	str	r2, [r4, #0]
 800cb7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cb80:	6863      	ldr	r3, [r4, #4]
 800cb82:	3301      	adds	r3, #1
 800cb84:	6063      	str	r3, [r4, #4]
 800cb86:	e7e9      	b.n	800cb5c <_sungetc_r+0xc>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	f000 fcca 	bl	800d522 <__submore>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0f1      	beq.n	800cb76 <_sungetc_r+0x26>
 800cb92:	e7e1      	b.n	800cb58 <_sungetc_r+0x8>
 800cb94:	6921      	ldr	r1, [r4, #16]
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	b151      	cbz	r1, 800cbb0 <_sungetc_r+0x60>
 800cb9a:	4299      	cmp	r1, r3
 800cb9c:	d208      	bcs.n	800cbb0 <_sungetc_r+0x60>
 800cb9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cba2:	42a9      	cmp	r1, r5
 800cba4:	d104      	bne.n	800cbb0 <_sungetc_r+0x60>
 800cba6:	3b01      	subs	r3, #1
 800cba8:	3201      	adds	r2, #1
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	6062      	str	r2, [r4, #4]
 800cbae:	e7d5      	b.n	800cb5c <_sungetc_r+0xc>
 800cbb0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbb8:	6363      	str	r3, [r4, #52]	; 0x34
 800cbba:	2303      	movs	r3, #3
 800cbbc:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbbe:	4623      	mov	r3, r4
 800cbc0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e7dc      	b.n	800cb84 <_sungetc_r+0x34>

0800cbca <__ssrefill_r>:
 800cbca:	b510      	push	{r4, lr}
 800cbcc:	460c      	mov	r4, r1
 800cbce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cbd0:	b169      	cbz	r1, 800cbee <__ssrefill_r+0x24>
 800cbd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbd6:	4299      	cmp	r1, r3
 800cbd8:	d001      	beq.n	800cbde <__ssrefill_r+0x14>
 800cbda:	f7ff fd69 	bl	800c6b0 <_free_r>
 800cbde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	6360      	str	r0, [r4, #52]	; 0x34
 800cbe6:	b113      	cbz	r3, 800cbee <__ssrefill_r+0x24>
 800cbe8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	6063      	str	r3, [r4, #4]
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	f043 0320 	orr.w	r3, r3, #32
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800cc02:	e7f3      	b.n	800cbec <__ssrefill_r+0x22>

0800cc04 <__ssvfiscanf_r>:
 800cc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cc0e:	2100      	movs	r1, #0
 800cc10:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cc14:	49a6      	ldr	r1, [pc, #664]	; (800ceb0 <__ssvfiscanf_r+0x2ac>)
 800cc16:	91a0      	str	r1, [sp, #640]	; 0x280
 800cc18:	f10d 0804 	add.w	r8, sp, #4
 800cc1c:	49a5      	ldr	r1, [pc, #660]	; (800ceb4 <__ssvfiscanf_r+0x2b0>)
 800cc1e:	4fa6      	ldr	r7, [pc, #664]	; (800ceb8 <__ssvfiscanf_r+0x2b4>)
 800cc20:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cebc <__ssvfiscanf_r+0x2b8>
 800cc24:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cc28:	4606      	mov	r6, r0
 800cc2a:	91a1      	str	r1, [sp, #644]	; 0x284
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	7813      	ldrb	r3, [r2, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 815a 	beq.w	800ceea <__ssvfiscanf_r+0x2e6>
 800cc36:	5cf9      	ldrb	r1, [r7, r3]
 800cc38:	f011 0108 	ands.w	r1, r1, #8
 800cc3c:	f102 0501 	add.w	r5, r2, #1
 800cc40:	d019      	beq.n	800cc76 <__ssvfiscanf_r+0x72>
 800cc42:	6863      	ldr	r3, [r4, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	dd0f      	ble.n	800cc68 <__ssvfiscanf_r+0x64>
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	781a      	ldrb	r2, [r3, #0]
 800cc4c:	5cba      	ldrb	r2, [r7, r2]
 800cc4e:	0712      	lsls	r2, r2, #28
 800cc50:	d401      	bmi.n	800cc56 <__ssvfiscanf_r+0x52>
 800cc52:	462a      	mov	r2, r5
 800cc54:	e7eb      	b.n	800cc2e <__ssvfiscanf_r+0x2a>
 800cc56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cc58:	3201      	adds	r2, #1
 800cc5a:	9245      	str	r2, [sp, #276]	; 0x114
 800cc5c:	6862      	ldr	r2, [r4, #4]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	3a01      	subs	r2, #1
 800cc62:	6062      	str	r2, [r4, #4]
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	e7ec      	b.n	800cc42 <__ssvfiscanf_r+0x3e>
 800cc68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	4798      	blx	r3
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d0e9      	beq.n	800cc48 <__ssvfiscanf_r+0x44>
 800cc74:	e7ed      	b.n	800cc52 <__ssvfiscanf_r+0x4e>
 800cc76:	2b25      	cmp	r3, #37	; 0x25
 800cc78:	d012      	beq.n	800cca0 <__ssvfiscanf_r+0x9c>
 800cc7a:	469a      	mov	sl, r3
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f340 8091 	ble.w	800cda6 <__ssvfiscanf_r+0x1a2>
 800cc84:	6822      	ldr	r2, [r4, #0]
 800cc86:	7813      	ldrb	r3, [r2, #0]
 800cc88:	4553      	cmp	r3, sl
 800cc8a:	f040 812e 	bne.w	800ceea <__ssvfiscanf_r+0x2e6>
 800cc8e:	6863      	ldr	r3, [r4, #4]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	6063      	str	r3, [r4, #4]
 800cc94:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cc96:	3201      	adds	r2, #1
 800cc98:	3301      	adds	r3, #1
 800cc9a:	6022      	str	r2, [r4, #0]
 800cc9c:	9345      	str	r3, [sp, #276]	; 0x114
 800cc9e:	e7d8      	b.n	800cc52 <__ssvfiscanf_r+0x4e>
 800cca0:	9141      	str	r1, [sp, #260]	; 0x104
 800cca2:	9143      	str	r1, [sp, #268]	; 0x10c
 800cca4:	7853      	ldrb	r3, [r2, #1]
 800cca6:	2b2a      	cmp	r3, #42	; 0x2a
 800cca8:	bf02      	ittt	eq
 800ccaa:	2310      	moveq	r3, #16
 800ccac:	1c95      	addeq	r5, r2, #2
 800ccae:	9341      	streq	r3, [sp, #260]	; 0x104
 800ccb0:	220a      	movs	r2, #10
 800ccb2:	46aa      	mov	sl, r5
 800ccb4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ccb8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	d91c      	bls.n	800ccfa <__ssvfiscanf_r+0xf6>
 800ccc0:	487e      	ldr	r0, [pc, #504]	; (800cebc <__ssvfiscanf_r+0x2b8>)
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	f7f3 fa94 	bl	80001f0 <memchr>
 800ccc8:	b138      	cbz	r0, 800ccda <__ssvfiscanf_r+0xd6>
 800ccca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cccc:	eba0 0009 	sub.w	r0, r0, r9
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4083      	lsls	r3, r0
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	9341      	str	r3, [sp, #260]	; 0x104
 800ccd8:	4655      	mov	r5, sl
 800ccda:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ccde:	2b78      	cmp	r3, #120	; 0x78
 800cce0:	d806      	bhi.n	800ccf0 <__ssvfiscanf_r+0xec>
 800cce2:	2b57      	cmp	r3, #87	; 0x57
 800cce4:	d810      	bhi.n	800cd08 <__ssvfiscanf_r+0x104>
 800cce6:	2b25      	cmp	r3, #37	; 0x25
 800cce8:	d0c7      	beq.n	800cc7a <__ssvfiscanf_r+0x76>
 800ccea:	d857      	bhi.n	800cd9c <__ssvfiscanf_r+0x198>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d065      	beq.n	800cdbc <__ssvfiscanf_r+0x1b8>
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	9347      	str	r3, [sp, #284]	; 0x11c
 800ccf4:	230a      	movs	r3, #10
 800ccf6:	9342      	str	r3, [sp, #264]	; 0x108
 800ccf8:	e076      	b.n	800cde8 <__ssvfiscanf_r+0x1e4>
 800ccfa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ccfc:	fb02 1103 	mla	r1, r2, r3, r1
 800cd00:	3930      	subs	r1, #48	; 0x30
 800cd02:	9143      	str	r1, [sp, #268]	; 0x10c
 800cd04:	4655      	mov	r5, sl
 800cd06:	e7d4      	b.n	800ccb2 <__ssvfiscanf_r+0xae>
 800cd08:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cd0c:	2a20      	cmp	r2, #32
 800cd0e:	d8ef      	bhi.n	800ccf0 <__ssvfiscanf_r+0xec>
 800cd10:	a101      	add	r1, pc, #4	; (adr r1, 800cd18 <__ssvfiscanf_r+0x114>)
 800cd12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd16:	bf00      	nop
 800cd18:	0800cdcb 	.word	0x0800cdcb
 800cd1c:	0800ccf1 	.word	0x0800ccf1
 800cd20:	0800ccf1 	.word	0x0800ccf1
 800cd24:	0800ce29 	.word	0x0800ce29
 800cd28:	0800ccf1 	.word	0x0800ccf1
 800cd2c:	0800ccf1 	.word	0x0800ccf1
 800cd30:	0800ccf1 	.word	0x0800ccf1
 800cd34:	0800ccf1 	.word	0x0800ccf1
 800cd38:	0800ccf1 	.word	0x0800ccf1
 800cd3c:	0800ccf1 	.word	0x0800ccf1
 800cd40:	0800ccf1 	.word	0x0800ccf1
 800cd44:	0800ce3f 	.word	0x0800ce3f
 800cd48:	0800ce25 	.word	0x0800ce25
 800cd4c:	0800cda3 	.word	0x0800cda3
 800cd50:	0800cda3 	.word	0x0800cda3
 800cd54:	0800cda3 	.word	0x0800cda3
 800cd58:	0800ccf1 	.word	0x0800ccf1
 800cd5c:	0800cde1 	.word	0x0800cde1
 800cd60:	0800ccf1 	.word	0x0800ccf1
 800cd64:	0800ccf1 	.word	0x0800ccf1
 800cd68:	0800ccf1 	.word	0x0800ccf1
 800cd6c:	0800ccf1 	.word	0x0800ccf1
 800cd70:	0800ce4f 	.word	0x0800ce4f
 800cd74:	0800ce1d 	.word	0x0800ce1d
 800cd78:	0800cdc3 	.word	0x0800cdc3
 800cd7c:	0800ccf1 	.word	0x0800ccf1
 800cd80:	0800ccf1 	.word	0x0800ccf1
 800cd84:	0800ce4b 	.word	0x0800ce4b
 800cd88:	0800ccf1 	.word	0x0800ccf1
 800cd8c:	0800ce25 	.word	0x0800ce25
 800cd90:	0800ccf1 	.word	0x0800ccf1
 800cd94:	0800ccf1 	.word	0x0800ccf1
 800cd98:	0800cdcb 	.word	0x0800cdcb
 800cd9c:	3b45      	subs	r3, #69	; 0x45
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d8a6      	bhi.n	800ccf0 <__ssvfiscanf_r+0xec>
 800cda2:	2305      	movs	r3, #5
 800cda4:	e01f      	b.n	800cde6 <__ssvfiscanf_r+0x1e2>
 800cda6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4630      	mov	r0, r6
 800cdac:	4798      	blx	r3
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f43f af68 	beq.w	800cc84 <__ssvfiscanf_r+0x80>
 800cdb4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f040 808d 	bne.w	800ced6 <__ssvfiscanf_r+0x2d2>
 800cdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc0:	e08f      	b.n	800cee2 <__ssvfiscanf_r+0x2de>
 800cdc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cdc4:	f042 0220 	orr.w	r2, r2, #32
 800cdc8:	9241      	str	r2, [sp, #260]	; 0x104
 800cdca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cdcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdd0:	9241      	str	r2, [sp, #260]	; 0x104
 800cdd2:	2210      	movs	r2, #16
 800cdd4:	2b6f      	cmp	r3, #111	; 0x6f
 800cdd6:	9242      	str	r2, [sp, #264]	; 0x108
 800cdd8:	bf34      	ite	cc
 800cdda:	2303      	movcc	r3, #3
 800cddc:	2304      	movcs	r3, #4
 800cdde:	e002      	b.n	800cde6 <__ssvfiscanf_r+0x1e2>
 800cde0:	2300      	movs	r3, #0
 800cde2:	9342      	str	r3, [sp, #264]	; 0x108
 800cde4:	2303      	movs	r3, #3
 800cde6:	9347      	str	r3, [sp, #284]	; 0x11c
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	dd3d      	ble.n	800ce6a <__ssvfiscanf_r+0x266>
 800cdee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cdf0:	0659      	lsls	r1, r3, #25
 800cdf2:	d404      	bmi.n	800cdfe <__ssvfiscanf_r+0x1fa>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	781a      	ldrb	r2, [r3, #0]
 800cdf8:	5cba      	ldrb	r2, [r7, r2]
 800cdfa:	0712      	lsls	r2, r2, #28
 800cdfc:	d43c      	bmi.n	800ce78 <__ssvfiscanf_r+0x274>
 800cdfe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	dc4b      	bgt.n	800ce9c <__ssvfiscanf_r+0x298>
 800ce04:	466b      	mov	r3, sp
 800ce06:	4622      	mov	r2, r4
 800ce08:	a941      	add	r1, sp, #260	; 0x104
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f000 fa02 	bl	800d214 <_scanf_chars>
 800ce10:	2801      	cmp	r0, #1
 800ce12:	d06a      	beq.n	800ceea <__ssvfiscanf_r+0x2e6>
 800ce14:	2802      	cmp	r0, #2
 800ce16:	f47f af1c 	bne.w	800cc52 <__ssvfiscanf_r+0x4e>
 800ce1a:	e7cb      	b.n	800cdb4 <__ssvfiscanf_r+0x1b0>
 800ce1c:	2308      	movs	r3, #8
 800ce1e:	9342      	str	r3, [sp, #264]	; 0x108
 800ce20:	2304      	movs	r3, #4
 800ce22:	e7e0      	b.n	800cde6 <__ssvfiscanf_r+0x1e2>
 800ce24:	220a      	movs	r2, #10
 800ce26:	e7d5      	b.n	800cdd4 <__ssvfiscanf_r+0x1d0>
 800ce28:	4629      	mov	r1, r5
 800ce2a:	4640      	mov	r0, r8
 800ce2c:	f000 fb40 	bl	800d4b0 <__sccl>
 800ce30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce36:	9341      	str	r3, [sp, #260]	; 0x104
 800ce38:	4605      	mov	r5, r0
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e7d3      	b.n	800cde6 <__ssvfiscanf_r+0x1e2>
 800ce3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce44:	9341      	str	r3, [sp, #260]	; 0x104
 800ce46:	2300      	movs	r3, #0
 800ce48:	e7cd      	b.n	800cde6 <__ssvfiscanf_r+0x1e2>
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	e7cb      	b.n	800cde6 <__ssvfiscanf_r+0x1e2>
 800ce4e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ce50:	06c3      	lsls	r3, r0, #27
 800ce52:	f53f aefe 	bmi.w	800cc52 <__ssvfiscanf_r+0x4e>
 800ce56:	9b00      	ldr	r3, [sp, #0]
 800ce58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce5a:	1d19      	adds	r1, r3, #4
 800ce5c:	9100      	str	r1, [sp, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	07c0      	lsls	r0, r0, #31
 800ce62:	bf4c      	ite	mi
 800ce64:	801a      	strhmi	r2, [r3, #0]
 800ce66:	601a      	strpl	r2, [r3, #0]
 800ce68:	e6f3      	b.n	800cc52 <__ssvfiscanf_r+0x4e>
 800ce6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4630      	mov	r0, r6
 800ce70:	4798      	blx	r3
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d0bb      	beq.n	800cdee <__ssvfiscanf_r+0x1ea>
 800ce76:	e79d      	b.n	800cdb4 <__ssvfiscanf_r+0x1b0>
 800ce78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce7a:	3201      	adds	r2, #1
 800ce7c:	9245      	str	r2, [sp, #276]	; 0x114
 800ce7e:	6862      	ldr	r2, [r4, #4]
 800ce80:	3a01      	subs	r2, #1
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	6062      	str	r2, [r4, #4]
 800ce86:	dd02      	ble.n	800ce8e <__ssvfiscanf_r+0x28a>
 800ce88:	3301      	adds	r3, #1
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	e7b2      	b.n	800cdf4 <__ssvfiscanf_r+0x1f0>
 800ce8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce90:	4621      	mov	r1, r4
 800ce92:	4630      	mov	r0, r6
 800ce94:	4798      	blx	r3
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d0ac      	beq.n	800cdf4 <__ssvfiscanf_r+0x1f0>
 800ce9a:	e78b      	b.n	800cdb4 <__ssvfiscanf_r+0x1b0>
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	dc0f      	bgt.n	800cec0 <__ssvfiscanf_r+0x2bc>
 800cea0:	466b      	mov	r3, sp
 800cea2:	4622      	mov	r2, r4
 800cea4:	a941      	add	r1, sp, #260	; 0x104
 800cea6:	4630      	mov	r0, r6
 800cea8:	f000 fa0e 	bl	800d2c8 <_scanf_i>
 800ceac:	e7b0      	b.n	800ce10 <__ssvfiscanf_r+0x20c>
 800ceae:	bf00      	nop
 800ceb0:	0800cb51 	.word	0x0800cb51
 800ceb4:	0800cbcb 	.word	0x0800cbcb
 800ceb8:	0800eb73 	.word	0x0800eb73
 800cebc:	0800eb2a 	.word	0x0800eb2a
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <__ssvfiscanf_r+0x2ec>)
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f43f aec5 	beq.w	800cc52 <__ssvfiscanf_r+0x4e>
 800cec8:	466b      	mov	r3, sp
 800ceca:	4622      	mov	r2, r4
 800cecc:	a941      	add	r1, sp, #260	; 0x104
 800cece:	4630      	mov	r0, r6
 800ced0:	f3af 8000 	nop.w
 800ced4:	e79c      	b.n	800ce10 <__ssvfiscanf_r+0x20c>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cedc:	bf18      	it	ne
 800cede:	f04f 30ff 	movne.w	r0, #4294967295
 800cee2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceea:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ceec:	e7f9      	b.n	800cee2 <__ssvfiscanf_r+0x2de>
 800ceee:	bf00      	nop
 800cef0:	00000000 	.word	0x00000000

0800cef4 <_printf_common>:
 800cef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef8:	4616      	mov	r6, r2
 800cefa:	4699      	mov	r9, r3
 800cefc:	688a      	ldr	r2, [r1, #8]
 800cefe:	690b      	ldr	r3, [r1, #16]
 800cf00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	bfb8      	it	lt
 800cf08:	4613      	movlt	r3, r2
 800cf0a:	6033      	str	r3, [r6, #0]
 800cf0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf10:	4607      	mov	r7, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	b10a      	cbz	r2, 800cf1a <_printf_common+0x26>
 800cf16:	3301      	adds	r3, #1
 800cf18:	6033      	str	r3, [r6, #0]
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	0699      	lsls	r1, r3, #26
 800cf1e:	bf42      	ittt	mi
 800cf20:	6833      	ldrmi	r3, [r6, #0]
 800cf22:	3302      	addmi	r3, #2
 800cf24:	6033      	strmi	r3, [r6, #0]
 800cf26:	6825      	ldr	r5, [r4, #0]
 800cf28:	f015 0506 	ands.w	r5, r5, #6
 800cf2c:	d106      	bne.n	800cf3c <_printf_common+0x48>
 800cf2e:	f104 0a19 	add.w	sl, r4, #25
 800cf32:	68e3      	ldr	r3, [r4, #12]
 800cf34:	6832      	ldr	r2, [r6, #0]
 800cf36:	1a9b      	subs	r3, r3, r2
 800cf38:	42ab      	cmp	r3, r5
 800cf3a:	dc26      	bgt.n	800cf8a <_printf_common+0x96>
 800cf3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf40:	1e13      	subs	r3, r2, #0
 800cf42:	6822      	ldr	r2, [r4, #0]
 800cf44:	bf18      	it	ne
 800cf46:	2301      	movne	r3, #1
 800cf48:	0692      	lsls	r2, r2, #26
 800cf4a:	d42b      	bmi.n	800cfa4 <_printf_common+0xb0>
 800cf4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf50:	4649      	mov	r1, r9
 800cf52:	4638      	mov	r0, r7
 800cf54:	47c0      	blx	r8
 800cf56:	3001      	adds	r0, #1
 800cf58:	d01e      	beq.n	800cf98 <_printf_common+0xa4>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	6922      	ldr	r2, [r4, #16]
 800cf5e:	f003 0306 	and.w	r3, r3, #6
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	bf02      	ittt	eq
 800cf66:	68e5      	ldreq	r5, [r4, #12]
 800cf68:	6833      	ldreq	r3, [r6, #0]
 800cf6a:	1aed      	subeq	r5, r5, r3
 800cf6c:	68a3      	ldr	r3, [r4, #8]
 800cf6e:	bf0c      	ite	eq
 800cf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf74:	2500      	movne	r5, #0
 800cf76:	4293      	cmp	r3, r2
 800cf78:	bfc4      	itt	gt
 800cf7a:	1a9b      	subgt	r3, r3, r2
 800cf7c:	18ed      	addgt	r5, r5, r3
 800cf7e:	2600      	movs	r6, #0
 800cf80:	341a      	adds	r4, #26
 800cf82:	42b5      	cmp	r5, r6
 800cf84:	d11a      	bne.n	800cfbc <_printf_common+0xc8>
 800cf86:	2000      	movs	r0, #0
 800cf88:	e008      	b.n	800cf9c <_printf_common+0xa8>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	4652      	mov	r2, sl
 800cf8e:	4649      	mov	r1, r9
 800cf90:	4638      	mov	r0, r7
 800cf92:	47c0      	blx	r8
 800cf94:	3001      	adds	r0, #1
 800cf96:	d103      	bne.n	800cfa0 <_printf_common+0xac>
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa0:	3501      	adds	r5, #1
 800cfa2:	e7c6      	b.n	800cf32 <_printf_common+0x3e>
 800cfa4:	18e1      	adds	r1, r4, r3
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	2030      	movs	r0, #48	; 0x30
 800cfaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfae:	4422      	add	r2, r4
 800cfb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfb8:	3302      	adds	r3, #2
 800cfba:	e7c7      	b.n	800cf4c <_printf_common+0x58>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d0e6      	beq.n	800cf98 <_printf_common+0xa4>
 800cfca:	3601      	adds	r6, #1
 800cfcc:	e7d9      	b.n	800cf82 <_printf_common+0x8e>
	...

0800cfd0 <_printf_i>:
 800cfd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd4:	7e0f      	ldrb	r7, [r1, #24]
 800cfd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfd8:	2f78      	cmp	r7, #120	; 0x78
 800cfda:	4691      	mov	r9, r2
 800cfdc:	4680      	mov	r8, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	469a      	mov	sl, r3
 800cfe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfe6:	d807      	bhi.n	800cff8 <_printf_i+0x28>
 800cfe8:	2f62      	cmp	r7, #98	; 0x62
 800cfea:	d80a      	bhi.n	800d002 <_printf_i+0x32>
 800cfec:	2f00      	cmp	r7, #0
 800cfee:	f000 80d4 	beq.w	800d19a <_printf_i+0x1ca>
 800cff2:	2f58      	cmp	r7, #88	; 0x58
 800cff4:	f000 80c0 	beq.w	800d178 <_printf_i+0x1a8>
 800cff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d000:	e03a      	b.n	800d078 <_printf_i+0xa8>
 800d002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d006:	2b15      	cmp	r3, #21
 800d008:	d8f6      	bhi.n	800cff8 <_printf_i+0x28>
 800d00a:	a101      	add	r1, pc, #4	; (adr r1, 800d010 <_printf_i+0x40>)
 800d00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d010:	0800d069 	.word	0x0800d069
 800d014:	0800d07d 	.word	0x0800d07d
 800d018:	0800cff9 	.word	0x0800cff9
 800d01c:	0800cff9 	.word	0x0800cff9
 800d020:	0800cff9 	.word	0x0800cff9
 800d024:	0800cff9 	.word	0x0800cff9
 800d028:	0800d07d 	.word	0x0800d07d
 800d02c:	0800cff9 	.word	0x0800cff9
 800d030:	0800cff9 	.word	0x0800cff9
 800d034:	0800cff9 	.word	0x0800cff9
 800d038:	0800cff9 	.word	0x0800cff9
 800d03c:	0800d181 	.word	0x0800d181
 800d040:	0800d0a9 	.word	0x0800d0a9
 800d044:	0800d13b 	.word	0x0800d13b
 800d048:	0800cff9 	.word	0x0800cff9
 800d04c:	0800cff9 	.word	0x0800cff9
 800d050:	0800d1a3 	.word	0x0800d1a3
 800d054:	0800cff9 	.word	0x0800cff9
 800d058:	0800d0a9 	.word	0x0800d0a9
 800d05c:	0800cff9 	.word	0x0800cff9
 800d060:	0800cff9 	.word	0x0800cff9
 800d064:	0800d143 	.word	0x0800d143
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	1d1a      	adds	r2, r3, #4
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	602a      	str	r2, [r5, #0]
 800d070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d078:	2301      	movs	r3, #1
 800d07a:	e09f      	b.n	800d1bc <_printf_i+0x1ec>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	0607      	lsls	r7, r0, #24
 800d082:	f103 0104 	add.w	r1, r3, #4
 800d086:	6029      	str	r1, [r5, #0]
 800d088:	d501      	bpl.n	800d08e <_printf_i+0xbe>
 800d08a:	681e      	ldr	r6, [r3, #0]
 800d08c:	e003      	b.n	800d096 <_printf_i+0xc6>
 800d08e:	0646      	lsls	r6, r0, #25
 800d090:	d5fb      	bpl.n	800d08a <_printf_i+0xba>
 800d092:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d096:	2e00      	cmp	r6, #0
 800d098:	da03      	bge.n	800d0a2 <_printf_i+0xd2>
 800d09a:	232d      	movs	r3, #45	; 0x2d
 800d09c:	4276      	negs	r6, r6
 800d09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a2:	485a      	ldr	r0, [pc, #360]	; (800d20c <_printf_i+0x23c>)
 800d0a4:	230a      	movs	r3, #10
 800d0a6:	e012      	b.n	800d0ce <_printf_i+0xfe>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	1d19      	adds	r1, r3, #4
 800d0ae:	6029      	str	r1, [r5, #0]
 800d0b0:	0605      	lsls	r5, r0, #24
 800d0b2:	d501      	bpl.n	800d0b8 <_printf_i+0xe8>
 800d0b4:	681e      	ldr	r6, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <_printf_i+0xee>
 800d0b8:	0641      	lsls	r1, r0, #25
 800d0ba:	d5fb      	bpl.n	800d0b4 <_printf_i+0xe4>
 800d0bc:	881e      	ldrh	r6, [r3, #0]
 800d0be:	4853      	ldr	r0, [pc, #332]	; (800d20c <_printf_i+0x23c>)
 800d0c0:	2f6f      	cmp	r7, #111	; 0x6f
 800d0c2:	bf0c      	ite	eq
 800d0c4:	2308      	moveq	r3, #8
 800d0c6:	230a      	movne	r3, #10
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0ce:	6865      	ldr	r5, [r4, #4]
 800d0d0:	60a5      	str	r5, [r4, #8]
 800d0d2:	2d00      	cmp	r5, #0
 800d0d4:	bfa2      	ittt	ge
 800d0d6:	6821      	ldrge	r1, [r4, #0]
 800d0d8:	f021 0104 	bicge.w	r1, r1, #4
 800d0dc:	6021      	strge	r1, [r4, #0]
 800d0de:	b90e      	cbnz	r6, 800d0e4 <_printf_i+0x114>
 800d0e0:	2d00      	cmp	r5, #0
 800d0e2:	d04b      	beq.n	800d17c <_printf_i+0x1ac>
 800d0e4:	4615      	mov	r5, r2
 800d0e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0ea:	fb03 6711 	mls	r7, r3, r1, r6
 800d0ee:	5dc7      	ldrb	r7, [r0, r7]
 800d0f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0f4:	4637      	mov	r7, r6
 800d0f6:	42bb      	cmp	r3, r7
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	d9f4      	bls.n	800d0e6 <_printf_i+0x116>
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d10b      	bne.n	800d118 <_printf_i+0x148>
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	07de      	lsls	r6, r3, #31
 800d104:	d508      	bpl.n	800d118 <_printf_i+0x148>
 800d106:	6923      	ldr	r3, [r4, #16]
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	4299      	cmp	r1, r3
 800d10c:	bfde      	ittt	le
 800d10e:	2330      	movle	r3, #48	; 0x30
 800d110:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d114:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d118:	1b52      	subs	r2, r2, r5
 800d11a:	6122      	str	r2, [r4, #16]
 800d11c:	f8cd a000 	str.w	sl, [sp]
 800d120:	464b      	mov	r3, r9
 800d122:	aa03      	add	r2, sp, #12
 800d124:	4621      	mov	r1, r4
 800d126:	4640      	mov	r0, r8
 800d128:	f7ff fee4 	bl	800cef4 <_printf_common>
 800d12c:	3001      	adds	r0, #1
 800d12e:	d14a      	bne.n	800d1c6 <_printf_i+0x1f6>
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	b004      	add	sp, #16
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	f043 0320 	orr.w	r3, r3, #32
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	4833      	ldr	r0, [pc, #204]	; (800d210 <_printf_i+0x240>)
 800d144:	2778      	movs	r7, #120	; 0x78
 800d146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	6829      	ldr	r1, [r5, #0]
 800d14e:	061f      	lsls	r7, r3, #24
 800d150:	f851 6b04 	ldr.w	r6, [r1], #4
 800d154:	d402      	bmi.n	800d15c <_printf_i+0x18c>
 800d156:	065f      	lsls	r7, r3, #25
 800d158:	bf48      	it	mi
 800d15a:	b2b6      	uxthmi	r6, r6
 800d15c:	07df      	lsls	r7, r3, #31
 800d15e:	bf48      	it	mi
 800d160:	f043 0320 	orrmi.w	r3, r3, #32
 800d164:	6029      	str	r1, [r5, #0]
 800d166:	bf48      	it	mi
 800d168:	6023      	strmi	r3, [r4, #0]
 800d16a:	b91e      	cbnz	r6, 800d174 <_printf_i+0x1a4>
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	f023 0320 	bic.w	r3, r3, #32
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	2310      	movs	r3, #16
 800d176:	e7a7      	b.n	800d0c8 <_printf_i+0xf8>
 800d178:	4824      	ldr	r0, [pc, #144]	; (800d20c <_printf_i+0x23c>)
 800d17a:	e7e4      	b.n	800d146 <_printf_i+0x176>
 800d17c:	4615      	mov	r5, r2
 800d17e:	e7bd      	b.n	800d0fc <_printf_i+0x12c>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	6826      	ldr	r6, [r4, #0]
 800d184:	6961      	ldr	r1, [r4, #20]
 800d186:	1d18      	adds	r0, r3, #4
 800d188:	6028      	str	r0, [r5, #0]
 800d18a:	0635      	lsls	r5, r6, #24
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	d501      	bpl.n	800d194 <_printf_i+0x1c4>
 800d190:	6019      	str	r1, [r3, #0]
 800d192:	e002      	b.n	800d19a <_printf_i+0x1ca>
 800d194:	0670      	lsls	r0, r6, #25
 800d196:	d5fb      	bpl.n	800d190 <_printf_i+0x1c0>
 800d198:	8019      	strh	r1, [r3, #0]
 800d19a:	2300      	movs	r3, #0
 800d19c:	6123      	str	r3, [r4, #16]
 800d19e:	4615      	mov	r5, r2
 800d1a0:	e7bc      	b.n	800d11c <_printf_i+0x14c>
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	1d1a      	adds	r2, r3, #4
 800d1a6:	602a      	str	r2, [r5, #0]
 800d1a8:	681d      	ldr	r5, [r3, #0]
 800d1aa:	6862      	ldr	r2, [r4, #4]
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f7f3 f81e 	bl	80001f0 <memchr>
 800d1b4:	b108      	cbz	r0, 800d1ba <_printf_i+0x1ea>
 800d1b6:	1b40      	subs	r0, r0, r5
 800d1b8:	6060      	str	r0, [r4, #4]
 800d1ba:	6863      	ldr	r3, [r4, #4]
 800d1bc:	6123      	str	r3, [r4, #16]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c4:	e7aa      	b.n	800d11c <_printf_i+0x14c>
 800d1c6:	6923      	ldr	r3, [r4, #16]
 800d1c8:	462a      	mov	r2, r5
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	47d0      	blx	sl
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d0ad      	beq.n	800d130 <_printf_i+0x160>
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	079b      	lsls	r3, r3, #30
 800d1d8:	d413      	bmi.n	800d202 <_printf_i+0x232>
 800d1da:	68e0      	ldr	r0, [r4, #12]
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	4298      	cmp	r0, r3
 800d1e0:	bfb8      	it	lt
 800d1e2:	4618      	movlt	r0, r3
 800d1e4:	e7a6      	b.n	800d134 <_printf_i+0x164>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	47d0      	blx	sl
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d09d      	beq.n	800d130 <_printf_i+0x160>
 800d1f4:	3501      	adds	r5, #1
 800d1f6:	68e3      	ldr	r3, [r4, #12]
 800d1f8:	9903      	ldr	r1, [sp, #12]
 800d1fa:	1a5b      	subs	r3, r3, r1
 800d1fc:	42ab      	cmp	r3, r5
 800d1fe:	dcf2      	bgt.n	800d1e6 <_printf_i+0x216>
 800d200:	e7eb      	b.n	800d1da <_printf_i+0x20a>
 800d202:	2500      	movs	r5, #0
 800d204:	f104 0619 	add.w	r6, r4, #25
 800d208:	e7f5      	b.n	800d1f6 <_printf_i+0x226>
 800d20a:	bf00      	nop
 800d20c:	0800eb35 	.word	0x0800eb35
 800d210:	0800eb46 	.word	0x0800eb46

0800d214 <_scanf_chars>:
 800d214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d218:	4615      	mov	r5, r2
 800d21a:	688a      	ldr	r2, [r1, #8]
 800d21c:	4680      	mov	r8, r0
 800d21e:	460c      	mov	r4, r1
 800d220:	b932      	cbnz	r2, 800d230 <_scanf_chars+0x1c>
 800d222:	698a      	ldr	r2, [r1, #24]
 800d224:	2a00      	cmp	r2, #0
 800d226:	bf0c      	ite	eq
 800d228:	2201      	moveq	r2, #1
 800d22a:	f04f 32ff 	movne.w	r2, #4294967295
 800d22e:	608a      	str	r2, [r1, #8]
 800d230:	6822      	ldr	r2, [r4, #0]
 800d232:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d2c4 <_scanf_chars+0xb0>
 800d236:	06d1      	lsls	r1, r2, #27
 800d238:	bf5f      	itttt	pl
 800d23a:	681a      	ldrpl	r2, [r3, #0]
 800d23c:	1d11      	addpl	r1, r2, #4
 800d23e:	6019      	strpl	r1, [r3, #0]
 800d240:	6816      	ldrpl	r6, [r2, #0]
 800d242:	2700      	movs	r7, #0
 800d244:	69a0      	ldr	r0, [r4, #24]
 800d246:	b188      	cbz	r0, 800d26c <_scanf_chars+0x58>
 800d248:	2801      	cmp	r0, #1
 800d24a:	d107      	bne.n	800d25c <_scanf_chars+0x48>
 800d24c:	682a      	ldr	r2, [r5, #0]
 800d24e:	7811      	ldrb	r1, [r2, #0]
 800d250:	6962      	ldr	r2, [r4, #20]
 800d252:	5c52      	ldrb	r2, [r2, r1]
 800d254:	b952      	cbnz	r2, 800d26c <_scanf_chars+0x58>
 800d256:	2f00      	cmp	r7, #0
 800d258:	d031      	beq.n	800d2be <_scanf_chars+0xaa>
 800d25a:	e022      	b.n	800d2a2 <_scanf_chars+0x8e>
 800d25c:	2802      	cmp	r0, #2
 800d25e:	d120      	bne.n	800d2a2 <_scanf_chars+0x8e>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d268:	071b      	lsls	r3, r3, #28
 800d26a:	d41a      	bmi.n	800d2a2 <_scanf_chars+0x8e>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	06da      	lsls	r2, r3, #27
 800d270:	bf5e      	ittt	pl
 800d272:	682b      	ldrpl	r3, [r5, #0]
 800d274:	781b      	ldrbpl	r3, [r3, #0]
 800d276:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d27a:	682a      	ldr	r2, [r5, #0]
 800d27c:	686b      	ldr	r3, [r5, #4]
 800d27e:	3201      	adds	r2, #1
 800d280:	602a      	str	r2, [r5, #0]
 800d282:	68a2      	ldr	r2, [r4, #8]
 800d284:	3b01      	subs	r3, #1
 800d286:	3a01      	subs	r2, #1
 800d288:	606b      	str	r3, [r5, #4]
 800d28a:	3701      	adds	r7, #1
 800d28c:	60a2      	str	r2, [r4, #8]
 800d28e:	b142      	cbz	r2, 800d2a2 <_scanf_chars+0x8e>
 800d290:	2b00      	cmp	r3, #0
 800d292:	dcd7      	bgt.n	800d244 <_scanf_chars+0x30>
 800d294:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d298:	4629      	mov	r1, r5
 800d29a:	4640      	mov	r0, r8
 800d29c:	4798      	blx	r3
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d0d0      	beq.n	800d244 <_scanf_chars+0x30>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	f013 0310 	ands.w	r3, r3, #16
 800d2a8:	d105      	bne.n	800d2b6 <_scanf_chars+0xa2>
 800d2aa:	68e2      	ldr	r2, [r4, #12]
 800d2ac:	3201      	adds	r2, #1
 800d2ae:	60e2      	str	r2, [r4, #12]
 800d2b0:	69a2      	ldr	r2, [r4, #24]
 800d2b2:	b102      	cbz	r2, 800d2b6 <_scanf_chars+0xa2>
 800d2b4:	7033      	strb	r3, [r6, #0]
 800d2b6:	6923      	ldr	r3, [r4, #16]
 800d2b8:	443b      	add	r3, r7
 800d2ba:	6123      	str	r3, [r4, #16]
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c2:	bf00      	nop
 800d2c4:	0800eb73 	.word	0x0800eb73

0800d2c8 <_scanf_i>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	4698      	mov	r8, r3
 800d2ce:	4b74      	ldr	r3, [pc, #464]	; (800d4a0 <_scanf_i+0x1d8>)
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	4682      	mov	sl, r0
 800d2d4:	4616      	mov	r6, r2
 800d2d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	ab03      	add	r3, sp, #12
 800d2de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d2e2:	4b70      	ldr	r3, [pc, #448]	; (800d4a4 <_scanf_i+0x1dc>)
 800d2e4:	69a1      	ldr	r1, [r4, #24]
 800d2e6:	4a70      	ldr	r2, [pc, #448]	; (800d4a8 <_scanf_i+0x1e0>)
 800d2e8:	2903      	cmp	r1, #3
 800d2ea:	bf18      	it	ne
 800d2ec:	461a      	movne	r2, r3
 800d2ee:	68a3      	ldr	r3, [r4, #8]
 800d2f0:	9201      	str	r2, [sp, #4]
 800d2f2:	1e5a      	subs	r2, r3, #1
 800d2f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d2f8:	bf88      	it	hi
 800d2fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d2fe:	4627      	mov	r7, r4
 800d300:	bf82      	ittt	hi
 800d302:	eb03 0905 	addhi.w	r9, r3, r5
 800d306:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d30a:	60a3      	strhi	r3, [r4, #8]
 800d30c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d310:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d314:	bf98      	it	ls
 800d316:	f04f 0900 	movls.w	r9, #0
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	463d      	mov	r5, r7
 800d31e:	f04f 0b00 	mov.w	fp, #0
 800d322:	6831      	ldr	r1, [r6, #0]
 800d324:	ab03      	add	r3, sp, #12
 800d326:	7809      	ldrb	r1, [r1, #0]
 800d328:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d32c:	2202      	movs	r2, #2
 800d32e:	f7f2 ff5f 	bl	80001f0 <memchr>
 800d332:	b328      	cbz	r0, 800d380 <_scanf_i+0xb8>
 800d334:	f1bb 0f01 	cmp.w	fp, #1
 800d338:	d159      	bne.n	800d3ee <_scanf_i+0x126>
 800d33a:	6862      	ldr	r2, [r4, #4]
 800d33c:	b92a      	cbnz	r2, 800d34a <_scanf_i+0x82>
 800d33e:	6822      	ldr	r2, [r4, #0]
 800d340:	2308      	movs	r3, #8
 800d342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d346:	6063      	str	r3, [r4, #4]
 800d348:	6022      	str	r2, [r4, #0]
 800d34a:	6822      	ldr	r2, [r4, #0]
 800d34c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d350:	6022      	str	r2, [r4, #0]
 800d352:	68a2      	ldr	r2, [r4, #8]
 800d354:	1e51      	subs	r1, r2, #1
 800d356:	60a1      	str	r1, [r4, #8]
 800d358:	b192      	cbz	r2, 800d380 <_scanf_i+0xb8>
 800d35a:	6832      	ldr	r2, [r6, #0]
 800d35c:	1c51      	adds	r1, r2, #1
 800d35e:	6031      	str	r1, [r6, #0]
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	f805 2b01 	strb.w	r2, [r5], #1
 800d366:	6872      	ldr	r2, [r6, #4]
 800d368:	3a01      	subs	r2, #1
 800d36a:	2a00      	cmp	r2, #0
 800d36c:	6072      	str	r2, [r6, #4]
 800d36e:	dc07      	bgt.n	800d380 <_scanf_i+0xb8>
 800d370:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d374:	4631      	mov	r1, r6
 800d376:	4650      	mov	r0, sl
 800d378:	4790      	blx	r2
 800d37a:	2800      	cmp	r0, #0
 800d37c:	f040 8085 	bne.w	800d48a <_scanf_i+0x1c2>
 800d380:	f10b 0b01 	add.w	fp, fp, #1
 800d384:	f1bb 0f03 	cmp.w	fp, #3
 800d388:	d1cb      	bne.n	800d322 <_scanf_i+0x5a>
 800d38a:	6863      	ldr	r3, [r4, #4]
 800d38c:	b90b      	cbnz	r3, 800d392 <_scanf_i+0xca>
 800d38e:	230a      	movs	r3, #10
 800d390:	6063      	str	r3, [r4, #4]
 800d392:	6863      	ldr	r3, [r4, #4]
 800d394:	4945      	ldr	r1, [pc, #276]	; (800d4ac <_scanf_i+0x1e4>)
 800d396:	6960      	ldr	r0, [r4, #20]
 800d398:	1ac9      	subs	r1, r1, r3
 800d39a:	f000 f889 	bl	800d4b0 <__sccl>
 800d39e:	f04f 0b00 	mov.w	fp, #0
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d03d      	beq.n	800d426 <_scanf_i+0x15e>
 800d3aa:	6831      	ldr	r1, [r6, #0]
 800d3ac:	6960      	ldr	r0, [r4, #20]
 800d3ae:	f891 c000 	ldrb.w	ip, [r1]
 800d3b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d035      	beq.n	800d426 <_scanf_i+0x15e>
 800d3ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d3be:	d124      	bne.n	800d40a <_scanf_i+0x142>
 800d3c0:	0510      	lsls	r0, r2, #20
 800d3c2:	d522      	bpl.n	800d40a <_scanf_i+0x142>
 800d3c4:	f10b 0b01 	add.w	fp, fp, #1
 800d3c8:	f1b9 0f00 	cmp.w	r9, #0
 800d3cc:	d003      	beq.n	800d3d6 <_scanf_i+0x10e>
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d3d4:	60a3      	str	r3, [r4, #8]
 800d3d6:	6873      	ldr	r3, [r6, #4]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	6073      	str	r3, [r6, #4]
 800d3de:	dd1b      	ble.n	800d418 <_scanf_i+0x150>
 800d3e0:	6833      	ldr	r3, [r6, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	6033      	str	r3, [r6, #0]
 800d3e6:	68a3      	ldr	r3, [r4, #8]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	60a3      	str	r3, [r4, #8]
 800d3ec:	e7d9      	b.n	800d3a2 <_scanf_i+0xda>
 800d3ee:	f1bb 0f02 	cmp.w	fp, #2
 800d3f2:	d1ae      	bne.n	800d352 <_scanf_i+0x8a>
 800d3f4:	6822      	ldr	r2, [r4, #0]
 800d3f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d3fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d3fe:	d1bf      	bne.n	800d380 <_scanf_i+0xb8>
 800d400:	2310      	movs	r3, #16
 800d402:	6063      	str	r3, [r4, #4]
 800d404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d408:	e7a2      	b.n	800d350 <_scanf_i+0x88>
 800d40a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d40e:	6022      	str	r2, [r4, #0]
 800d410:	780b      	ldrb	r3, [r1, #0]
 800d412:	f805 3b01 	strb.w	r3, [r5], #1
 800d416:	e7de      	b.n	800d3d6 <_scanf_i+0x10e>
 800d418:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d41c:	4631      	mov	r1, r6
 800d41e:	4650      	mov	r0, sl
 800d420:	4798      	blx	r3
 800d422:	2800      	cmp	r0, #0
 800d424:	d0df      	beq.n	800d3e6 <_scanf_i+0x11e>
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	05d9      	lsls	r1, r3, #23
 800d42a:	d50d      	bpl.n	800d448 <_scanf_i+0x180>
 800d42c:	42bd      	cmp	r5, r7
 800d42e:	d909      	bls.n	800d444 <_scanf_i+0x17c>
 800d430:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d438:	4632      	mov	r2, r6
 800d43a:	4650      	mov	r0, sl
 800d43c:	4798      	blx	r3
 800d43e:	f105 39ff 	add.w	r9, r5, #4294967295
 800d442:	464d      	mov	r5, r9
 800d444:	42bd      	cmp	r5, r7
 800d446:	d028      	beq.n	800d49a <_scanf_i+0x1d2>
 800d448:	6822      	ldr	r2, [r4, #0]
 800d44a:	f012 0210 	ands.w	r2, r2, #16
 800d44e:	d113      	bne.n	800d478 <_scanf_i+0x1b0>
 800d450:	702a      	strb	r2, [r5, #0]
 800d452:	6863      	ldr	r3, [r4, #4]
 800d454:	9e01      	ldr	r6, [sp, #4]
 800d456:	4639      	mov	r1, r7
 800d458:	4650      	mov	r0, sl
 800d45a:	47b0      	blx	r6
 800d45c:	f8d8 3000 	ldr.w	r3, [r8]
 800d460:	6821      	ldr	r1, [r4, #0]
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	f8c8 2000 	str.w	r2, [r8]
 800d468:	f011 0f20 	tst.w	r1, #32
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	d00f      	beq.n	800d490 <_scanf_i+0x1c8>
 800d470:	6018      	str	r0, [r3, #0]
 800d472:	68e3      	ldr	r3, [r4, #12]
 800d474:	3301      	adds	r3, #1
 800d476:	60e3      	str	r3, [r4, #12]
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	1bed      	subs	r5, r5, r7
 800d47c:	445d      	add	r5, fp
 800d47e:	442b      	add	r3, r5
 800d480:	6123      	str	r3, [r4, #16]
 800d482:	2000      	movs	r0, #0
 800d484:	b007      	add	sp, #28
 800d486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48a:	f04f 0b00 	mov.w	fp, #0
 800d48e:	e7ca      	b.n	800d426 <_scanf_i+0x15e>
 800d490:	07ca      	lsls	r2, r1, #31
 800d492:	bf4c      	ite	mi
 800d494:	8018      	strhmi	r0, [r3, #0]
 800d496:	6018      	strpl	r0, [r3, #0]
 800d498:	e7eb      	b.n	800d472 <_scanf_i+0x1aa>
 800d49a:	2001      	movs	r0, #1
 800d49c:	e7f2      	b.n	800d484 <_scanf_i+0x1bc>
 800d49e:	bf00      	nop
 800d4a0:	0800d968 	.word	0x0800d968
 800d4a4:	0800d839 	.word	0x0800d839
 800d4a8:	0800d751 	.word	0x0800d751
 800d4ac:	0800eb67 	.word	0x0800eb67

0800d4b0 <__sccl>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	780b      	ldrb	r3, [r1, #0]
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	2b5e      	cmp	r3, #94	; 0x5e
 800d4b8:	bf0b      	itete	eq
 800d4ba:	784b      	ldrbeq	r3, [r1, #1]
 800d4bc:	1c4a      	addne	r2, r1, #1
 800d4be:	1c8a      	addeq	r2, r1, #2
 800d4c0:	2100      	movne	r1, #0
 800d4c2:	bf08      	it	eq
 800d4c4:	2101      	moveq	r1, #1
 800d4c6:	3801      	subs	r0, #1
 800d4c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d4cc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d4d0:	42a8      	cmp	r0, r5
 800d4d2:	d1fb      	bne.n	800d4cc <__sccl+0x1c>
 800d4d4:	b90b      	cbnz	r3, 800d4da <__sccl+0x2a>
 800d4d6:	1e50      	subs	r0, r2, #1
 800d4d8:	bd70      	pop	{r4, r5, r6, pc}
 800d4da:	f081 0101 	eor.w	r1, r1, #1
 800d4de:	54e1      	strb	r1, [r4, r3]
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d4e8:	2d2d      	cmp	r5, #45	; 0x2d
 800d4ea:	d005      	beq.n	800d4f8 <__sccl+0x48>
 800d4ec:	2d5d      	cmp	r5, #93	; 0x5d
 800d4ee:	d016      	beq.n	800d51e <__sccl+0x6e>
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	d0f1      	beq.n	800d4d8 <__sccl+0x28>
 800d4f4:	462b      	mov	r3, r5
 800d4f6:	e7f2      	b.n	800d4de <__sccl+0x2e>
 800d4f8:	7846      	ldrb	r6, [r0, #1]
 800d4fa:	2e5d      	cmp	r6, #93	; 0x5d
 800d4fc:	d0fa      	beq.n	800d4f4 <__sccl+0x44>
 800d4fe:	42b3      	cmp	r3, r6
 800d500:	dcf8      	bgt.n	800d4f4 <__sccl+0x44>
 800d502:	3002      	adds	r0, #2
 800d504:	461a      	mov	r2, r3
 800d506:	3201      	adds	r2, #1
 800d508:	4296      	cmp	r6, r2
 800d50a:	54a1      	strb	r1, [r4, r2]
 800d50c:	dcfb      	bgt.n	800d506 <__sccl+0x56>
 800d50e:	1af2      	subs	r2, r6, r3
 800d510:	3a01      	subs	r2, #1
 800d512:	1c5d      	adds	r5, r3, #1
 800d514:	42b3      	cmp	r3, r6
 800d516:	bfa8      	it	ge
 800d518:	2200      	movge	r2, #0
 800d51a:	18ab      	adds	r3, r5, r2
 800d51c:	e7e1      	b.n	800d4e2 <__sccl+0x32>
 800d51e:	4610      	mov	r0, r2
 800d520:	e7da      	b.n	800d4d8 <__sccl+0x28>

0800d522 <__submore>:
 800d522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d526:	460c      	mov	r4, r1
 800d528:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d52a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d52e:	4299      	cmp	r1, r3
 800d530:	d11d      	bne.n	800d56e <__submore+0x4c>
 800d532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d536:	f7ff f927 	bl	800c788 <_malloc_r>
 800d53a:	b918      	cbnz	r0, 800d544 <__submore+0x22>
 800d53c:	f04f 30ff 	mov.w	r0, #4294967295
 800d540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d548:	63a3      	str	r3, [r4, #56]	; 0x38
 800d54a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d54e:	6360      	str	r0, [r4, #52]	; 0x34
 800d550:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d554:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d558:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d55c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d560:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d564:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d568:	6020      	str	r0, [r4, #0]
 800d56a:	2000      	movs	r0, #0
 800d56c:	e7e8      	b.n	800d540 <__submore+0x1e>
 800d56e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d570:	0077      	lsls	r7, r6, #1
 800d572:	463a      	mov	r2, r7
 800d574:	f000 f83a 	bl	800d5ec <_realloc_r>
 800d578:	4605      	mov	r5, r0
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d0de      	beq.n	800d53c <__submore+0x1a>
 800d57e:	eb00 0806 	add.w	r8, r0, r6
 800d582:	4601      	mov	r1, r0
 800d584:	4632      	mov	r2, r6
 800d586:	4640      	mov	r0, r8
 800d588:	f7ff f884 	bl	800c694 <memcpy>
 800d58c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d590:	f8c4 8000 	str.w	r8, [r4]
 800d594:	e7e9      	b.n	800d56a <__submore+0x48>

0800d596 <memmove>:
 800d596:	4288      	cmp	r0, r1
 800d598:	b510      	push	{r4, lr}
 800d59a:	eb01 0402 	add.w	r4, r1, r2
 800d59e:	d902      	bls.n	800d5a6 <memmove+0x10>
 800d5a0:	4284      	cmp	r4, r0
 800d5a2:	4623      	mov	r3, r4
 800d5a4:	d807      	bhi.n	800d5b6 <memmove+0x20>
 800d5a6:	1e43      	subs	r3, r0, #1
 800d5a8:	42a1      	cmp	r1, r4
 800d5aa:	d008      	beq.n	800d5be <memmove+0x28>
 800d5ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5b4:	e7f8      	b.n	800d5a8 <memmove+0x12>
 800d5b6:	4402      	add	r2, r0
 800d5b8:	4601      	mov	r1, r0
 800d5ba:	428a      	cmp	r2, r1
 800d5bc:	d100      	bne.n	800d5c0 <memmove+0x2a>
 800d5be:	bd10      	pop	{r4, pc}
 800d5c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5c8:	e7f7      	b.n	800d5ba <memmove+0x24>
	...

0800d5cc <_sbrk_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d06      	ldr	r5, [pc, #24]	; (800d5e8 <_sbrk_r+0x1c>)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	f7f5 fca4 	bl	8002f24 <_sbrk>
 800d5dc:	1c43      	adds	r3, r0, #1
 800d5de:	d102      	bne.n	800d5e6 <_sbrk_r+0x1a>
 800d5e0:	682b      	ldr	r3, [r5, #0]
 800d5e2:	b103      	cbz	r3, 800d5e6 <_sbrk_r+0x1a>
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	2000391c 	.word	0x2000391c

0800d5ec <_realloc_r>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	4614      	mov	r4, r2
 800d5f4:	460e      	mov	r6, r1
 800d5f6:	b921      	cbnz	r1, 800d602 <_realloc_r+0x16>
 800d5f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	f7ff b8c3 	b.w	800c788 <_malloc_r>
 800d602:	b92a      	cbnz	r2, 800d610 <_realloc_r+0x24>
 800d604:	f7ff f854 	bl	800c6b0 <_free_r>
 800d608:	4625      	mov	r5, r4
 800d60a:	4628      	mov	r0, r5
 800d60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d610:	f000 f914 	bl	800d83c <_malloc_usable_size_r>
 800d614:	4284      	cmp	r4, r0
 800d616:	4607      	mov	r7, r0
 800d618:	d802      	bhi.n	800d620 <_realloc_r+0x34>
 800d61a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d61e:	d812      	bhi.n	800d646 <_realloc_r+0x5a>
 800d620:	4621      	mov	r1, r4
 800d622:	4640      	mov	r0, r8
 800d624:	f7ff f8b0 	bl	800c788 <_malloc_r>
 800d628:	4605      	mov	r5, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d0ed      	beq.n	800d60a <_realloc_r+0x1e>
 800d62e:	42bc      	cmp	r4, r7
 800d630:	4622      	mov	r2, r4
 800d632:	4631      	mov	r1, r6
 800d634:	bf28      	it	cs
 800d636:	463a      	movcs	r2, r7
 800d638:	f7ff f82c 	bl	800c694 <memcpy>
 800d63c:	4631      	mov	r1, r6
 800d63e:	4640      	mov	r0, r8
 800d640:	f7ff f836 	bl	800c6b0 <_free_r>
 800d644:	e7e1      	b.n	800d60a <_realloc_r+0x1e>
 800d646:	4635      	mov	r5, r6
 800d648:	e7df      	b.n	800d60a <_realloc_r+0x1e>
	...

0800d64c <_strtol_l.constprop.0>:
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d652:	d001      	beq.n	800d658 <_strtol_l.constprop.0+0xc>
 800d654:	2b24      	cmp	r3, #36	; 0x24
 800d656:	d906      	bls.n	800d666 <_strtol_l.constprop.0+0x1a>
 800d658:	f7fe ffe8 	bl	800c62c <__errno>
 800d65c:	2316      	movs	r3, #22
 800d65e:	6003      	str	r3, [r0, #0]
 800d660:	2000      	movs	r0, #0
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d74c <_strtol_l.constprop.0+0x100>
 800d66a:	460d      	mov	r5, r1
 800d66c:	462e      	mov	r6, r5
 800d66e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d672:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d676:	f017 0708 	ands.w	r7, r7, #8
 800d67a:	d1f7      	bne.n	800d66c <_strtol_l.constprop.0+0x20>
 800d67c:	2c2d      	cmp	r4, #45	; 0x2d
 800d67e:	d132      	bne.n	800d6e6 <_strtol_l.constprop.0+0x9a>
 800d680:	782c      	ldrb	r4, [r5, #0]
 800d682:	2701      	movs	r7, #1
 800d684:	1cb5      	adds	r5, r6, #2
 800d686:	2b00      	cmp	r3, #0
 800d688:	d05b      	beq.n	800d742 <_strtol_l.constprop.0+0xf6>
 800d68a:	2b10      	cmp	r3, #16
 800d68c:	d109      	bne.n	800d6a2 <_strtol_l.constprop.0+0x56>
 800d68e:	2c30      	cmp	r4, #48	; 0x30
 800d690:	d107      	bne.n	800d6a2 <_strtol_l.constprop.0+0x56>
 800d692:	782c      	ldrb	r4, [r5, #0]
 800d694:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d698:	2c58      	cmp	r4, #88	; 0x58
 800d69a:	d14d      	bne.n	800d738 <_strtol_l.constprop.0+0xec>
 800d69c:	786c      	ldrb	r4, [r5, #1]
 800d69e:	2310      	movs	r3, #16
 800d6a0:	3502      	adds	r5, #2
 800d6a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d6a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6aa:	f04f 0e00 	mov.w	lr, #0
 800d6ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800d6b2:	4676      	mov	r6, lr
 800d6b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800d6b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d6bc:	f1bc 0f09 	cmp.w	ip, #9
 800d6c0:	d816      	bhi.n	800d6f0 <_strtol_l.constprop.0+0xa4>
 800d6c2:	4664      	mov	r4, ip
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	dd24      	ble.n	800d712 <_strtol_l.constprop.0+0xc6>
 800d6c8:	f1be 3fff 	cmp.w	lr, #4294967295
 800d6cc:	d008      	beq.n	800d6e0 <_strtol_l.constprop.0+0x94>
 800d6ce:	45b1      	cmp	r9, r6
 800d6d0:	d31c      	bcc.n	800d70c <_strtol_l.constprop.0+0xc0>
 800d6d2:	d101      	bne.n	800d6d8 <_strtol_l.constprop.0+0x8c>
 800d6d4:	45a2      	cmp	sl, r4
 800d6d6:	db19      	blt.n	800d70c <_strtol_l.constprop.0+0xc0>
 800d6d8:	fb06 4603 	mla	r6, r6, r3, r4
 800d6dc:	f04f 0e01 	mov.w	lr, #1
 800d6e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6e4:	e7e8      	b.n	800d6b8 <_strtol_l.constprop.0+0x6c>
 800d6e6:	2c2b      	cmp	r4, #43	; 0x2b
 800d6e8:	bf04      	itt	eq
 800d6ea:	782c      	ldrbeq	r4, [r5, #0]
 800d6ec:	1cb5      	addeq	r5, r6, #2
 800d6ee:	e7ca      	b.n	800d686 <_strtol_l.constprop.0+0x3a>
 800d6f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d6f4:	f1bc 0f19 	cmp.w	ip, #25
 800d6f8:	d801      	bhi.n	800d6fe <_strtol_l.constprop.0+0xb2>
 800d6fa:	3c37      	subs	r4, #55	; 0x37
 800d6fc:	e7e2      	b.n	800d6c4 <_strtol_l.constprop.0+0x78>
 800d6fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d702:	f1bc 0f19 	cmp.w	ip, #25
 800d706:	d804      	bhi.n	800d712 <_strtol_l.constprop.0+0xc6>
 800d708:	3c57      	subs	r4, #87	; 0x57
 800d70a:	e7db      	b.n	800d6c4 <_strtol_l.constprop.0+0x78>
 800d70c:	f04f 3eff 	mov.w	lr, #4294967295
 800d710:	e7e6      	b.n	800d6e0 <_strtol_l.constprop.0+0x94>
 800d712:	f1be 3fff 	cmp.w	lr, #4294967295
 800d716:	d105      	bne.n	800d724 <_strtol_l.constprop.0+0xd8>
 800d718:	2322      	movs	r3, #34	; 0x22
 800d71a:	6003      	str	r3, [r0, #0]
 800d71c:	4646      	mov	r6, r8
 800d71e:	b942      	cbnz	r2, 800d732 <_strtol_l.constprop.0+0xe6>
 800d720:	4630      	mov	r0, r6
 800d722:	e79e      	b.n	800d662 <_strtol_l.constprop.0+0x16>
 800d724:	b107      	cbz	r7, 800d728 <_strtol_l.constprop.0+0xdc>
 800d726:	4276      	negs	r6, r6
 800d728:	2a00      	cmp	r2, #0
 800d72a:	d0f9      	beq.n	800d720 <_strtol_l.constprop.0+0xd4>
 800d72c:	f1be 0f00 	cmp.w	lr, #0
 800d730:	d000      	beq.n	800d734 <_strtol_l.constprop.0+0xe8>
 800d732:	1e69      	subs	r1, r5, #1
 800d734:	6011      	str	r1, [r2, #0]
 800d736:	e7f3      	b.n	800d720 <_strtol_l.constprop.0+0xd4>
 800d738:	2430      	movs	r4, #48	; 0x30
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1b1      	bne.n	800d6a2 <_strtol_l.constprop.0+0x56>
 800d73e:	2308      	movs	r3, #8
 800d740:	e7af      	b.n	800d6a2 <_strtol_l.constprop.0+0x56>
 800d742:	2c30      	cmp	r4, #48	; 0x30
 800d744:	d0a5      	beq.n	800d692 <_strtol_l.constprop.0+0x46>
 800d746:	230a      	movs	r3, #10
 800d748:	e7ab      	b.n	800d6a2 <_strtol_l.constprop.0+0x56>
 800d74a:	bf00      	nop
 800d74c:	0800eb73 	.word	0x0800eb73

0800d750 <_strtol_r>:
 800d750:	f7ff bf7c 	b.w	800d64c <_strtol_l.constprop.0>

0800d754 <_strtoul_l.constprop.0>:
 800d754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d758:	4f36      	ldr	r7, [pc, #216]	; (800d834 <_strtoul_l.constprop.0+0xe0>)
 800d75a:	4686      	mov	lr, r0
 800d75c:	460d      	mov	r5, r1
 800d75e:	4628      	mov	r0, r5
 800d760:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d764:	5d3e      	ldrb	r6, [r7, r4]
 800d766:	f016 0608 	ands.w	r6, r6, #8
 800d76a:	d1f8      	bne.n	800d75e <_strtoul_l.constprop.0+0xa>
 800d76c:	2c2d      	cmp	r4, #45	; 0x2d
 800d76e:	d130      	bne.n	800d7d2 <_strtoul_l.constprop.0+0x7e>
 800d770:	782c      	ldrb	r4, [r5, #0]
 800d772:	2601      	movs	r6, #1
 800d774:	1c85      	adds	r5, r0, #2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d057      	beq.n	800d82a <_strtoul_l.constprop.0+0xd6>
 800d77a:	2b10      	cmp	r3, #16
 800d77c:	d109      	bne.n	800d792 <_strtoul_l.constprop.0+0x3e>
 800d77e:	2c30      	cmp	r4, #48	; 0x30
 800d780:	d107      	bne.n	800d792 <_strtoul_l.constprop.0+0x3e>
 800d782:	7828      	ldrb	r0, [r5, #0]
 800d784:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d788:	2858      	cmp	r0, #88	; 0x58
 800d78a:	d149      	bne.n	800d820 <_strtoul_l.constprop.0+0xcc>
 800d78c:	786c      	ldrb	r4, [r5, #1]
 800d78e:	2310      	movs	r3, #16
 800d790:	3502      	adds	r5, #2
 800d792:	f04f 38ff 	mov.w	r8, #4294967295
 800d796:	2700      	movs	r7, #0
 800d798:	fbb8 f8f3 	udiv	r8, r8, r3
 800d79c:	fb03 f908 	mul.w	r9, r3, r8
 800d7a0:	ea6f 0909 	mvn.w	r9, r9
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d7aa:	f1bc 0f09 	cmp.w	ip, #9
 800d7ae:	d815      	bhi.n	800d7dc <_strtoul_l.constprop.0+0x88>
 800d7b0:	4664      	mov	r4, ip
 800d7b2:	42a3      	cmp	r3, r4
 800d7b4:	dd23      	ble.n	800d7fe <_strtoul_l.constprop.0+0xaa>
 800d7b6:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d7ba:	d007      	beq.n	800d7cc <_strtoul_l.constprop.0+0x78>
 800d7bc:	4580      	cmp	r8, r0
 800d7be:	d31b      	bcc.n	800d7f8 <_strtoul_l.constprop.0+0xa4>
 800d7c0:	d101      	bne.n	800d7c6 <_strtoul_l.constprop.0+0x72>
 800d7c2:	45a1      	cmp	r9, r4
 800d7c4:	db18      	blt.n	800d7f8 <_strtoul_l.constprop.0+0xa4>
 800d7c6:	fb00 4003 	mla	r0, r0, r3, r4
 800d7ca:	2701      	movs	r7, #1
 800d7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7d0:	e7e9      	b.n	800d7a6 <_strtoul_l.constprop.0+0x52>
 800d7d2:	2c2b      	cmp	r4, #43	; 0x2b
 800d7d4:	bf04      	itt	eq
 800d7d6:	782c      	ldrbeq	r4, [r5, #0]
 800d7d8:	1c85      	addeq	r5, r0, #2
 800d7da:	e7cc      	b.n	800d776 <_strtoul_l.constprop.0+0x22>
 800d7dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d7e0:	f1bc 0f19 	cmp.w	ip, #25
 800d7e4:	d801      	bhi.n	800d7ea <_strtoul_l.constprop.0+0x96>
 800d7e6:	3c37      	subs	r4, #55	; 0x37
 800d7e8:	e7e3      	b.n	800d7b2 <_strtoul_l.constprop.0+0x5e>
 800d7ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d7ee:	f1bc 0f19 	cmp.w	ip, #25
 800d7f2:	d804      	bhi.n	800d7fe <_strtoul_l.constprop.0+0xaa>
 800d7f4:	3c57      	subs	r4, #87	; 0x57
 800d7f6:	e7dc      	b.n	800d7b2 <_strtoul_l.constprop.0+0x5e>
 800d7f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d7fc:	e7e6      	b.n	800d7cc <_strtoul_l.constprop.0+0x78>
 800d7fe:	1c7b      	adds	r3, r7, #1
 800d800:	d106      	bne.n	800d810 <_strtoul_l.constprop.0+0xbc>
 800d802:	2322      	movs	r3, #34	; 0x22
 800d804:	f8ce 3000 	str.w	r3, [lr]
 800d808:	4638      	mov	r0, r7
 800d80a:	b932      	cbnz	r2, 800d81a <_strtoul_l.constprop.0+0xc6>
 800d80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d810:	b106      	cbz	r6, 800d814 <_strtoul_l.constprop.0+0xc0>
 800d812:	4240      	negs	r0, r0
 800d814:	2a00      	cmp	r2, #0
 800d816:	d0f9      	beq.n	800d80c <_strtoul_l.constprop.0+0xb8>
 800d818:	b107      	cbz	r7, 800d81c <_strtoul_l.constprop.0+0xc8>
 800d81a:	1e69      	subs	r1, r5, #1
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	e7f5      	b.n	800d80c <_strtoul_l.constprop.0+0xb8>
 800d820:	2430      	movs	r4, #48	; 0x30
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1b5      	bne.n	800d792 <_strtoul_l.constprop.0+0x3e>
 800d826:	2308      	movs	r3, #8
 800d828:	e7b3      	b.n	800d792 <_strtoul_l.constprop.0+0x3e>
 800d82a:	2c30      	cmp	r4, #48	; 0x30
 800d82c:	d0a9      	beq.n	800d782 <_strtoul_l.constprop.0+0x2e>
 800d82e:	230a      	movs	r3, #10
 800d830:	e7af      	b.n	800d792 <_strtoul_l.constprop.0+0x3e>
 800d832:	bf00      	nop
 800d834:	0800eb73 	.word	0x0800eb73

0800d838 <_strtoul_r>:
 800d838:	f7ff bf8c 	b.w	800d754 <_strtoul_l.constprop.0>

0800d83c <_malloc_usable_size_r>:
 800d83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d840:	1f18      	subs	r0, r3, #4
 800d842:	2b00      	cmp	r3, #0
 800d844:	bfbc      	itt	lt
 800d846:	580b      	ldrlt	r3, [r1, r0]
 800d848:	18c0      	addlt	r0, r0, r3
 800d84a:	4770      	bx	lr

0800d84c <_init>:
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84e:	bf00      	nop
 800d850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d852:	bc08      	pop	{r3}
 800d854:	469e      	mov	lr, r3
 800d856:	4770      	bx	lr

0800d858 <_fini>:
 800d858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85a:	bf00      	nop
 800d85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85e:	bc08      	pop	{r3}
 800d860:	469e      	mov	lr, r3
 800d862:	4770      	bx	lr
